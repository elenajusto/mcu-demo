
mcu-demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008210  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  080082cc  080082cc  000182cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008494  08008494  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08008494  08008494  00018494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800849c  0800849c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800849c  0800849c  0001849c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084a0  080084a0  000184a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080084a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  2000005c  08008500  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  08008500  00020448  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017a38  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f72  00000000  00000000  00037aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014f8  00000000  00000000  0003aa78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001077  00000000  00000000  0003bf70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b16d  00000000  00000000  0003cfe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019d98  00000000  00000000  00058154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aedf9  00000000  00000000  00071eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000051d8  00000000  00000000  00120ce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00125ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080082b4 	.word	0x080082b4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	080082b4 	.word	0x080082b4

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 ff39 	bl	80014bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f875 	bl	8000738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f000 fb01 	bl	8000c54 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000652:	f000 fab1 	bl	8000bb8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000656:	f000 f8b7 	bl	80007c8 <MX_ADC1_Init>
  MX_I2C1_Init();
 800065a:	f000 f91b 	bl	8000894 <MX_I2C1_Init>
  MX_TIM2_Init();
 800065e:	f000 f959 	bl	8000914 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000662:	f000 f9ab 	bl	80009bc <MX_TIM3_Init>
  MX_TIM6_Init();
 8000666:	f000 fa2b 	bl	8000ac0 <MX_TIM6_Init>
  MX_TIM7_Init();
 800066a:	f000 fa67 	bl	8000b3c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  // Enable the TIM2 peripheral
  __HAL_RCC_TIM2_CLK_ENABLE();
 800066e:	4b2c      	ldr	r3, [pc, #176]	; (8000720 <main+0xe0>)
 8000670:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000672:	4b2b      	ldr	r3, [pc, #172]	; (8000720 <main+0xe0>)
 8000674:	2101      	movs	r1, #1
 8000676:	430a      	orrs	r2, r1
 8000678:	63da      	str	r2, [r3, #60]	; 0x3c
 800067a:	4b29      	ldr	r3, [pc, #164]	; (8000720 <main+0xe0>)
 800067c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800067e:	2201      	movs	r2, #1
 8000680:	4013      	ands	r3, r2
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]

  // Enable the TIM6 peripheral
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000686:	4b26      	ldr	r3, [pc, #152]	; (8000720 <main+0xe0>)
 8000688:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800068a:	4b25      	ldr	r3, [pc, #148]	; (8000720 <main+0xe0>)
 800068c:	2110      	movs	r1, #16
 800068e:	430a      	orrs	r2, r1
 8000690:	63da      	str	r2, [r3, #60]	; 0x3c
 8000692:	4b23      	ldr	r3, [pc, #140]	; (8000720 <main+0xe0>)
 8000694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000696:	2210      	movs	r2, #16
 8000698:	4013      	ands	r3, r2
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	68bb      	ldr	r3, [r7, #8]

  // Enable the TIM7 peripheral
  __HAL_RCC_TIM7_CLK_ENABLE();
 800069e:	4b20      	ldr	r3, [pc, #128]	; (8000720 <main+0xe0>)
 80006a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006a2:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <main+0xe0>)
 80006a4:	2120      	movs	r1, #32
 80006a6:	430a      	orrs	r2, r1
 80006a8:	63da      	str	r2, [r3, #60]	; 0x3c
 80006aa:	4b1d      	ldr	r3, [pc, #116]	; (8000720 <main+0xe0>)
 80006ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006ae:	2220      	movs	r2, #32
 80006b0:	4013      	ands	r3, r2
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]

  // Enable the peripheral IRQ for TIM2
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2100      	movs	r1, #0
 80006ba:	200f      	movs	r0, #15
 80006bc:	f001 fce8 	bl	8002090 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80006c0:	200f      	movs	r0, #15
 80006c2:	f001 fcfa 	bl	80020ba <HAL_NVIC_EnableIRQ>

  // Enable the peripheral IRQ for TIM6
  HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2100      	movs	r1, #0
 80006ca:	2011      	movs	r0, #17
 80006cc:	f001 fce0 	bl	8002090 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 80006d0:	2011      	movs	r0, #17
 80006d2:	f001 fcf2 	bl	80020ba <HAL_NVIC_EnableIRQ>


  // Enable the peripheral IRQ for TIM7
  HAL_NVIC_SetPriority(TIM7_LPTIM2_IRQn, 0, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2100      	movs	r1, #0
 80006da:	2012      	movs	r0, #18
 80006dc:	f001 fcd8 	bl	8002090 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_LPTIM2_IRQn);
 80006e0:	2012      	movs	r0, #18
 80006e2:	f001 fcea 	bl	80020ba <HAL_NVIC_EnableIRQ>

  // Start the timers
  HAL_TIM_Base_Start_IT(&htim2);
 80006e6:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <main+0xe4>)
 80006e8:	0018      	movs	r0, r3
 80006ea:	f003 fc2d 	bl	8003f48 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <main+0xe8>)
 80006f0:	0018      	movs	r0, r3
 80006f2:	f003 fc29 	bl	8003f48 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 80006f6:	4b0d      	ldr	r3, [pc, #52]	; (800072c <main+0xec>)
 80006f8:	0018      	movs	r0, r3
 80006fa:	f003 fc25 	bl	8003f48 <HAL_TIM_Base_Start_IT>

  // Enable PWM on TIM3 (for motor control)
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <main+0xf0>)
 8000700:	2100      	movs	r1, #0
 8000702:	0018      	movs	r0, r3
 8000704:	f003 fcdc 	bl	80040c0 <HAL_TIM_PWM_Start>

  // Scan I2C addresses on startup
  i2cScanner();
 8000708:	f000 fb66 	bl	8000dd8 <i2cScanner>

  // I2C Display
  hardwareTestLCD();
 800070c:	f000 fb44 	bl	8000d98 <hardwareTestLCD>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	// Testing UART receiving
    HAL_UART_Receive_IT(&huart2, 1, 1);
 8000710:	4b08      	ldr	r3, [pc, #32]	; (8000734 <main+0xf4>)
 8000712:	2201      	movs	r2, #1
 8000714:	2101      	movs	r1, #1
 8000716:	0018      	movs	r0, r3
 8000718:	f004 fe4c 	bl	80053b4 <HAL_UART_Receive_IT>
 800071c:	e7f8      	b.n	8000710 <main+0xd0>
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	40021000 	.word	0x40021000
 8000724:	20000130 	.word	0x20000130
 8000728:	200001c8 	.word	0x200001c8
 800072c:	20000214 	.word	0x20000214
 8000730:	2000017c 	.word	0x2000017c
 8000734:	20000260 	.word	0x20000260

08000738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b093      	sub	sp, #76	; 0x4c
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	2410      	movs	r4, #16
 8000740:	193b      	adds	r3, r7, r4
 8000742:	0018      	movs	r0, r3
 8000744:	2338      	movs	r3, #56	; 0x38
 8000746:	001a      	movs	r2, r3
 8000748:	2100      	movs	r1, #0
 800074a:	f007 f92d 	bl	80079a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074e:	003b      	movs	r3, r7
 8000750:	0018      	movs	r0, r3
 8000752:	2310      	movs	r3, #16
 8000754:	001a      	movs	r2, r3
 8000756:	2100      	movs	r1, #0
 8000758:	f007 f926 	bl	80079a8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800075c:	2380      	movs	r3, #128	; 0x80
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	0018      	movs	r0, r3
 8000762:	f002 fcd1 	bl	8003108 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000766:	193b      	adds	r3, r7, r4
 8000768:	2202      	movs	r2, #2
 800076a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076c:	193b      	adds	r3, r7, r4
 800076e:	2280      	movs	r2, #128	; 0x80
 8000770:	0052      	lsls	r2, r2, #1
 8000772:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000774:	193b      	adds	r3, r7, r4
 8000776:	2200      	movs	r2, #0
 8000778:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800077a:	193b      	adds	r3, r7, r4
 800077c:	2240      	movs	r2, #64	; 0x40
 800077e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000780:	193b      	adds	r3, r7, r4
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000786:	193b      	adds	r3, r7, r4
 8000788:	0018      	movs	r0, r3
 800078a:	f002 fd09 	bl	80031a0 <HAL_RCC_OscConfig>
 800078e:	1e03      	subs	r3, r0, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000792:	f000 fbfd 	bl	8000f90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000796:	003b      	movs	r3, r7
 8000798:	2207      	movs	r2, #7
 800079a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800079c:	003b      	movs	r3, r7
 800079e:	2200      	movs	r2, #0
 80007a0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a2:	003b      	movs	r3, r7
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a8:	003b      	movs	r3, r7
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007ae:	003b      	movs	r3, r7
 80007b0:	2100      	movs	r1, #0
 80007b2:	0018      	movs	r0, r3
 80007b4:	f003 f80e 	bl	80037d4 <HAL_RCC_ClockConfig>
 80007b8:	1e03      	subs	r3, r0, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80007bc:	f000 fbe8 	bl	8000f90 <Error_Handler>
  }
}
 80007c0:	46c0      	nop			; (mov r8, r8)
 80007c2:	46bd      	mov	sp, r7
 80007c4:	b013      	add	sp, #76	; 0x4c
 80007c6:	bd90      	pop	{r4, r7, pc}

080007c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	0018      	movs	r0, r3
 80007d2:	230c      	movs	r3, #12
 80007d4:	001a      	movs	r2, r3
 80007d6:	2100      	movs	r1, #0
 80007d8:	f007 f8e6 	bl	80079a8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007dc:	4b2b      	ldr	r3, [pc, #172]	; (800088c <MX_ADC1_Init+0xc4>)
 80007de:	4a2c      	ldr	r2, [pc, #176]	; (8000890 <MX_ADC1_Init+0xc8>)
 80007e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007e2:	4b2a      	ldr	r3, [pc, #168]	; (800088c <MX_ADC1_Init+0xc4>)
 80007e4:	2280      	movs	r2, #128	; 0x80
 80007e6:	05d2      	lsls	r2, r2, #23
 80007e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ea:	4b28      	ldr	r3, [pc, #160]	; (800088c <MX_ADC1_Init+0xc4>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007f0:	4b26      	ldr	r3, [pc, #152]	; (800088c <MX_ADC1_Init+0xc4>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007f6:	4b25      	ldr	r3, [pc, #148]	; (800088c <MX_ADC1_Init+0xc4>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007fc:	4b23      	ldr	r3, [pc, #140]	; (800088c <MX_ADC1_Init+0xc4>)
 80007fe:	2204      	movs	r2, #4
 8000800:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000802:	4b22      	ldr	r3, [pc, #136]	; (800088c <MX_ADC1_Init+0xc4>)
 8000804:	2200      	movs	r2, #0
 8000806:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000808:	4b20      	ldr	r3, [pc, #128]	; (800088c <MX_ADC1_Init+0xc4>)
 800080a:	2200      	movs	r2, #0
 800080c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800080e:	4b1f      	ldr	r3, [pc, #124]	; (800088c <MX_ADC1_Init+0xc4>)
 8000810:	2201      	movs	r2, #1
 8000812:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000814:	4b1d      	ldr	r3, [pc, #116]	; (800088c <MX_ADC1_Init+0xc4>)
 8000816:	2201      	movs	r2, #1
 8000818:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800081a:	4b1c      	ldr	r3, [pc, #112]	; (800088c <MX_ADC1_Init+0xc4>)
 800081c:	2200      	movs	r2, #0
 800081e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000820:	4b1a      	ldr	r3, [pc, #104]	; (800088c <MX_ADC1_Init+0xc4>)
 8000822:	2200      	movs	r2, #0
 8000824:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000826:	4b19      	ldr	r3, [pc, #100]	; (800088c <MX_ADC1_Init+0xc4>)
 8000828:	222c      	movs	r2, #44	; 0x2c
 800082a:	2100      	movs	r1, #0
 800082c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800082e:	4b17      	ldr	r3, [pc, #92]	; (800088c <MX_ADC1_Init+0xc4>)
 8000830:	2200      	movs	r2, #0
 8000832:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000834:	4b15      	ldr	r3, [pc, #84]	; (800088c <MX_ADC1_Init+0xc4>)
 8000836:	2200      	movs	r2, #0
 8000838:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_ADC1_Init+0xc4>)
 800083c:	2200      	movs	r2, #0
 800083e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <MX_ADC1_Init+0xc4>)
 8000842:	223c      	movs	r2, #60	; 0x3c
 8000844:	2100      	movs	r1, #0
 8000846:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000848:	4b10      	ldr	r3, [pc, #64]	; (800088c <MX_ADC1_Init+0xc4>)
 800084a:	2200      	movs	r2, #0
 800084c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_ADC1_Init+0xc4>)
 8000850:	0018      	movs	r0, r3
 8000852:	f000 fff1 	bl	8001838 <HAL_ADC_Init>
 8000856:	1e03      	subs	r3, r0, #0
 8000858:	d001      	beq.n	800085e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800085a:	f000 fb99 	bl	8000f90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	2201      	movs	r2, #1
 8000862:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	2200      	movs	r2, #0
 8000868:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000870:	1d3a      	adds	r2, r7, #4
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_ADC1_Init+0xc4>)
 8000874:	0011      	movs	r1, r2
 8000876:	0018      	movs	r0, r3
 8000878:	f001 f986 	bl	8001b88 <HAL_ADC_ConfigChannel>
 800087c:	1e03      	subs	r3, r0, #0
 800087e:	d001      	beq.n	8000884 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8000880:	f000 fb86 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000884:	46c0      	nop			; (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	b004      	add	sp, #16
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000078 	.word	0x20000078
 8000890:	40012400 	.word	0x40012400

08000894 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000898:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <MX_I2C1_Init+0x74>)
 800089a:	4a1c      	ldr	r2, [pc, #112]	; (800090c <MX_I2C1_Init+0x78>)
 800089c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800089e:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <MX_I2C1_Init+0x74>)
 80008a0:	4a1b      	ldr	r2, [pc, #108]	; (8000910 <MX_I2C1_Init+0x7c>)
 80008a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008a4:	4b18      	ldr	r3, [pc, #96]	; (8000908 <MX_I2C1_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008aa:	4b17      	ldr	r3, [pc, #92]	; (8000908 <MX_I2C1_Init+0x74>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b0:	4b15      	ldr	r3, [pc, #84]	; (8000908 <MX_I2C1_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008b6:	4b14      	ldr	r3, [pc, #80]	; (8000908 <MX_I2C1_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <MX_I2C1_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_I2C1_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_I2C1_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <MX_I2C1_Init+0x74>)
 80008d0:	0018      	movs	r0, r3
 80008d2:	f001 fe77 	bl	80025c4 <HAL_I2C_Init>
 80008d6:	1e03      	subs	r3, r0, #0
 80008d8:	d001      	beq.n	80008de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008da:	f000 fb59 	bl	8000f90 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008de:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <MX_I2C1_Init+0x74>)
 80008e0:	2100      	movs	r1, #0
 80008e2:	0018      	movs	r0, r3
 80008e4:	f002 fb78 	bl	8002fd8 <HAL_I2CEx_ConfigAnalogFilter>
 80008e8:	1e03      	subs	r3, r0, #0
 80008ea:	d001      	beq.n	80008f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008ec:	f000 fb50 	bl	8000f90 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008f0:	4b05      	ldr	r3, [pc, #20]	; (8000908 <MX_I2C1_Init+0x74>)
 80008f2:	2100      	movs	r1, #0
 80008f4:	0018      	movs	r0, r3
 80008f6:	f002 fbbb 	bl	8003070 <HAL_I2CEx_ConfigDigitalFilter>
 80008fa:	1e03      	subs	r3, r0, #0
 80008fc:	d001      	beq.n	8000902 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008fe:	f000 fb47 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	200000dc 	.word	0x200000dc
 800090c:	40005400 	.word	0x40005400
 8000910:	00303d5b 	.word	0x00303d5b

08000914 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b088      	sub	sp, #32
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800091a:	2310      	movs	r3, #16
 800091c:	18fb      	adds	r3, r7, r3
 800091e:	0018      	movs	r0, r3
 8000920:	2310      	movs	r3, #16
 8000922:	001a      	movs	r2, r3
 8000924:	2100      	movs	r1, #0
 8000926:	f007 f83f 	bl	80079a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	0018      	movs	r0, r3
 800092e:	230c      	movs	r3, #12
 8000930:	001a      	movs	r2, r3
 8000932:	2100      	movs	r1, #0
 8000934:	f007 f838 	bl	80079a8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000938:	4b1e      	ldr	r3, [pc, #120]	; (80009b4 <MX_TIM2_Init+0xa0>)
 800093a:	2280      	movs	r2, #128	; 0x80
 800093c:	05d2      	lsls	r2, r2, #23
 800093e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8000940:	4b1c      	ldr	r3, [pc, #112]	; (80009b4 <MX_TIM2_Init+0xa0>)
 8000942:	4a1d      	ldr	r2, [pc, #116]	; (80009b8 <MX_TIM2_Init+0xa4>)
 8000944:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000946:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <MX_TIM2_Init+0xa0>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800094c:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <MX_TIM2_Init+0xa0>)
 800094e:	4a1a      	ldr	r2, [pc, #104]	; (80009b8 <MX_TIM2_Init+0xa4>)
 8000950:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000952:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <MX_TIM2_Init+0xa0>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000958:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <MX_TIM2_Init+0xa0>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <MX_TIM2_Init+0xa0>)
 8000960:	0018      	movs	r0, r3
 8000962:	f003 fa99 	bl	8003e98 <HAL_TIM_Base_Init>
 8000966:	1e03      	subs	r3, r0, #0
 8000968:	d001      	beq.n	800096e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800096a:	f000 fb11 	bl	8000f90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800096e:	2110      	movs	r1, #16
 8000970:	187b      	adds	r3, r7, r1
 8000972:	2280      	movs	r2, #128	; 0x80
 8000974:	0152      	lsls	r2, r2, #5
 8000976:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000978:	187a      	adds	r2, r7, r1
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_TIM2_Init+0xa0>)
 800097c:	0011      	movs	r1, r2
 800097e:	0018      	movs	r0, r3
 8000980:	f003 fe90 	bl	80046a4 <HAL_TIM_ConfigClockSource>
 8000984:	1e03      	subs	r3, r0, #0
 8000986:	d001      	beq.n	800098c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000988:	f000 fb02 	bl	8000f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000998:	1d3a      	adds	r2, r7, #4
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_TIM2_Init+0xa0>)
 800099c:	0011      	movs	r1, r2
 800099e:	0018      	movs	r0, r3
 80009a0:	f004 fb88 	bl	80050b4 <HAL_TIMEx_MasterConfigSynchronization>
 80009a4:	1e03      	subs	r3, r0, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80009a8:	f000 faf2 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009ac:	46c0      	nop			; (mov r8, r8)
 80009ae:	46bd      	mov	sp, r7
 80009b0:	b008      	add	sp, #32
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000130 	.word	0x20000130
 80009b8:	000003e7 	.word	0x000003e7

080009bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08e      	sub	sp, #56	; 0x38
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009c2:	2328      	movs	r3, #40	; 0x28
 80009c4:	18fb      	adds	r3, r7, r3
 80009c6:	0018      	movs	r0, r3
 80009c8:	2310      	movs	r3, #16
 80009ca:	001a      	movs	r2, r3
 80009cc:	2100      	movs	r1, #0
 80009ce:	f006 ffeb 	bl	80079a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d2:	231c      	movs	r3, #28
 80009d4:	18fb      	adds	r3, r7, r3
 80009d6:	0018      	movs	r0, r3
 80009d8:	230c      	movs	r3, #12
 80009da:	001a      	movs	r2, r3
 80009dc:	2100      	movs	r1, #0
 80009de:	f006 ffe3 	bl	80079a8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009e2:	003b      	movs	r3, r7
 80009e4:	0018      	movs	r0, r3
 80009e6:	231c      	movs	r3, #28
 80009e8:	001a      	movs	r2, r3
 80009ea:	2100      	movs	r1, #0
 80009ec:	f006 ffdc 	bl	80079a8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009f0:	4b30      	ldr	r3, [pc, #192]	; (8000ab4 <MX_TIM3_Init+0xf8>)
 80009f2:	4a31      	ldr	r2, [pc, #196]	; (8000ab8 <MX_TIM3_Init+0xfc>)
 80009f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 319;
 80009f6:	4b2f      	ldr	r3, [pc, #188]	; (8000ab4 <MX_TIM3_Init+0xf8>)
 80009f8:	2240      	movs	r2, #64	; 0x40
 80009fa:	32ff      	adds	r2, #255	; 0xff
 80009fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fe:	4b2d      	ldr	r3, [pc, #180]	; (8000ab4 <MX_TIM3_Init+0xf8>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000a04:	4b2b      	ldr	r3, [pc, #172]	; (8000ab4 <MX_TIM3_Init+0xf8>)
 8000a06:	4a2d      	ldr	r2, [pc, #180]	; (8000abc <MX_TIM3_Init+0x100>)
 8000a08:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a0a:	4b2a      	ldr	r3, [pc, #168]	; (8000ab4 <MX_TIM3_Init+0xf8>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a10:	4b28      	ldr	r3, [pc, #160]	; (8000ab4 <MX_TIM3_Init+0xf8>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a16:	4b27      	ldr	r3, [pc, #156]	; (8000ab4 <MX_TIM3_Init+0xf8>)
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f003 fa3d 	bl	8003e98 <HAL_TIM_Base_Init>
 8000a1e:	1e03      	subs	r3, r0, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000a22:	f000 fab5 	bl	8000f90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a26:	2128      	movs	r1, #40	; 0x28
 8000a28:	187b      	adds	r3, r7, r1
 8000a2a:	2280      	movs	r2, #128	; 0x80
 8000a2c:	0152      	lsls	r2, r2, #5
 8000a2e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a30:	187a      	adds	r2, r7, r1
 8000a32:	4b20      	ldr	r3, [pc, #128]	; (8000ab4 <MX_TIM3_Init+0xf8>)
 8000a34:	0011      	movs	r1, r2
 8000a36:	0018      	movs	r0, r3
 8000a38:	f003 fe34 	bl	80046a4 <HAL_TIM_ConfigClockSource>
 8000a3c:	1e03      	subs	r3, r0, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000a40:	f000 faa6 	bl	8000f90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a44:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <MX_TIM3_Init+0xf8>)
 8000a46:	0018      	movs	r0, r3
 8000a48:	f003 fada 	bl	8004000 <HAL_TIM_PWM_Init>
 8000a4c:	1e03      	subs	r3, r0, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000a50:	f000 fa9e 	bl	8000f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a54:	211c      	movs	r1, #28
 8000a56:	187b      	adds	r3, r7, r1
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a62:	187a      	adds	r2, r7, r1
 8000a64:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <MX_TIM3_Init+0xf8>)
 8000a66:	0011      	movs	r1, r2
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f004 fb23 	bl	80050b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a6e:	1e03      	subs	r3, r0, #0
 8000a70:	d001      	beq.n	8000a76 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8000a72:	f000 fa8d 	bl	8000f90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a76:	003b      	movs	r3, r7
 8000a78:	2260      	movs	r2, #96	; 0x60
 8000a7a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000a7c:	003b      	movs	r3, r7
 8000a7e:	2200      	movs	r2, #0
 8000a80:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a82:	003b      	movs	r3, r7
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a88:	003b      	movs	r3, r7
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a8e:	0039      	movs	r1, r7
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <MX_TIM3_Init+0xf8>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	0018      	movs	r0, r3
 8000a96:	f003 fd05 	bl	80044a4 <HAL_TIM_PWM_ConfigChannel>
 8000a9a:	1e03      	subs	r3, r0, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8000a9e:	f000 fa77 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000aa2:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <MX_TIM3_Init+0xf8>)
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f000 fbb7 	bl	8001218 <HAL_TIM_MspPostInit>

}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	46bd      	mov	sp, r7
 8000aae:	b00e      	add	sp, #56	; 0x38
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	2000017c 	.word	0x2000017c
 8000ab8:	40000400 	.word	0x40000400
 8000abc:	000003e7 	.word	0x000003e7

08000ac0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	0018      	movs	r0, r3
 8000aca:	230c      	movs	r3, #12
 8000acc:	001a      	movs	r2, r3
 8000ace:	2100      	movs	r1, #0
 8000ad0:	f006 ff6a 	bl	80079a8 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ad4:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <MX_TIM6_Init+0x6c>)
 8000ad6:	4a16      	ldr	r2, [pc, #88]	; (8000b30 <MX_TIM6_Init+0x70>)
 8000ad8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1999;
 8000ada:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <MX_TIM6_Init+0x6c>)
 8000adc:	4a15      	ldr	r2, [pc, #84]	; (8000b34 <MX_TIM6_Init+0x74>)
 8000ade:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <MX_TIM6_Init+0x6c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <MX_TIM6_Init+0x6c>)
 8000ae8:	4a13      	ldr	r2, [pc, #76]	; (8000b38 <MX_TIM6_Init+0x78>)
 8000aea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <MX_TIM6_Init+0x6c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <MX_TIM6_Init+0x6c>)
 8000af4:	0018      	movs	r0, r3
 8000af6:	f003 f9cf 	bl	8003e98 <HAL_TIM_Base_Init>
 8000afa:	1e03      	subs	r3, r0, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000afe:	f000 fa47 	bl	8000f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b0e:	1d3a      	adds	r2, r7, #4
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <MX_TIM6_Init+0x6c>)
 8000b12:	0011      	movs	r1, r2
 8000b14:	0018      	movs	r0, r3
 8000b16:	f004 facd 	bl	80050b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b1a:	1e03      	subs	r3, r0, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000b1e:	f000 fa37 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	46bd      	mov	sp, r7
 8000b26:	b004      	add	sp, #16
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	200001c8 	.word	0x200001c8
 8000b30:	40001000 	.word	0x40001000
 8000b34:	000007cf 	.word	0x000007cf
 8000b38:	000003e7 	.word	0x000003e7

08000b3c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	0018      	movs	r0, r3
 8000b46:	230c      	movs	r3, #12
 8000b48:	001a      	movs	r2, r3
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	f006 ff2c 	bl	80079a8 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000b50:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <MX_TIM7_Init+0x6c>)
 8000b52:	4a16      	ldr	r2, [pc, #88]	; (8000bac <MX_TIM7_Init+0x70>)
 8000b54:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 3332;
 8000b56:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <MX_TIM7_Init+0x6c>)
 8000b58:	4a15      	ldr	r2, [pc, #84]	; (8000bb0 <MX_TIM7_Init+0x74>)
 8000b5a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <MX_TIM7_Init+0x6c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <MX_TIM7_Init+0x6c>)
 8000b64:	4a13      	ldr	r2, [pc, #76]	; (8000bb4 <MX_TIM7_Init+0x78>)
 8000b66:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <MX_TIM7_Init+0x6c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <MX_TIM7_Init+0x6c>)
 8000b70:	0018      	movs	r0, r3
 8000b72:	f003 f991 	bl	8003e98 <HAL_TIM_Base_Init>
 8000b76:	1e03      	subs	r3, r0, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000b7a:	f000 fa09 	bl	8000f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000b8a:	1d3a      	adds	r2, r7, #4
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <MX_TIM7_Init+0x6c>)
 8000b8e:	0011      	movs	r1, r2
 8000b90:	0018      	movs	r0, r3
 8000b92:	f004 fa8f 	bl	80050b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b96:	1e03      	subs	r3, r0, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8000b9a:	f000 f9f9 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b004      	add	sp, #16
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	20000214 	.word	0x20000214
 8000bac:	40001400 	.word	0x40001400
 8000bb0:	00000d04 	.word	0x00000d04
 8000bb4:	000003e7 	.word	0x000003e7

08000bb8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bbc:	4b23      	ldr	r3, [pc, #140]	; (8000c4c <MX_USART2_UART_Init+0x94>)
 8000bbe:	4a24      	ldr	r2, [pc, #144]	; (8000c50 <MX_USART2_UART_Init+0x98>)
 8000bc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bc2:	4b22      	ldr	r3, [pc, #136]	; (8000c4c <MX_USART2_UART_Init+0x94>)
 8000bc4:	22e1      	movs	r2, #225	; 0xe1
 8000bc6:	0252      	lsls	r2, r2, #9
 8000bc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bca:	4b20      	ldr	r3, [pc, #128]	; (8000c4c <MX_USART2_UART_Init+0x94>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bd0:	4b1e      	ldr	r3, [pc, #120]	; (8000c4c <MX_USART2_UART_Init+0x94>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bd6:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <MX_USART2_UART_Init+0x94>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bdc:	4b1b      	ldr	r3, [pc, #108]	; (8000c4c <MX_USART2_UART_Init+0x94>)
 8000bde:	220c      	movs	r2, #12
 8000be0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be2:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <MX_USART2_UART_Init+0x94>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be8:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <MX_USART2_UART_Init+0x94>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bee:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <MX_USART2_UART_Init+0x94>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bf4:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <MX_USART2_UART_Init+0x94>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bfa:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <MX_USART2_UART_Init+0x94>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <MX_USART2_UART_Init+0x94>)
 8000c02:	0018      	movs	r0, r3
 8000c04:	f004 fadc 	bl	80051c0 <HAL_UART_Init>
 8000c08:	1e03      	subs	r3, r0, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c0c:	f000 f9c0 	bl	8000f90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c10:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <MX_USART2_UART_Init+0x94>)
 8000c12:	2100      	movs	r1, #0
 8000c14:	0018      	movs	r0, r3
 8000c16:	f006 fb29 	bl	800726c <HAL_UARTEx_SetTxFifoThreshold>
 8000c1a:	1e03      	subs	r3, r0, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c1e:	f000 f9b7 	bl	8000f90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c22:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <MX_USART2_UART_Init+0x94>)
 8000c24:	2100      	movs	r1, #0
 8000c26:	0018      	movs	r0, r3
 8000c28:	f006 fb60 	bl	80072ec <HAL_UARTEx_SetRxFifoThreshold>
 8000c2c:	1e03      	subs	r3, r0, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c30:	f000 f9ae 	bl	8000f90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c34:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <MX_USART2_UART_Init+0x94>)
 8000c36:	0018      	movs	r0, r3
 8000c38:	f006 fade 	bl	80071f8 <HAL_UARTEx_DisableFifoMode>
 8000c3c:	1e03      	subs	r3, r0, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c40:	f000 f9a6 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c44:	46c0      	nop			; (mov r8, r8)
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	20000260 	.word	0x20000260
 8000c50:	40004400 	.word	0x40004400

08000c54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c54:	b590      	push	{r4, r7, lr}
 8000c56:	b08b      	sub	sp, #44	; 0x2c
 8000c58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5a:	2414      	movs	r4, #20
 8000c5c:	193b      	adds	r3, r7, r4
 8000c5e:	0018      	movs	r0, r3
 8000c60:	2314      	movs	r3, #20
 8000c62:	001a      	movs	r2, r3
 8000c64:	2100      	movs	r1, #0
 8000c66:	f006 fe9f 	bl	80079a8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6a:	4b47      	ldr	r3, [pc, #284]	; (8000d88 <MX_GPIO_Init+0x134>)
 8000c6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c6e:	4b46      	ldr	r3, [pc, #280]	; (8000d88 <MX_GPIO_Init+0x134>)
 8000c70:	2104      	movs	r1, #4
 8000c72:	430a      	orrs	r2, r1
 8000c74:	635a      	str	r2, [r3, #52]	; 0x34
 8000c76:	4b44      	ldr	r3, [pc, #272]	; (8000d88 <MX_GPIO_Init+0x134>)
 8000c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c7a:	2204      	movs	r2, #4
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c82:	4b41      	ldr	r3, [pc, #260]	; (8000d88 <MX_GPIO_Init+0x134>)
 8000c84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c86:	4b40      	ldr	r3, [pc, #256]	; (8000d88 <MX_GPIO_Init+0x134>)
 8000c88:	2120      	movs	r1, #32
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	635a      	str	r2, [r3, #52]	; 0x34
 8000c8e:	4b3e      	ldr	r3, [pc, #248]	; (8000d88 <MX_GPIO_Init+0x134>)
 8000c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c92:	2220      	movs	r2, #32
 8000c94:	4013      	ands	r3, r2
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	4b3b      	ldr	r3, [pc, #236]	; (8000d88 <MX_GPIO_Init+0x134>)
 8000c9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c9e:	4b3a      	ldr	r3, [pc, #232]	; (8000d88 <MX_GPIO_Init+0x134>)
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	635a      	str	r2, [r3, #52]	; 0x34
 8000ca6:	4b38      	ldr	r3, [pc, #224]	; (8000d88 <MX_GPIO_Init+0x134>)
 8000ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000caa:	2201      	movs	r2, #1
 8000cac:	4013      	ands	r3, r2
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb2:	4b35      	ldr	r3, [pc, #212]	; (8000d88 <MX_GPIO_Init+0x134>)
 8000cb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cb6:	4b34      	ldr	r3, [pc, #208]	; (8000d88 <MX_GPIO_Init+0x134>)
 8000cb8:	2102      	movs	r1, #2
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	635a      	str	r2, [r3, #52]	; 0x34
 8000cbe:	4b32      	ldr	r3, [pc, #200]	; (8000d88 <MX_GPIO_Init+0x134>)
 8000cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cc2:	2202      	movs	r2, #2
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000cca:	23a0      	movs	r3, #160	; 0xa0
 8000ccc:	05db      	lsls	r3, r3, #23
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2120      	movs	r1, #32
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f001 fc3e 	bl	8002554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8000cd8:	492c      	ldr	r1, [pc, #176]	; (8000d8c <MX_GPIO_Init+0x138>)
 8000cda:	4b2d      	ldr	r3, [pc, #180]	; (8000d90 <MX_GPIO_Init+0x13c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f001 fc38 	bl	8002554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000ce4:	4b2b      	ldr	r3, [pc, #172]	; (8000d94 <MX_GPIO_Init+0x140>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2180      	movs	r1, #128	; 0x80
 8000cea:	0018      	movs	r0, r3
 8000cec:	f001 fc32 	bl	8002554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000cf0:	193b      	adds	r3, r7, r4
 8000cf2:	2220      	movs	r2, #32
 8000cf4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf6:	193b      	adds	r3, r7, r4
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	193b      	adds	r3, r7, r4
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d02:	193b      	adds	r3, r7, r4
 8000d04:	2202      	movs	r2, #2
 8000d06:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000d08:	193a      	adds	r2, r7, r4
 8000d0a:	23a0      	movs	r3, #160	; 0xa0
 8000d0c:	05db      	lsls	r3, r3, #23
 8000d0e:	0011      	movs	r1, r2
 8000d10:	0018      	movs	r0, r3
 8000d12:	f001 fabb 	bl	800228c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_2_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_3_Pin;
 8000d16:	193b      	adds	r3, r7, r4
 8000d18:	4a1c      	ldr	r2, [pc, #112]	; (8000d8c <MX_GPIO_Init+0x138>)
 8000d1a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1c:	193b      	adds	r3, r7, r4
 8000d1e:	2201      	movs	r2, #1
 8000d20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	193b      	adds	r3, r7, r4
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	193b      	adds	r3, r7, r4
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2e:	193b      	adds	r3, r7, r4
 8000d30:	4a17      	ldr	r2, [pc, #92]	; (8000d90 <MX_GPIO_Init+0x13c>)
 8000d32:	0019      	movs	r1, r3
 8000d34:	0010      	movs	r0, r2
 8000d36:	f001 faa9 	bl	800228c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_1_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 8000d3a:	193b      	adds	r3, r7, r4
 8000d3c:	2280      	movs	r2, #128	; 0x80
 8000d3e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d40:	193b      	adds	r3, r7, r4
 8000d42:	2201      	movs	r2, #1
 8000d44:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	193b      	adds	r3, r7, r4
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	193b      	adds	r3, r7, r4
 8000d4e:	2200      	movs	r2, #0
 8000d50:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8000d52:	193b      	adds	r3, r7, r4
 8000d54:	4a0f      	ldr	r2, [pc, #60]	; (8000d94 <MX_GPIO_Init+0x140>)
 8000d56:	0019      	movs	r1, r3
 8000d58:	0010      	movs	r0, r2
 8000d5a:	f001 fa97 	bl	800228c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_INPUT_Pin */
  GPIO_InitStruct.Pin = BUTTON_INPUT_Pin;
 8000d5e:	0021      	movs	r1, r4
 8000d60:	187b      	adds	r3, r7, r1
 8000d62:	2208      	movs	r2, #8
 8000d64:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d66:	187b      	adds	r3, r7, r1
 8000d68:	2200      	movs	r2, #0
 8000d6a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	187b      	adds	r3, r7, r1
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_INPUT_GPIO_Port, &GPIO_InitStruct);
 8000d72:	187b      	adds	r3, r7, r1
 8000d74:	4a06      	ldr	r2, [pc, #24]	; (8000d90 <MX_GPIO_Init+0x13c>)
 8000d76:	0019      	movs	r1, r3
 8000d78:	0010      	movs	r0, r2
 8000d7a:	f001 fa87 	bl	800228c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	46bd      	mov	sp, r7
 8000d82:	b00b      	add	sp, #44	; 0x2c
 8000d84:	bd90      	pop	{r4, r7, pc}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	00004010 	.word	0x00004010
 8000d90:	50000400 	.word	0x50000400
 8000d94:	50000800 	.word	0x50000800

08000d98 <hardwareTestLCD>:
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
	 	}
	}

	/* Test LCD is working */
	void hardwareTestLCD(void){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
		I2C_LCD_Init(MyI2C_LCD);
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	f006 fc67 	bl	8007670 <I2C_LCD_Init>
		I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2100      	movs	r1, #0
 8000da6:	2000      	movs	r0, #0
 8000da8:	f006 fd72 	bl	8007890 <I2C_LCD_SetCursor>
		I2C_LCD_WriteString(MyI2C_LCD, "SID: 24429298");
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <hardwareTestLCD+0x38>)
 8000dae:	0019      	movs	r1, r3
 8000db0:	2000      	movs	r0, #0
 8000db2:	f006 fdbd 	bl	8007930 <I2C_LCD_WriteString>
		I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 8000db6:	2201      	movs	r2, #1
 8000db8:	2100      	movs	r1, #0
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f006 fd68 	bl	8007890 <I2C_LCD_SetCursor>
		I2C_LCD_WriteString(MyI2C_LCD, "Mechatronics 1");
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <hardwareTestLCD+0x3c>)
 8000dc2:	0019      	movs	r1, r3
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f006 fdb3 	bl	8007930 <I2C_LCD_WriteString>
	}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	08008304 	.word	0x08008304
 8000dd4:	08008314 	.word	0x08008314

08000dd8 <i2cScanner>:
	}

	/* I2C Scanner Script */
	/* Author:     Khaled Magdy */
	/* Source: 	   www.DeepBlueMbedded.com */
	void i2cScanner(void){
 8000dd8:	b5b0      	push	{r4, r5, r7, lr}
 8000dda:	b092      	sub	sp, #72	; 0x48
 8000ddc:	af00      	add	r7, sp, #0
		uint8_t Buffer[25] = {0};
 8000dde:	232c      	movs	r3, #44	; 0x2c
 8000de0:	18fb      	adds	r3, r7, r3
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	3304      	adds	r3, #4
 8000de8:	2215      	movs	r2, #21
 8000dea:	2100      	movs	r1, #0
 8000dec:	0018      	movs	r0, r3
 8000dee:	f006 fddb 	bl	80079a8 <memset>
		uint8_t Space[] = " - ";
 8000df2:	2328      	movs	r3, #40	; 0x28
 8000df4:	18fb      	adds	r3, r7, r3
 8000df6:	4a35      	ldr	r2, [pc, #212]	; (8000ecc <i2cScanner+0xf4>)
 8000df8:	601a      	str	r2, [r3, #0]
		uint8_t StartMSG[] = "Starting I2C Scanning: \r\n";
 8000dfa:	250c      	movs	r5, #12
 8000dfc:	197b      	adds	r3, r7, r5
 8000dfe:	4a34      	ldr	r2, [pc, #208]	; (8000ed0 <i2cScanner+0xf8>)
 8000e00:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000e02:	c313      	stmia	r3!, {r0, r1, r4}
 8000e04:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000e06:	c313      	stmia	r3!, {r0, r1, r4}
 8000e08:	8812      	ldrh	r2, [r2, #0]
 8000e0a:	801a      	strh	r2, [r3, #0]
		uint8_t EndMSG[] = "Done! \r\n\r\n";
 8000e0c:	003b      	movs	r3, r7
 8000e0e:	4a31      	ldr	r2, [pc, #196]	; (8000ed4 <i2cScanner+0xfc>)
 8000e10:	ca03      	ldmia	r2!, {r0, r1}
 8000e12:	c303      	stmia	r3!, {r0, r1}
 8000e14:	8811      	ldrh	r1, [r2, #0]
 8000e16:	8019      	strh	r1, [r3, #0]
 8000e18:	7892      	ldrb	r2, [r2, #2]
 8000e1a:	709a      	strb	r2, [r3, #2]

		uint8_t i = 0, ret;
 8000e1c:	2447      	movs	r4, #71	; 0x47
 8000e1e:	193b      	adds	r3, r7, r4
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]

		HAL_Delay(1000);
 8000e24:	23fa      	movs	r3, #250	; 0xfa
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f000 fbcd 	bl	80015c8 <HAL_Delay>

		/*-[ I2C Bus Scanning ]-*/
		HAL_UART_Transmit(&huart2, StartMSG, sizeof(StartMSG), 10000);
 8000e2e:	4b2a      	ldr	r3, [pc, #168]	; (8000ed8 <i2cScanner+0x100>)
 8000e30:	1979      	adds	r1, r7, r5
 8000e32:	482a      	ldr	r0, [pc, #168]	; (8000edc <i2cScanner+0x104>)
 8000e34:	221a      	movs	r2, #26
 8000e36:	f004 fa19 	bl	800526c <HAL_UART_Transmit>
		for(i=1; i<128; i++)
 8000e3a:	193b      	adds	r3, r7, r4
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	701a      	strb	r2, [r3, #0]
 8000e40:	e034      	b.n	8000eac <i2cScanner+0xd4>
		{
			ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
 8000e42:	2347      	movs	r3, #71	; 0x47
 8000e44:	18fb      	adds	r3, r7, r3
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	18db      	adds	r3, r3, r3
 8000e4c:	b299      	uxth	r1, r3
 8000e4e:	2546      	movs	r5, #70	; 0x46
 8000e50:	197c      	adds	r4, r7, r5
 8000e52:	4823      	ldr	r0, [pc, #140]	; (8000ee0 <i2cScanner+0x108>)
 8000e54:	2305      	movs	r3, #5
 8000e56:	2203      	movs	r2, #3
 8000e58:	f001 fd84 	bl	8002964 <HAL_I2C_IsDeviceReady>
 8000e5c:	0003      	movs	r3, r0
 8000e5e:	7023      	strb	r3, [r4, #0]
			if (ret != HAL_OK) /* No ACK Received At That Address */
 8000e60:	197b      	adds	r3, r7, r5
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d007      	beq.n	8000e78 <i2cScanner+0xa0>
			{
				HAL_UART_Transmit(&huart2, Space, sizeof(Space), 10000);
 8000e68:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <i2cScanner+0x100>)
 8000e6a:	2228      	movs	r2, #40	; 0x28
 8000e6c:	18b9      	adds	r1, r7, r2
 8000e6e:	481b      	ldr	r0, [pc, #108]	; (8000edc <i2cScanner+0x104>)
 8000e70:	2204      	movs	r2, #4
 8000e72:	f004 f9fb 	bl	800526c <HAL_UART_Transmit>
 8000e76:	e013      	b.n	8000ea0 <i2cScanner+0xc8>
			}
			else if(ret == HAL_OK)
 8000e78:	2346      	movs	r3, #70	; 0x46
 8000e7a:	18fb      	adds	r3, r7, r3
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d10e      	bne.n	8000ea0 <i2cScanner+0xc8>
			{
				sprintf(Buffer, "0x%X", i);
 8000e82:	2347      	movs	r3, #71	; 0x47
 8000e84:	18fb      	adds	r3, r7, r3
 8000e86:	781a      	ldrb	r2, [r3, #0]
 8000e88:	4916      	ldr	r1, [pc, #88]	; (8000ee4 <i2cScanner+0x10c>)
 8000e8a:	242c      	movs	r4, #44	; 0x2c
 8000e8c:	193b      	adds	r3, r7, r4
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f006 fd6a 	bl	8007968 <siprintf>
				HAL_UART_Transmit(&huart2, Buffer, sizeof(Buffer), 10000);
 8000e94:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <i2cScanner+0x100>)
 8000e96:	1939      	adds	r1, r7, r4
 8000e98:	4810      	ldr	r0, [pc, #64]	; (8000edc <i2cScanner+0x104>)
 8000e9a:	2219      	movs	r2, #25
 8000e9c:	f004 f9e6 	bl	800526c <HAL_UART_Transmit>
		for(i=1; i<128; i++)
 8000ea0:	2147      	movs	r1, #71	; 0x47
 8000ea2:	187b      	adds	r3, r7, r1
 8000ea4:	781a      	ldrb	r2, [r3, #0]
 8000ea6:	187b      	adds	r3, r7, r1
 8000ea8:	3201      	adds	r2, #1
 8000eaa:	701a      	strb	r2, [r3, #0]
 8000eac:	2347      	movs	r3, #71	; 0x47
 8000eae:	18fb      	adds	r3, r7, r3
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	b25b      	sxtb	r3, r3
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	dac4      	bge.n	8000e42 <i2cScanner+0x6a>
			}
		}
		HAL_UART_Transmit(&huart2, EndMSG, sizeof(EndMSG), 10000);
 8000eb8:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <i2cScanner+0x100>)
 8000eba:	0039      	movs	r1, r7
 8000ebc:	4807      	ldr	r0, [pc, #28]	; (8000edc <i2cScanner+0x104>)
 8000ebe:	220b      	movs	r2, #11
 8000ec0:	f004 f9d4 	bl	800526c <HAL_UART_Transmit>
		/*--[ Scanning Done ]--*/
	}
 8000ec4:	46c0      	nop			; (mov r8, r8)
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	b012      	add	sp, #72	; 0x48
 8000eca:	bdb0      	pop	{r4, r5, r7, pc}
 8000ecc:	00202d20 	.word	0x00202d20
 8000ed0:	0800832c 	.word	0x0800832c
 8000ed4:	08008348 	.word	0x08008348
 8000ed8:	00002710 	.word	0x00002710
 8000edc:	20000260 	.word	0x20000260
 8000ee0:	200000dc 	.word	0x200000dc
 8000ee4:	08008324 	.word	0x08008324

08000ee8 <HAL_TIM_PeriodElapsedCallback>:
		 return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	 }

	 /* Non blocking control of LEDs */
	 // Frequency currently determined by each timer's PSC and ARR value
	 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
		 // This callback is automatically called by the HAL on the UEV event
		 if(htim->Instance == TIM2){
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	2380      	movs	r3, #128	; 0x80
 8000ef6:	05db      	lsls	r3, r3, #23
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d105      	bne.n	8000f08 <HAL_TIM_PeriodElapsedCallback+0x20>
			 HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8000efc:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000efe:	2180      	movs	r1, #128	; 0x80
 8000f00:	0018      	movs	r0, r3
 8000f02:	f001 fb44 	bl	800258e <HAL_GPIO_TogglePin>
		 } else if(htim->Instance == TIM6){
			 HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
		 } else if(htim->Instance == TIM7){
			 HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
		 }
	 }
 8000f06:	e016      	b.n	8000f36 <HAL_TIM_PeriodElapsedCallback+0x4e>
		 } else if(htim->Instance == TIM6){
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0d      	ldr	r2, [pc, #52]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d107      	bne.n	8000f22 <HAL_TIM_PeriodElapsedCallback+0x3a>
			 HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8000f12:	2380      	movs	r3, #128	; 0x80
 8000f14:	01db      	lsls	r3, r3, #7
 8000f16:	4a0c      	ldr	r2, [pc, #48]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000f18:	0019      	movs	r1, r3
 8000f1a:	0010      	movs	r0, r2
 8000f1c:	f001 fb37 	bl	800258e <HAL_GPIO_TogglePin>
	 }
 8000f20:	e009      	b.n	8000f36 <HAL_TIM_PeriodElapsedCallback+0x4e>
		 } else if(htim->Instance == TIM7){
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a09      	ldr	r2, [pc, #36]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d104      	bne.n	8000f36 <HAL_TIM_PeriodElapsedCallback+0x4e>
			 HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000f2e:	2110      	movs	r1, #16
 8000f30:	0018      	movs	r0, r3
 8000f32:	f001 fb2c 	bl	800258e <HAL_GPIO_TogglePin>
	 }
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	b002      	add	sp, #8
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	50000800 	.word	0x50000800
 8000f44:	40001000 	.word	0x40001000
 8000f48:	50000400 	.word	0x50000400
 8000f4c:	40001400 	.word	0x40001400

08000f50 <HAL_UART_RxCpltCallback>:
		 HAL_UART_Receive_IT(&huart2, 20, 20);
	 }

	 /* UART Interrupt Handler */
	 // Handles receiving of bytes
	 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b089      	sub	sp, #36	; 0x24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
		 UNUSED(huart);

		 /* Test message to confirm receiving works */
		 char msg[20];
		 sprintf(msg, "Message received\n\r");
 8000f58:	4a0b      	ldr	r2, [pc, #44]	; (8000f88 <HAL_UART_RxCpltCallback+0x38>)
 8000f5a:	240c      	movs	r4, #12
 8000f5c:	193b      	adds	r3, r7, r4
 8000f5e:	0011      	movs	r1, r2
 8000f60:	0018      	movs	r0, r3
 8000f62:	f006 fd01 	bl	8007968 <siprintf>
		 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000f66:	193b      	adds	r3, r7, r4
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f7ff f8cb 	bl	8000104 <strlen>
 8000f6e:	0003      	movs	r3, r0
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	2301      	movs	r3, #1
 8000f74:	425b      	negs	r3, r3
 8000f76:	1939      	adds	r1, r7, r4
 8000f78:	4804      	ldr	r0, [pc, #16]	; (8000f8c <HAL_UART_RxCpltCallback+0x3c>)
 8000f7a:	f004 f977 	bl	800526c <HAL_UART_Transmit>
	 }
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	46bd      	mov	sp, r7
 8000f82:	b009      	add	sp, #36	; 0x24
 8000f84:	bd90      	pop	{r4, r7, pc}
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	08008354 	.word	0x08008354
 8000f8c:	20000260 	.word	0x20000260

08000f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f94:	b672      	cpsid	i
}
 8000f96:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <Error_Handler+0x8>
	...

08000f9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <HAL_MspInit+0x4c>)
 8000fa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fa6:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <HAL_MspInit+0x4c>)
 8000fa8:	2101      	movs	r1, #1
 8000faa:	430a      	orrs	r2, r1
 8000fac:	641a      	str	r2, [r3, #64]	; 0x40
 8000fae:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <HAL_MspInit+0x4c>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <HAL_MspInit+0x4c>)
 8000fbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <HAL_MspInit+0x4c>)
 8000fc0:	2180      	movs	r1, #128	; 0x80
 8000fc2:	0549      	lsls	r1, r1, #21
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fc8:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <HAL_MspInit+0x4c>)
 8000fca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fcc:	2380      	movs	r3, #128	; 0x80
 8000fce:	055b      	lsls	r3, r3, #21
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	603b      	str	r3, [r7, #0]
 8000fd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000fd6:	23c0      	movs	r3, #192	; 0xc0
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	0018      	movs	r0, r3
 8000fdc:	f000 fb18 	bl	8001610 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe0:	46c0      	nop			; (mov r8, r8)
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	b002      	add	sp, #8
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40021000 	.word	0x40021000

08000fec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fec:	b590      	push	{r4, r7, lr}
 8000fee:	b08b      	sub	sp, #44	; 0x2c
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	2414      	movs	r4, #20
 8000ff6:	193b      	adds	r3, r7, r4
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	2314      	movs	r3, #20
 8000ffc:	001a      	movs	r2, r3
 8000ffe:	2100      	movs	r1, #0
 8001000:	f006 fcd2 	bl	80079a8 <memset>
  if(hadc->Instance==ADC1)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a18      	ldr	r2, [pc, #96]	; (800106c <HAL_ADC_MspInit+0x80>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d129      	bne.n	8001062 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800100e:	4b18      	ldr	r3, [pc, #96]	; (8001070 <HAL_ADC_MspInit+0x84>)
 8001010:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001012:	4b17      	ldr	r3, [pc, #92]	; (8001070 <HAL_ADC_MspInit+0x84>)
 8001014:	2180      	movs	r1, #128	; 0x80
 8001016:	0349      	lsls	r1, r1, #13
 8001018:	430a      	orrs	r2, r1
 800101a:	641a      	str	r2, [r3, #64]	; 0x40
 800101c:	4b14      	ldr	r3, [pc, #80]	; (8001070 <HAL_ADC_MspInit+0x84>)
 800101e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	035b      	lsls	r3, r3, #13
 8001024:	4013      	ands	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <HAL_ADC_MspInit+0x84>)
 800102c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <HAL_ADC_MspInit+0x84>)
 8001030:	2101      	movs	r1, #1
 8001032:	430a      	orrs	r2, r1
 8001034:	635a      	str	r2, [r3, #52]	; 0x34
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <HAL_ADC_MspInit+0x84>)
 8001038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800103a:	2201      	movs	r2, #1
 800103c:	4013      	ands	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = POT_INPUT_Pin;
 8001042:	193b      	adds	r3, r7, r4
 8001044:	2201      	movs	r2, #1
 8001046:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001048:	193b      	adds	r3, r7, r4
 800104a:	2203      	movs	r2, #3
 800104c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	193b      	adds	r3, r7, r4
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(POT_INPUT_GPIO_Port, &GPIO_InitStruct);
 8001054:	193a      	adds	r2, r7, r4
 8001056:	23a0      	movs	r3, #160	; 0xa0
 8001058:	05db      	lsls	r3, r3, #23
 800105a:	0011      	movs	r1, r2
 800105c:	0018      	movs	r0, r3
 800105e:	f001 f915 	bl	800228c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	46bd      	mov	sp, r7
 8001066:	b00b      	add	sp, #44	; 0x2c
 8001068:	bd90      	pop	{r4, r7, pc}
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	40012400 	.word	0x40012400
 8001070:	40021000 	.word	0x40021000

08001074 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001074:	b590      	push	{r4, r7, lr}
 8001076:	b097      	sub	sp, #92	; 0x5c
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	2344      	movs	r3, #68	; 0x44
 800107e:	18fb      	adds	r3, r7, r3
 8001080:	0018      	movs	r0, r3
 8001082:	2314      	movs	r3, #20
 8001084:	001a      	movs	r2, r3
 8001086:	2100      	movs	r1, #0
 8001088:	f006 fc8e 	bl	80079a8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800108c:	2410      	movs	r4, #16
 800108e:	193b      	adds	r3, r7, r4
 8001090:	0018      	movs	r0, r3
 8001092:	2334      	movs	r3, #52	; 0x34
 8001094:	001a      	movs	r2, r3
 8001096:	2100      	movs	r1, #0
 8001098:	f006 fc86 	bl	80079a8 <memset>
  if(hi2c->Instance==I2C1)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a22      	ldr	r2, [pc, #136]	; (800112c <HAL_I2C_MspInit+0xb8>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d13e      	bne.n	8001124 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010a6:	193b      	adds	r3, r7, r4
 80010a8:	2220      	movs	r2, #32
 80010aa:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010ac:	193b      	adds	r3, r7, r4
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b2:	193b      	adds	r3, r7, r4
 80010b4:	0018      	movs	r0, r3
 80010b6:	f002 fd37 	bl	8003b28 <HAL_RCCEx_PeriphCLKConfig>
 80010ba:	1e03      	subs	r3, r0, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80010be:	f7ff ff67 	bl	8000f90 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c2:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <HAL_I2C_MspInit+0xbc>)
 80010c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010c6:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <HAL_I2C_MspInit+0xbc>)
 80010c8:	2102      	movs	r1, #2
 80010ca:	430a      	orrs	r2, r1
 80010cc:	635a      	str	r2, [r3, #52]	; 0x34
 80010ce:	4b18      	ldr	r3, [pc, #96]	; (8001130 <HAL_I2C_MspInit+0xbc>)
 80010d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010d2:	2202      	movs	r2, #2
 80010d4:	4013      	ands	r3, r2
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010da:	2144      	movs	r1, #68	; 0x44
 80010dc:	187b      	adds	r3, r7, r1
 80010de:	22c0      	movs	r2, #192	; 0xc0
 80010e0:	0092      	lsls	r2, r2, #2
 80010e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010e4:	187b      	adds	r3, r7, r1
 80010e6:	2212      	movs	r2, #18
 80010e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	187b      	adds	r3, r7, r1
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	187b      	adds	r3, r7, r1
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80010f6:	187b      	adds	r3, r7, r1
 80010f8:	2206      	movs	r2, #6
 80010fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fc:	187b      	adds	r3, r7, r1
 80010fe:	4a0d      	ldr	r2, [pc, #52]	; (8001134 <HAL_I2C_MspInit+0xc0>)
 8001100:	0019      	movs	r1, r3
 8001102:	0010      	movs	r0, r2
 8001104:	f001 f8c2 	bl	800228c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001108:	4b09      	ldr	r3, [pc, #36]	; (8001130 <HAL_I2C_MspInit+0xbc>)
 800110a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800110c:	4b08      	ldr	r3, [pc, #32]	; (8001130 <HAL_I2C_MspInit+0xbc>)
 800110e:	2180      	movs	r1, #128	; 0x80
 8001110:	0389      	lsls	r1, r1, #14
 8001112:	430a      	orrs	r2, r1
 8001114:	63da      	str	r2, [r3, #60]	; 0x3c
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_I2C_MspInit+0xbc>)
 8001118:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800111a:	2380      	movs	r3, #128	; 0x80
 800111c:	039b      	lsls	r3, r3, #14
 800111e:	4013      	ands	r3, r2
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001124:	46c0      	nop			; (mov r8, r8)
 8001126:	46bd      	mov	sp, r7
 8001128:	b017      	add	sp, #92	; 0x5c
 800112a:	bd90      	pop	{r4, r7, pc}
 800112c:	40005400 	.word	0x40005400
 8001130:	40021000 	.word	0x40021000
 8001134:	50000400 	.word	0x50000400

08001138 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	2380      	movs	r3, #128	; 0x80
 8001146:	05db      	lsls	r3, r3, #23
 8001148:	429a      	cmp	r2, r3
 800114a:	d114      	bne.n	8001176 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800114c:	4b2e      	ldr	r3, [pc, #184]	; (8001208 <HAL_TIM_Base_MspInit+0xd0>)
 800114e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001150:	4b2d      	ldr	r3, [pc, #180]	; (8001208 <HAL_TIM_Base_MspInit+0xd0>)
 8001152:	2101      	movs	r1, #1
 8001154:	430a      	orrs	r2, r1
 8001156:	63da      	str	r2, [r3, #60]	; 0x3c
 8001158:	4b2b      	ldr	r3, [pc, #172]	; (8001208 <HAL_TIM_Base_MspInit+0xd0>)
 800115a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800115c:	2201      	movs	r2, #1
 800115e:	4013      	ands	r3, r2
 8001160:	617b      	str	r3, [r7, #20]
 8001162:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001164:	2200      	movs	r2, #0
 8001166:	2100      	movs	r1, #0
 8001168:	200f      	movs	r0, #15
 800116a:	f000 ff91 	bl	8002090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800116e:	200f      	movs	r0, #15
 8001170:	f000 ffa3 	bl	80020ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001174:	e044      	b.n	8001200 <HAL_TIM_Base_MspInit+0xc8>
  else if(htim_base->Instance==TIM3)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a24      	ldr	r2, [pc, #144]	; (800120c <HAL_TIM_Base_MspInit+0xd4>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d10c      	bne.n	800119a <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001180:	4b21      	ldr	r3, [pc, #132]	; (8001208 <HAL_TIM_Base_MspInit+0xd0>)
 8001182:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001184:	4b20      	ldr	r3, [pc, #128]	; (8001208 <HAL_TIM_Base_MspInit+0xd0>)
 8001186:	2102      	movs	r1, #2
 8001188:	430a      	orrs	r2, r1
 800118a:	63da      	str	r2, [r3, #60]	; 0x3c
 800118c:	4b1e      	ldr	r3, [pc, #120]	; (8001208 <HAL_TIM_Base_MspInit+0xd0>)
 800118e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001190:	2202      	movs	r2, #2
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	693b      	ldr	r3, [r7, #16]
}
 8001198:	e032      	b.n	8001200 <HAL_TIM_Base_MspInit+0xc8>
  else if(htim_base->Instance==TIM6)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a1c      	ldr	r2, [pc, #112]	; (8001210 <HAL_TIM_Base_MspInit+0xd8>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d114      	bne.n	80011ce <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80011a4:	4b18      	ldr	r3, [pc, #96]	; (8001208 <HAL_TIM_Base_MspInit+0xd0>)
 80011a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011a8:	4b17      	ldr	r3, [pc, #92]	; (8001208 <HAL_TIM_Base_MspInit+0xd0>)
 80011aa:	2110      	movs	r1, #16
 80011ac:	430a      	orrs	r2, r1
 80011ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80011b0:	4b15      	ldr	r3, [pc, #84]	; (8001208 <HAL_TIM_Base_MspInit+0xd0>)
 80011b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011b4:	2210      	movs	r2, #16
 80011b6:	4013      	ands	r3, r2
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 80011bc:	2200      	movs	r2, #0
 80011be:	2100      	movs	r1, #0
 80011c0:	2011      	movs	r0, #17
 80011c2:	f000 ff65 	bl	8002090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 80011c6:	2011      	movs	r0, #17
 80011c8:	f000 ff77 	bl	80020ba <HAL_NVIC_EnableIRQ>
}
 80011cc:	e018      	b.n	8001200 <HAL_TIM_Base_MspInit+0xc8>
  else if(htim_base->Instance==TIM7)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a10      	ldr	r2, [pc, #64]	; (8001214 <HAL_TIM_Base_MspInit+0xdc>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d113      	bne.n	8001200 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80011d8:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <HAL_TIM_Base_MspInit+0xd0>)
 80011da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011dc:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <HAL_TIM_Base_MspInit+0xd0>)
 80011de:	2120      	movs	r1, #32
 80011e0:	430a      	orrs	r2, r1
 80011e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <HAL_TIM_Base_MspInit+0xd0>)
 80011e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011e8:	2220      	movs	r2, #32
 80011ea:	4013      	ands	r3, r2
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_LPTIM2_IRQn, 0, 0);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2100      	movs	r1, #0
 80011f4:	2012      	movs	r0, #18
 80011f6:	f000 ff4b 	bl	8002090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_LPTIM2_IRQn);
 80011fa:	2012      	movs	r0, #18
 80011fc:	f000 ff5d 	bl	80020ba <HAL_NVIC_EnableIRQ>
}
 8001200:	46c0      	nop			; (mov r8, r8)
 8001202:	46bd      	mov	sp, r7
 8001204:	b006      	add	sp, #24
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40021000 	.word	0x40021000
 800120c:	40000400 	.word	0x40000400
 8001210:	40001000 	.word	0x40001000
 8001214:	40001400 	.word	0x40001400

08001218 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b089      	sub	sp, #36	; 0x24
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	240c      	movs	r4, #12
 8001222:	193b      	adds	r3, r7, r4
 8001224:	0018      	movs	r0, r3
 8001226:	2314      	movs	r3, #20
 8001228:	001a      	movs	r2, r3
 800122a:	2100      	movs	r1, #0
 800122c:	f006 fbbc 	bl	80079a8 <memset>
  if(htim->Instance==TIM3)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a14      	ldr	r2, [pc, #80]	; (8001288 <HAL_TIM_MspPostInit+0x70>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d122      	bne.n	8001280 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123a:	4b14      	ldr	r3, [pc, #80]	; (800128c <HAL_TIM_MspPostInit+0x74>)
 800123c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800123e:	4b13      	ldr	r3, [pc, #76]	; (800128c <HAL_TIM_MspPostInit+0x74>)
 8001240:	2101      	movs	r1, #1
 8001242:	430a      	orrs	r2, r1
 8001244:	635a      	str	r2, [r3, #52]	; 0x34
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <HAL_TIM_MspPostInit+0x74>)
 8001248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800124a:	2201      	movs	r2, #1
 800124c:	4013      	ands	r3, r2
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001252:	0021      	movs	r1, r4
 8001254:	187b      	adds	r3, r7, r1
 8001256:	2240      	movs	r2, #64	; 0x40
 8001258:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	187b      	adds	r3, r7, r1
 800125c:	2202      	movs	r2, #2
 800125e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	187b      	adds	r3, r7, r1
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001266:	187b      	adds	r3, r7, r1
 8001268:	2200      	movs	r2, #0
 800126a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800126c:	187b      	adds	r3, r7, r1
 800126e:	2201      	movs	r2, #1
 8001270:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001272:	187a      	adds	r2, r7, r1
 8001274:	23a0      	movs	r3, #160	; 0xa0
 8001276:	05db      	lsls	r3, r3, #23
 8001278:	0011      	movs	r1, r2
 800127a:	0018      	movs	r0, r3
 800127c:	f001 f806 	bl	800228c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001280:	46c0      	nop			; (mov r8, r8)
 8001282:	46bd      	mov	sp, r7
 8001284:	b009      	add	sp, #36	; 0x24
 8001286:	bd90      	pop	{r4, r7, pc}
 8001288:	40000400 	.word	0x40000400
 800128c:	40021000 	.word	0x40021000

08001290 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001290:	b590      	push	{r4, r7, lr}
 8001292:	b097      	sub	sp, #92	; 0x5c
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	2344      	movs	r3, #68	; 0x44
 800129a:	18fb      	adds	r3, r7, r3
 800129c:	0018      	movs	r0, r3
 800129e:	2314      	movs	r3, #20
 80012a0:	001a      	movs	r2, r3
 80012a2:	2100      	movs	r1, #0
 80012a4:	f006 fb80 	bl	80079a8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012a8:	2410      	movs	r4, #16
 80012aa:	193b      	adds	r3, r7, r4
 80012ac:	0018      	movs	r0, r3
 80012ae:	2334      	movs	r3, #52	; 0x34
 80012b0:	001a      	movs	r2, r3
 80012b2:	2100      	movs	r1, #0
 80012b4:	f006 fb78 	bl	80079a8 <memset>
  if(huart->Instance==USART2)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a26      	ldr	r2, [pc, #152]	; (8001358 <HAL_UART_MspInit+0xc8>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d146      	bne.n	8001350 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80012c2:	193b      	adds	r3, r7, r4
 80012c4:	2202      	movs	r2, #2
 80012c6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012c8:	193b      	adds	r3, r7, r4
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ce:	193b      	adds	r3, r7, r4
 80012d0:	0018      	movs	r0, r3
 80012d2:	f002 fc29 	bl	8003b28 <HAL_RCCEx_PeriphCLKConfig>
 80012d6:	1e03      	subs	r3, r0, #0
 80012d8:	d001      	beq.n	80012de <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80012da:	f7ff fe59 	bl	8000f90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012de:	4b1f      	ldr	r3, [pc, #124]	; (800135c <HAL_UART_MspInit+0xcc>)
 80012e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012e2:	4b1e      	ldr	r3, [pc, #120]	; (800135c <HAL_UART_MspInit+0xcc>)
 80012e4:	2180      	movs	r1, #128	; 0x80
 80012e6:	0289      	lsls	r1, r1, #10
 80012e8:	430a      	orrs	r2, r1
 80012ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80012ec:	4b1b      	ldr	r3, [pc, #108]	; (800135c <HAL_UART_MspInit+0xcc>)
 80012ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012f0:	2380      	movs	r3, #128	; 0x80
 80012f2:	029b      	lsls	r3, r3, #10
 80012f4:	4013      	ands	r3, r2
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	4b18      	ldr	r3, [pc, #96]	; (800135c <HAL_UART_MspInit+0xcc>)
 80012fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012fe:	4b17      	ldr	r3, [pc, #92]	; (800135c <HAL_UART_MspInit+0xcc>)
 8001300:	2101      	movs	r1, #1
 8001302:	430a      	orrs	r2, r1
 8001304:	635a      	str	r2, [r3, #52]	; 0x34
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <HAL_UART_MspInit+0xcc>)
 8001308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800130a:	2201      	movs	r2, #1
 800130c:	4013      	ands	r3, r2
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001312:	2144      	movs	r1, #68	; 0x44
 8001314:	187b      	adds	r3, r7, r1
 8001316:	220c      	movs	r2, #12
 8001318:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	187b      	adds	r3, r7, r1
 800131c:	2202      	movs	r2, #2
 800131e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001320:	187b      	adds	r3, r7, r1
 8001322:	2201      	movs	r2, #1
 8001324:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	187b      	adds	r3, r7, r1
 8001328:	2200      	movs	r2, #0
 800132a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800132c:	187b      	adds	r3, r7, r1
 800132e:	2201      	movs	r2, #1
 8001330:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001332:	187a      	adds	r2, r7, r1
 8001334:	23a0      	movs	r3, #160	; 0xa0
 8001336:	05db      	lsls	r3, r3, #23
 8001338:	0011      	movs	r1, r2
 800133a:	0018      	movs	r0, r3
 800133c:	f000 ffa6 	bl	800228c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001340:	2200      	movs	r2, #0
 8001342:	2100      	movs	r1, #0
 8001344:	201c      	movs	r0, #28
 8001346:	f000 fea3 	bl	8002090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800134a:	201c      	movs	r0, #28
 800134c:	f000 feb5 	bl	80020ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001350:	46c0      	nop			; (mov r8, r8)
 8001352:	46bd      	mov	sp, r7
 8001354:	b017      	add	sp, #92	; 0x5c
 8001356:	bd90      	pop	{r4, r7, pc}
 8001358:	40004400 	.word	0x40004400
 800135c:	40021000 	.word	0x40021000

08001360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001364:	e7fe      	b.n	8001364 <NMI_Handler+0x4>

08001366 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800136a:	e7fe      	b.n	800136a <HardFault_Handler+0x4>

0800136c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001370:	46c0      	nop			; (mov r8, r8)
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001384:	f000 f904 	bl	8001590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001388:	46c0      	nop			; (mov r8, r8)
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001394:	4b03      	ldr	r3, [pc, #12]	; (80013a4 <TIM2_IRQHandler+0x14>)
 8001396:	0018      	movs	r0, r3
 8001398:	f002 ff7c 	bl	8004294 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800139c:	46c0      	nop			; (mov r8, r8)
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	46c0      	nop			; (mov r8, r8)
 80013a4:	20000130 	.word	0x20000130

080013a8 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80013ac:	4b03      	ldr	r3, [pc, #12]	; (80013bc <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 80013ae:	0018      	movs	r0, r3
 80013b0:	f002 ff70 	bl	8004294 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 80013b4:	46c0      	nop			; (mov r8, r8)
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	200001c8 	.word	0x200001c8

080013c0 <TIM7_LPTIM2_IRQHandler>:

/**
  * @brief This function handles TIM7 and LPTIM2 interrupts (LPTIM2 interrupt through EXTI line 30).
  */
void TIM7_LPTIM2_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 0 */

  /* USER CODE END TIM7_LPTIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80013c4:	4b03      	ldr	r3, [pc, #12]	; (80013d4 <TIM7_LPTIM2_IRQHandler+0x14>)
 80013c6:	0018      	movs	r0, r3
 80013c8:	f002 ff64 	bl	8004294 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 1 */

  /* USER CODE END TIM7_LPTIM2_IRQn 1 */
}
 80013cc:	46c0      	nop			; (mov r8, r8)
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	46c0      	nop			; (mov r8, r8)
 80013d4:	20000214 	.word	0x20000214

080013d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013dc:	4b03      	ldr	r3, [pc, #12]	; (80013ec <USART2_IRQHandler+0x14>)
 80013de:	0018      	movs	r0, r3
 80013e0:	f004 f846 	bl	8005470 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013e4:	46c0      	nop			; (mov r8, r8)
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	20000260 	.word	0x20000260

080013f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013f8:	4a14      	ldr	r2, [pc, #80]	; (800144c <_sbrk+0x5c>)
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <_sbrk+0x60>)
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001404:	4b13      	ldr	r3, [pc, #76]	; (8001454 <_sbrk+0x64>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d102      	bne.n	8001412 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <_sbrk+0x64>)
 800140e:	4a12      	ldr	r2, [pc, #72]	; (8001458 <_sbrk+0x68>)
 8001410:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001412:	4b10      	ldr	r3, [pc, #64]	; (8001454 <_sbrk+0x64>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	18d3      	adds	r3, r2, r3
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	429a      	cmp	r2, r3
 800141e:	d207      	bcs.n	8001430 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001420:	f006 faca 	bl	80079b8 <__errno>
 8001424:	0003      	movs	r3, r0
 8001426:	220c      	movs	r2, #12
 8001428:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800142a:	2301      	movs	r3, #1
 800142c:	425b      	negs	r3, r3
 800142e:	e009      	b.n	8001444 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <_sbrk+0x64>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001436:	4b07      	ldr	r3, [pc, #28]	; (8001454 <_sbrk+0x64>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	18d2      	adds	r2, r2, r3
 800143e:	4b05      	ldr	r3, [pc, #20]	; (8001454 <_sbrk+0x64>)
 8001440:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001442:	68fb      	ldr	r3, [r7, #12]
}
 8001444:	0018      	movs	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	b006      	add	sp, #24
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20009000 	.word	0x20009000
 8001450:	00000400 	.word	0x00000400
 8001454:	200002f4 	.word	0x200002f4
 8001458:	20000448 	.word	0x20000448

0800145c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001460:	46c0      	nop			; (mov r8, r8)
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001468:	480d      	ldr	r0, [pc, #52]	; (80014a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800146a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800146c:	f7ff fff6 	bl	800145c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001470:	480c      	ldr	r0, [pc, #48]	; (80014a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001472:	490d      	ldr	r1, [pc, #52]	; (80014a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001474:	4a0d      	ldr	r2, [pc, #52]	; (80014ac <LoopForever+0xe>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001478:	e002      	b.n	8001480 <LoopCopyDataInit>

0800147a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800147c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147e:	3304      	adds	r3, #4

08001480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001484:	d3f9      	bcc.n	800147a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001486:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001488:	4c0a      	ldr	r4, [pc, #40]	; (80014b4 <LoopForever+0x16>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800148c:	e001      	b.n	8001492 <LoopFillZerobss>

0800148e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001490:	3204      	adds	r2, #4

08001492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001494:	d3fb      	bcc.n	800148e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001496:	f006 fa95 	bl	80079c4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800149a:	f7ff f8d1 	bl	8000640 <main>

0800149e <LoopForever>:

LoopForever:
  b LoopForever
 800149e:	e7fe      	b.n	800149e <LoopForever>
  ldr   r0, =_estack
 80014a0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80014a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80014ac:	080084a4 	.word	0x080084a4
  ldr r2, =_sbss
 80014b0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80014b4:	20000448 	.word	0x20000448

080014b8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014b8:	e7fe      	b.n	80014b8 <ADC1_COMP_IRQHandler>
	...

080014bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014c2:	1dfb      	adds	r3, r7, #7
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c8:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <HAL_Init+0x3c>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <HAL_Init+0x3c>)
 80014ce:	2180      	movs	r1, #128	; 0x80
 80014d0:	0049      	lsls	r1, r1, #1
 80014d2:	430a      	orrs	r2, r1
 80014d4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014d6:	2000      	movs	r0, #0
 80014d8:	f000 f810 	bl	80014fc <HAL_InitTick>
 80014dc:	1e03      	subs	r3, r0, #0
 80014de:	d003      	beq.n	80014e8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80014e0:	1dfb      	adds	r3, r7, #7
 80014e2:	2201      	movs	r2, #1
 80014e4:	701a      	strb	r2, [r3, #0]
 80014e6:	e001      	b.n	80014ec <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80014e8:	f7ff fd58 	bl	8000f9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014ec:	1dfb      	adds	r3, r7, #7
 80014ee:	781b      	ldrb	r3, [r3, #0]
}
 80014f0:	0018      	movs	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	b002      	add	sp, #8
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40022000 	.word	0x40022000

080014fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014fc:	b590      	push	{r4, r7, lr}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001504:	230f      	movs	r3, #15
 8001506:	18fb      	adds	r3, r7, r3
 8001508:	2200      	movs	r2, #0
 800150a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800150c:	4b1d      	ldr	r3, [pc, #116]	; (8001584 <HAL_InitTick+0x88>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d02b      	beq.n	800156c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001514:	4b1c      	ldr	r3, [pc, #112]	; (8001588 <HAL_InitTick+0x8c>)
 8001516:	681c      	ldr	r4, [r3, #0]
 8001518:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <HAL_InitTick+0x88>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	0019      	movs	r1, r3
 800151e:	23fa      	movs	r3, #250	; 0xfa
 8001520:	0098      	lsls	r0, r3, #2
 8001522:	f7fe fe01 	bl	8000128 <__udivsi3>
 8001526:	0003      	movs	r3, r0
 8001528:	0019      	movs	r1, r3
 800152a:	0020      	movs	r0, r4
 800152c:	f7fe fdfc 	bl	8000128 <__udivsi3>
 8001530:	0003      	movs	r3, r0
 8001532:	0018      	movs	r0, r3
 8001534:	f000 fdd1 	bl	80020da <HAL_SYSTICK_Config>
 8001538:	1e03      	subs	r3, r0, #0
 800153a:	d112      	bne.n	8001562 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b03      	cmp	r3, #3
 8001540:	d80a      	bhi.n	8001558 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	2301      	movs	r3, #1
 8001546:	425b      	negs	r3, r3
 8001548:	2200      	movs	r2, #0
 800154a:	0018      	movs	r0, r3
 800154c:	f000 fda0 	bl	8002090 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001550:	4b0e      	ldr	r3, [pc, #56]	; (800158c <HAL_InitTick+0x90>)
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	e00d      	b.n	8001574 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001558:	230f      	movs	r3, #15
 800155a:	18fb      	adds	r3, r7, r3
 800155c:	2201      	movs	r2, #1
 800155e:	701a      	strb	r2, [r3, #0]
 8001560:	e008      	b.n	8001574 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001562:	230f      	movs	r3, #15
 8001564:	18fb      	adds	r3, r7, r3
 8001566:	2201      	movs	r2, #1
 8001568:	701a      	strb	r2, [r3, #0]
 800156a:	e003      	b.n	8001574 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800156c:	230f      	movs	r3, #15
 800156e:	18fb      	adds	r3, r7, r3
 8001570:	2201      	movs	r2, #1
 8001572:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001574:	230f      	movs	r3, #15
 8001576:	18fb      	adds	r3, r7, r3
 8001578:	781b      	ldrb	r3, [r3, #0]
}
 800157a:	0018      	movs	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	b005      	add	sp, #20
 8001580:	bd90      	pop	{r4, r7, pc}
 8001582:	46c0      	nop			; (mov r8, r8)
 8001584:	20000008 	.word	0x20000008
 8001588:	20000000 	.word	0x20000000
 800158c:	20000004 	.word	0x20000004

08001590 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <HAL_IncTick+0x1c>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	001a      	movs	r2, r3
 800159a:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <HAL_IncTick+0x20>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	18d2      	adds	r2, r2, r3
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <HAL_IncTick+0x20>)
 80015a2:	601a      	str	r2, [r3, #0]
}
 80015a4:	46c0      	nop			; (mov r8, r8)
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	46c0      	nop			; (mov r8, r8)
 80015ac:	20000008 	.word	0x20000008
 80015b0:	200002f8 	.word	0x200002f8

080015b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  return uwTick;
 80015b8:	4b02      	ldr	r3, [pc, #8]	; (80015c4 <HAL_GetTick+0x10>)
 80015ba:	681b      	ldr	r3, [r3, #0]
}
 80015bc:	0018      	movs	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	200002f8 	.word	0x200002f8

080015c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015d0:	f7ff fff0 	bl	80015b4 <HAL_GetTick>
 80015d4:	0003      	movs	r3, r0
 80015d6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	3301      	adds	r3, #1
 80015e0:	d005      	beq.n	80015ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015e2:	4b0a      	ldr	r3, [pc, #40]	; (800160c <HAL_Delay+0x44>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	001a      	movs	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	189b      	adds	r3, r3, r2
 80015ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	f7ff ffe0 	bl	80015b4 <HAL_GetTick>
 80015f4:	0002      	movs	r2, r0
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d8f7      	bhi.n	80015f0 <HAL_Delay+0x28>
  {
  }
}
 8001600:	46c0      	nop			; (mov r8, r8)
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	46bd      	mov	sp, r7
 8001606:	b004      	add	sp, #16
 8001608:	bd80      	pop	{r7, pc}
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	20000008 	.word	0x20000008

08001610 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a06      	ldr	r2, [pc, #24]	; (8001638 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800161e:	4013      	ands	r3, r2
 8001620:	0019      	movs	r1, r3
 8001622:	4b04      	ldr	r3, [pc, #16]	; (8001634 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	430a      	orrs	r2, r1
 8001628:	601a      	str	r2, [r3, #0]
}
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	46bd      	mov	sp, r7
 800162e:	b002      	add	sp, #8
 8001630:	bd80      	pop	{r7, pc}
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	40010000 	.word	0x40010000
 8001638:	fffff9ff 	.word	0xfffff9ff

0800163c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a05      	ldr	r2, [pc, #20]	; (8001660 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800164c:	401a      	ands	r2, r3
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	431a      	orrs	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	601a      	str	r2, [r3, #0]
}
 8001656:	46c0      	nop			; (mov r8, r8)
 8001658:	46bd      	mov	sp, r7
 800165a:	b002      	add	sp, #8
 800165c:	bd80      	pop	{r7, pc}
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	fe3fffff 	.word	0xfe3fffff

08001664 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	23e0      	movs	r3, #224	; 0xe0
 8001672:	045b      	lsls	r3, r3, #17
 8001674:	4013      	ands	r3, r2
}
 8001676:	0018      	movs	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	b002      	add	sp, #8
 800167c:	bd80      	pop	{r7, pc}

0800167e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b084      	sub	sp, #16
 8001682:	af00      	add	r7, sp, #0
 8001684:	60f8      	str	r0, [r7, #12]
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	2104      	movs	r1, #4
 8001692:	400a      	ands	r2, r1
 8001694:	2107      	movs	r1, #7
 8001696:	4091      	lsls	r1, r2
 8001698:	000a      	movs	r2, r1
 800169a:	43d2      	mvns	r2, r2
 800169c:	401a      	ands	r2, r3
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	2104      	movs	r1, #4
 80016a2:	400b      	ands	r3, r1
 80016a4:	6879      	ldr	r1, [r7, #4]
 80016a6:	4099      	lsls	r1, r3
 80016a8:	000b      	movs	r3, r1
 80016aa:	431a      	orrs	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80016b0:	46c0      	nop			; (mov r8, r8)
 80016b2:	46bd      	mov	sp, r7
 80016b4:	b004      	add	sp, #16
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	2104      	movs	r1, #4
 80016ca:	400a      	ands	r2, r1
 80016cc:	2107      	movs	r1, #7
 80016ce:	4091      	lsls	r1, r2
 80016d0:	000a      	movs	r2, r1
 80016d2:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	2104      	movs	r1, #4
 80016d8:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80016da:	40da      	lsrs	r2, r3
 80016dc:	0013      	movs	r3, r2
}
 80016de:	0018      	movs	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	b002      	add	sp, #8
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b084      	sub	sp, #16
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	60f8      	str	r0, [r7, #12]
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	211f      	movs	r1, #31
 80016fa:	400a      	ands	r2, r1
 80016fc:	210f      	movs	r1, #15
 80016fe:	4091      	lsls	r1, r2
 8001700:	000a      	movs	r2, r1
 8001702:	43d2      	mvns	r2, r2
 8001704:	401a      	ands	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	0e9b      	lsrs	r3, r3, #26
 800170a:	210f      	movs	r1, #15
 800170c:	4019      	ands	r1, r3
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	201f      	movs	r0, #31
 8001712:	4003      	ands	r3, r0
 8001714:	4099      	lsls	r1, r3
 8001716:	000b      	movs	r3, r1
 8001718:	431a      	orrs	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800171e:	46c0      	nop			; (mov r8, r8)
 8001720:	46bd      	mov	sp, r7
 8001722:	b004      	add	sp, #16
 8001724:	bd80      	pop	{r7, pc}

08001726 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
 800172e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	035b      	lsls	r3, r3, #13
 8001738:	0b5b      	lsrs	r3, r3, #13
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001740:	46c0      	nop			; (mov r8, r8)
 8001742:	46bd      	mov	sp, r7
 8001744:	b002      	add	sp, #8
 8001746:	bd80      	pop	{r7, pc}

08001748 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	0352      	lsls	r2, r2, #13
 800175a:	0b52      	lsrs	r2, r2, #13
 800175c:	43d2      	mvns	r2, r2
 800175e:	401a      	ands	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001764:	46c0      	nop			; (mov r8, r8)
 8001766:	46bd      	mov	sp, r7
 8001768:	b002      	add	sp, #8
 800176a:	bd80      	pop	{r7, pc}

0800176c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	695b      	ldr	r3, [r3, #20]
 800177c:	68ba      	ldr	r2, [r7, #8]
 800177e:	0212      	lsls	r2, r2, #8
 8001780:	43d2      	mvns	r2, r2
 8001782:	401a      	ands	r2, r3
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	021b      	lsls	r3, r3, #8
 8001788:	6879      	ldr	r1, [r7, #4]
 800178a:	400b      	ands	r3, r1
 800178c:	4904      	ldr	r1, [pc, #16]	; (80017a0 <LL_ADC_SetChannelSamplingTime+0x34>)
 800178e:	400b      	ands	r3, r1
 8001790:	431a      	orrs	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	46bd      	mov	sp, r7
 800179a:	b004      	add	sp, #16
 800179c:	bd80      	pop	{r7, pc}
 800179e:	46c0      	nop			; (mov r8, r8)
 80017a0:	07ffff00 	.word	0x07ffff00

080017a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <LL_ADC_EnableInternalRegulator+0x24>)
 80017b2:	4013      	ands	r3, r2
 80017b4:	2280      	movs	r2, #128	; 0x80
 80017b6:	0552      	lsls	r2, r2, #21
 80017b8:	431a      	orrs	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	46bd      	mov	sp, r7
 80017c2:	b002      	add	sp, #8
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	46c0      	nop			; (mov r8, r8)
 80017c8:	6fffffe8 	.word	0x6fffffe8

080017cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	2380      	movs	r3, #128	; 0x80
 80017da:	055b      	lsls	r3, r3, #21
 80017dc:	401a      	ands	r2, r3
 80017de:	2380      	movs	r3, #128	; 0x80
 80017e0:	055b      	lsls	r3, r3, #21
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d101      	bne.n	80017ea <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80017e6:	2301      	movs	r3, #1
 80017e8:	e000      	b.n	80017ec <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	0018      	movs	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b002      	add	sp, #8
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	2201      	movs	r2, #1
 8001802:	4013      	ands	r3, r2
 8001804:	2b01      	cmp	r3, #1
 8001806:	d101      	bne.n	800180c <LL_ADC_IsEnabled+0x18>
 8001808:	2301      	movs	r3, #1
 800180a:	e000      	b.n	800180e <LL_ADC_IsEnabled+0x1a>
 800180c:	2300      	movs	r3, #0
}
 800180e:	0018      	movs	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	b002      	add	sp, #8
 8001814:	bd80      	pop	{r7, pc}

08001816 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	2204      	movs	r2, #4
 8001824:	4013      	ands	r3, r2
 8001826:	2b04      	cmp	r3, #4
 8001828:	d101      	bne.n	800182e <LL_ADC_REG_IsConversionOngoing+0x18>
 800182a:	2301      	movs	r3, #1
 800182c:	e000      	b.n	8001830 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800182e:	2300      	movs	r3, #0
}
 8001830:	0018      	movs	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	b002      	add	sp, #8
 8001836:	bd80      	pop	{r7, pc}

08001838 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001840:	231f      	movs	r3, #31
 8001842:	18fb      	adds	r3, r7, r3
 8001844:	2200      	movs	r2, #0
 8001846:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001848:	2300      	movs	r3, #0
 800184a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e17f      	b.n	8001b5e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10a      	bne.n	800187c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	0018      	movs	r0, r3
 800186a:	f7ff fbbf 	bl	8000fec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2254      	movs	r2, #84	; 0x54
 8001878:	2100      	movs	r1, #0
 800187a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	0018      	movs	r0, r3
 8001882:	f7ff ffa3 	bl	80017cc <LL_ADC_IsInternalRegulatorEnabled>
 8001886:	1e03      	subs	r3, r0, #0
 8001888:	d115      	bne.n	80018b6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	0018      	movs	r0, r3
 8001890:	f7ff ff88 	bl	80017a4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001894:	4bb4      	ldr	r3, [pc, #720]	; (8001b68 <HAL_ADC_Init+0x330>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	49b4      	ldr	r1, [pc, #720]	; (8001b6c <HAL_ADC_Init+0x334>)
 800189a:	0018      	movs	r0, r3
 800189c:	f7fe fc44 	bl	8000128 <__udivsi3>
 80018a0:	0003      	movs	r3, r0
 80018a2:	3301      	adds	r3, #1
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80018a8:	e002      	b.n	80018b0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	3b01      	subs	r3, #1
 80018ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f9      	bne.n	80018aa <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	0018      	movs	r0, r3
 80018bc:	f7ff ff86 	bl	80017cc <LL_ADC_IsInternalRegulatorEnabled>
 80018c0:	1e03      	subs	r3, r0, #0
 80018c2:	d10f      	bne.n	80018e4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c8:	2210      	movs	r2, #16
 80018ca:	431a      	orrs	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d4:	2201      	movs	r2, #1
 80018d6:	431a      	orrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80018dc:	231f      	movs	r3, #31
 80018de:	18fb      	adds	r3, r7, r3
 80018e0:	2201      	movs	r2, #1
 80018e2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	0018      	movs	r0, r3
 80018ea:	f7ff ff94 	bl	8001816 <LL_ADC_REG_IsConversionOngoing>
 80018ee:	0003      	movs	r3, r0
 80018f0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f6:	2210      	movs	r2, #16
 80018f8:	4013      	ands	r3, r2
 80018fa:	d000      	beq.n	80018fe <HAL_ADC_Init+0xc6>
 80018fc:	e122      	b.n	8001b44 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d000      	beq.n	8001906 <HAL_ADC_Init+0xce>
 8001904:	e11e      	b.n	8001b44 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190a:	4a99      	ldr	r2, [pc, #612]	; (8001b70 <HAL_ADC_Init+0x338>)
 800190c:	4013      	ands	r3, r2
 800190e:	2202      	movs	r2, #2
 8001910:	431a      	orrs	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	0018      	movs	r0, r3
 800191c:	f7ff ff6a 	bl	80017f4 <LL_ADC_IsEnabled>
 8001920:	1e03      	subs	r3, r0, #0
 8001922:	d000      	beq.n	8001926 <HAL_ADC_Init+0xee>
 8001924:	e0ad      	b.n	8001a82 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	7e1b      	ldrb	r3, [r3, #24]
 800192e:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001930:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	7e5b      	ldrb	r3, [r3, #25]
 8001936:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001938:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	7e9b      	ldrb	r3, [r3, #26]
 800193e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001940:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	2b00      	cmp	r3, #0
 8001948:	d002      	beq.n	8001950 <HAL_ADC_Init+0x118>
 800194a:	2380      	movs	r3, #128	; 0x80
 800194c:	015b      	lsls	r3, r3, #5
 800194e:	e000      	b.n	8001952 <HAL_ADC_Init+0x11a>
 8001950:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001952:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001958:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	2b00      	cmp	r3, #0
 8001960:	da04      	bge.n	800196c <HAL_ADC_Init+0x134>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	085b      	lsrs	r3, r3, #1
 800196a:	e001      	b.n	8001970 <HAL_ADC_Init+0x138>
 800196c:	2380      	movs	r3, #128	; 0x80
 800196e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001970:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	212c      	movs	r1, #44	; 0x2c
 8001976:	5c5b      	ldrb	r3, [r3, r1]
 8001978:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800197a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2220      	movs	r2, #32
 8001986:	5c9b      	ldrb	r3, [r3, r2]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d115      	bne.n	80019b8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	7e9b      	ldrb	r3, [r3, #26]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d105      	bne.n	80019a0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	2280      	movs	r2, #128	; 0x80
 8001998:	0252      	lsls	r2, r2, #9
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
 800199e:	e00b      	b.n	80019b8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a4:	2220      	movs	r2, #32
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b0:	2201      	movs	r2, #1
 80019b2:	431a      	orrs	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d00a      	beq.n	80019d6 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019c4:	23e0      	movs	r3, #224	; 0xe0
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80019ce:	4313      	orrs	r3, r2
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	4a65      	ldr	r2, [pc, #404]	; (8001b74 <HAL_ADC_Init+0x33c>)
 80019de:	4013      	ands	r3, r2
 80019e0:	0019      	movs	r1, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	0f9b      	lsrs	r3, r3, #30
 80019f2:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80019f8:	4313      	orrs	r3, r2
 80019fa:	697a      	ldr	r2, [r7, #20]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	223c      	movs	r2, #60	; 0x3c
 8001a04:	5c9b      	ldrb	r3, [r3, r2]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d111      	bne.n	8001a2e <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	0f9b      	lsrs	r3, r3, #30
 8001a10:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001a16:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001a1c:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001a22:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	2201      	movs	r2, #1
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	4a50      	ldr	r2, [pc, #320]	; (8001b78 <HAL_ADC_Init+0x340>)
 8001a36:	4013      	ands	r3, r2
 8001a38:	0019      	movs	r1, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	430a      	orrs	r2, r1
 8001a42:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	23c0      	movs	r3, #192	; 0xc0
 8001a4a:	061b      	lsls	r3, r3, #24
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d018      	beq.n	8001a82 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001a54:	2380      	movs	r3, #128	; 0x80
 8001a56:	05db      	lsls	r3, r3, #23
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d012      	beq.n	8001a82 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001a60:	2380      	movs	r3, #128	; 0x80
 8001a62:	061b      	lsls	r3, r3, #24
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d00c      	beq.n	8001a82 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001a68:	4b44      	ldr	r3, [pc, #272]	; (8001b7c <HAL_ADC_Init+0x344>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a44      	ldr	r2, [pc, #272]	; (8001b80 <HAL_ADC_Init+0x348>)
 8001a6e:	4013      	ands	r3, r2
 8001a70:	0019      	movs	r1, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	23f0      	movs	r3, #240	; 0xf0
 8001a78:	039b      	lsls	r3, r3, #14
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	4b3f      	ldr	r3, [pc, #252]	; (8001b7c <HAL_ADC_Init+0x344>)
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6818      	ldr	r0, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a8a:	001a      	movs	r2, r3
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	f7ff fdf6 	bl	800167e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6818      	ldr	r0, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a9a:	493a      	ldr	r1, [pc, #232]	; (8001b84 <HAL_ADC_Init+0x34c>)
 8001a9c:	001a      	movs	r2, r3
 8001a9e:	f7ff fdee 	bl	800167e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	691b      	ldr	r3, [r3, #16]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d109      	bne.n	8001abe <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2110      	movs	r1, #16
 8001ab6:	4249      	negs	r1, r1
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	629a      	str	r2, [r3, #40]	; 0x28
 8001abc:	e018      	b.n	8001af0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	691a      	ldr	r2, [r3, #16]
 8001ac2:	2380      	movs	r3, #128	; 0x80
 8001ac4:	039b      	lsls	r3, r3, #14
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d112      	bne.n	8001af0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	69db      	ldr	r3, [r3, #28]
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	221c      	movs	r2, #28
 8001ada:	4013      	ands	r3, r2
 8001adc:	2210      	movs	r2, #16
 8001ade:	4252      	negs	r2, r2
 8001ae0:	409a      	lsls	r2, r3
 8001ae2:	0011      	movs	r1, r2
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2100      	movs	r1, #0
 8001af6:	0018      	movs	r0, r3
 8001af8:	f7ff fdde 	bl	80016b8 <LL_ADC_GetSamplingTimeCommonChannels>
 8001afc:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d10b      	bne.n	8001b1e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b10:	2203      	movs	r2, #3
 8001b12:	4393      	bics	r3, r2
 8001b14:	2201      	movs	r2, #1
 8001b16:	431a      	orrs	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001b1c:	e01c      	b.n	8001b58 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b22:	2212      	movs	r2, #18
 8001b24:	4393      	bics	r3, r2
 8001b26:	2210      	movs	r2, #16
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b32:	2201      	movs	r2, #1
 8001b34:	431a      	orrs	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001b3a:	231f      	movs	r3, #31
 8001b3c:	18fb      	adds	r3, r7, r3
 8001b3e:	2201      	movs	r2, #1
 8001b40:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001b42:	e009      	b.n	8001b58 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b48:	2210      	movs	r2, #16
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001b50:	231f      	movs	r3, #31
 8001b52:	18fb      	adds	r3, r7, r3
 8001b54:	2201      	movs	r2, #1
 8001b56:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001b58:	231f      	movs	r3, #31
 8001b5a:	18fb      	adds	r3, r7, r3
 8001b5c:	781b      	ldrb	r3, [r3, #0]
}
 8001b5e:	0018      	movs	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	b008      	add	sp, #32
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	46c0      	nop			; (mov r8, r8)
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	00030d40 	.word	0x00030d40
 8001b70:	fffffefd 	.word	0xfffffefd
 8001b74:	ffde0201 	.word	0xffde0201
 8001b78:	1ffffc02 	.word	0x1ffffc02
 8001b7c:	40012708 	.word	0x40012708
 8001b80:	ffc3ffff 	.word	0xffc3ffff
 8001b84:	07ffff04 	.word	0x07ffff04

08001b88 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b92:	2317      	movs	r3, #23
 8001b94:	18fb      	adds	r3, r7, r3
 8001b96:	2200      	movs	r2, #0
 8001b98:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2254      	movs	r2, #84	; 0x54
 8001ba2:	5c9b      	ldrb	r3, [r3, r2]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d101      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x24>
 8001ba8:	2302      	movs	r3, #2
 8001baa:	e1c0      	b.n	8001f2e <HAL_ADC_ConfigChannel+0x3a6>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2254      	movs	r2, #84	; 0x54
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f7ff fe2c 	bl	8001816 <LL_ADC_REG_IsConversionOngoing>
 8001bbe:	1e03      	subs	r3, r0, #0
 8001bc0:	d000      	beq.n	8001bc4 <HAL_ADC_ConfigChannel+0x3c>
 8001bc2:	e1a3      	b.n	8001f0c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d100      	bne.n	8001bce <HAL_ADC_ConfigChannel+0x46>
 8001bcc:	e143      	b.n	8001e56 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691a      	ldr	r2, [r3, #16]
 8001bd2:	2380      	movs	r3, #128	; 0x80
 8001bd4:	061b      	lsls	r3, r3, #24
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d004      	beq.n	8001be4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001bde:	4ac1      	ldr	r2, [pc, #772]	; (8001ee4 <HAL_ADC_ConfigChannel+0x35c>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d108      	bne.n	8001bf6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	0019      	movs	r1, r3
 8001bee:	0010      	movs	r0, r2
 8001bf0:	f7ff fd99 	bl	8001726 <LL_ADC_REG_SetSequencerChAdd>
 8001bf4:	e0c9      	b.n	8001d8a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	211f      	movs	r1, #31
 8001c00:	400b      	ands	r3, r1
 8001c02:	210f      	movs	r1, #15
 8001c04:	4099      	lsls	r1, r3
 8001c06:	000b      	movs	r3, r1
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	0019      	movs	r1, r3
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	035b      	lsls	r3, r3, #13
 8001c14:	0b5b      	lsrs	r3, r3, #13
 8001c16:	d105      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x9c>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	0e9b      	lsrs	r3, r3, #26
 8001c1e:	221f      	movs	r2, #31
 8001c20:	4013      	ands	r3, r2
 8001c22:	e098      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x1ce>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	d000      	beq.n	8001c30 <HAL_ADC_ConfigChannel+0xa8>
 8001c2e:	e091      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x1cc>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2202      	movs	r2, #2
 8001c36:	4013      	ands	r3, r2
 8001c38:	d000      	beq.n	8001c3c <HAL_ADC_ConfigChannel+0xb4>
 8001c3a:	e089      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x1c8>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2204      	movs	r2, #4
 8001c42:	4013      	ands	r3, r2
 8001c44:	d000      	beq.n	8001c48 <HAL_ADC_ConfigChannel+0xc0>
 8001c46:	e081      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x1c4>
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2208      	movs	r2, #8
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d000      	beq.n	8001c54 <HAL_ADC_ConfigChannel+0xcc>
 8001c52:	e079      	b.n	8001d48 <HAL_ADC_ConfigChannel+0x1c0>
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2210      	movs	r2, #16
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d000      	beq.n	8001c60 <HAL_ADC_ConfigChannel+0xd8>
 8001c5e:	e071      	b.n	8001d44 <HAL_ADC_ConfigChannel+0x1bc>
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2220      	movs	r2, #32
 8001c66:	4013      	ands	r3, r2
 8001c68:	d000      	beq.n	8001c6c <HAL_ADC_ConfigChannel+0xe4>
 8001c6a:	e069      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x1b8>
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2240      	movs	r2, #64	; 0x40
 8001c72:	4013      	ands	r3, r2
 8001c74:	d000      	beq.n	8001c78 <HAL_ADC_ConfigChannel+0xf0>
 8001c76:	e061      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x1b4>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2280      	movs	r2, #128	; 0x80
 8001c7e:	4013      	ands	r3, r2
 8001c80:	d000      	beq.n	8001c84 <HAL_ADC_ConfigChannel+0xfc>
 8001c82:	e059      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x1b0>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d151      	bne.n	8001d34 <HAL_ADC_ConfigChannel+0x1ac>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	2380      	movs	r3, #128	; 0x80
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d149      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x1a8>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	2380      	movs	r3, #128	; 0x80
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d141      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x1a4>
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	2380      	movs	r3, #128	; 0x80
 8001cae:	011b      	lsls	r3, r3, #4
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d139      	bne.n	8001d28 <HAL_ADC_ConfigChannel+0x1a0>
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	015b      	lsls	r3, r3, #5
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d131      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x19c>
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	2380      	movs	r3, #128	; 0x80
 8001cc6:	019b      	lsls	r3, r3, #6
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d129      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x198>
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	2380      	movs	r3, #128	; 0x80
 8001cd2:	01db      	lsls	r3, r3, #7
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d121      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x194>
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	2380      	movs	r3, #128	; 0x80
 8001cde:	021b      	lsls	r3, r3, #8
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	d119      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x190>
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	025b      	lsls	r3, r3, #9
 8001cec:	4013      	ands	r3, r2
 8001cee:	d111      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x18c>
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	2380      	movs	r3, #128	; 0x80
 8001cf6:	029b      	lsls	r3, r3, #10
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d109      	bne.n	8001d10 <HAL_ADC_ConfigChannel+0x188>
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	2380      	movs	r3, #128	; 0x80
 8001d02:	02db      	lsls	r3, r3, #11
 8001d04:	4013      	ands	r3, r2
 8001d06:	d001      	beq.n	8001d0c <HAL_ADC_ConfigChannel+0x184>
 8001d08:	2312      	movs	r3, #18
 8001d0a:	e024      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x1ce>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	e022      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x1ce>
 8001d10:	2311      	movs	r3, #17
 8001d12:	e020      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x1ce>
 8001d14:	2310      	movs	r3, #16
 8001d16:	e01e      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x1ce>
 8001d18:	230f      	movs	r3, #15
 8001d1a:	e01c      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x1ce>
 8001d1c:	230e      	movs	r3, #14
 8001d1e:	e01a      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x1ce>
 8001d20:	230d      	movs	r3, #13
 8001d22:	e018      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x1ce>
 8001d24:	230c      	movs	r3, #12
 8001d26:	e016      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x1ce>
 8001d28:	230b      	movs	r3, #11
 8001d2a:	e014      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x1ce>
 8001d2c:	230a      	movs	r3, #10
 8001d2e:	e012      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x1ce>
 8001d30:	2309      	movs	r3, #9
 8001d32:	e010      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x1ce>
 8001d34:	2308      	movs	r3, #8
 8001d36:	e00e      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x1ce>
 8001d38:	2307      	movs	r3, #7
 8001d3a:	e00c      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x1ce>
 8001d3c:	2306      	movs	r3, #6
 8001d3e:	e00a      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x1ce>
 8001d40:	2305      	movs	r3, #5
 8001d42:	e008      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x1ce>
 8001d44:	2304      	movs	r3, #4
 8001d46:	e006      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x1ce>
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e004      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x1ce>
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	e002      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x1ce>
 8001d50:	2301      	movs	r3, #1
 8001d52:	e000      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x1ce>
 8001d54:	2300      	movs	r3, #0
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	6852      	ldr	r2, [r2, #4]
 8001d5a:	201f      	movs	r0, #31
 8001d5c:	4002      	ands	r2, r0
 8001d5e:	4093      	lsls	r3, r2
 8001d60:	000a      	movs	r2, r1
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	089b      	lsrs	r3, r3, #2
 8001d6e:	1c5a      	adds	r2, r3, #1
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	69db      	ldr	r3, [r3, #28]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d808      	bhi.n	8001d8a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6818      	ldr	r0, [r3, #0]
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	6859      	ldr	r1, [r3, #4]
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	001a      	movs	r2, r3
 8001d86:	f7ff fcae 	bl	80016e6 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6818      	ldr	r0, [r3, #0]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	6819      	ldr	r1, [r3, #0]
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	001a      	movs	r2, r3
 8001d98:	f7ff fce8 	bl	800176c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	db00      	blt.n	8001da6 <HAL_ADC_ConfigChannel+0x21e>
 8001da4:	e0bc      	b.n	8001f20 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001da6:	4b50      	ldr	r3, [pc, #320]	; (8001ee8 <HAL_ADC_ConfigChannel+0x360>)
 8001da8:	0018      	movs	r0, r3
 8001daa:	f7ff fc5b 	bl	8001664 <LL_ADC_GetCommonPathInternalCh>
 8001dae:	0003      	movs	r3, r0
 8001db0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a4d      	ldr	r2, [pc, #308]	; (8001eec <HAL_ADC_ConfigChannel+0x364>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d122      	bne.n	8001e02 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	2380      	movs	r3, #128	; 0x80
 8001dc0:	041b      	lsls	r3, r3, #16
 8001dc2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001dc4:	d11d      	bne.n	8001e02 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	2280      	movs	r2, #128	; 0x80
 8001dca:	0412      	lsls	r2, r2, #16
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	4a46      	ldr	r2, [pc, #280]	; (8001ee8 <HAL_ADC_ConfigChannel+0x360>)
 8001dd0:	0019      	movs	r1, r3
 8001dd2:	0010      	movs	r0, r2
 8001dd4:	f7ff fc32 	bl	800163c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001dd8:	4b45      	ldr	r3, [pc, #276]	; (8001ef0 <HAL_ADC_ConfigChannel+0x368>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4945      	ldr	r1, [pc, #276]	; (8001ef4 <HAL_ADC_ConfigChannel+0x36c>)
 8001dde:	0018      	movs	r0, r3
 8001de0:	f7fe f9a2 	bl	8000128 <__udivsi3>
 8001de4:	0003      	movs	r3, r0
 8001de6:	1c5a      	adds	r2, r3, #1
 8001de8:	0013      	movs	r3, r2
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	189b      	adds	r3, r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001df2:	e002      	b.n	8001dfa <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1f9      	bne.n	8001df4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e00:	e08e      	b.n	8001f20 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a3c      	ldr	r2, [pc, #240]	; (8001ef8 <HAL_ADC_ConfigChannel+0x370>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d10e      	bne.n	8001e2a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	2380      	movs	r3, #128	; 0x80
 8001e10:	045b      	lsls	r3, r3, #17
 8001e12:	4013      	ands	r3, r2
 8001e14:	d109      	bne.n	8001e2a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	2280      	movs	r2, #128	; 0x80
 8001e1a:	0452      	lsls	r2, r2, #17
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	4a32      	ldr	r2, [pc, #200]	; (8001ee8 <HAL_ADC_ConfigChannel+0x360>)
 8001e20:	0019      	movs	r1, r3
 8001e22:	0010      	movs	r0, r2
 8001e24:	f7ff fc0a 	bl	800163c <LL_ADC_SetCommonPathInternalCh>
 8001e28:	e07a      	b.n	8001f20 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a33      	ldr	r2, [pc, #204]	; (8001efc <HAL_ADC_ConfigChannel+0x374>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d000      	beq.n	8001e36 <HAL_ADC_ConfigChannel+0x2ae>
 8001e34:	e074      	b.n	8001f20 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	2380      	movs	r3, #128	; 0x80
 8001e3a:	03db      	lsls	r3, r3, #15
 8001e3c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001e3e:	d000      	beq.n	8001e42 <HAL_ADC_ConfigChannel+0x2ba>
 8001e40:	e06e      	b.n	8001f20 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	2280      	movs	r2, #128	; 0x80
 8001e46:	03d2      	lsls	r2, r2, #15
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	4a27      	ldr	r2, [pc, #156]	; (8001ee8 <HAL_ADC_ConfigChannel+0x360>)
 8001e4c:	0019      	movs	r1, r3
 8001e4e:	0010      	movs	r0, r2
 8001e50:	f7ff fbf4 	bl	800163c <LL_ADC_SetCommonPathInternalCh>
 8001e54:	e064      	b.n	8001f20 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	691a      	ldr	r2, [r3, #16]
 8001e5a:	2380      	movs	r3, #128	; 0x80
 8001e5c:	061b      	lsls	r3, r3, #24
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d004      	beq.n	8001e6c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001e66:	4a1f      	ldr	r2, [pc, #124]	; (8001ee4 <HAL_ADC_ConfigChannel+0x35c>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d107      	bne.n	8001e7c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	0019      	movs	r1, r3
 8001e76:	0010      	movs	r0, r2
 8001e78:	f7ff fc66 	bl	8001748 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	da4d      	bge.n	8001f20 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e84:	4b18      	ldr	r3, [pc, #96]	; (8001ee8 <HAL_ADC_ConfigChannel+0x360>)
 8001e86:	0018      	movs	r0, r3
 8001e88:	f7ff fbec 	bl	8001664 <LL_ADC_GetCommonPathInternalCh>
 8001e8c:	0003      	movs	r3, r0
 8001e8e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a15      	ldr	r2, [pc, #84]	; (8001eec <HAL_ADC_ConfigChannel+0x364>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d108      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	4a18      	ldr	r2, [pc, #96]	; (8001f00 <HAL_ADC_ConfigChannel+0x378>)
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	4a11      	ldr	r2, [pc, #68]	; (8001ee8 <HAL_ADC_ConfigChannel+0x360>)
 8001ea2:	0019      	movs	r1, r3
 8001ea4:	0010      	movs	r0, r2
 8001ea6:	f7ff fbc9 	bl	800163c <LL_ADC_SetCommonPathInternalCh>
 8001eaa:	e039      	b.n	8001f20 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a11      	ldr	r2, [pc, #68]	; (8001ef8 <HAL_ADC_ConfigChannel+0x370>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d108      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	4a12      	ldr	r2, [pc, #72]	; (8001f04 <HAL_ADC_ConfigChannel+0x37c>)
 8001eba:	4013      	ands	r3, r2
 8001ebc:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <HAL_ADC_ConfigChannel+0x360>)
 8001ebe:	0019      	movs	r1, r3
 8001ec0:	0010      	movs	r0, r2
 8001ec2:	f7ff fbbb 	bl	800163c <LL_ADC_SetCommonPathInternalCh>
 8001ec6:	e02b      	b.n	8001f20 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a0b      	ldr	r2, [pc, #44]	; (8001efc <HAL_ADC_ConfigChannel+0x374>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d126      	bne.n	8001f20 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	4a0c      	ldr	r2, [pc, #48]	; (8001f08 <HAL_ADC_ConfigChannel+0x380>)
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	4a03      	ldr	r2, [pc, #12]	; (8001ee8 <HAL_ADC_ConfigChannel+0x360>)
 8001eda:	0019      	movs	r1, r3
 8001edc:	0010      	movs	r0, r2
 8001ede:	f7ff fbad 	bl	800163c <LL_ADC_SetCommonPathInternalCh>
 8001ee2:	e01d      	b.n	8001f20 <HAL_ADC_ConfigChannel+0x398>
 8001ee4:	80000004 	.word	0x80000004
 8001ee8:	40012708 	.word	0x40012708
 8001eec:	b0001000 	.word	0xb0001000
 8001ef0:	20000000 	.word	0x20000000
 8001ef4:	00030d40 	.word	0x00030d40
 8001ef8:	b8004000 	.word	0xb8004000
 8001efc:	b4002000 	.word	0xb4002000
 8001f00:	ff7fffff 	.word	0xff7fffff
 8001f04:	feffffff 	.word	0xfeffffff
 8001f08:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f10:	2220      	movs	r2, #32
 8001f12:	431a      	orrs	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f18:	2317      	movs	r3, #23
 8001f1a:	18fb      	adds	r3, r7, r3
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2254      	movs	r2, #84	; 0x54
 8001f24:	2100      	movs	r1, #0
 8001f26:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001f28:	2317      	movs	r3, #23
 8001f2a:	18fb      	adds	r3, r7, r3
 8001f2c:	781b      	ldrb	r3, [r3, #0]
}
 8001f2e:	0018      	movs	r0, r3
 8001f30:	46bd      	mov	sp, r7
 8001f32:	b006      	add	sp, #24
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	46c0      	nop			; (mov r8, r8)

08001f38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	0002      	movs	r2, r0
 8001f40:	1dfb      	adds	r3, r7, #7
 8001f42:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f44:	1dfb      	adds	r3, r7, #7
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b7f      	cmp	r3, #127	; 0x7f
 8001f4a:	d809      	bhi.n	8001f60 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f4c:	1dfb      	adds	r3, r7, #7
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	001a      	movs	r2, r3
 8001f52:	231f      	movs	r3, #31
 8001f54:	401a      	ands	r2, r3
 8001f56:	4b04      	ldr	r3, [pc, #16]	; (8001f68 <__NVIC_EnableIRQ+0x30>)
 8001f58:	2101      	movs	r1, #1
 8001f5a:	4091      	lsls	r1, r2
 8001f5c:	000a      	movs	r2, r1
 8001f5e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001f60:	46c0      	nop			; (mov r8, r8)
 8001f62:	46bd      	mov	sp, r7
 8001f64:	b002      	add	sp, #8
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	e000e100 	.word	0xe000e100

08001f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f6c:	b590      	push	{r4, r7, lr}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	0002      	movs	r2, r0
 8001f74:	6039      	str	r1, [r7, #0]
 8001f76:	1dfb      	adds	r3, r7, #7
 8001f78:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f7a:	1dfb      	adds	r3, r7, #7
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b7f      	cmp	r3, #127	; 0x7f
 8001f80:	d828      	bhi.n	8001fd4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f82:	4a2f      	ldr	r2, [pc, #188]	; (8002040 <__NVIC_SetPriority+0xd4>)
 8001f84:	1dfb      	adds	r3, r7, #7
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	b25b      	sxtb	r3, r3
 8001f8a:	089b      	lsrs	r3, r3, #2
 8001f8c:	33c0      	adds	r3, #192	; 0xc0
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	589b      	ldr	r3, [r3, r2]
 8001f92:	1dfa      	adds	r2, r7, #7
 8001f94:	7812      	ldrb	r2, [r2, #0]
 8001f96:	0011      	movs	r1, r2
 8001f98:	2203      	movs	r2, #3
 8001f9a:	400a      	ands	r2, r1
 8001f9c:	00d2      	lsls	r2, r2, #3
 8001f9e:	21ff      	movs	r1, #255	; 0xff
 8001fa0:	4091      	lsls	r1, r2
 8001fa2:	000a      	movs	r2, r1
 8001fa4:	43d2      	mvns	r2, r2
 8001fa6:	401a      	ands	r2, r3
 8001fa8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	019b      	lsls	r3, r3, #6
 8001fae:	22ff      	movs	r2, #255	; 0xff
 8001fb0:	401a      	ands	r2, r3
 8001fb2:	1dfb      	adds	r3, r7, #7
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	0018      	movs	r0, r3
 8001fb8:	2303      	movs	r3, #3
 8001fba:	4003      	ands	r3, r0
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fc0:	481f      	ldr	r0, [pc, #124]	; (8002040 <__NVIC_SetPriority+0xd4>)
 8001fc2:	1dfb      	adds	r3, r7, #7
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	b25b      	sxtb	r3, r3
 8001fc8:	089b      	lsrs	r3, r3, #2
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	33c0      	adds	r3, #192	; 0xc0
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001fd2:	e031      	b.n	8002038 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fd4:	4a1b      	ldr	r2, [pc, #108]	; (8002044 <__NVIC_SetPriority+0xd8>)
 8001fd6:	1dfb      	adds	r3, r7, #7
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	0019      	movs	r1, r3
 8001fdc:	230f      	movs	r3, #15
 8001fde:	400b      	ands	r3, r1
 8001fe0:	3b08      	subs	r3, #8
 8001fe2:	089b      	lsrs	r3, r3, #2
 8001fe4:	3306      	adds	r3, #6
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	18d3      	adds	r3, r2, r3
 8001fea:	3304      	adds	r3, #4
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	1dfa      	adds	r2, r7, #7
 8001ff0:	7812      	ldrb	r2, [r2, #0]
 8001ff2:	0011      	movs	r1, r2
 8001ff4:	2203      	movs	r2, #3
 8001ff6:	400a      	ands	r2, r1
 8001ff8:	00d2      	lsls	r2, r2, #3
 8001ffa:	21ff      	movs	r1, #255	; 0xff
 8001ffc:	4091      	lsls	r1, r2
 8001ffe:	000a      	movs	r2, r1
 8002000:	43d2      	mvns	r2, r2
 8002002:	401a      	ands	r2, r3
 8002004:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	019b      	lsls	r3, r3, #6
 800200a:	22ff      	movs	r2, #255	; 0xff
 800200c:	401a      	ands	r2, r3
 800200e:	1dfb      	adds	r3, r7, #7
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	0018      	movs	r0, r3
 8002014:	2303      	movs	r3, #3
 8002016:	4003      	ands	r3, r0
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800201c:	4809      	ldr	r0, [pc, #36]	; (8002044 <__NVIC_SetPriority+0xd8>)
 800201e:	1dfb      	adds	r3, r7, #7
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	001c      	movs	r4, r3
 8002024:	230f      	movs	r3, #15
 8002026:	4023      	ands	r3, r4
 8002028:	3b08      	subs	r3, #8
 800202a:	089b      	lsrs	r3, r3, #2
 800202c:	430a      	orrs	r2, r1
 800202e:	3306      	adds	r3, #6
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	18c3      	adds	r3, r0, r3
 8002034:	3304      	adds	r3, #4
 8002036:	601a      	str	r2, [r3, #0]
}
 8002038:	46c0      	nop			; (mov r8, r8)
 800203a:	46bd      	mov	sp, r7
 800203c:	b003      	add	sp, #12
 800203e:	bd90      	pop	{r4, r7, pc}
 8002040:	e000e100 	.word	0xe000e100
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	1e5a      	subs	r2, r3, #1
 8002054:	2380      	movs	r3, #128	; 0x80
 8002056:	045b      	lsls	r3, r3, #17
 8002058:	429a      	cmp	r2, r3
 800205a:	d301      	bcc.n	8002060 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800205c:	2301      	movs	r3, #1
 800205e:	e010      	b.n	8002082 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002060:	4b0a      	ldr	r3, [pc, #40]	; (800208c <SysTick_Config+0x44>)
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	3a01      	subs	r2, #1
 8002066:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002068:	2301      	movs	r3, #1
 800206a:	425b      	negs	r3, r3
 800206c:	2103      	movs	r1, #3
 800206e:	0018      	movs	r0, r3
 8002070:	f7ff ff7c 	bl	8001f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002074:	4b05      	ldr	r3, [pc, #20]	; (800208c <SysTick_Config+0x44>)
 8002076:	2200      	movs	r2, #0
 8002078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800207a:	4b04      	ldr	r3, [pc, #16]	; (800208c <SysTick_Config+0x44>)
 800207c:	2207      	movs	r2, #7
 800207e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002080:	2300      	movs	r3, #0
}
 8002082:	0018      	movs	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	b002      	add	sp, #8
 8002088:	bd80      	pop	{r7, pc}
 800208a:	46c0      	nop			; (mov r8, r8)
 800208c:	e000e010 	.word	0xe000e010

08002090 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607a      	str	r2, [r7, #4]
 800209a:	210f      	movs	r1, #15
 800209c:	187b      	adds	r3, r7, r1
 800209e:	1c02      	adds	r2, r0, #0
 80020a0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	187b      	adds	r3, r7, r1
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	b25b      	sxtb	r3, r3
 80020aa:	0011      	movs	r1, r2
 80020ac:	0018      	movs	r0, r3
 80020ae:	f7ff ff5d 	bl	8001f6c <__NVIC_SetPriority>
}
 80020b2:	46c0      	nop			; (mov r8, r8)
 80020b4:	46bd      	mov	sp, r7
 80020b6:	b004      	add	sp, #16
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b082      	sub	sp, #8
 80020be:	af00      	add	r7, sp, #0
 80020c0:	0002      	movs	r2, r0
 80020c2:	1dfb      	adds	r3, r7, #7
 80020c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020c6:	1dfb      	adds	r3, r7, #7
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	b25b      	sxtb	r3, r3
 80020cc:	0018      	movs	r0, r3
 80020ce:	f7ff ff33 	bl	8001f38 <__NVIC_EnableIRQ>
}
 80020d2:	46c0      	nop			; (mov r8, r8)
 80020d4:	46bd      	mov	sp, r7
 80020d6:	b002      	add	sp, #8
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	0018      	movs	r0, r3
 80020e6:	f7ff ffaf 	bl	8002048 <SysTick_Config>
 80020ea:	0003      	movs	r3, r0
}
 80020ec:	0018      	movs	r0, r3
 80020ee:	46bd      	mov	sp, r7
 80020f0:	b002      	add	sp, #8
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e050      	b.n	80021a8 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2225      	movs	r2, #37	; 0x25
 800210a:	5c9b      	ldrb	r3, [r3, r2]
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d008      	beq.n	8002124 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2204      	movs	r2, #4
 8002116:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2224      	movs	r2, #36	; 0x24
 800211c:	2100      	movs	r1, #0
 800211e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e041      	b.n	80021a8 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	210e      	movs	r1, #14
 8002130:	438a      	bics	r2, r1
 8002132:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	491c      	ldr	r1, [pc, #112]	; (80021b0 <HAL_DMA_Abort+0xbc>)
 8002140:	400a      	ands	r2, r1
 8002142:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2101      	movs	r1, #1
 8002150:	438a      	bics	r2, r1
 8002152:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8002154:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <HAL_DMA_Abort+0xc0>)
 8002156:	6859      	ldr	r1, [r3, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	221c      	movs	r2, #28
 800215e:	4013      	ands	r3, r2
 8002160:	2201      	movs	r2, #1
 8002162:	409a      	lsls	r2, r3
 8002164:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <HAL_DMA_Abort+0xc0>)
 8002166:	430a      	orrs	r2, r1
 8002168:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002172:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00c      	beq.n	8002196 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002186:	490a      	ldr	r1, [pc, #40]	; (80021b0 <HAL_DMA_Abort+0xbc>)
 8002188:	400a      	ands	r2, r1
 800218a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002194:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2225      	movs	r2, #37	; 0x25
 800219a:	2101      	movs	r1, #1
 800219c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2224      	movs	r2, #36	; 0x24
 80021a2:	2100      	movs	r1, #0
 80021a4:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	0018      	movs	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	b002      	add	sp, #8
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	fffffeff 	.word	0xfffffeff
 80021b4:	40020000 	.word	0x40020000

080021b8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021c0:	210f      	movs	r1, #15
 80021c2:	187b      	adds	r3, r7, r1
 80021c4:	2200      	movs	r2, #0
 80021c6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2225      	movs	r2, #37	; 0x25
 80021cc:	5c9b      	ldrb	r3, [r3, r2]
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d006      	beq.n	80021e2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2204      	movs	r2, #4
 80021d8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80021da:	187b      	adds	r3, r7, r1
 80021dc:	2201      	movs	r2, #1
 80021de:	701a      	strb	r2, [r3, #0]
 80021e0:	e049      	b.n	8002276 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	210e      	movs	r1, #14
 80021ee:	438a      	bics	r2, r1
 80021f0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2101      	movs	r1, #1
 80021fe:	438a      	bics	r2, r1
 8002200:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220c:	491d      	ldr	r1, [pc, #116]	; (8002284 <HAL_DMA_Abort_IT+0xcc>)
 800220e:	400a      	ands	r2, r1
 8002210:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002212:	4b1d      	ldr	r3, [pc, #116]	; (8002288 <HAL_DMA_Abort_IT+0xd0>)
 8002214:	6859      	ldr	r1, [r3, #4]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	221c      	movs	r2, #28
 800221c:	4013      	ands	r3, r2
 800221e:	2201      	movs	r2, #1
 8002220:	409a      	lsls	r2, r3
 8002222:	4b19      	ldr	r3, [pc, #100]	; (8002288 <HAL_DMA_Abort_IT+0xd0>)
 8002224:	430a      	orrs	r2, r1
 8002226:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002230:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00c      	beq.n	8002254 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002244:	490f      	ldr	r1, [pc, #60]	; (8002284 <HAL_DMA_Abort_IT+0xcc>)
 8002246:	400a      	ands	r2, r1
 8002248:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002252:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2225      	movs	r2, #37	; 0x25
 8002258:	2101      	movs	r1, #1
 800225a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2224      	movs	r2, #36	; 0x24
 8002260:	2100      	movs	r1, #0
 8002262:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002268:	2b00      	cmp	r3, #0
 800226a:	d004      	beq.n	8002276 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	0010      	movs	r0, r2
 8002274:	4798      	blx	r3
    }
  }
  return status;
 8002276:	230f      	movs	r3, #15
 8002278:	18fb      	adds	r3, r7, r3
 800227a:	781b      	ldrb	r3, [r3, #0]
}
 800227c:	0018      	movs	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	b004      	add	sp, #16
 8002282:	bd80      	pop	{r7, pc}
 8002284:	fffffeff 	.word	0xfffffeff
 8002288:	40020000 	.word	0x40020000

0800228c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800229a:	e147      	b.n	800252c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2101      	movs	r1, #1
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	4091      	lsls	r1, r2
 80022a6:	000a      	movs	r2, r1
 80022a8:	4013      	ands	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d100      	bne.n	80022b4 <HAL_GPIO_Init+0x28>
 80022b2:	e138      	b.n	8002526 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2203      	movs	r2, #3
 80022ba:	4013      	ands	r3, r2
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d005      	beq.n	80022cc <HAL_GPIO_Init+0x40>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2203      	movs	r2, #3
 80022c6:	4013      	ands	r3, r2
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d130      	bne.n	800232e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	2203      	movs	r2, #3
 80022d8:	409a      	lsls	r2, r3
 80022da:	0013      	movs	r3, r2
 80022dc:	43da      	mvns	r2, r3
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4013      	ands	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	409a      	lsls	r2, r3
 80022ee:	0013      	movs	r3, r2
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002302:	2201      	movs	r2, #1
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	409a      	lsls	r2, r3
 8002308:	0013      	movs	r3, r2
 800230a:	43da      	mvns	r2, r3
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4013      	ands	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	091b      	lsrs	r3, r3, #4
 8002318:	2201      	movs	r2, #1
 800231a:	401a      	ands	r2, r3
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	409a      	lsls	r2, r3
 8002320:	0013      	movs	r3, r2
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	4313      	orrs	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2203      	movs	r2, #3
 8002334:	4013      	ands	r3, r2
 8002336:	2b03      	cmp	r3, #3
 8002338:	d017      	beq.n	800236a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	2203      	movs	r2, #3
 8002346:	409a      	lsls	r2, r3
 8002348:	0013      	movs	r3, r2
 800234a:	43da      	mvns	r2, r3
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	4013      	ands	r3, r2
 8002350:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	409a      	lsls	r2, r3
 800235c:	0013      	movs	r3, r2
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2203      	movs	r2, #3
 8002370:	4013      	ands	r3, r2
 8002372:	2b02      	cmp	r3, #2
 8002374:	d123      	bne.n	80023be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	08da      	lsrs	r2, r3, #3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3208      	adds	r2, #8
 800237e:	0092      	lsls	r2, r2, #2
 8002380:	58d3      	ldr	r3, [r2, r3]
 8002382:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	2207      	movs	r2, #7
 8002388:	4013      	ands	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	220f      	movs	r2, #15
 800238e:	409a      	lsls	r2, r3
 8002390:	0013      	movs	r3, r2
 8002392:	43da      	mvns	r2, r3
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	4013      	ands	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	691a      	ldr	r2, [r3, #16]
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	2107      	movs	r1, #7
 80023a2:	400b      	ands	r3, r1
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	409a      	lsls	r2, r3
 80023a8:	0013      	movs	r3, r2
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	08da      	lsrs	r2, r3, #3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3208      	adds	r2, #8
 80023b8:	0092      	lsls	r2, r2, #2
 80023ba:	6939      	ldr	r1, [r7, #16]
 80023bc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	2203      	movs	r2, #3
 80023ca:	409a      	lsls	r2, r3
 80023cc:	0013      	movs	r3, r2
 80023ce:	43da      	mvns	r2, r3
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	4013      	ands	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2203      	movs	r2, #3
 80023dc:	401a      	ands	r2, r3
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	409a      	lsls	r2, r3
 80023e4:	0013      	movs	r3, r2
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	23c0      	movs	r3, #192	; 0xc0
 80023f8:	029b      	lsls	r3, r3, #10
 80023fa:	4013      	ands	r3, r2
 80023fc:	d100      	bne.n	8002400 <HAL_GPIO_Init+0x174>
 80023fe:	e092      	b.n	8002526 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002400:	4a50      	ldr	r2, [pc, #320]	; (8002544 <HAL_GPIO_Init+0x2b8>)
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	089b      	lsrs	r3, r3, #2
 8002406:	3318      	adds	r3, #24
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	589b      	ldr	r3, [r3, r2]
 800240c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	2203      	movs	r2, #3
 8002412:	4013      	ands	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	220f      	movs	r2, #15
 8002418:	409a      	lsls	r2, r3
 800241a:	0013      	movs	r3, r2
 800241c:	43da      	mvns	r2, r3
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	4013      	ands	r3, r2
 8002422:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	23a0      	movs	r3, #160	; 0xa0
 8002428:	05db      	lsls	r3, r3, #23
 800242a:	429a      	cmp	r2, r3
 800242c:	d013      	beq.n	8002456 <HAL_GPIO_Init+0x1ca>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a45      	ldr	r2, [pc, #276]	; (8002548 <HAL_GPIO_Init+0x2bc>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d00d      	beq.n	8002452 <HAL_GPIO_Init+0x1c6>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a44      	ldr	r2, [pc, #272]	; (800254c <HAL_GPIO_Init+0x2c0>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d007      	beq.n	800244e <HAL_GPIO_Init+0x1c2>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a43      	ldr	r2, [pc, #268]	; (8002550 <HAL_GPIO_Init+0x2c4>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d101      	bne.n	800244a <HAL_GPIO_Init+0x1be>
 8002446:	2303      	movs	r3, #3
 8002448:	e006      	b.n	8002458 <HAL_GPIO_Init+0x1cc>
 800244a:	2305      	movs	r3, #5
 800244c:	e004      	b.n	8002458 <HAL_GPIO_Init+0x1cc>
 800244e:	2302      	movs	r3, #2
 8002450:	e002      	b.n	8002458 <HAL_GPIO_Init+0x1cc>
 8002452:	2301      	movs	r3, #1
 8002454:	e000      	b.n	8002458 <HAL_GPIO_Init+0x1cc>
 8002456:	2300      	movs	r3, #0
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	2103      	movs	r1, #3
 800245c:	400a      	ands	r2, r1
 800245e:	00d2      	lsls	r2, r2, #3
 8002460:	4093      	lsls	r3, r2
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4313      	orrs	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002468:	4936      	ldr	r1, [pc, #216]	; (8002544 <HAL_GPIO_Init+0x2b8>)
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	089b      	lsrs	r3, r3, #2
 800246e:	3318      	adds	r3, #24
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002476:	4b33      	ldr	r3, [pc, #204]	; (8002544 <HAL_GPIO_Init+0x2b8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	43da      	mvns	r2, r3
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	4013      	ands	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	2380      	movs	r3, #128	; 0x80
 800248c:	035b      	lsls	r3, r3, #13
 800248e:	4013      	ands	r3, r2
 8002490:	d003      	beq.n	800249a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4313      	orrs	r3, r2
 8002498:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800249a:	4b2a      	ldr	r3, [pc, #168]	; (8002544 <HAL_GPIO_Init+0x2b8>)
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80024a0:	4b28      	ldr	r3, [pc, #160]	; (8002544 <HAL_GPIO_Init+0x2b8>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	43da      	mvns	r2, r3
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4013      	ands	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	2380      	movs	r3, #128	; 0x80
 80024b6:	039b      	lsls	r3, r3, #14
 80024b8:	4013      	ands	r3, r2
 80024ba:	d003      	beq.n	80024c4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024c4:	4b1f      	ldr	r3, [pc, #124]	; (8002544 <HAL_GPIO_Init+0x2b8>)
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024ca:	4a1e      	ldr	r2, [pc, #120]	; (8002544 <HAL_GPIO_Init+0x2b8>)
 80024cc:	2384      	movs	r3, #132	; 0x84
 80024ce:	58d3      	ldr	r3, [r2, r3]
 80024d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	43da      	mvns	r2, r3
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	4013      	ands	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	2380      	movs	r3, #128	; 0x80
 80024e2:	029b      	lsls	r3, r3, #10
 80024e4:	4013      	ands	r3, r2
 80024e6:	d003      	beq.n	80024f0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024f0:	4914      	ldr	r1, [pc, #80]	; (8002544 <HAL_GPIO_Init+0x2b8>)
 80024f2:	2284      	movs	r2, #132	; 0x84
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80024f8:	4a12      	ldr	r2, [pc, #72]	; (8002544 <HAL_GPIO_Init+0x2b8>)
 80024fa:	2380      	movs	r3, #128	; 0x80
 80024fc:	58d3      	ldr	r3, [r2, r3]
 80024fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	43da      	mvns	r2, r3
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	4013      	ands	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	2380      	movs	r3, #128	; 0x80
 8002510:	025b      	lsls	r3, r3, #9
 8002512:	4013      	ands	r3, r2
 8002514:	d003      	beq.n	800251e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4313      	orrs	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800251e:	4909      	ldr	r1, [pc, #36]	; (8002544 <HAL_GPIO_Init+0x2b8>)
 8002520:	2280      	movs	r2, #128	; 0x80
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	3301      	adds	r3, #1
 800252a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	40da      	lsrs	r2, r3
 8002534:	1e13      	subs	r3, r2, #0
 8002536:	d000      	beq.n	800253a <HAL_GPIO_Init+0x2ae>
 8002538:	e6b0      	b.n	800229c <HAL_GPIO_Init+0x10>
  }
}
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	46c0      	nop			; (mov r8, r8)
 800253e:	46bd      	mov	sp, r7
 8002540:	b006      	add	sp, #24
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40021800 	.word	0x40021800
 8002548:	50000400 	.word	0x50000400
 800254c:	50000800 	.word	0x50000800
 8002550:	50000c00 	.word	0x50000c00

08002554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	0008      	movs	r0, r1
 800255e:	0011      	movs	r1, r2
 8002560:	1cbb      	adds	r3, r7, #2
 8002562:	1c02      	adds	r2, r0, #0
 8002564:	801a      	strh	r2, [r3, #0]
 8002566:	1c7b      	adds	r3, r7, #1
 8002568:	1c0a      	adds	r2, r1, #0
 800256a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800256c:	1c7b      	adds	r3, r7, #1
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d004      	beq.n	800257e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002574:	1cbb      	adds	r3, r7, #2
 8002576:	881a      	ldrh	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800257c:	e003      	b.n	8002586 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800257e:	1cbb      	adds	r3, r7, #2
 8002580:	881a      	ldrh	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	46bd      	mov	sp, r7
 800258a:	b002      	add	sp, #8
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b084      	sub	sp, #16
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
 8002596:	000a      	movs	r2, r1
 8002598:	1cbb      	adds	r3, r7, #2
 800259a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025a2:	1cbb      	adds	r3, r7, #2
 80025a4:	881b      	ldrh	r3, [r3, #0]
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	4013      	ands	r3, r2
 80025aa:	041a      	lsls	r2, r3, #16
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	43db      	mvns	r3, r3
 80025b0:	1cb9      	adds	r1, r7, #2
 80025b2:	8809      	ldrh	r1, [r1, #0]
 80025b4:	400b      	ands	r3, r1
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	619a      	str	r2, [r3, #24]
}
 80025bc:	46c0      	nop			; (mov r8, r8)
 80025be:	46bd      	mov	sp, r7
 80025c0:	b004      	add	sp, #16
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e08f      	b.n	80026f6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2241      	movs	r2, #65	; 0x41
 80025da:	5c9b      	ldrb	r3, [r3, r2]
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d107      	bne.n	80025f2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2240      	movs	r2, #64	; 0x40
 80025e6:	2100      	movs	r1, #0
 80025e8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	0018      	movs	r0, r3
 80025ee:	f7fe fd41 	bl	8001074 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2241      	movs	r2, #65	; 0x41
 80025f6:	2124      	movs	r1, #36	; 0x24
 80025f8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2101      	movs	r1, #1
 8002606:	438a      	bics	r2, r1
 8002608:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	493b      	ldr	r1, [pc, #236]	; (8002700 <HAL_I2C_Init+0x13c>)
 8002614:	400a      	ands	r2, r1
 8002616:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4938      	ldr	r1, [pc, #224]	; (8002704 <HAL_I2C_Init+0x140>)
 8002624:	400a      	ands	r2, r1
 8002626:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d108      	bne.n	8002642 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2180      	movs	r1, #128	; 0x80
 800263a:	0209      	lsls	r1, r1, #8
 800263c:	430a      	orrs	r2, r1
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	e007      	b.n	8002652 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2184      	movs	r1, #132	; 0x84
 800264c:	0209      	lsls	r1, r1, #8
 800264e:	430a      	orrs	r2, r1
 8002650:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	2b02      	cmp	r3, #2
 8002658:	d109      	bne.n	800266e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2180      	movs	r1, #128	; 0x80
 8002666:	0109      	lsls	r1, r1, #4
 8002668:	430a      	orrs	r2, r1
 800266a:	605a      	str	r2, [r3, #4]
 800266c:	e007      	b.n	800267e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4923      	ldr	r1, [pc, #140]	; (8002708 <HAL_I2C_Init+0x144>)
 800267a:	400a      	ands	r2, r1
 800267c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4920      	ldr	r1, [pc, #128]	; (800270c <HAL_I2C_Init+0x148>)
 800268a:	430a      	orrs	r2, r1
 800268c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68da      	ldr	r2, [r3, #12]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	491a      	ldr	r1, [pc, #104]	; (8002704 <HAL_I2C_Init+0x140>)
 800269a:	400a      	ands	r2, r1
 800269c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	691a      	ldr	r2, [r3, #16]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	431a      	orrs	r2, r3
 80026a8:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	430a      	orrs	r2, r1
 80026b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69d9      	ldr	r1, [r3, #28]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a1a      	ldr	r2, [r3, #32]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2101      	movs	r1, #1
 80026d4:	430a      	orrs	r2, r1
 80026d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2241      	movs	r2, #65	; 0x41
 80026e2:	2120      	movs	r1, #32
 80026e4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2242      	movs	r2, #66	; 0x42
 80026f0:	2100      	movs	r1, #0
 80026f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	0018      	movs	r0, r3
 80026f8:	46bd      	mov	sp, r7
 80026fa:	b002      	add	sp, #8
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	46c0      	nop			; (mov r8, r8)
 8002700:	f0ffffff 	.word	0xf0ffffff
 8002704:	ffff7fff 	.word	0xffff7fff
 8002708:	fffff7ff 	.word	0xfffff7ff
 800270c:	02008000 	.word	0x02008000

08002710 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002710:	b590      	push	{r4, r7, lr}
 8002712:	b089      	sub	sp, #36	; 0x24
 8002714:	af02      	add	r7, sp, #8
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	0008      	movs	r0, r1
 800271a:	607a      	str	r2, [r7, #4]
 800271c:	0019      	movs	r1, r3
 800271e:	230a      	movs	r3, #10
 8002720:	18fb      	adds	r3, r7, r3
 8002722:	1c02      	adds	r2, r0, #0
 8002724:	801a      	strh	r2, [r3, #0]
 8002726:	2308      	movs	r3, #8
 8002728:	18fb      	adds	r3, r7, r3
 800272a:	1c0a      	adds	r2, r1, #0
 800272c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2241      	movs	r2, #65	; 0x41
 8002732:	5c9b      	ldrb	r3, [r3, r2]
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b20      	cmp	r3, #32
 8002738:	d000      	beq.n	800273c <HAL_I2C_Master_Transmit+0x2c>
 800273a:	e10a      	b.n	8002952 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2240      	movs	r2, #64	; 0x40
 8002740:	5c9b      	ldrb	r3, [r3, r2]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d101      	bne.n	800274a <HAL_I2C_Master_Transmit+0x3a>
 8002746:	2302      	movs	r3, #2
 8002748:	e104      	b.n	8002954 <HAL_I2C_Master_Transmit+0x244>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2240      	movs	r2, #64	; 0x40
 800274e:	2101      	movs	r1, #1
 8002750:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002752:	f7fe ff2f 	bl	80015b4 <HAL_GetTick>
 8002756:	0003      	movs	r3, r0
 8002758:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800275a:	2380      	movs	r3, #128	; 0x80
 800275c:	0219      	lsls	r1, r3, #8
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	2319      	movs	r3, #25
 8002766:	2201      	movs	r2, #1
 8002768:	f000 fa1a 	bl	8002ba0 <I2C_WaitOnFlagUntilTimeout>
 800276c:	1e03      	subs	r3, r0, #0
 800276e:	d001      	beq.n	8002774 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e0ef      	b.n	8002954 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2241      	movs	r2, #65	; 0x41
 8002778:	2121      	movs	r1, #33	; 0x21
 800277a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2242      	movs	r2, #66	; 0x42
 8002780:	2110      	movs	r1, #16
 8002782:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2208      	movs	r2, #8
 8002794:	18ba      	adds	r2, r7, r2
 8002796:	8812      	ldrh	r2, [r2, #0]
 8002798:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	2bff      	cmp	r3, #255	; 0xff
 80027a8:	d906      	bls.n	80027b8 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	22ff      	movs	r2, #255	; 0xff
 80027ae:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80027b0:	2380      	movs	r3, #128	; 0x80
 80027b2:	045b      	lsls	r3, r3, #17
 80027b4:	617b      	str	r3, [r7, #20]
 80027b6:	e007      	b.n	80027c8 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027bc:	b29a      	uxth	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80027c2:	2380      	movs	r3, #128	; 0x80
 80027c4:	049b      	lsls	r3, r3, #18
 80027c6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d027      	beq.n	8002820 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	781a      	ldrb	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002804:	b2db      	uxtb	r3, r3
 8002806:	3301      	adds	r3, #1
 8002808:	b2da      	uxtb	r2, r3
 800280a:	697c      	ldr	r4, [r7, #20]
 800280c:	230a      	movs	r3, #10
 800280e:	18fb      	adds	r3, r7, r3
 8002810:	8819      	ldrh	r1, [r3, #0]
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	4b51      	ldr	r3, [pc, #324]	; (800295c <HAL_I2C_Master_Transmit+0x24c>)
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	0023      	movs	r3, r4
 800281a:	f000 fba3 	bl	8002f64 <I2C_TransferConfig>
 800281e:	e06f      	b.n	8002900 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002824:	b2da      	uxtb	r2, r3
 8002826:	697c      	ldr	r4, [r7, #20]
 8002828:	230a      	movs	r3, #10
 800282a:	18fb      	adds	r3, r7, r3
 800282c:	8819      	ldrh	r1, [r3, #0]
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	4b4a      	ldr	r3, [pc, #296]	; (800295c <HAL_I2C_Master_Transmit+0x24c>)
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	0023      	movs	r3, r4
 8002836:	f000 fb95 	bl	8002f64 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800283a:	e061      	b.n	8002900 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	0018      	movs	r0, r3
 8002844:	f000 fa04 	bl	8002c50 <I2C_WaitOnTXISFlagUntilTimeout>
 8002848:	1e03      	subs	r3, r0, #0
 800284a:	d001      	beq.n	8002850 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e081      	b.n	8002954 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	781a      	ldrb	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	1c5a      	adds	r2, r3, #1
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286a:	b29b      	uxth	r3, r3
 800286c:	3b01      	subs	r3, #1
 800286e:	b29a      	uxth	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002878:	3b01      	subs	r3, #1
 800287a:	b29a      	uxth	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002884:	b29b      	uxth	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d03a      	beq.n	8002900 <HAL_I2C_Master_Transmit+0x1f0>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288e:	2b00      	cmp	r3, #0
 8002890:	d136      	bne.n	8002900 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002892:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	0013      	movs	r3, r2
 800289c:	2200      	movs	r2, #0
 800289e:	2180      	movs	r1, #128	; 0x80
 80028a0:	f000 f97e 	bl	8002ba0 <I2C_WaitOnFlagUntilTimeout>
 80028a4:	1e03      	subs	r3, r0, #0
 80028a6:	d001      	beq.n	80028ac <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e053      	b.n	8002954 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	2bff      	cmp	r3, #255	; 0xff
 80028b4:	d911      	bls.n	80028da <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	22ff      	movs	r2, #255	; 0xff
 80028ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	2380      	movs	r3, #128	; 0x80
 80028c4:	045c      	lsls	r4, r3, #17
 80028c6:	230a      	movs	r3, #10
 80028c8:	18fb      	adds	r3, r7, r3
 80028ca:	8819      	ldrh	r1, [r3, #0]
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	2300      	movs	r3, #0
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	0023      	movs	r3, r4
 80028d4:	f000 fb46 	bl	8002f64 <I2C_TransferConfig>
 80028d8:	e012      	b.n	8002900 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028de:	b29a      	uxth	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	2380      	movs	r3, #128	; 0x80
 80028ec:	049c      	lsls	r4, r3, #18
 80028ee:	230a      	movs	r3, #10
 80028f0:	18fb      	adds	r3, r7, r3
 80028f2:	8819      	ldrh	r1, [r3, #0]
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	2300      	movs	r3, #0
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	0023      	movs	r3, r4
 80028fc:	f000 fb32 	bl	8002f64 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002904:	b29b      	uxth	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d198      	bne.n	800283c <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	0018      	movs	r0, r3
 8002912:	f000 f9e3 	bl	8002cdc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002916:	1e03      	subs	r3, r0, #0
 8002918:	d001      	beq.n	800291e <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e01a      	b.n	8002954 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2220      	movs	r2, #32
 8002924:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	490b      	ldr	r1, [pc, #44]	; (8002960 <HAL_I2C_Master_Transmit+0x250>)
 8002932:	400a      	ands	r2, r1
 8002934:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2241      	movs	r2, #65	; 0x41
 800293a:	2120      	movs	r1, #32
 800293c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2242      	movs	r2, #66	; 0x42
 8002942:	2100      	movs	r1, #0
 8002944:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2240      	movs	r2, #64	; 0x40
 800294a:	2100      	movs	r1, #0
 800294c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800294e:	2300      	movs	r3, #0
 8002950:	e000      	b.n	8002954 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8002952:	2302      	movs	r3, #2
  }
}
 8002954:	0018      	movs	r0, r3
 8002956:	46bd      	mov	sp, r7
 8002958:	b007      	add	sp, #28
 800295a:	bd90      	pop	{r4, r7, pc}
 800295c:	80002000 	.word	0x80002000
 8002960:	fe00e800 	.word	0xfe00e800

08002964 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b08a      	sub	sp, #40	; 0x28
 8002968:	af02      	add	r7, sp, #8
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	607a      	str	r2, [r7, #4]
 800296e:	603b      	str	r3, [r7, #0]
 8002970:	230a      	movs	r3, #10
 8002972:	18fb      	adds	r3, r7, r3
 8002974:	1c0a      	adds	r2, r1, #0
 8002976:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002978:	2300      	movs	r3, #0
 800297a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2241      	movs	r2, #65	; 0x41
 8002980:	5c9b      	ldrb	r3, [r3, r2]
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b20      	cmp	r3, #32
 8002986:	d000      	beq.n	800298a <HAL_I2C_IsDeviceReady+0x26>
 8002988:	e0df      	b.n	8002b4a <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	699a      	ldr	r2, [r3, #24]
 8002990:	2380      	movs	r3, #128	; 0x80
 8002992:	021b      	lsls	r3, r3, #8
 8002994:	401a      	ands	r2, r3
 8002996:	2380      	movs	r3, #128	; 0x80
 8002998:	021b      	lsls	r3, r3, #8
 800299a:	429a      	cmp	r2, r3
 800299c:	d101      	bne.n	80029a2 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800299e:	2302      	movs	r3, #2
 80029a0:	e0d4      	b.n	8002b4c <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2240      	movs	r2, #64	; 0x40
 80029a6:	5c9b      	ldrb	r3, [r3, r2]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d101      	bne.n	80029b0 <HAL_I2C_IsDeviceReady+0x4c>
 80029ac:	2302      	movs	r3, #2
 80029ae:	e0cd      	b.n	8002b4c <HAL_I2C_IsDeviceReady+0x1e8>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2240      	movs	r2, #64	; 0x40
 80029b4:	2101      	movs	r1, #1
 80029b6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2241      	movs	r2, #65	; 0x41
 80029bc:	2124      	movs	r1, #36	; 0x24
 80029be:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d107      	bne.n	80029de <HAL_I2C_IsDeviceReady+0x7a>
 80029ce:	230a      	movs	r3, #10
 80029d0:	18fb      	adds	r3, r7, r3
 80029d2:	881b      	ldrh	r3, [r3, #0]
 80029d4:	059b      	lsls	r3, r3, #22
 80029d6:	0d9b      	lsrs	r3, r3, #22
 80029d8:	4a5e      	ldr	r2, [pc, #376]	; (8002b54 <HAL_I2C_IsDeviceReady+0x1f0>)
 80029da:	431a      	orrs	r2, r3
 80029dc:	e006      	b.n	80029ec <HAL_I2C_IsDeviceReady+0x88>
 80029de:	230a      	movs	r3, #10
 80029e0:	18fb      	adds	r3, r7, r3
 80029e2:	881b      	ldrh	r3, [r3, #0]
 80029e4:	059b      	lsls	r3, r3, #22
 80029e6:	0d9b      	lsrs	r3, r3, #22
 80029e8:	4a5b      	ldr	r2, [pc, #364]	; (8002b58 <HAL_I2C_IsDeviceReady+0x1f4>)
 80029ea:	431a      	orrs	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80029f2:	f7fe fddf 	bl	80015b4 <HAL_GetTick>
 80029f6:	0003      	movs	r3, r0
 80029f8:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	2220      	movs	r2, #32
 8002a02:	4013      	ands	r3, r2
 8002a04:	3b20      	subs	r3, #32
 8002a06:	425a      	negs	r2, r3
 8002a08:	4153      	adcs	r3, r2
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	231f      	movs	r3, #31
 8002a0e:	18fb      	adds	r3, r7, r3
 8002a10:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	2210      	movs	r2, #16
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	3b10      	subs	r3, #16
 8002a1e:	425a      	negs	r2, r3
 8002a20:	4153      	adcs	r3, r2
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	231e      	movs	r3, #30
 8002a26:	18fb      	adds	r3, r7, r3
 8002a28:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002a2a:	e035      	b.n	8002a98 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	3301      	adds	r3, #1
 8002a30:	d01a      	beq.n	8002a68 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a32:	f7fe fdbf 	bl	80015b4 <HAL_GetTick>
 8002a36:	0002      	movs	r2, r0
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d302      	bcc.n	8002a48 <HAL_I2C_IsDeviceReady+0xe4>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10f      	bne.n	8002a68 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2241      	movs	r2, #65	; 0x41
 8002a4c:	2120      	movs	r1, #32
 8002a4e:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a54:	2220      	movs	r2, #32
 8002a56:	431a      	orrs	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2240      	movs	r2, #64	; 0x40
 8002a60:	2100      	movs	r1, #0
 8002a62:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e071      	b.n	8002b4c <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	4013      	ands	r3, r2
 8002a72:	3b20      	subs	r3, #32
 8002a74:	425a      	negs	r2, r3
 8002a76:	4153      	adcs	r3, r2
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	231f      	movs	r3, #31
 8002a7c:	18fb      	adds	r3, r7, r3
 8002a7e:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	2210      	movs	r2, #16
 8002a88:	4013      	ands	r3, r2
 8002a8a:	3b10      	subs	r3, #16
 8002a8c:	425a      	negs	r2, r3
 8002a8e:	4153      	adcs	r3, r2
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	231e      	movs	r3, #30
 8002a94:	18fb      	adds	r3, r7, r3
 8002a96:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002a98:	231f      	movs	r3, #31
 8002a9a:	18fb      	adds	r3, r7, r3
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d104      	bne.n	8002aac <HAL_I2C_IsDeviceReady+0x148>
 8002aa2:	231e      	movs	r3, #30
 8002aa4:	18fb      	adds	r3, r7, r3
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0bf      	beq.n	8002a2c <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	2210      	movs	r2, #16
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	2b10      	cmp	r3, #16
 8002ab8:	d01a      	beq.n	8002af0 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	0013      	movs	r3, r2
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	2120      	movs	r1, #32
 8002ac8:	f000 f86a 	bl	8002ba0 <I2C_WaitOnFlagUntilTimeout>
 8002acc:	1e03      	subs	r3, r0, #0
 8002ace:	d001      	beq.n	8002ad4 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e03b      	b.n	8002b4c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2220      	movs	r2, #32
 8002ada:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2241      	movs	r2, #65	; 0x41
 8002ae0:	2120      	movs	r1, #32
 8002ae2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2240      	movs	r2, #64	; 0x40
 8002ae8:	2100      	movs	r1, #0
 8002aea:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8002aec:	2300      	movs	r3, #0
 8002aee:	e02d      	b.n	8002b4c <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	0013      	movs	r3, r2
 8002afa:	2200      	movs	r2, #0
 8002afc:	2120      	movs	r1, #32
 8002afe:	f000 f84f 	bl	8002ba0 <I2C_WaitOnFlagUntilTimeout>
 8002b02:	1e03      	subs	r3, r0, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e020      	b.n	8002b4c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2210      	movs	r2, #16
 8002b10:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2220      	movs	r2, #32
 8002b18:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d900      	bls.n	8002b2a <HAL_I2C_IsDeviceReady+0x1c6>
 8002b28:	e74d      	b.n	80029c6 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2241      	movs	r2, #65	; 0x41
 8002b2e:	2120      	movs	r1, #32
 8002b30:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b36:	2220      	movs	r2, #32
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2240      	movs	r2, #64	; 0x40
 8002b42:	2100      	movs	r1, #0
 8002b44:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e000      	b.n	8002b4c <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 8002b4a:	2302      	movs	r3, #2
  }
}
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	b008      	add	sp, #32
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	02002000 	.word	0x02002000
 8002b58:	02002800 	.word	0x02002800

08002b5c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d103      	bne.n	8002b7a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2200      	movs	r2, #0
 8002b78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	2201      	movs	r2, #1
 8002b82:	4013      	ands	r3, r2
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d007      	beq.n	8002b98 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	699a      	ldr	r2, [r3, #24]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2101      	movs	r1, #1
 8002b94:	430a      	orrs	r2, r1
 8002b96:	619a      	str	r2, [r3, #24]
  }
}
 8002b98:	46c0      	nop			; (mov r8, r8)
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	b002      	add	sp, #8
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	603b      	str	r3, [r7, #0]
 8002bac:	1dfb      	adds	r3, r7, #7
 8002bae:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bb0:	e03a      	b.n	8002c28 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	6839      	ldr	r1, [r7, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f000 f8d3 	bl	8002d64 <I2C_IsErrorOccurred>
 8002bbe:	1e03      	subs	r3, r0, #0
 8002bc0:	d001      	beq.n	8002bc6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e040      	b.n	8002c48 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	d02d      	beq.n	8002c28 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bcc:	f7fe fcf2 	bl	80015b4 <HAL_GetTick>
 8002bd0:	0002      	movs	r2, r0
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d302      	bcc.n	8002be2 <I2C_WaitOnFlagUntilTimeout+0x42>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d122      	bne.n	8002c28 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	68ba      	ldr	r2, [r7, #8]
 8002bea:	4013      	ands	r3, r2
 8002bec:	68ba      	ldr	r2, [r7, #8]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	425a      	negs	r2, r3
 8002bf2:	4153      	adcs	r3, r2
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	1dfb      	adds	r3, r7, #7
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d113      	bne.n	8002c28 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c04:	2220      	movs	r2, #32
 8002c06:	431a      	orrs	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2241      	movs	r2, #65	; 0x41
 8002c10:	2120      	movs	r1, #32
 8002c12:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2242      	movs	r2, #66	; 0x42
 8002c18:	2100      	movs	r1, #0
 8002c1a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2240      	movs	r2, #64	; 0x40
 8002c20:	2100      	movs	r1, #0
 8002c22:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e00f      	b.n	8002c48 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	4013      	ands	r3, r2
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	425a      	negs	r2, r3
 8002c38:	4153      	adcs	r3, r2
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	001a      	movs	r2, r3
 8002c3e:	1dfb      	adds	r3, r7, #7
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d0b5      	beq.n	8002bb2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	0018      	movs	r0, r3
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	b004      	add	sp, #16
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c5c:	e032      	b.n	8002cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	68b9      	ldr	r1, [r7, #8]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	0018      	movs	r0, r3
 8002c66:	f000 f87d 	bl	8002d64 <I2C_IsErrorOccurred>
 8002c6a:	1e03      	subs	r3, r0, #0
 8002c6c:	d001      	beq.n	8002c72 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e030      	b.n	8002cd4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	3301      	adds	r3, #1
 8002c76:	d025      	beq.n	8002cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c78:	f7fe fc9c 	bl	80015b4 <HAL_GetTick>
 8002c7c:	0002      	movs	r2, r0
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d302      	bcc.n	8002c8e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d11a      	bne.n	8002cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	2202      	movs	r2, #2
 8002c96:	4013      	ands	r3, r2
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d013      	beq.n	8002cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2241      	movs	r2, #65	; 0x41
 8002cac:	2120      	movs	r1, #32
 8002cae:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2242      	movs	r2, #66	; 0x42
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2240      	movs	r2, #64	; 0x40
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e007      	b.n	8002cd4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	4013      	ands	r3, r2
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d1c5      	bne.n	8002c5e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	b004      	add	sp, #16
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ce8:	e02f      	b.n	8002d4a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	68b9      	ldr	r1, [r7, #8]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	f000 f837 	bl	8002d64 <I2C_IsErrorOccurred>
 8002cf6:	1e03      	subs	r3, r0, #0
 8002cf8:	d001      	beq.n	8002cfe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e02d      	b.n	8002d5a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cfe:	f7fe fc59 	bl	80015b4 <HAL_GetTick>
 8002d02:	0002      	movs	r2, r0
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d302      	bcc.n	8002d14 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d11a      	bne.n	8002d4a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	2b20      	cmp	r3, #32
 8002d20:	d013      	beq.n	8002d4a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d26:	2220      	movs	r2, #32
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2241      	movs	r2, #65	; 0x41
 8002d32:	2120      	movs	r1, #32
 8002d34:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2242      	movs	r2, #66	; 0x42
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2240      	movs	r2, #64	; 0x40
 8002d42:	2100      	movs	r1, #0
 8002d44:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e007      	b.n	8002d5a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	2220      	movs	r2, #32
 8002d52:	4013      	ands	r3, r2
 8002d54:	2b20      	cmp	r3, #32
 8002d56:	d1c8      	bne.n	8002cea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	b004      	add	sp, #16
 8002d60:	bd80      	pop	{r7, pc}
	...

08002d64 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d64:	b590      	push	{r4, r7, lr}
 8002d66:	b08b      	sub	sp, #44	; 0x2c
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d70:	2327      	movs	r3, #39	; 0x27
 8002d72:	18fb      	adds	r3, r7, r3
 8002d74:	2200      	movs	r2, #0
 8002d76:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002d80:	2300      	movs	r3, #0
 8002d82:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	2210      	movs	r2, #16
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	d100      	bne.n	8002d92 <I2C_IsErrorOccurred+0x2e>
 8002d90:	e082      	b.n	8002e98 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2210      	movs	r2, #16
 8002d98:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d9a:	e060      	b.n	8002e5e <I2C_IsErrorOccurred+0xfa>
 8002d9c:	2427      	movs	r4, #39	; 0x27
 8002d9e:	193b      	adds	r3, r7, r4
 8002da0:	193a      	adds	r2, r7, r4
 8002da2:	7812      	ldrb	r2, [r2, #0]
 8002da4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	3301      	adds	r3, #1
 8002daa:	d058      	beq.n	8002e5e <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002dac:	f7fe fc02 	bl	80015b4 <HAL_GetTick>
 8002db0:	0002      	movs	r2, r0
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d306      	bcc.n	8002dca <I2C_IsErrorOccurred+0x66>
 8002dbc:	193b      	adds	r3, r7, r4
 8002dbe:	193a      	adds	r2, r7, r4
 8002dc0:	7812      	ldrb	r2, [r2, #0]
 8002dc2:	701a      	strb	r2, [r3, #0]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d149      	bne.n	8002e5e <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	2380      	movs	r3, #128	; 0x80
 8002dd2:	01db      	lsls	r3, r3, #7
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002dd8:	2013      	movs	r0, #19
 8002dda:	183b      	adds	r3, r7, r0
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	2142      	movs	r1, #66	; 0x42
 8002de0:	5c52      	ldrb	r2, [r2, r1]
 8002de2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	699a      	ldr	r2, [r3, #24]
 8002dea:	2380      	movs	r3, #128	; 0x80
 8002dec:	021b      	lsls	r3, r3, #8
 8002dee:	401a      	ands	r2, r3
 8002df0:	2380      	movs	r3, #128	; 0x80
 8002df2:	021b      	lsls	r3, r3, #8
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d126      	bne.n	8002e46 <I2C_IsErrorOccurred+0xe2>
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	2380      	movs	r3, #128	; 0x80
 8002dfc:	01db      	lsls	r3, r3, #7
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d021      	beq.n	8002e46 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8002e02:	183b      	adds	r3, r7, r0
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b20      	cmp	r3, #32
 8002e08:	d01d      	beq.n	8002e46 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2180      	movs	r1, #128	; 0x80
 8002e16:	01c9      	lsls	r1, r1, #7
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002e1c:	f7fe fbca 	bl	80015b4 <HAL_GetTick>
 8002e20:	0003      	movs	r3, r0
 8002e22:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e24:	e00f      	b.n	8002e46 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e26:	f7fe fbc5 	bl	80015b4 <HAL_GetTick>
 8002e2a:	0002      	movs	r2, r0
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b19      	cmp	r3, #25
 8002e32:	d908      	bls.n	8002e46 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	2220      	movs	r2, #32
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002e3c:	2327      	movs	r3, #39	; 0x27
 8002e3e:	18fb      	adds	r3, r7, r3
 8002e40:	2201      	movs	r2, #1
 8002e42:	701a      	strb	r2, [r3, #0]

              break;
 8002e44:	e00b      	b.n	8002e5e <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	4013      	ands	r3, r2
 8002e50:	2127      	movs	r1, #39	; 0x27
 8002e52:	187a      	adds	r2, r7, r1
 8002e54:	1879      	adds	r1, r7, r1
 8002e56:	7809      	ldrb	r1, [r1, #0]
 8002e58:	7011      	strb	r1, [r2, #0]
 8002e5a:	2b20      	cmp	r3, #32
 8002e5c:	d1e3      	bne.n	8002e26 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	2220      	movs	r2, #32
 8002e66:	4013      	ands	r3, r2
 8002e68:	2b20      	cmp	r3, #32
 8002e6a:	d004      	beq.n	8002e76 <I2C_IsErrorOccurred+0x112>
 8002e6c:	2327      	movs	r3, #39	; 0x27
 8002e6e:	18fb      	adds	r3, r7, r3
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d092      	beq.n	8002d9c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002e76:	2327      	movs	r3, #39	; 0x27
 8002e78:	18fb      	adds	r3, r7, r3
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d103      	bne.n	8002e88 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2220      	movs	r2, #32
 8002e86:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	2204      	movs	r2, #4
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002e90:	2327      	movs	r3, #39	; 0x27
 8002e92:	18fb      	adds	r3, r7, r3
 8002e94:	2201      	movs	r2, #1
 8002e96:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	2380      	movs	r3, #128	; 0x80
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	d00c      	beq.n	8002ec4 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
 8002eac:	2201      	movs	r2, #1
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2280      	movs	r2, #128	; 0x80
 8002eb8:	0052      	lsls	r2, r2, #1
 8002eba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ebc:	2327      	movs	r3, #39	; 0x27
 8002ebe:	18fb      	adds	r3, r7, r3
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	2380      	movs	r3, #128	; 0x80
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d00c      	beq.n	8002ee8 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002ece:	6a3b      	ldr	r3, [r7, #32]
 8002ed0:	2208      	movs	r2, #8
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2280      	movs	r2, #128	; 0x80
 8002edc:	00d2      	lsls	r2, r2, #3
 8002ede:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ee0:	2327      	movs	r3, #39	; 0x27
 8002ee2:	18fb      	adds	r3, r7, r3
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	2380      	movs	r3, #128	; 0x80
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4013      	ands	r3, r2
 8002ef0:	d00c      	beq.n	8002f0c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2280      	movs	r2, #128	; 0x80
 8002f00:	0092      	lsls	r2, r2, #2
 8002f02:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f04:	2327      	movs	r3, #39	; 0x27
 8002f06:	18fb      	adds	r3, r7, r3
 8002f08:	2201      	movs	r2, #1
 8002f0a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002f0c:	2327      	movs	r3, #39	; 0x27
 8002f0e:	18fb      	adds	r3, r7, r3
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d01d      	beq.n	8002f52 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	0018      	movs	r0, r3
 8002f1a:	f7ff fe1f 	bl	8002b5c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	490d      	ldr	r1, [pc, #52]	; (8002f60 <I2C_IsErrorOccurred+0x1fc>)
 8002f2a:	400a      	ands	r2, r1
 8002f2c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	431a      	orrs	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2241      	movs	r2, #65	; 0x41
 8002f3e:	2120      	movs	r1, #32
 8002f40:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2242      	movs	r2, #66	; 0x42
 8002f46:	2100      	movs	r1, #0
 8002f48:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2240      	movs	r2, #64	; 0x40
 8002f4e:	2100      	movs	r1, #0
 8002f50:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002f52:	2327      	movs	r3, #39	; 0x27
 8002f54:	18fb      	adds	r3, r7, r3
 8002f56:	781b      	ldrb	r3, [r3, #0]
}
 8002f58:	0018      	movs	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	b00b      	add	sp, #44	; 0x2c
 8002f5e:	bd90      	pop	{r4, r7, pc}
 8002f60:	fe00e800 	.word	0xfe00e800

08002f64 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f64:	b590      	push	{r4, r7, lr}
 8002f66:	b087      	sub	sp, #28
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	0008      	movs	r0, r1
 8002f6e:	0011      	movs	r1, r2
 8002f70:	607b      	str	r3, [r7, #4]
 8002f72:	240a      	movs	r4, #10
 8002f74:	193b      	adds	r3, r7, r4
 8002f76:	1c02      	adds	r2, r0, #0
 8002f78:	801a      	strh	r2, [r3, #0]
 8002f7a:	2009      	movs	r0, #9
 8002f7c:	183b      	adds	r3, r7, r0
 8002f7e:	1c0a      	adds	r2, r1, #0
 8002f80:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f82:	193b      	adds	r3, r7, r4
 8002f84:	881b      	ldrh	r3, [r3, #0]
 8002f86:	059b      	lsls	r3, r3, #22
 8002f88:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f8a:	183b      	adds	r3, r7, r0
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	0419      	lsls	r1, r3, #16
 8002f90:	23ff      	movs	r3, #255	; 0xff
 8002f92:	041b      	lsls	r3, r3, #16
 8002f94:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f96:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	085b      	lsrs	r3, r3, #1
 8002fa4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fae:	0d51      	lsrs	r1, r2, #21
 8002fb0:	2280      	movs	r2, #128	; 0x80
 8002fb2:	00d2      	lsls	r2, r2, #3
 8002fb4:	400a      	ands	r2, r1
 8002fb6:	4907      	ldr	r1, [pc, #28]	; (8002fd4 <I2C_TransferConfig+0x70>)
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	43d2      	mvns	r2, r2
 8002fbc:	401a      	ands	r2, r3
 8002fbe:	0011      	movs	r1, r2
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002fca:	46c0      	nop			; (mov r8, r8)
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	b007      	add	sp, #28
 8002fd0:	bd90      	pop	{r4, r7, pc}
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	03ff63ff 	.word	0x03ff63ff

08002fd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2241      	movs	r2, #65	; 0x41
 8002fe6:	5c9b      	ldrb	r3, [r3, r2]
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b20      	cmp	r3, #32
 8002fec:	d138      	bne.n	8003060 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2240      	movs	r2, #64	; 0x40
 8002ff2:	5c9b      	ldrb	r3, [r3, r2]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e032      	b.n	8003062 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2240      	movs	r2, #64	; 0x40
 8003000:	2101      	movs	r1, #1
 8003002:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2241      	movs	r2, #65	; 0x41
 8003008:	2124      	movs	r1, #36	; 0x24
 800300a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2101      	movs	r1, #1
 8003018:	438a      	bics	r2, r1
 800301a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4911      	ldr	r1, [pc, #68]	; (800306c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003028:	400a      	ands	r2, r1
 800302a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6819      	ldr	r1, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	430a      	orrs	r2, r1
 800303a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2101      	movs	r1, #1
 8003048:	430a      	orrs	r2, r1
 800304a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2241      	movs	r2, #65	; 0x41
 8003050:	2120      	movs	r1, #32
 8003052:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2240      	movs	r2, #64	; 0x40
 8003058:	2100      	movs	r1, #0
 800305a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800305c:	2300      	movs	r3, #0
 800305e:	e000      	b.n	8003062 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003060:	2302      	movs	r3, #2
  }
}
 8003062:	0018      	movs	r0, r3
 8003064:	46bd      	mov	sp, r7
 8003066:	b002      	add	sp, #8
 8003068:	bd80      	pop	{r7, pc}
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	ffffefff 	.word	0xffffefff

08003070 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2241      	movs	r2, #65	; 0x41
 800307e:	5c9b      	ldrb	r3, [r3, r2]
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b20      	cmp	r3, #32
 8003084:	d139      	bne.n	80030fa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2240      	movs	r2, #64	; 0x40
 800308a:	5c9b      	ldrb	r3, [r3, r2]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003090:	2302      	movs	r3, #2
 8003092:	e033      	b.n	80030fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2240      	movs	r2, #64	; 0x40
 8003098:	2101      	movs	r1, #1
 800309a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2241      	movs	r2, #65	; 0x41
 80030a0:	2124      	movs	r1, #36	; 0x24
 80030a2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2101      	movs	r1, #1
 80030b0:	438a      	bics	r2, r1
 80030b2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4a11      	ldr	r2, [pc, #68]	; (8003104 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80030c0:	4013      	ands	r3, r2
 80030c2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	021b      	lsls	r3, r3, #8
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2101      	movs	r1, #1
 80030e2:	430a      	orrs	r2, r1
 80030e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2241      	movs	r2, #65	; 0x41
 80030ea:	2120      	movs	r1, #32
 80030ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2240      	movs	r2, #64	; 0x40
 80030f2:	2100      	movs	r1, #0
 80030f4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80030f6:	2300      	movs	r3, #0
 80030f8:	e000      	b.n	80030fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030fa:	2302      	movs	r3, #2
  }
}
 80030fc:	0018      	movs	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	b004      	add	sp, #16
 8003102:	bd80      	pop	{r7, pc}
 8003104:	fffff0ff 	.word	0xfffff0ff

08003108 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003110:	4b19      	ldr	r3, [pc, #100]	; (8003178 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a19      	ldr	r2, [pc, #100]	; (800317c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003116:	4013      	ands	r3, r2
 8003118:	0019      	movs	r1, r3
 800311a:	4b17      	ldr	r3, [pc, #92]	; (8003178 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	430a      	orrs	r2, r1
 8003120:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	2380      	movs	r3, #128	; 0x80
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	429a      	cmp	r2, r3
 800312a:	d11f      	bne.n	800316c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800312c:	4b14      	ldr	r3, [pc, #80]	; (8003180 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	0013      	movs	r3, r2
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	189b      	adds	r3, r3, r2
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	4912      	ldr	r1, [pc, #72]	; (8003184 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800313a:	0018      	movs	r0, r3
 800313c:	f7fc fff4 	bl	8000128 <__udivsi3>
 8003140:	0003      	movs	r3, r0
 8003142:	3301      	adds	r3, #1
 8003144:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003146:	e008      	b.n	800315a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	3b01      	subs	r3, #1
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	e001      	b.n	800315a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e009      	b.n	800316e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800315a:	4b07      	ldr	r3, [pc, #28]	; (8003178 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800315c:	695a      	ldr	r2, [r3, #20]
 800315e:	2380      	movs	r3, #128	; 0x80
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	401a      	ands	r2, r3
 8003164:	2380      	movs	r3, #128	; 0x80
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	429a      	cmp	r2, r3
 800316a:	d0ed      	beq.n	8003148 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	0018      	movs	r0, r3
 8003170:	46bd      	mov	sp, r7
 8003172:	b004      	add	sp, #16
 8003174:	bd80      	pop	{r7, pc}
 8003176:	46c0      	nop			; (mov r8, r8)
 8003178:	40007000 	.word	0x40007000
 800317c:	fffff9ff 	.word	0xfffff9ff
 8003180:	20000000 	.word	0x20000000
 8003184:	000f4240 	.word	0x000f4240

08003188 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800318c:	4b03      	ldr	r3, [pc, #12]	; (800319c <LL_RCC_GetAPB1Prescaler+0x14>)
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	23e0      	movs	r3, #224	; 0xe0
 8003192:	01db      	lsls	r3, r3, #7
 8003194:	4013      	ands	r3, r2
}
 8003196:	0018      	movs	r0, r3
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40021000 	.word	0x40021000

080031a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b088      	sub	sp, #32
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e2fe      	b.n	80037b0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2201      	movs	r2, #1
 80031b8:	4013      	ands	r3, r2
 80031ba:	d100      	bne.n	80031be <HAL_RCC_OscConfig+0x1e>
 80031bc:	e07c      	b.n	80032b8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031be:	4bc3      	ldr	r3, [pc, #780]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	2238      	movs	r2, #56	; 0x38
 80031c4:	4013      	ands	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031c8:	4bc0      	ldr	r3, [pc, #768]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	2203      	movs	r2, #3
 80031ce:	4013      	ands	r3, r2
 80031d0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	2b10      	cmp	r3, #16
 80031d6:	d102      	bne.n	80031de <HAL_RCC_OscConfig+0x3e>
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	2b03      	cmp	r3, #3
 80031dc:	d002      	beq.n	80031e4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d10b      	bne.n	80031fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e4:	4bb9      	ldr	r3, [pc, #740]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	2380      	movs	r3, #128	; 0x80
 80031ea:	029b      	lsls	r3, r3, #10
 80031ec:	4013      	ands	r3, r2
 80031ee:	d062      	beq.n	80032b6 <HAL_RCC_OscConfig+0x116>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d15e      	bne.n	80032b6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e2d9      	b.n	80037b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	2380      	movs	r3, #128	; 0x80
 8003202:	025b      	lsls	r3, r3, #9
 8003204:	429a      	cmp	r2, r3
 8003206:	d107      	bne.n	8003218 <HAL_RCC_OscConfig+0x78>
 8003208:	4bb0      	ldr	r3, [pc, #704]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	4baf      	ldr	r3, [pc, #700]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 800320e:	2180      	movs	r1, #128	; 0x80
 8003210:	0249      	lsls	r1, r1, #9
 8003212:	430a      	orrs	r2, r1
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	e020      	b.n	800325a <HAL_RCC_OscConfig+0xba>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	23a0      	movs	r3, #160	; 0xa0
 800321e:	02db      	lsls	r3, r3, #11
 8003220:	429a      	cmp	r2, r3
 8003222:	d10e      	bne.n	8003242 <HAL_RCC_OscConfig+0xa2>
 8003224:	4ba9      	ldr	r3, [pc, #676]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	4ba8      	ldr	r3, [pc, #672]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 800322a:	2180      	movs	r1, #128	; 0x80
 800322c:	02c9      	lsls	r1, r1, #11
 800322e:	430a      	orrs	r2, r1
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	4ba6      	ldr	r3, [pc, #664]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	4ba5      	ldr	r3, [pc, #660]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 8003238:	2180      	movs	r1, #128	; 0x80
 800323a:	0249      	lsls	r1, r1, #9
 800323c:	430a      	orrs	r2, r1
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	e00b      	b.n	800325a <HAL_RCC_OscConfig+0xba>
 8003242:	4ba2      	ldr	r3, [pc, #648]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	4ba1      	ldr	r3, [pc, #644]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 8003248:	49a1      	ldr	r1, [pc, #644]	; (80034d0 <HAL_RCC_OscConfig+0x330>)
 800324a:	400a      	ands	r2, r1
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	4b9f      	ldr	r3, [pc, #636]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	4b9e      	ldr	r3, [pc, #632]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 8003254:	499f      	ldr	r1, [pc, #636]	; (80034d4 <HAL_RCC_OscConfig+0x334>)
 8003256:	400a      	ands	r2, r1
 8003258:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d014      	beq.n	800328c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003262:	f7fe f9a7 	bl	80015b4 <HAL_GetTick>
 8003266:	0003      	movs	r3, r0
 8003268:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800326c:	f7fe f9a2 	bl	80015b4 <HAL_GetTick>
 8003270:	0002      	movs	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b64      	cmp	r3, #100	; 0x64
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e298      	b.n	80037b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800327e:	4b93      	ldr	r3, [pc, #588]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	2380      	movs	r3, #128	; 0x80
 8003284:	029b      	lsls	r3, r3, #10
 8003286:	4013      	ands	r3, r2
 8003288:	d0f0      	beq.n	800326c <HAL_RCC_OscConfig+0xcc>
 800328a:	e015      	b.n	80032b8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328c:	f7fe f992 	bl	80015b4 <HAL_GetTick>
 8003290:	0003      	movs	r3, r0
 8003292:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003294:	e008      	b.n	80032a8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003296:	f7fe f98d 	bl	80015b4 <HAL_GetTick>
 800329a:	0002      	movs	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b64      	cmp	r3, #100	; 0x64
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e283      	b.n	80037b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032a8:	4b88      	ldr	r3, [pc, #544]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	2380      	movs	r3, #128	; 0x80
 80032ae:	029b      	lsls	r3, r3, #10
 80032b0:	4013      	ands	r3, r2
 80032b2:	d1f0      	bne.n	8003296 <HAL_RCC_OscConfig+0xf6>
 80032b4:	e000      	b.n	80032b8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2202      	movs	r2, #2
 80032be:	4013      	ands	r3, r2
 80032c0:	d100      	bne.n	80032c4 <HAL_RCC_OscConfig+0x124>
 80032c2:	e099      	b.n	80033f8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032c4:	4b81      	ldr	r3, [pc, #516]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	2238      	movs	r2, #56	; 0x38
 80032ca:	4013      	ands	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032ce:	4b7f      	ldr	r3, [pc, #508]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	2203      	movs	r2, #3
 80032d4:	4013      	ands	r3, r2
 80032d6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	2b10      	cmp	r3, #16
 80032dc:	d102      	bne.n	80032e4 <HAL_RCC_OscConfig+0x144>
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d002      	beq.n	80032ea <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d135      	bne.n	8003356 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032ea:	4b78      	ldr	r3, [pc, #480]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	2380      	movs	r3, #128	; 0x80
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	4013      	ands	r3, r2
 80032f4:	d005      	beq.n	8003302 <HAL_RCC_OscConfig+0x162>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e256      	b.n	80037b0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003302:	4b72      	ldr	r3, [pc, #456]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	4a74      	ldr	r2, [pc, #464]	; (80034d8 <HAL_RCC_OscConfig+0x338>)
 8003308:	4013      	ands	r3, r2
 800330a:	0019      	movs	r1, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	021a      	lsls	r2, r3, #8
 8003312:	4b6e      	ldr	r3, [pc, #440]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 8003314:	430a      	orrs	r2, r1
 8003316:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d112      	bne.n	8003344 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800331e:	4b6b      	ldr	r3, [pc, #428]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a6e      	ldr	r2, [pc, #440]	; (80034dc <HAL_RCC_OscConfig+0x33c>)
 8003324:	4013      	ands	r3, r2
 8003326:	0019      	movs	r1, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	691a      	ldr	r2, [r3, #16]
 800332c:	4b67      	ldr	r3, [pc, #412]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 800332e:	430a      	orrs	r2, r1
 8003330:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003332:	4b66      	ldr	r3, [pc, #408]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	0adb      	lsrs	r3, r3, #11
 8003338:	2207      	movs	r2, #7
 800333a:	4013      	ands	r3, r2
 800333c:	4a68      	ldr	r2, [pc, #416]	; (80034e0 <HAL_RCC_OscConfig+0x340>)
 800333e:	40da      	lsrs	r2, r3
 8003340:	4b68      	ldr	r3, [pc, #416]	; (80034e4 <HAL_RCC_OscConfig+0x344>)
 8003342:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003344:	4b68      	ldr	r3, [pc, #416]	; (80034e8 <HAL_RCC_OscConfig+0x348>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	0018      	movs	r0, r3
 800334a:	f7fe f8d7 	bl	80014fc <HAL_InitTick>
 800334e:	1e03      	subs	r3, r0, #0
 8003350:	d051      	beq.n	80033f6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e22c      	b.n	80037b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d030      	beq.n	80033c0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800335e:	4b5b      	ldr	r3, [pc, #364]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a5e      	ldr	r2, [pc, #376]	; (80034dc <HAL_RCC_OscConfig+0x33c>)
 8003364:	4013      	ands	r3, r2
 8003366:	0019      	movs	r1, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691a      	ldr	r2, [r3, #16]
 800336c:	4b57      	ldr	r3, [pc, #348]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 800336e:	430a      	orrs	r2, r1
 8003370:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003372:	4b56      	ldr	r3, [pc, #344]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	4b55      	ldr	r3, [pc, #340]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 8003378:	2180      	movs	r1, #128	; 0x80
 800337a:	0049      	lsls	r1, r1, #1
 800337c:	430a      	orrs	r2, r1
 800337e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003380:	f7fe f918 	bl	80015b4 <HAL_GetTick>
 8003384:	0003      	movs	r3, r0
 8003386:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800338a:	f7fe f913 	bl	80015b4 <HAL_GetTick>
 800338e:	0002      	movs	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e209      	b.n	80037b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800339c:	4b4b      	ldr	r3, [pc, #300]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	2380      	movs	r3, #128	; 0x80
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	4013      	ands	r3, r2
 80033a6:	d0f0      	beq.n	800338a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a8:	4b48      	ldr	r3, [pc, #288]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	4a4a      	ldr	r2, [pc, #296]	; (80034d8 <HAL_RCC_OscConfig+0x338>)
 80033ae:	4013      	ands	r3, r2
 80033b0:	0019      	movs	r1, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	021a      	lsls	r2, r3, #8
 80033b8:	4b44      	ldr	r3, [pc, #272]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 80033ba:	430a      	orrs	r2, r1
 80033bc:	605a      	str	r2, [r3, #4]
 80033be:	e01b      	b.n	80033f8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80033c0:	4b42      	ldr	r3, [pc, #264]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	4b41      	ldr	r3, [pc, #260]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 80033c6:	4949      	ldr	r1, [pc, #292]	; (80034ec <HAL_RCC_OscConfig+0x34c>)
 80033c8:	400a      	ands	r2, r1
 80033ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033cc:	f7fe f8f2 	bl	80015b4 <HAL_GetTick>
 80033d0:	0003      	movs	r3, r0
 80033d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033d6:	f7fe f8ed 	bl	80015b4 <HAL_GetTick>
 80033da:	0002      	movs	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e1e3      	b.n	80037b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033e8:	4b38      	ldr	r3, [pc, #224]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	2380      	movs	r3, #128	; 0x80
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	4013      	ands	r3, r2
 80033f2:	d1f0      	bne.n	80033d6 <HAL_RCC_OscConfig+0x236>
 80033f4:	e000      	b.n	80033f8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033f6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2208      	movs	r2, #8
 80033fe:	4013      	ands	r3, r2
 8003400:	d047      	beq.n	8003492 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003402:	4b32      	ldr	r3, [pc, #200]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	2238      	movs	r2, #56	; 0x38
 8003408:	4013      	ands	r3, r2
 800340a:	2b18      	cmp	r3, #24
 800340c:	d10a      	bne.n	8003424 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800340e:	4b2f      	ldr	r3, [pc, #188]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 8003410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003412:	2202      	movs	r2, #2
 8003414:	4013      	ands	r3, r2
 8003416:	d03c      	beq.n	8003492 <HAL_RCC_OscConfig+0x2f2>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d138      	bne.n	8003492 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e1c5      	b.n	80037b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d019      	beq.n	8003460 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800342c:	4b27      	ldr	r3, [pc, #156]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 800342e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003430:	4b26      	ldr	r3, [pc, #152]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 8003432:	2101      	movs	r1, #1
 8003434:	430a      	orrs	r2, r1
 8003436:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003438:	f7fe f8bc 	bl	80015b4 <HAL_GetTick>
 800343c:	0003      	movs	r3, r0
 800343e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003442:	f7fe f8b7 	bl	80015b4 <HAL_GetTick>
 8003446:	0002      	movs	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e1ad      	b.n	80037b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003454:	4b1d      	ldr	r3, [pc, #116]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 8003456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003458:	2202      	movs	r2, #2
 800345a:	4013      	ands	r3, r2
 800345c:	d0f1      	beq.n	8003442 <HAL_RCC_OscConfig+0x2a2>
 800345e:	e018      	b.n	8003492 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003460:	4b1a      	ldr	r3, [pc, #104]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 8003462:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003464:	4b19      	ldr	r3, [pc, #100]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 8003466:	2101      	movs	r1, #1
 8003468:	438a      	bics	r2, r1
 800346a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346c:	f7fe f8a2 	bl	80015b4 <HAL_GetTick>
 8003470:	0003      	movs	r3, r0
 8003472:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003476:	f7fe f89d 	bl	80015b4 <HAL_GetTick>
 800347a:	0002      	movs	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e193      	b.n	80037b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003488:	4b10      	ldr	r3, [pc, #64]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 800348a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800348c:	2202      	movs	r2, #2
 800348e:	4013      	ands	r3, r2
 8003490:	d1f1      	bne.n	8003476 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2204      	movs	r2, #4
 8003498:	4013      	ands	r3, r2
 800349a:	d100      	bne.n	800349e <HAL_RCC_OscConfig+0x2fe>
 800349c:	e0c6      	b.n	800362c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800349e:	231f      	movs	r3, #31
 80034a0:	18fb      	adds	r3, r7, r3
 80034a2:	2200      	movs	r2, #0
 80034a4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80034a6:	4b09      	ldr	r3, [pc, #36]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	2238      	movs	r2, #56	; 0x38
 80034ac:	4013      	ands	r3, r2
 80034ae:	2b20      	cmp	r3, #32
 80034b0:	d11e      	bne.n	80034f0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80034b2:	4b06      	ldr	r3, [pc, #24]	; (80034cc <HAL_RCC_OscConfig+0x32c>)
 80034b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b6:	2202      	movs	r2, #2
 80034b8:	4013      	ands	r3, r2
 80034ba:	d100      	bne.n	80034be <HAL_RCC_OscConfig+0x31e>
 80034bc:	e0b6      	b.n	800362c <HAL_RCC_OscConfig+0x48c>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d000      	beq.n	80034c8 <HAL_RCC_OscConfig+0x328>
 80034c6:	e0b1      	b.n	800362c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e171      	b.n	80037b0 <HAL_RCC_OscConfig+0x610>
 80034cc:	40021000 	.word	0x40021000
 80034d0:	fffeffff 	.word	0xfffeffff
 80034d4:	fffbffff 	.word	0xfffbffff
 80034d8:	ffff80ff 	.word	0xffff80ff
 80034dc:	ffffc7ff 	.word	0xffffc7ff
 80034e0:	00f42400 	.word	0x00f42400
 80034e4:	20000000 	.word	0x20000000
 80034e8:	20000004 	.word	0x20000004
 80034ec:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034f0:	4bb1      	ldr	r3, [pc, #708]	; (80037b8 <HAL_RCC_OscConfig+0x618>)
 80034f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034f4:	2380      	movs	r3, #128	; 0x80
 80034f6:	055b      	lsls	r3, r3, #21
 80034f8:	4013      	ands	r3, r2
 80034fa:	d101      	bne.n	8003500 <HAL_RCC_OscConfig+0x360>
 80034fc:	2301      	movs	r3, #1
 80034fe:	e000      	b.n	8003502 <HAL_RCC_OscConfig+0x362>
 8003500:	2300      	movs	r3, #0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d011      	beq.n	800352a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003506:	4bac      	ldr	r3, [pc, #688]	; (80037b8 <HAL_RCC_OscConfig+0x618>)
 8003508:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800350a:	4bab      	ldr	r3, [pc, #684]	; (80037b8 <HAL_RCC_OscConfig+0x618>)
 800350c:	2180      	movs	r1, #128	; 0x80
 800350e:	0549      	lsls	r1, r1, #21
 8003510:	430a      	orrs	r2, r1
 8003512:	63da      	str	r2, [r3, #60]	; 0x3c
 8003514:	4ba8      	ldr	r3, [pc, #672]	; (80037b8 <HAL_RCC_OscConfig+0x618>)
 8003516:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003518:	2380      	movs	r3, #128	; 0x80
 800351a:	055b      	lsls	r3, r3, #21
 800351c:	4013      	ands	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]
 8003520:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003522:	231f      	movs	r3, #31
 8003524:	18fb      	adds	r3, r7, r3
 8003526:	2201      	movs	r2, #1
 8003528:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800352a:	4ba4      	ldr	r3, [pc, #656]	; (80037bc <HAL_RCC_OscConfig+0x61c>)
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	2380      	movs	r3, #128	; 0x80
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	4013      	ands	r3, r2
 8003534:	d11a      	bne.n	800356c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003536:	4ba1      	ldr	r3, [pc, #644]	; (80037bc <HAL_RCC_OscConfig+0x61c>)
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	4ba0      	ldr	r3, [pc, #640]	; (80037bc <HAL_RCC_OscConfig+0x61c>)
 800353c:	2180      	movs	r1, #128	; 0x80
 800353e:	0049      	lsls	r1, r1, #1
 8003540:	430a      	orrs	r2, r1
 8003542:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003544:	f7fe f836 	bl	80015b4 <HAL_GetTick>
 8003548:	0003      	movs	r3, r0
 800354a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800354e:	f7fe f831 	bl	80015b4 <HAL_GetTick>
 8003552:	0002      	movs	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e127      	b.n	80037b0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003560:	4b96      	ldr	r3, [pc, #600]	; (80037bc <HAL_RCC_OscConfig+0x61c>)
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	2380      	movs	r3, #128	; 0x80
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	4013      	ands	r3, r2
 800356a:	d0f0      	beq.n	800354e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d106      	bne.n	8003582 <HAL_RCC_OscConfig+0x3e2>
 8003574:	4b90      	ldr	r3, [pc, #576]	; (80037b8 <HAL_RCC_OscConfig+0x618>)
 8003576:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003578:	4b8f      	ldr	r3, [pc, #572]	; (80037b8 <HAL_RCC_OscConfig+0x618>)
 800357a:	2101      	movs	r1, #1
 800357c:	430a      	orrs	r2, r1
 800357e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003580:	e01c      	b.n	80035bc <HAL_RCC_OscConfig+0x41c>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	2b05      	cmp	r3, #5
 8003588:	d10c      	bne.n	80035a4 <HAL_RCC_OscConfig+0x404>
 800358a:	4b8b      	ldr	r3, [pc, #556]	; (80037b8 <HAL_RCC_OscConfig+0x618>)
 800358c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800358e:	4b8a      	ldr	r3, [pc, #552]	; (80037b8 <HAL_RCC_OscConfig+0x618>)
 8003590:	2104      	movs	r1, #4
 8003592:	430a      	orrs	r2, r1
 8003594:	65da      	str	r2, [r3, #92]	; 0x5c
 8003596:	4b88      	ldr	r3, [pc, #544]	; (80037b8 <HAL_RCC_OscConfig+0x618>)
 8003598:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800359a:	4b87      	ldr	r3, [pc, #540]	; (80037b8 <HAL_RCC_OscConfig+0x618>)
 800359c:	2101      	movs	r1, #1
 800359e:	430a      	orrs	r2, r1
 80035a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80035a2:	e00b      	b.n	80035bc <HAL_RCC_OscConfig+0x41c>
 80035a4:	4b84      	ldr	r3, [pc, #528]	; (80037b8 <HAL_RCC_OscConfig+0x618>)
 80035a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035a8:	4b83      	ldr	r3, [pc, #524]	; (80037b8 <HAL_RCC_OscConfig+0x618>)
 80035aa:	2101      	movs	r1, #1
 80035ac:	438a      	bics	r2, r1
 80035ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80035b0:	4b81      	ldr	r3, [pc, #516]	; (80037b8 <HAL_RCC_OscConfig+0x618>)
 80035b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035b4:	4b80      	ldr	r3, [pc, #512]	; (80037b8 <HAL_RCC_OscConfig+0x618>)
 80035b6:	2104      	movs	r1, #4
 80035b8:	438a      	bics	r2, r1
 80035ba:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d014      	beq.n	80035ee <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c4:	f7fd fff6 	bl	80015b4 <HAL_GetTick>
 80035c8:	0003      	movs	r3, r0
 80035ca:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035cc:	e009      	b.n	80035e2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ce:	f7fd fff1 	bl	80015b4 <HAL_GetTick>
 80035d2:	0002      	movs	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	4a79      	ldr	r2, [pc, #484]	; (80037c0 <HAL_RCC_OscConfig+0x620>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e0e6      	b.n	80037b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035e2:	4b75      	ldr	r3, [pc, #468]	; (80037b8 <HAL_RCC_OscConfig+0x618>)
 80035e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e6:	2202      	movs	r2, #2
 80035e8:	4013      	ands	r3, r2
 80035ea:	d0f0      	beq.n	80035ce <HAL_RCC_OscConfig+0x42e>
 80035ec:	e013      	b.n	8003616 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ee:	f7fd ffe1 	bl	80015b4 <HAL_GetTick>
 80035f2:	0003      	movs	r3, r0
 80035f4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035f6:	e009      	b.n	800360c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035f8:	f7fd ffdc 	bl	80015b4 <HAL_GetTick>
 80035fc:	0002      	movs	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	4a6f      	ldr	r2, [pc, #444]	; (80037c0 <HAL_RCC_OscConfig+0x620>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e0d1      	b.n	80037b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800360c:	4b6a      	ldr	r3, [pc, #424]	; (80037b8 <HAL_RCC_OscConfig+0x618>)
 800360e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003610:	2202      	movs	r2, #2
 8003612:	4013      	ands	r3, r2
 8003614:	d1f0      	bne.n	80035f8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003616:	231f      	movs	r3, #31
 8003618:	18fb      	adds	r3, r7, r3
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d105      	bne.n	800362c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003620:	4b65      	ldr	r3, [pc, #404]	; (80037b8 <HAL_RCC_OscConfig+0x618>)
 8003622:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003624:	4b64      	ldr	r3, [pc, #400]	; (80037b8 <HAL_RCC_OscConfig+0x618>)
 8003626:	4967      	ldr	r1, [pc, #412]	; (80037c4 <HAL_RCC_OscConfig+0x624>)
 8003628:	400a      	ands	r2, r1
 800362a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d100      	bne.n	8003636 <HAL_RCC_OscConfig+0x496>
 8003634:	e0bb      	b.n	80037ae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003636:	4b60      	ldr	r3, [pc, #384]	; (80037b8 <HAL_RCC_OscConfig+0x618>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	2238      	movs	r2, #56	; 0x38
 800363c:	4013      	ands	r3, r2
 800363e:	2b10      	cmp	r3, #16
 8003640:	d100      	bne.n	8003644 <HAL_RCC_OscConfig+0x4a4>
 8003642:	e07b      	b.n	800373c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	69db      	ldr	r3, [r3, #28]
 8003648:	2b02      	cmp	r3, #2
 800364a:	d156      	bne.n	80036fa <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364c:	4b5a      	ldr	r3, [pc, #360]	; (80037b8 <HAL_RCC_OscConfig+0x618>)
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	4b59      	ldr	r3, [pc, #356]	; (80037b8 <HAL_RCC_OscConfig+0x618>)
 8003652:	495d      	ldr	r1, [pc, #372]	; (80037c8 <HAL_RCC_OscConfig+0x628>)
 8003654:	400a      	ands	r2, r1
 8003656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003658:	f7fd ffac 	bl	80015b4 <HAL_GetTick>
 800365c:	0003      	movs	r3, r0
 800365e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003662:	f7fd ffa7 	bl	80015b4 <HAL_GetTick>
 8003666:	0002      	movs	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e09d      	b.n	80037b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003674:	4b50      	ldr	r3, [pc, #320]	; (80037b8 <HAL_RCC_OscConfig+0x618>)
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	2380      	movs	r3, #128	; 0x80
 800367a:	049b      	lsls	r3, r3, #18
 800367c:	4013      	ands	r3, r2
 800367e:	d1f0      	bne.n	8003662 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003680:	4b4d      	ldr	r3, [pc, #308]	; (80037b8 <HAL_RCC_OscConfig+0x618>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	4a51      	ldr	r2, [pc, #324]	; (80037cc <HAL_RCC_OscConfig+0x62c>)
 8003686:	4013      	ands	r3, r2
 8003688:	0019      	movs	r1, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a1a      	ldr	r2, [r3, #32]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	431a      	orrs	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003698:	021b      	lsls	r3, r3, #8
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a0:	431a      	orrs	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ac:	431a      	orrs	r2, r3
 80036ae:	4b42      	ldr	r3, [pc, #264]	; (80037b8 <HAL_RCC_OscConfig+0x618>)
 80036b0:	430a      	orrs	r2, r1
 80036b2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036b4:	4b40      	ldr	r3, [pc, #256]	; (80037b8 <HAL_RCC_OscConfig+0x618>)
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	4b3f      	ldr	r3, [pc, #252]	; (80037b8 <HAL_RCC_OscConfig+0x618>)
 80036ba:	2180      	movs	r1, #128	; 0x80
 80036bc:	0449      	lsls	r1, r1, #17
 80036be:	430a      	orrs	r2, r1
 80036c0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80036c2:	4b3d      	ldr	r3, [pc, #244]	; (80037b8 <HAL_RCC_OscConfig+0x618>)
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	4b3c      	ldr	r3, [pc, #240]	; (80037b8 <HAL_RCC_OscConfig+0x618>)
 80036c8:	2180      	movs	r1, #128	; 0x80
 80036ca:	0549      	lsls	r1, r1, #21
 80036cc:	430a      	orrs	r2, r1
 80036ce:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d0:	f7fd ff70 	bl	80015b4 <HAL_GetTick>
 80036d4:	0003      	movs	r3, r0
 80036d6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036da:	f7fd ff6b 	bl	80015b4 <HAL_GetTick>
 80036de:	0002      	movs	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e061      	b.n	80037b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ec:	4b32      	ldr	r3, [pc, #200]	; (80037b8 <HAL_RCC_OscConfig+0x618>)
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	2380      	movs	r3, #128	; 0x80
 80036f2:	049b      	lsls	r3, r3, #18
 80036f4:	4013      	ands	r3, r2
 80036f6:	d0f0      	beq.n	80036da <HAL_RCC_OscConfig+0x53a>
 80036f8:	e059      	b.n	80037ae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036fa:	4b2f      	ldr	r3, [pc, #188]	; (80037b8 <HAL_RCC_OscConfig+0x618>)
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	4b2e      	ldr	r3, [pc, #184]	; (80037b8 <HAL_RCC_OscConfig+0x618>)
 8003700:	4931      	ldr	r1, [pc, #196]	; (80037c8 <HAL_RCC_OscConfig+0x628>)
 8003702:	400a      	ands	r2, r1
 8003704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003706:	f7fd ff55 	bl	80015b4 <HAL_GetTick>
 800370a:	0003      	movs	r3, r0
 800370c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003710:	f7fd ff50 	bl	80015b4 <HAL_GetTick>
 8003714:	0002      	movs	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e046      	b.n	80037b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003722:	4b25      	ldr	r3, [pc, #148]	; (80037b8 <HAL_RCC_OscConfig+0x618>)
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	2380      	movs	r3, #128	; 0x80
 8003728:	049b      	lsls	r3, r3, #18
 800372a:	4013      	ands	r3, r2
 800372c:	d1f0      	bne.n	8003710 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800372e:	4b22      	ldr	r3, [pc, #136]	; (80037b8 <HAL_RCC_OscConfig+0x618>)
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	4b21      	ldr	r3, [pc, #132]	; (80037b8 <HAL_RCC_OscConfig+0x618>)
 8003734:	4926      	ldr	r1, [pc, #152]	; (80037d0 <HAL_RCC_OscConfig+0x630>)
 8003736:	400a      	ands	r2, r1
 8003738:	60da      	str	r2, [r3, #12]
 800373a:	e038      	b.n	80037ae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d101      	bne.n	8003748 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e033      	b.n	80037b0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003748:	4b1b      	ldr	r3, [pc, #108]	; (80037b8 <HAL_RCC_OscConfig+0x618>)
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	2203      	movs	r2, #3
 8003752:	401a      	ands	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	429a      	cmp	r2, r3
 800375a:	d126      	bne.n	80037aa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	2270      	movs	r2, #112	; 0x70
 8003760:	401a      	ands	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003766:	429a      	cmp	r2, r3
 8003768:	d11f      	bne.n	80037aa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	23fe      	movs	r3, #254	; 0xfe
 800376e:	01db      	lsls	r3, r3, #7
 8003770:	401a      	ands	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003776:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003778:	429a      	cmp	r2, r3
 800377a:	d116      	bne.n	80037aa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	23f8      	movs	r3, #248	; 0xf8
 8003780:	039b      	lsls	r3, r3, #14
 8003782:	401a      	ands	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003788:	429a      	cmp	r2, r3
 800378a:	d10e      	bne.n	80037aa <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	23e0      	movs	r3, #224	; 0xe0
 8003790:	051b      	lsls	r3, r3, #20
 8003792:	401a      	ands	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003798:	429a      	cmp	r2, r3
 800379a:	d106      	bne.n	80037aa <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	0f5b      	lsrs	r3, r3, #29
 80037a0:	075a      	lsls	r2, r3, #29
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d001      	beq.n	80037ae <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	0018      	movs	r0, r3
 80037b2:	46bd      	mov	sp, r7
 80037b4:	b008      	add	sp, #32
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40021000 	.word	0x40021000
 80037bc:	40007000 	.word	0x40007000
 80037c0:	00001388 	.word	0x00001388
 80037c4:	efffffff 	.word	0xefffffff
 80037c8:	feffffff 	.word	0xfeffffff
 80037cc:	11c1808c 	.word	0x11c1808c
 80037d0:	eefefffc 	.word	0xeefefffc

080037d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e0e9      	b.n	80039bc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037e8:	4b76      	ldr	r3, [pc, #472]	; (80039c4 <HAL_RCC_ClockConfig+0x1f0>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2207      	movs	r2, #7
 80037ee:	4013      	ands	r3, r2
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d91e      	bls.n	8003834 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f6:	4b73      	ldr	r3, [pc, #460]	; (80039c4 <HAL_RCC_ClockConfig+0x1f0>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2207      	movs	r2, #7
 80037fc:	4393      	bics	r3, r2
 80037fe:	0019      	movs	r1, r3
 8003800:	4b70      	ldr	r3, [pc, #448]	; (80039c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003808:	f7fd fed4 	bl	80015b4 <HAL_GetTick>
 800380c:	0003      	movs	r3, r0
 800380e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003810:	e009      	b.n	8003826 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003812:	f7fd fecf 	bl	80015b4 <HAL_GetTick>
 8003816:	0002      	movs	r2, r0
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	4a6a      	ldr	r2, [pc, #424]	; (80039c8 <HAL_RCC_ClockConfig+0x1f4>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e0ca      	b.n	80039bc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003826:	4b67      	ldr	r3, [pc, #412]	; (80039c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2207      	movs	r2, #7
 800382c:	4013      	ands	r3, r2
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	429a      	cmp	r2, r3
 8003832:	d1ee      	bne.n	8003812 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2202      	movs	r2, #2
 800383a:	4013      	ands	r3, r2
 800383c:	d015      	beq.n	800386a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2204      	movs	r2, #4
 8003844:	4013      	ands	r3, r2
 8003846:	d006      	beq.n	8003856 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003848:	4b60      	ldr	r3, [pc, #384]	; (80039cc <HAL_RCC_ClockConfig+0x1f8>)
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	4b5f      	ldr	r3, [pc, #380]	; (80039cc <HAL_RCC_ClockConfig+0x1f8>)
 800384e:	21e0      	movs	r1, #224	; 0xe0
 8003850:	01c9      	lsls	r1, r1, #7
 8003852:	430a      	orrs	r2, r1
 8003854:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003856:	4b5d      	ldr	r3, [pc, #372]	; (80039cc <HAL_RCC_ClockConfig+0x1f8>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	4a5d      	ldr	r2, [pc, #372]	; (80039d0 <HAL_RCC_ClockConfig+0x1fc>)
 800385c:	4013      	ands	r3, r2
 800385e:	0019      	movs	r1, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	4b59      	ldr	r3, [pc, #356]	; (80039cc <HAL_RCC_ClockConfig+0x1f8>)
 8003866:	430a      	orrs	r2, r1
 8003868:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2201      	movs	r2, #1
 8003870:	4013      	ands	r3, r2
 8003872:	d057      	beq.n	8003924 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d107      	bne.n	800388c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800387c:	4b53      	ldr	r3, [pc, #332]	; (80039cc <HAL_RCC_ClockConfig+0x1f8>)
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	2380      	movs	r3, #128	; 0x80
 8003882:	029b      	lsls	r3, r3, #10
 8003884:	4013      	ands	r3, r2
 8003886:	d12b      	bne.n	80038e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e097      	b.n	80039bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	2b02      	cmp	r3, #2
 8003892:	d107      	bne.n	80038a4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003894:	4b4d      	ldr	r3, [pc, #308]	; (80039cc <HAL_RCC_ClockConfig+0x1f8>)
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	2380      	movs	r3, #128	; 0x80
 800389a:	049b      	lsls	r3, r3, #18
 800389c:	4013      	ands	r3, r2
 800389e:	d11f      	bne.n	80038e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e08b      	b.n	80039bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d107      	bne.n	80038bc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038ac:	4b47      	ldr	r3, [pc, #284]	; (80039cc <HAL_RCC_ClockConfig+0x1f8>)
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	2380      	movs	r3, #128	; 0x80
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	4013      	ands	r3, r2
 80038b6:	d113      	bne.n	80038e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e07f      	b.n	80039bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2b03      	cmp	r3, #3
 80038c2:	d106      	bne.n	80038d2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038c4:	4b41      	ldr	r3, [pc, #260]	; (80039cc <HAL_RCC_ClockConfig+0x1f8>)
 80038c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c8:	2202      	movs	r2, #2
 80038ca:	4013      	ands	r3, r2
 80038cc:	d108      	bne.n	80038e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e074      	b.n	80039bc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038d2:	4b3e      	ldr	r3, [pc, #248]	; (80039cc <HAL_RCC_ClockConfig+0x1f8>)
 80038d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d6:	2202      	movs	r2, #2
 80038d8:	4013      	ands	r3, r2
 80038da:	d101      	bne.n	80038e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e06d      	b.n	80039bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038e0:	4b3a      	ldr	r3, [pc, #232]	; (80039cc <HAL_RCC_ClockConfig+0x1f8>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	2207      	movs	r2, #7
 80038e6:	4393      	bics	r3, r2
 80038e8:	0019      	movs	r1, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	4b37      	ldr	r3, [pc, #220]	; (80039cc <HAL_RCC_ClockConfig+0x1f8>)
 80038f0:	430a      	orrs	r2, r1
 80038f2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038f4:	f7fd fe5e 	bl	80015b4 <HAL_GetTick>
 80038f8:	0003      	movs	r3, r0
 80038fa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038fc:	e009      	b.n	8003912 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038fe:	f7fd fe59 	bl	80015b4 <HAL_GetTick>
 8003902:	0002      	movs	r2, r0
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	4a2f      	ldr	r2, [pc, #188]	; (80039c8 <HAL_RCC_ClockConfig+0x1f4>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e054      	b.n	80039bc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003912:	4b2e      	ldr	r3, [pc, #184]	; (80039cc <HAL_RCC_ClockConfig+0x1f8>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	2238      	movs	r2, #56	; 0x38
 8003918:	401a      	ands	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	429a      	cmp	r2, r3
 8003922:	d1ec      	bne.n	80038fe <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003924:	4b27      	ldr	r3, [pc, #156]	; (80039c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2207      	movs	r2, #7
 800392a:	4013      	ands	r3, r2
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	429a      	cmp	r2, r3
 8003930:	d21e      	bcs.n	8003970 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003932:	4b24      	ldr	r3, [pc, #144]	; (80039c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2207      	movs	r2, #7
 8003938:	4393      	bics	r3, r2
 800393a:	0019      	movs	r1, r3
 800393c:	4b21      	ldr	r3, [pc, #132]	; (80039c4 <HAL_RCC_ClockConfig+0x1f0>)
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	430a      	orrs	r2, r1
 8003942:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003944:	f7fd fe36 	bl	80015b4 <HAL_GetTick>
 8003948:	0003      	movs	r3, r0
 800394a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800394c:	e009      	b.n	8003962 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800394e:	f7fd fe31 	bl	80015b4 <HAL_GetTick>
 8003952:	0002      	movs	r2, r0
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	4a1b      	ldr	r2, [pc, #108]	; (80039c8 <HAL_RCC_ClockConfig+0x1f4>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e02c      	b.n	80039bc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003962:	4b18      	ldr	r3, [pc, #96]	; (80039c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2207      	movs	r2, #7
 8003968:	4013      	ands	r3, r2
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	429a      	cmp	r2, r3
 800396e:	d1ee      	bne.n	800394e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2204      	movs	r2, #4
 8003976:	4013      	ands	r3, r2
 8003978:	d009      	beq.n	800398e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800397a:	4b14      	ldr	r3, [pc, #80]	; (80039cc <HAL_RCC_ClockConfig+0x1f8>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	4a15      	ldr	r2, [pc, #84]	; (80039d4 <HAL_RCC_ClockConfig+0x200>)
 8003980:	4013      	ands	r3, r2
 8003982:	0019      	movs	r1, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	4b10      	ldr	r3, [pc, #64]	; (80039cc <HAL_RCC_ClockConfig+0x1f8>)
 800398a:	430a      	orrs	r2, r1
 800398c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800398e:	f000 f829 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 8003992:	0001      	movs	r1, r0
 8003994:	4b0d      	ldr	r3, [pc, #52]	; (80039cc <HAL_RCC_ClockConfig+0x1f8>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	0a1b      	lsrs	r3, r3, #8
 800399a:	220f      	movs	r2, #15
 800399c:	401a      	ands	r2, r3
 800399e:	4b0e      	ldr	r3, [pc, #56]	; (80039d8 <HAL_RCC_ClockConfig+0x204>)
 80039a0:	0092      	lsls	r2, r2, #2
 80039a2:	58d3      	ldr	r3, [r2, r3]
 80039a4:	221f      	movs	r2, #31
 80039a6:	4013      	ands	r3, r2
 80039a8:	000a      	movs	r2, r1
 80039aa:	40da      	lsrs	r2, r3
 80039ac:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <HAL_RCC_ClockConfig+0x208>)
 80039ae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80039b0:	4b0b      	ldr	r3, [pc, #44]	; (80039e0 <HAL_RCC_ClockConfig+0x20c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	0018      	movs	r0, r3
 80039b6:	f7fd fda1 	bl	80014fc <HAL_InitTick>
 80039ba:	0003      	movs	r3, r0
}
 80039bc:	0018      	movs	r0, r3
 80039be:	46bd      	mov	sp, r7
 80039c0:	b004      	add	sp, #16
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40022000 	.word	0x40022000
 80039c8:	00001388 	.word	0x00001388
 80039cc:	40021000 	.word	0x40021000
 80039d0:	fffff0ff 	.word	0xfffff0ff
 80039d4:	ffff8fff 	.word	0xffff8fff
 80039d8:	08008378 	.word	0x08008378
 80039dc:	20000000 	.word	0x20000000
 80039e0:	20000004 	.word	0x20000004

080039e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039ea:	4b3c      	ldr	r3, [pc, #240]	; (8003adc <HAL_RCC_GetSysClockFreq+0xf8>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	2238      	movs	r2, #56	; 0x38
 80039f0:	4013      	ands	r3, r2
 80039f2:	d10f      	bne.n	8003a14 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80039f4:	4b39      	ldr	r3, [pc, #228]	; (8003adc <HAL_RCC_GetSysClockFreq+0xf8>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	0adb      	lsrs	r3, r3, #11
 80039fa:	2207      	movs	r2, #7
 80039fc:	4013      	ands	r3, r2
 80039fe:	2201      	movs	r2, #1
 8003a00:	409a      	lsls	r2, r3
 8003a02:	0013      	movs	r3, r2
 8003a04:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003a06:	6839      	ldr	r1, [r7, #0]
 8003a08:	4835      	ldr	r0, [pc, #212]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003a0a:	f7fc fb8d 	bl	8000128 <__udivsi3>
 8003a0e:	0003      	movs	r3, r0
 8003a10:	613b      	str	r3, [r7, #16]
 8003a12:	e05d      	b.n	8003ad0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a14:	4b31      	ldr	r3, [pc, #196]	; (8003adc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	2238      	movs	r2, #56	; 0x38
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	2b08      	cmp	r3, #8
 8003a1e:	d102      	bne.n	8003a26 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a20:	4b30      	ldr	r3, [pc, #192]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003a22:	613b      	str	r3, [r7, #16]
 8003a24:	e054      	b.n	8003ad0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a26:	4b2d      	ldr	r3, [pc, #180]	; (8003adc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	2238      	movs	r2, #56	; 0x38
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	2b10      	cmp	r3, #16
 8003a30:	d138      	bne.n	8003aa4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003a32:	4b2a      	ldr	r3, [pc, #168]	; (8003adc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	2203      	movs	r2, #3
 8003a38:	4013      	ands	r3, r2
 8003a3a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a3c:	4b27      	ldr	r3, [pc, #156]	; (8003adc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	091b      	lsrs	r3, r3, #4
 8003a42:	2207      	movs	r2, #7
 8003a44:	4013      	ands	r3, r2
 8003a46:	3301      	adds	r3, #1
 8003a48:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2b03      	cmp	r3, #3
 8003a4e:	d10d      	bne.n	8003a6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a50:	68b9      	ldr	r1, [r7, #8]
 8003a52:	4824      	ldr	r0, [pc, #144]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003a54:	f7fc fb68 	bl	8000128 <__udivsi3>
 8003a58:	0003      	movs	r3, r0
 8003a5a:	0019      	movs	r1, r3
 8003a5c:	4b1f      	ldr	r3, [pc, #124]	; (8003adc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	0a1b      	lsrs	r3, r3, #8
 8003a62:	227f      	movs	r2, #127	; 0x7f
 8003a64:	4013      	ands	r3, r2
 8003a66:	434b      	muls	r3, r1
 8003a68:	617b      	str	r3, [r7, #20]
        break;
 8003a6a:	e00d      	b.n	8003a88 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003a6c:	68b9      	ldr	r1, [r7, #8]
 8003a6e:	481c      	ldr	r0, [pc, #112]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003a70:	f7fc fb5a 	bl	8000128 <__udivsi3>
 8003a74:	0003      	movs	r3, r0
 8003a76:	0019      	movs	r1, r3
 8003a78:	4b18      	ldr	r3, [pc, #96]	; (8003adc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	0a1b      	lsrs	r3, r3, #8
 8003a7e:	227f      	movs	r2, #127	; 0x7f
 8003a80:	4013      	ands	r3, r2
 8003a82:	434b      	muls	r3, r1
 8003a84:	617b      	str	r3, [r7, #20]
        break;
 8003a86:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003a88:	4b14      	ldr	r3, [pc, #80]	; (8003adc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	0f5b      	lsrs	r3, r3, #29
 8003a8e:	2207      	movs	r2, #7
 8003a90:	4013      	ands	r3, r2
 8003a92:	3301      	adds	r3, #1
 8003a94:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	6978      	ldr	r0, [r7, #20]
 8003a9a:	f7fc fb45 	bl	8000128 <__udivsi3>
 8003a9e:	0003      	movs	r3, r0
 8003aa0:	613b      	str	r3, [r7, #16]
 8003aa2:	e015      	b.n	8003ad0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003aa4:	4b0d      	ldr	r3, [pc, #52]	; (8003adc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	2238      	movs	r2, #56	; 0x38
 8003aaa:	4013      	ands	r3, r2
 8003aac:	2b20      	cmp	r3, #32
 8003aae:	d103      	bne.n	8003ab8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003ab0:	2380      	movs	r3, #128	; 0x80
 8003ab2:	021b      	lsls	r3, r3, #8
 8003ab4:	613b      	str	r3, [r7, #16]
 8003ab6:	e00b      	b.n	8003ad0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003ab8:	4b08      	ldr	r3, [pc, #32]	; (8003adc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	2238      	movs	r2, #56	; 0x38
 8003abe:	4013      	ands	r3, r2
 8003ac0:	2b18      	cmp	r3, #24
 8003ac2:	d103      	bne.n	8003acc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003ac4:	23fa      	movs	r3, #250	; 0xfa
 8003ac6:	01db      	lsls	r3, r3, #7
 8003ac8:	613b      	str	r3, [r7, #16]
 8003aca:	e001      	b.n	8003ad0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003ad0:	693b      	ldr	r3, [r7, #16]
}
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	b006      	add	sp, #24
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	46c0      	nop			; (mov r8, r8)
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	00f42400 	.word	0x00f42400
 8003ae4:	007a1200 	.word	0x007a1200

08003ae8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003aec:	4b02      	ldr	r3, [pc, #8]	; (8003af8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003aee:	681b      	ldr	r3, [r3, #0]
}
 8003af0:	0018      	movs	r0, r3
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	46c0      	nop			; (mov r8, r8)
 8003af8:	20000000 	.word	0x20000000

08003afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003afc:	b5b0      	push	{r4, r5, r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003b00:	f7ff fff2 	bl	8003ae8 <HAL_RCC_GetHCLKFreq>
 8003b04:	0004      	movs	r4, r0
 8003b06:	f7ff fb3f 	bl	8003188 <LL_RCC_GetAPB1Prescaler>
 8003b0a:	0003      	movs	r3, r0
 8003b0c:	0b1a      	lsrs	r2, r3, #12
 8003b0e:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b10:	0092      	lsls	r2, r2, #2
 8003b12:	58d3      	ldr	r3, [r2, r3]
 8003b14:	221f      	movs	r2, #31
 8003b16:	4013      	ands	r3, r2
 8003b18:	40dc      	lsrs	r4, r3
 8003b1a:	0023      	movs	r3, r4
}
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bdb0      	pop	{r4, r5, r7, pc}
 8003b22:	46c0      	nop			; (mov r8, r8)
 8003b24:	080083b8 	.word	0x080083b8

08003b28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003b30:	2313      	movs	r3, #19
 8003b32:	18fb      	adds	r3, r7, r3
 8003b34:	2200      	movs	r2, #0
 8003b36:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b38:	2312      	movs	r3, #18
 8003b3a:	18fb      	adds	r3, r7, r3
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	2380      	movs	r3, #128	; 0x80
 8003b46:	029b      	lsls	r3, r3, #10
 8003b48:	4013      	ands	r3, r2
 8003b4a:	d100      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003b4c:	e0a3      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b4e:	2011      	movs	r0, #17
 8003b50:	183b      	adds	r3, r7, r0
 8003b52:	2200      	movs	r2, #0
 8003b54:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b56:	4bc3      	ldr	r3, [pc, #780]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b5a:	2380      	movs	r3, #128	; 0x80
 8003b5c:	055b      	lsls	r3, r3, #21
 8003b5e:	4013      	ands	r3, r2
 8003b60:	d110      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b62:	4bc0      	ldr	r3, [pc, #768]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b66:	4bbf      	ldr	r3, [pc, #764]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b68:	2180      	movs	r1, #128	; 0x80
 8003b6a:	0549      	lsls	r1, r1, #21
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003b70:	4bbc      	ldr	r3, [pc, #752]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b74:	2380      	movs	r3, #128	; 0x80
 8003b76:	055b      	lsls	r3, r3, #21
 8003b78:	4013      	ands	r3, r2
 8003b7a:	60bb      	str	r3, [r7, #8]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b7e:	183b      	adds	r3, r7, r0
 8003b80:	2201      	movs	r2, #1
 8003b82:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b84:	4bb8      	ldr	r3, [pc, #736]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	4bb7      	ldr	r3, [pc, #732]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003b8a:	2180      	movs	r1, #128	; 0x80
 8003b8c:	0049      	lsls	r1, r1, #1
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b92:	f7fd fd0f 	bl	80015b4 <HAL_GetTick>
 8003b96:	0003      	movs	r3, r0
 8003b98:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b9a:	e00b      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b9c:	f7fd fd0a 	bl	80015b4 <HAL_GetTick>
 8003ba0:	0002      	movs	r2, r0
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d904      	bls.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003baa:	2313      	movs	r3, #19
 8003bac:	18fb      	adds	r3, r7, r3
 8003bae:	2203      	movs	r2, #3
 8003bb0:	701a      	strb	r2, [r3, #0]
        break;
 8003bb2:	e005      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bb4:	4bac      	ldr	r3, [pc, #688]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	2380      	movs	r3, #128	; 0x80
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	d0ed      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003bc0:	2313      	movs	r3, #19
 8003bc2:	18fb      	adds	r3, r7, r3
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d154      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003bca:	4ba6      	ldr	r3, [pc, #664]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bcc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003bce:	23c0      	movs	r3, #192	; 0xc0
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d019      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d014      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003be6:	4b9f      	ldr	r3, [pc, #636]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bea:	4aa0      	ldr	r2, [pc, #640]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003bec:	4013      	ands	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bf0:	4b9c      	ldr	r3, [pc, #624]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bf2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003bf4:	4b9b      	ldr	r3, [pc, #620]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bf6:	2180      	movs	r1, #128	; 0x80
 8003bf8:	0249      	lsls	r1, r1, #9
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bfe:	4b99      	ldr	r3, [pc, #612]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c02:	4b98      	ldr	r3, [pc, #608]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c04:	499a      	ldr	r1, [pc, #616]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8003c06:	400a      	ands	r2, r1
 8003c08:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c0a:	4b96      	ldr	r3, [pc, #600]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	2201      	movs	r2, #1
 8003c14:	4013      	ands	r3, r2
 8003c16:	d016      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c18:	f7fd fccc 	bl	80015b4 <HAL_GetTick>
 8003c1c:	0003      	movs	r3, r0
 8003c1e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c20:	e00c      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c22:	f7fd fcc7 	bl	80015b4 <HAL_GetTick>
 8003c26:	0002      	movs	r2, r0
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	4a91      	ldr	r2, [pc, #580]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d904      	bls.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003c32:	2313      	movs	r3, #19
 8003c34:	18fb      	adds	r3, r7, r3
 8003c36:	2203      	movs	r2, #3
 8003c38:	701a      	strb	r2, [r3, #0]
            break;
 8003c3a:	e004      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c3c:	4b89      	ldr	r3, [pc, #548]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c40:	2202      	movs	r2, #2
 8003c42:	4013      	ands	r3, r2
 8003c44:	d0ed      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003c46:	2313      	movs	r3, #19
 8003c48:	18fb      	adds	r3, r7, r3
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10a      	bne.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c50:	4b84      	ldr	r3, [pc, #528]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c54:	4a85      	ldr	r2, [pc, #532]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003c56:	4013      	ands	r3, r2
 8003c58:	0019      	movs	r1, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c5e:	4b81      	ldr	r3, [pc, #516]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c60:	430a      	orrs	r2, r1
 8003c62:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c64:	e00c      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c66:	2312      	movs	r3, #18
 8003c68:	18fb      	adds	r3, r7, r3
 8003c6a:	2213      	movs	r2, #19
 8003c6c:	18ba      	adds	r2, r7, r2
 8003c6e:	7812      	ldrb	r2, [r2, #0]
 8003c70:	701a      	strb	r2, [r3, #0]
 8003c72:	e005      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c74:	2312      	movs	r3, #18
 8003c76:	18fb      	adds	r3, r7, r3
 8003c78:	2213      	movs	r2, #19
 8003c7a:	18ba      	adds	r2, r7, r2
 8003c7c:	7812      	ldrb	r2, [r2, #0]
 8003c7e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c80:	2311      	movs	r3, #17
 8003c82:	18fb      	adds	r3, r7, r3
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d105      	bne.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c8a:	4b76      	ldr	r3, [pc, #472]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c8e:	4b75      	ldr	r3, [pc, #468]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c90:	4979      	ldr	r1, [pc, #484]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8003c92:	400a      	ands	r2, r1
 8003c94:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	d009      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ca0:	4b70      	ldr	r3, [pc, #448]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca4:	2203      	movs	r2, #3
 8003ca6:	4393      	bics	r3, r2
 8003ca8:	0019      	movs	r1, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	4b6d      	ldr	r3, [pc, #436]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2202      	movs	r2, #2
 8003cba:	4013      	ands	r3, r2
 8003cbc:	d009      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cbe:	4b69      	ldr	r3, [pc, #420]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc2:	220c      	movs	r2, #12
 8003cc4:	4393      	bics	r3, r2
 8003cc6:	0019      	movs	r1, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689a      	ldr	r2, [r3, #8]
 8003ccc:	4b65      	ldr	r3, [pc, #404]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2210      	movs	r2, #16
 8003cd8:	4013      	ands	r3, r2
 8003cda:	d009      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cdc:	4b61      	ldr	r3, [pc, #388]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce0:	4a66      	ldr	r2, [pc, #408]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	0019      	movs	r1, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68da      	ldr	r2, [r3, #12]
 8003cea:	4b5e      	ldr	r3, [pc, #376]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cec:	430a      	orrs	r2, r1
 8003cee:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	2380      	movs	r3, #128	; 0x80
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	d009      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cfc:	4b59      	ldr	r3, [pc, #356]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d00:	4a5f      	ldr	r2, [pc, #380]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003d02:	4013      	ands	r3, r2
 8003d04:	0019      	movs	r1, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	699a      	ldr	r2, [r3, #24]
 8003d0a:	4b56      	ldr	r3, [pc, #344]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	2380      	movs	r3, #128	; 0x80
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	4013      	ands	r3, r2
 8003d1a:	d009      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d1c:	4b51      	ldr	r3, [pc, #324]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d20:	4a58      	ldr	r2, [pc, #352]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d22:	4013      	ands	r3, r2
 8003d24:	0019      	movs	r1, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	69da      	ldr	r2, [r3, #28]
 8003d2a:	4b4e      	ldr	r3, [pc, #312]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2220      	movs	r2, #32
 8003d36:	4013      	ands	r3, r2
 8003d38:	d009      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d3a:	4b4a      	ldr	r3, [pc, #296]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3e:	4a52      	ldr	r2, [pc, #328]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003d40:	4013      	ands	r3, r2
 8003d42:	0019      	movs	r1, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	691a      	ldr	r2, [r3, #16]
 8003d48:	4b46      	ldr	r3, [pc, #280]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	2380      	movs	r3, #128	; 0x80
 8003d54:	01db      	lsls	r3, r3, #7
 8003d56:	4013      	ands	r3, r2
 8003d58:	d015      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d5a:	4b42      	ldr	r3, [pc, #264]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	0899      	lsrs	r1, r3, #2
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1a      	ldr	r2, [r3, #32]
 8003d66:	4b3f      	ldr	r3, [pc, #252]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a1a      	ldr	r2, [r3, #32]
 8003d70:	2380      	movs	r3, #128	; 0x80
 8003d72:	05db      	lsls	r3, r3, #23
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d106      	bne.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003d78:	4b3a      	ldr	r3, [pc, #232]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d7a:	68da      	ldr	r2, [r3, #12]
 8003d7c:	4b39      	ldr	r3, [pc, #228]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d7e:	2180      	movs	r1, #128	; 0x80
 8003d80:	0249      	lsls	r1, r1, #9
 8003d82:	430a      	orrs	r2, r1
 8003d84:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	2380      	movs	r3, #128	; 0x80
 8003d8c:	031b      	lsls	r3, r3, #12
 8003d8e:	4013      	ands	r3, r2
 8003d90:	d009      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d92:	4b34      	ldr	r3, [pc, #208]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d96:	2240      	movs	r2, #64	; 0x40
 8003d98:	4393      	bics	r3, r2
 8003d9a:	0019      	movs	r1, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003da0:	4b30      	ldr	r3, [pc, #192]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003da2:	430a      	orrs	r2, r1
 8003da4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	2380      	movs	r3, #128	; 0x80
 8003dac:	039b      	lsls	r3, r3, #14
 8003dae:	4013      	ands	r3, r2
 8003db0:	d016      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003db2:	4b2c      	ldr	r3, [pc, #176]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db6:	4a35      	ldr	r2, [pc, #212]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003db8:	4013      	ands	r3, r2
 8003dba:	0019      	movs	r1, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dc0:	4b28      	ldr	r3, [pc, #160]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dca:	2380      	movs	r3, #128	; 0x80
 8003dcc:	03db      	lsls	r3, r3, #15
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d106      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003dd2:	4b24      	ldr	r3, [pc, #144]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003dd4:	68da      	ldr	r2, [r3, #12]
 8003dd6:	4b23      	ldr	r3, [pc, #140]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003dd8:	2180      	movs	r1, #128	; 0x80
 8003dda:	0449      	lsls	r1, r1, #17
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	2380      	movs	r3, #128	; 0x80
 8003de6:	03db      	lsls	r3, r3, #15
 8003de8:	4013      	ands	r3, r2
 8003dea:	d016      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003dec:	4b1d      	ldr	r3, [pc, #116]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df0:	4a27      	ldr	r2, [pc, #156]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8003df2:	4013      	ands	r3, r2
 8003df4:	0019      	movs	r1, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dfa:	4b1a      	ldr	r3, [pc, #104]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e04:	2380      	movs	r3, #128	; 0x80
 8003e06:	045b      	lsls	r3, r3, #17
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d106      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003e0c:	4b15      	ldr	r3, [pc, #84]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e0e:	68da      	ldr	r2, [r3, #12]
 8003e10:	4b14      	ldr	r3, [pc, #80]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e12:	2180      	movs	r1, #128	; 0x80
 8003e14:	0449      	lsls	r1, r1, #17
 8003e16:	430a      	orrs	r2, r1
 8003e18:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	2380      	movs	r3, #128	; 0x80
 8003e20:	011b      	lsls	r3, r3, #4
 8003e22:	4013      	ands	r3, r2
 8003e24:	d016      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003e26:	4b0f      	ldr	r3, [pc, #60]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2a:	4a1a      	ldr	r2, [pc, #104]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	0019      	movs	r1, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	695a      	ldr	r2, [r3, #20]
 8003e34:	4b0b      	ldr	r3, [pc, #44]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e36:	430a      	orrs	r2, r1
 8003e38:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	695a      	ldr	r2, [r3, #20]
 8003e3e:	2380      	movs	r3, #128	; 0x80
 8003e40:	01db      	lsls	r3, r3, #7
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d106      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003e46:	4b07      	ldr	r3, [pc, #28]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e48:	68da      	ldr	r2, [r3, #12]
 8003e4a:	4b06      	ldr	r3, [pc, #24]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e4c:	2180      	movs	r1, #128	; 0x80
 8003e4e:	0249      	lsls	r1, r1, #9
 8003e50:	430a      	orrs	r2, r1
 8003e52:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003e54:	2312      	movs	r3, #18
 8003e56:	18fb      	adds	r3, r7, r3
 8003e58:	781b      	ldrb	r3, [r3, #0]
}
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b006      	add	sp, #24
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	46c0      	nop			; (mov r8, r8)
 8003e64:	40021000 	.word	0x40021000
 8003e68:	40007000 	.word	0x40007000
 8003e6c:	fffffcff 	.word	0xfffffcff
 8003e70:	fffeffff 	.word	0xfffeffff
 8003e74:	00001388 	.word	0x00001388
 8003e78:	efffffff 	.word	0xefffffff
 8003e7c:	fffff3ff 	.word	0xfffff3ff
 8003e80:	fff3ffff 	.word	0xfff3ffff
 8003e84:	ffcfffff 	.word	0xffcfffff
 8003e88:	ffffcfff 	.word	0xffffcfff
 8003e8c:	ffbfffff 	.word	0xffbfffff
 8003e90:	feffffff 	.word	0xfeffffff
 8003e94:	ffff3fff 	.word	0xffff3fff

08003e98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e04a      	b.n	8003f40 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	223d      	movs	r2, #61	; 0x3d
 8003eae:	5c9b      	ldrb	r3, [r3, r2]
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d107      	bne.n	8003ec6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	223c      	movs	r2, #60	; 0x3c
 8003eba:	2100      	movs	r1, #0
 8003ebc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	f7fd f939 	bl	8001138 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	223d      	movs	r2, #61	; 0x3d
 8003eca:	2102      	movs	r1, #2
 8003ecc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	0019      	movs	r1, r3
 8003ed8:	0010      	movs	r0, r2
 8003eda:	f000 fcd9 	bl	8004890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2248      	movs	r2, #72	; 0x48
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	223e      	movs	r2, #62	; 0x3e
 8003eea:	2101      	movs	r1, #1
 8003eec:	5499      	strb	r1, [r3, r2]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	223f      	movs	r2, #63	; 0x3f
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	5499      	strb	r1, [r3, r2]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2240      	movs	r2, #64	; 0x40
 8003efa:	2101      	movs	r1, #1
 8003efc:	5499      	strb	r1, [r3, r2]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2241      	movs	r2, #65	; 0x41
 8003f02:	2101      	movs	r1, #1
 8003f04:	5499      	strb	r1, [r3, r2]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2242      	movs	r2, #66	; 0x42
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	5499      	strb	r1, [r3, r2]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2243      	movs	r2, #67	; 0x43
 8003f12:	2101      	movs	r1, #1
 8003f14:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2244      	movs	r2, #68	; 0x44
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	5499      	strb	r1, [r3, r2]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2245      	movs	r2, #69	; 0x45
 8003f22:	2101      	movs	r1, #1
 8003f24:	5499      	strb	r1, [r3, r2]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2246      	movs	r2, #70	; 0x46
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	5499      	strb	r1, [r3, r2]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2247      	movs	r2, #71	; 0x47
 8003f32:	2101      	movs	r1, #1
 8003f34:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	223d      	movs	r2, #61	; 0x3d
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	0018      	movs	r0, r3
 8003f42:	46bd      	mov	sp, r7
 8003f44:	b002      	add	sp, #8
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	223d      	movs	r2, #61	; 0x3d
 8003f54:	5c9b      	ldrb	r3, [r3, r2]
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d001      	beq.n	8003f60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e042      	b.n	8003fe6 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	223d      	movs	r2, #61	; 0x3d
 8003f64:	2102      	movs	r1, #2
 8003f66:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68da      	ldr	r2, [r3, #12]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2101      	movs	r1, #1
 8003f74:	430a      	orrs	r2, r1
 8003f76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a1c      	ldr	r2, [pc, #112]	; (8003ff0 <HAL_TIM_Base_Start_IT+0xa8>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d00f      	beq.n	8003fa2 <HAL_TIM_Base_Start_IT+0x5a>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	2380      	movs	r3, #128	; 0x80
 8003f88:	05db      	lsls	r3, r3, #23
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d009      	beq.n	8003fa2 <HAL_TIM_Base_Start_IT+0x5a>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a18      	ldr	r2, [pc, #96]	; (8003ff4 <HAL_TIM_Base_Start_IT+0xac>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d004      	beq.n	8003fa2 <HAL_TIM_Base_Start_IT+0x5a>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a16      	ldr	r2, [pc, #88]	; (8003ff8 <HAL_TIM_Base_Start_IT+0xb0>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d116      	bne.n	8003fd0 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	4a14      	ldr	r2, [pc, #80]	; (8003ffc <HAL_TIM_Base_Start_IT+0xb4>)
 8003faa:	4013      	ands	r3, r2
 8003fac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2b06      	cmp	r3, #6
 8003fb2:	d016      	beq.n	8003fe2 <HAL_TIM_Base_Start_IT+0x9a>
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	2380      	movs	r3, #128	; 0x80
 8003fb8:	025b      	lsls	r3, r3, #9
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d011      	beq.n	8003fe2 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2101      	movs	r1, #1
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fce:	e008      	b.n	8003fe2 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2101      	movs	r1, #1
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	e000      	b.n	8003fe4 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe2:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	b004      	add	sp, #16
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	46c0      	nop			; (mov r8, r8)
 8003ff0:	40012c00 	.word	0x40012c00
 8003ff4:	40000400 	.word	0x40000400
 8003ff8:	40014000 	.word	0x40014000
 8003ffc:	00010007 	.word	0x00010007

08004000 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e04a      	b.n	80040a8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	223d      	movs	r2, #61	; 0x3d
 8004016:	5c9b      	ldrb	r3, [r3, r2]
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d107      	bne.n	800402e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	223c      	movs	r2, #60	; 0x3c
 8004022:	2100      	movs	r1, #0
 8004024:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	0018      	movs	r0, r3
 800402a:	f000 f841 	bl	80040b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	223d      	movs	r2, #61	; 0x3d
 8004032:	2102      	movs	r1, #2
 8004034:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	3304      	adds	r3, #4
 800403e:	0019      	movs	r1, r3
 8004040:	0010      	movs	r0, r2
 8004042:	f000 fc25 	bl	8004890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2248      	movs	r2, #72	; 0x48
 800404a:	2101      	movs	r1, #1
 800404c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	223e      	movs	r2, #62	; 0x3e
 8004052:	2101      	movs	r1, #1
 8004054:	5499      	strb	r1, [r3, r2]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	223f      	movs	r2, #63	; 0x3f
 800405a:	2101      	movs	r1, #1
 800405c:	5499      	strb	r1, [r3, r2]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2240      	movs	r2, #64	; 0x40
 8004062:	2101      	movs	r1, #1
 8004064:	5499      	strb	r1, [r3, r2]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2241      	movs	r2, #65	; 0x41
 800406a:	2101      	movs	r1, #1
 800406c:	5499      	strb	r1, [r3, r2]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2242      	movs	r2, #66	; 0x42
 8004072:	2101      	movs	r1, #1
 8004074:	5499      	strb	r1, [r3, r2]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2243      	movs	r2, #67	; 0x43
 800407a:	2101      	movs	r1, #1
 800407c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2244      	movs	r2, #68	; 0x44
 8004082:	2101      	movs	r1, #1
 8004084:	5499      	strb	r1, [r3, r2]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2245      	movs	r2, #69	; 0x45
 800408a:	2101      	movs	r1, #1
 800408c:	5499      	strb	r1, [r3, r2]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2246      	movs	r2, #70	; 0x46
 8004092:	2101      	movs	r1, #1
 8004094:	5499      	strb	r1, [r3, r2]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2247      	movs	r2, #71	; 0x47
 800409a:	2101      	movs	r1, #1
 800409c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	223d      	movs	r2, #61	; 0x3d
 80040a2:	2101      	movs	r1, #1
 80040a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	0018      	movs	r0, r3
 80040aa:	46bd      	mov	sp, r7
 80040ac:	b002      	add	sp, #8
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040b8:	46c0      	nop			; (mov r8, r8)
 80040ba:	46bd      	mov	sp, r7
 80040bc:	b002      	add	sp, #8
 80040be:	bd80      	pop	{r7, pc}

080040c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d108      	bne.n	80040e2 <HAL_TIM_PWM_Start+0x22>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	223e      	movs	r2, #62	; 0x3e
 80040d4:	5c9b      	ldrb	r3, [r3, r2]
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	3b01      	subs	r3, #1
 80040da:	1e5a      	subs	r2, r3, #1
 80040dc:	4193      	sbcs	r3, r2
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	e037      	b.n	8004152 <HAL_TIM_PWM_Start+0x92>
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b04      	cmp	r3, #4
 80040e6:	d108      	bne.n	80040fa <HAL_TIM_PWM_Start+0x3a>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	223f      	movs	r2, #63	; 0x3f
 80040ec:	5c9b      	ldrb	r3, [r3, r2]
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	3b01      	subs	r3, #1
 80040f2:	1e5a      	subs	r2, r3, #1
 80040f4:	4193      	sbcs	r3, r2
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	e02b      	b.n	8004152 <HAL_TIM_PWM_Start+0x92>
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d108      	bne.n	8004112 <HAL_TIM_PWM_Start+0x52>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2240      	movs	r2, #64	; 0x40
 8004104:	5c9b      	ldrb	r3, [r3, r2]
 8004106:	b2db      	uxtb	r3, r3
 8004108:	3b01      	subs	r3, #1
 800410a:	1e5a      	subs	r2, r3, #1
 800410c:	4193      	sbcs	r3, r2
 800410e:	b2db      	uxtb	r3, r3
 8004110:	e01f      	b.n	8004152 <HAL_TIM_PWM_Start+0x92>
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	2b0c      	cmp	r3, #12
 8004116:	d108      	bne.n	800412a <HAL_TIM_PWM_Start+0x6a>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2241      	movs	r2, #65	; 0x41
 800411c:	5c9b      	ldrb	r3, [r3, r2]
 800411e:	b2db      	uxtb	r3, r3
 8004120:	3b01      	subs	r3, #1
 8004122:	1e5a      	subs	r2, r3, #1
 8004124:	4193      	sbcs	r3, r2
 8004126:	b2db      	uxtb	r3, r3
 8004128:	e013      	b.n	8004152 <HAL_TIM_PWM_Start+0x92>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b10      	cmp	r3, #16
 800412e:	d108      	bne.n	8004142 <HAL_TIM_PWM_Start+0x82>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2242      	movs	r2, #66	; 0x42
 8004134:	5c9b      	ldrb	r3, [r3, r2]
 8004136:	b2db      	uxtb	r3, r3
 8004138:	3b01      	subs	r3, #1
 800413a:	1e5a      	subs	r2, r3, #1
 800413c:	4193      	sbcs	r3, r2
 800413e:	b2db      	uxtb	r3, r3
 8004140:	e007      	b.n	8004152 <HAL_TIM_PWM_Start+0x92>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2243      	movs	r2, #67	; 0x43
 8004146:	5c9b      	ldrb	r3, [r3, r2]
 8004148:	b2db      	uxtb	r3, r3
 800414a:	3b01      	subs	r3, #1
 800414c:	1e5a      	subs	r2, r3, #1
 800414e:	4193      	sbcs	r3, r2
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e08b      	b.n	8004272 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d104      	bne.n	800416a <HAL_TIM_PWM_Start+0xaa>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	223e      	movs	r2, #62	; 0x3e
 8004164:	2102      	movs	r1, #2
 8004166:	5499      	strb	r1, [r3, r2]
 8004168:	e023      	b.n	80041b2 <HAL_TIM_PWM_Start+0xf2>
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2b04      	cmp	r3, #4
 800416e:	d104      	bne.n	800417a <HAL_TIM_PWM_Start+0xba>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	223f      	movs	r2, #63	; 0x3f
 8004174:	2102      	movs	r1, #2
 8004176:	5499      	strb	r1, [r3, r2]
 8004178:	e01b      	b.n	80041b2 <HAL_TIM_PWM_Start+0xf2>
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2b08      	cmp	r3, #8
 800417e:	d104      	bne.n	800418a <HAL_TIM_PWM_Start+0xca>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2240      	movs	r2, #64	; 0x40
 8004184:	2102      	movs	r1, #2
 8004186:	5499      	strb	r1, [r3, r2]
 8004188:	e013      	b.n	80041b2 <HAL_TIM_PWM_Start+0xf2>
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	2b0c      	cmp	r3, #12
 800418e:	d104      	bne.n	800419a <HAL_TIM_PWM_Start+0xda>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2241      	movs	r2, #65	; 0x41
 8004194:	2102      	movs	r1, #2
 8004196:	5499      	strb	r1, [r3, r2]
 8004198:	e00b      	b.n	80041b2 <HAL_TIM_PWM_Start+0xf2>
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	2b10      	cmp	r3, #16
 800419e:	d104      	bne.n	80041aa <HAL_TIM_PWM_Start+0xea>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2242      	movs	r2, #66	; 0x42
 80041a4:	2102      	movs	r1, #2
 80041a6:	5499      	strb	r1, [r3, r2]
 80041a8:	e003      	b.n	80041b2 <HAL_TIM_PWM_Start+0xf2>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2243      	movs	r2, #67	; 0x43
 80041ae:	2102      	movs	r1, #2
 80041b0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6839      	ldr	r1, [r7, #0]
 80041b8:	2201      	movs	r2, #1
 80041ba:	0018      	movs	r0, r3
 80041bc:	f000 ff56 	bl	800506c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a2d      	ldr	r2, [pc, #180]	; (800427c <HAL_TIM_PWM_Start+0x1bc>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d00e      	beq.n	80041e8 <HAL_TIM_PWM_Start+0x128>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a2c      	ldr	r2, [pc, #176]	; (8004280 <HAL_TIM_PWM_Start+0x1c0>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d009      	beq.n	80041e8 <HAL_TIM_PWM_Start+0x128>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a2a      	ldr	r2, [pc, #168]	; (8004284 <HAL_TIM_PWM_Start+0x1c4>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d004      	beq.n	80041e8 <HAL_TIM_PWM_Start+0x128>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a29      	ldr	r2, [pc, #164]	; (8004288 <HAL_TIM_PWM_Start+0x1c8>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d101      	bne.n	80041ec <HAL_TIM_PWM_Start+0x12c>
 80041e8:	2301      	movs	r3, #1
 80041ea:	e000      	b.n	80041ee <HAL_TIM_PWM_Start+0x12e>
 80041ec:	2300      	movs	r3, #0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d008      	beq.n	8004204 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2180      	movs	r1, #128	; 0x80
 80041fe:	0209      	lsls	r1, r1, #8
 8004200:	430a      	orrs	r2, r1
 8004202:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a1c      	ldr	r2, [pc, #112]	; (800427c <HAL_TIM_PWM_Start+0x1bc>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d00f      	beq.n	800422e <HAL_TIM_PWM_Start+0x16e>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	2380      	movs	r3, #128	; 0x80
 8004214:	05db      	lsls	r3, r3, #23
 8004216:	429a      	cmp	r2, r3
 8004218:	d009      	beq.n	800422e <HAL_TIM_PWM_Start+0x16e>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a1b      	ldr	r2, [pc, #108]	; (800428c <HAL_TIM_PWM_Start+0x1cc>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d004      	beq.n	800422e <HAL_TIM_PWM_Start+0x16e>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a15      	ldr	r2, [pc, #84]	; (8004280 <HAL_TIM_PWM_Start+0x1c0>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d116      	bne.n	800425c <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	4a16      	ldr	r2, [pc, #88]	; (8004290 <HAL_TIM_PWM_Start+0x1d0>)
 8004236:	4013      	ands	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2b06      	cmp	r3, #6
 800423e:	d016      	beq.n	800426e <HAL_TIM_PWM_Start+0x1ae>
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	2380      	movs	r3, #128	; 0x80
 8004244:	025b      	lsls	r3, r3, #9
 8004246:	429a      	cmp	r2, r3
 8004248:	d011      	beq.n	800426e <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2101      	movs	r1, #1
 8004256:	430a      	orrs	r2, r1
 8004258:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800425a:	e008      	b.n	800426e <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2101      	movs	r1, #1
 8004268:	430a      	orrs	r2, r1
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	e000      	b.n	8004270 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800426e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	0018      	movs	r0, r3
 8004274:	46bd      	mov	sp, r7
 8004276:	b004      	add	sp, #16
 8004278:	bd80      	pop	{r7, pc}
 800427a:	46c0      	nop			; (mov r8, r8)
 800427c:	40012c00 	.word	0x40012c00
 8004280:	40014000 	.word	0x40014000
 8004284:	40014400 	.word	0x40014400
 8004288:	40014800 	.word	0x40014800
 800428c:	40000400 	.word	0x40000400
 8004290:	00010007 	.word	0x00010007

08004294 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	2202      	movs	r2, #2
 80042b0:	4013      	ands	r3, r2
 80042b2:	d021      	beq.n	80042f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2202      	movs	r2, #2
 80042b8:	4013      	ands	r3, r2
 80042ba:	d01d      	beq.n	80042f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2203      	movs	r2, #3
 80042c2:	4252      	negs	r2, r2
 80042c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	2203      	movs	r2, #3
 80042d4:	4013      	ands	r3, r2
 80042d6:	d004      	beq.n	80042e2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	0018      	movs	r0, r3
 80042dc:	f000 fac0 	bl	8004860 <HAL_TIM_IC_CaptureCallback>
 80042e0:	e007      	b.n	80042f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	0018      	movs	r0, r3
 80042e6:	f000 fab3 	bl	8004850 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	0018      	movs	r0, r3
 80042ee:	f000 fabf 	bl	8004870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	2204      	movs	r2, #4
 80042fc:	4013      	ands	r3, r2
 80042fe:	d022      	beq.n	8004346 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2204      	movs	r2, #4
 8004304:	4013      	ands	r3, r2
 8004306:	d01e      	beq.n	8004346 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2205      	movs	r2, #5
 800430e:	4252      	negs	r2, r2
 8004310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2202      	movs	r2, #2
 8004316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699a      	ldr	r2, [r3, #24]
 800431e:	23c0      	movs	r3, #192	; 0xc0
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4013      	ands	r3, r2
 8004324:	d004      	beq.n	8004330 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	0018      	movs	r0, r3
 800432a:	f000 fa99 	bl	8004860 <HAL_TIM_IC_CaptureCallback>
 800432e:	e007      	b.n	8004340 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	0018      	movs	r0, r3
 8004334:	f000 fa8c 	bl	8004850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	0018      	movs	r0, r3
 800433c:	f000 fa98 	bl	8004870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	2208      	movs	r2, #8
 800434a:	4013      	ands	r3, r2
 800434c:	d021      	beq.n	8004392 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2208      	movs	r2, #8
 8004352:	4013      	ands	r3, r2
 8004354:	d01d      	beq.n	8004392 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2209      	movs	r2, #9
 800435c:	4252      	negs	r2, r2
 800435e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2204      	movs	r2, #4
 8004364:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	69db      	ldr	r3, [r3, #28]
 800436c:	2203      	movs	r2, #3
 800436e:	4013      	ands	r3, r2
 8004370:	d004      	beq.n	800437c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	0018      	movs	r0, r3
 8004376:	f000 fa73 	bl	8004860 <HAL_TIM_IC_CaptureCallback>
 800437a:	e007      	b.n	800438c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	0018      	movs	r0, r3
 8004380:	f000 fa66 	bl	8004850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	0018      	movs	r0, r3
 8004388:	f000 fa72 	bl	8004870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	2210      	movs	r2, #16
 8004396:	4013      	ands	r3, r2
 8004398:	d022      	beq.n	80043e0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2210      	movs	r2, #16
 800439e:	4013      	ands	r3, r2
 80043a0:	d01e      	beq.n	80043e0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2211      	movs	r2, #17
 80043a8:	4252      	negs	r2, r2
 80043aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2208      	movs	r2, #8
 80043b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	69da      	ldr	r2, [r3, #28]
 80043b8:	23c0      	movs	r3, #192	; 0xc0
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4013      	ands	r3, r2
 80043be:	d004      	beq.n	80043ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	0018      	movs	r0, r3
 80043c4:	f000 fa4c 	bl	8004860 <HAL_TIM_IC_CaptureCallback>
 80043c8:	e007      	b.n	80043da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	0018      	movs	r0, r3
 80043ce:	f000 fa3f 	bl	8004850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	0018      	movs	r0, r3
 80043d6:	f000 fa4b 	bl	8004870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	2201      	movs	r2, #1
 80043e4:	4013      	ands	r3, r2
 80043e6:	d00c      	beq.n	8004402 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2201      	movs	r2, #1
 80043ec:	4013      	ands	r3, r2
 80043ee:	d008      	beq.n	8004402 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2202      	movs	r2, #2
 80043f6:	4252      	negs	r2, r2
 80043f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	0018      	movs	r0, r3
 80043fe:	f7fc fd73 	bl	8000ee8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	2280      	movs	r2, #128	; 0x80
 8004406:	4013      	ands	r3, r2
 8004408:	d104      	bne.n	8004414 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	2380      	movs	r3, #128	; 0x80
 800440e:	019b      	lsls	r3, r3, #6
 8004410:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004412:	d00b      	beq.n	800442c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2280      	movs	r2, #128	; 0x80
 8004418:	4013      	ands	r3, r2
 800441a:	d007      	beq.n	800442c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a1e      	ldr	r2, [pc, #120]	; (800449c <HAL_TIM_IRQHandler+0x208>)
 8004422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	0018      	movs	r0, r3
 8004428:	f000 feba 	bl	80051a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	2380      	movs	r3, #128	; 0x80
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	4013      	ands	r3, r2
 8004434:	d00b      	beq.n	800444e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2280      	movs	r2, #128	; 0x80
 800443a:	4013      	ands	r3, r2
 800443c:	d007      	beq.n	800444e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a17      	ldr	r2, [pc, #92]	; (80044a0 <HAL_TIM_IRQHandler+0x20c>)
 8004444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	0018      	movs	r0, r3
 800444a:	f000 feb1 	bl	80051b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2240      	movs	r2, #64	; 0x40
 8004452:	4013      	ands	r3, r2
 8004454:	d00c      	beq.n	8004470 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2240      	movs	r2, #64	; 0x40
 800445a:	4013      	ands	r3, r2
 800445c:	d008      	beq.n	8004470 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2241      	movs	r2, #65	; 0x41
 8004464:	4252      	negs	r2, r2
 8004466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	0018      	movs	r0, r3
 800446c:	f000 fa08 	bl	8004880 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2220      	movs	r2, #32
 8004474:	4013      	ands	r3, r2
 8004476:	d00c      	beq.n	8004492 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2220      	movs	r2, #32
 800447c:	4013      	ands	r3, r2
 800447e:	d008      	beq.n	8004492 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2221      	movs	r2, #33	; 0x21
 8004486:	4252      	negs	r2, r2
 8004488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	0018      	movs	r0, r3
 800448e:	f000 fe7f 	bl	8005190 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004492:	46c0      	nop			; (mov r8, r8)
 8004494:	46bd      	mov	sp, r7
 8004496:	b004      	add	sp, #16
 8004498:	bd80      	pop	{r7, pc}
 800449a:	46c0      	nop			; (mov r8, r8)
 800449c:	ffffdf7f 	.word	0xffffdf7f
 80044a0:	fffffeff 	.word	0xfffffeff

080044a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044b0:	2317      	movs	r3, #23
 80044b2:	18fb      	adds	r3, r7, r3
 80044b4:	2200      	movs	r2, #0
 80044b6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	223c      	movs	r2, #60	; 0x3c
 80044bc:	5c9b      	ldrb	r3, [r3, r2]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d101      	bne.n	80044c6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80044c2:	2302      	movs	r3, #2
 80044c4:	e0e5      	b.n	8004692 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	223c      	movs	r2, #60	; 0x3c
 80044ca:	2101      	movs	r1, #1
 80044cc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b14      	cmp	r3, #20
 80044d2:	d900      	bls.n	80044d6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80044d4:	e0d1      	b.n	800467a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	009a      	lsls	r2, r3, #2
 80044da:	4b70      	ldr	r3, [pc, #448]	; (800469c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80044dc:	18d3      	adds	r3, r2, r3
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	0011      	movs	r1, r2
 80044ea:	0018      	movs	r0, r3
 80044ec:	f000 fa5e 	bl	80049ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	699a      	ldr	r2, [r3, #24]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2108      	movs	r1, #8
 80044fc:	430a      	orrs	r2, r1
 80044fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699a      	ldr	r2, [r3, #24]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2104      	movs	r1, #4
 800450c:	438a      	bics	r2, r1
 800450e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6999      	ldr	r1, [r3, #24]
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	691a      	ldr	r2, [r3, #16]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	619a      	str	r2, [r3, #24]
      break;
 8004522:	e0af      	b.n	8004684 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68ba      	ldr	r2, [r7, #8]
 800452a:	0011      	movs	r1, r2
 800452c:	0018      	movs	r0, r3
 800452e:	f000 fac7 	bl	8004ac0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	699a      	ldr	r2, [r3, #24]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2180      	movs	r1, #128	; 0x80
 800453e:	0109      	lsls	r1, r1, #4
 8004540:	430a      	orrs	r2, r1
 8004542:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	699a      	ldr	r2, [r3, #24]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4954      	ldr	r1, [pc, #336]	; (80046a0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004550:	400a      	ands	r2, r1
 8004552:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6999      	ldr	r1, [r3, #24]
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	021a      	lsls	r2, r3, #8
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	619a      	str	r2, [r3, #24]
      break;
 8004568:	e08c      	b.n	8004684 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68ba      	ldr	r2, [r7, #8]
 8004570:	0011      	movs	r1, r2
 8004572:	0018      	movs	r0, r3
 8004574:	f000 fb28 	bl	8004bc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	69da      	ldr	r2, [r3, #28]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2108      	movs	r1, #8
 8004584:	430a      	orrs	r2, r1
 8004586:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	69da      	ldr	r2, [r3, #28]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2104      	movs	r1, #4
 8004594:	438a      	bics	r2, r1
 8004596:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	69d9      	ldr	r1, [r3, #28]
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	691a      	ldr	r2, [r3, #16]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	61da      	str	r2, [r3, #28]
      break;
 80045aa:	e06b      	b.n	8004684 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	0011      	movs	r1, r2
 80045b4:	0018      	movs	r0, r3
 80045b6:	f000 fb8f 	bl	8004cd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	69da      	ldr	r2, [r3, #28]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2180      	movs	r1, #128	; 0x80
 80045c6:	0109      	lsls	r1, r1, #4
 80045c8:	430a      	orrs	r2, r1
 80045ca:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	69da      	ldr	r2, [r3, #28]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4932      	ldr	r1, [pc, #200]	; (80046a0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80045d8:	400a      	ands	r2, r1
 80045da:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	69d9      	ldr	r1, [r3, #28]
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	021a      	lsls	r2, r3, #8
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	430a      	orrs	r2, r1
 80045ee:	61da      	str	r2, [r3, #28]
      break;
 80045f0:	e048      	b.n	8004684 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	0011      	movs	r1, r2
 80045fa:	0018      	movs	r0, r3
 80045fc:	f000 fbd6 	bl	8004dac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2108      	movs	r1, #8
 800460c:	430a      	orrs	r2, r1
 800460e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2104      	movs	r1, #4
 800461c:	438a      	bics	r2, r1
 800461e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	691a      	ldr	r2, [r3, #16]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004632:	e027      	b.n	8004684 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	0011      	movs	r1, r2
 800463c:	0018      	movs	r0, r3
 800463e:	f000 fc15 	bl	8004e6c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2180      	movs	r1, #128	; 0x80
 800464e:	0109      	lsls	r1, r1, #4
 8004650:	430a      	orrs	r2, r1
 8004652:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4910      	ldr	r1, [pc, #64]	; (80046a0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004660:	400a      	ands	r2, r1
 8004662:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	021a      	lsls	r2, r3, #8
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004678:	e004      	b.n	8004684 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800467a:	2317      	movs	r3, #23
 800467c:	18fb      	adds	r3, r7, r3
 800467e:	2201      	movs	r2, #1
 8004680:	701a      	strb	r2, [r3, #0]
      break;
 8004682:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	223c      	movs	r2, #60	; 0x3c
 8004688:	2100      	movs	r1, #0
 800468a:	5499      	strb	r1, [r3, r2]

  return status;
 800468c:	2317      	movs	r3, #23
 800468e:	18fb      	adds	r3, r7, r3
 8004690:	781b      	ldrb	r3, [r3, #0]
}
 8004692:	0018      	movs	r0, r3
 8004694:	46bd      	mov	sp, r7
 8004696:	b006      	add	sp, #24
 8004698:	bd80      	pop	{r7, pc}
 800469a:	46c0      	nop			; (mov r8, r8)
 800469c:	080083d8 	.word	0x080083d8
 80046a0:	fffffbff 	.word	0xfffffbff

080046a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046ae:	230f      	movs	r3, #15
 80046b0:	18fb      	adds	r3, r7, r3
 80046b2:	2200      	movs	r2, #0
 80046b4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	223c      	movs	r2, #60	; 0x3c
 80046ba:	5c9b      	ldrb	r3, [r3, r2]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d101      	bne.n	80046c4 <HAL_TIM_ConfigClockSource+0x20>
 80046c0:	2302      	movs	r3, #2
 80046c2:	e0bc      	b.n	800483e <HAL_TIM_ConfigClockSource+0x19a>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	223c      	movs	r2, #60	; 0x3c
 80046c8:	2101      	movs	r1, #1
 80046ca:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	223d      	movs	r2, #61	; 0x3d
 80046d0:	2102      	movs	r1, #2
 80046d2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	4a5a      	ldr	r2, [pc, #360]	; (8004848 <HAL_TIM_ConfigClockSource+0x1a4>)
 80046e0:	4013      	ands	r3, r2
 80046e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	4a59      	ldr	r2, [pc, #356]	; (800484c <HAL_TIM_ConfigClockSource+0x1a8>)
 80046e8:	4013      	ands	r3, r2
 80046ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2280      	movs	r2, #128	; 0x80
 80046fa:	0192      	lsls	r2, r2, #6
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d040      	beq.n	8004782 <HAL_TIM_ConfigClockSource+0xde>
 8004700:	2280      	movs	r2, #128	; 0x80
 8004702:	0192      	lsls	r2, r2, #6
 8004704:	4293      	cmp	r3, r2
 8004706:	d900      	bls.n	800470a <HAL_TIM_ConfigClockSource+0x66>
 8004708:	e088      	b.n	800481c <HAL_TIM_ConfigClockSource+0x178>
 800470a:	2280      	movs	r2, #128	; 0x80
 800470c:	0152      	lsls	r2, r2, #5
 800470e:	4293      	cmp	r3, r2
 8004710:	d100      	bne.n	8004714 <HAL_TIM_ConfigClockSource+0x70>
 8004712:	e088      	b.n	8004826 <HAL_TIM_ConfigClockSource+0x182>
 8004714:	2280      	movs	r2, #128	; 0x80
 8004716:	0152      	lsls	r2, r2, #5
 8004718:	4293      	cmp	r3, r2
 800471a:	d900      	bls.n	800471e <HAL_TIM_ConfigClockSource+0x7a>
 800471c:	e07e      	b.n	800481c <HAL_TIM_ConfigClockSource+0x178>
 800471e:	2b70      	cmp	r3, #112	; 0x70
 8004720:	d018      	beq.n	8004754 <HAL_TIM_ConfigClockSource+0xb0>
 8004722:	d900      	bls.n	8004726 <HAL_TIM_ConfigClockSource+0x82>
 8004724:	e07a      	b.n	800481c <HAL_TIM_ConfigClockSource+0x178>
 8004726:	2b60      	cmp	r3, #96	; 0x60
 8004728:	d04f      	beq.n	80047ca <HAL_TIM_ConfigClockSource+0x126>
 800472a:	d900      	bls.n	800472e <HAL_TIM_ConfigClockSource+0x8a>
 800472c:	e076      	b.n	800481c <HAL_TIM_ConfigClockSource+0x178>
 800472e:	2b50      	cmp	r3, #80	; 0x50
 8004730:	d03b      	beq.n	80047aa <HAL_TIM_ConfigClockSource+0x106>
 8004732:	d900      	bls.n	8004736 <HAL_TIM_ConfigClockSource+0x92>
 8004734:	e072      	b.n	800481c <HAL_TIM_ConfigClockSource+0x178>
 8004736:	2b40      	cmp	r3, #64	; 0x40
 8004738:	d057      	beq.n	80047ea <HAL_TIM_ConfigClockSource+0x146>
 800473a:	d900      	bls.n	800473e <HAL_TIM_ConfigClockSource+0x9a>
 800473c:	e06e      	b.n	800481c <HAL_TIM_ConfigClockSource+0x178>
 800473e:	2b30      	cmp	r3, #48	; 0x30
 8004740:	d063      	beq.n	800480a <HAL_TIM_ConfigClockSource+0x166>
 8004742:	d86b      	bhi.n	800481c <HAL_TIM_ConfigClockSource+0x178>
 8004744:	2b20      	cmp	r3, #32
 8004746:	d060      	beq.n	800480a <HAL_TIM_ConfigClockSource+0x166>
 8004748:	d868      	bhi.n	800481c <HAL_TIM_ConfigClockSource+0x178>
 800474a:	2b00      	cmp	r3, #0
 800474c:	d05d      	beq.n	800480a <HAL_TIM_ConfigClockSource+0x166>
 800474e:	2b10      	cmp	r3, #16
 8004750:	d05b      	beq.n	800480a <HAL_TIM_ConfigClockSource+0x166>
 8004752:	e063      	b.n	800481c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004764:	f000 fc62 	bl	800502c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	2277      	movs	r2, #119	; 0x77
 8004774:	4313      	orrs	r3, r2
 8004776:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	609a      	str	r2, [r3, #8]
      break;
 8004780:	e052      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004792:	f000 fc4b 	bl	800502c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689a      	ldr	r2, [r3, #8]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2180      	movs	r1, #128	; 0x80
 80047a2:	01c9      	lsls	r1, r1, #7
 80047a4:	430a      	orrs	r2, r1
 80047a6:	609a      	str	r2, [r3, #8]
      break;
 80047a8:	e03e      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047b6:	001a      	movs	r2, r3
 80047b8:	f000 fbbc 	bl	8004f34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2150      	movs	r1, #80	; 0x50
 80047c2:	0018      	movs	r0, r3
 80047c4:	f000 fc16 	bl	8004ff4 <TIM_ITRx_SetConfig>
      break;
 80047c8:	e02e      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047d6:	001a      	movs	r2, r3
 80047d8:	f000 fbda 	bl	8004f90 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2160      	movs	r1, #96	; 0x60
 80047e2:	0018      	movs	r0, r3
 80047e4:	f000 fc06 	bl	8004ff4 <TIM_ITRx_SetConfig>
      break;
 80047e8:	e01e      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047f6:	001a      	movs	r2, r3
 80047f8:	f000 fb9c 	bl	8004f34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2140      	movs	r1, #64	; 0x40
 8004802:	0018      	movs	r0, r3
 8004804:	f000 fbf6 	bl	8004ff4 <TIM_ITRx_SetConfig>
      break;
 8004808:	e00e      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	0019      	movs	r1, r3
 8004814:	0010      	movs	r0, r2
 8004816:	f000 fbed 	bl	8004ff4 <TIM_ITRx_SetConfig>
      break;
 800481a:	e005      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800481c:	230f      	movs	r3, #15
 800481e:	18fb      	adds	r3, r7, r3
 8004820:	2201      	movs	r2, #1
 8004822:	701a      	strb	r2, [r3, #0]
      break;
 8004824:	e000      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004826:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	223d      	movs	r2, #61	; 0x3d
 800482c:	2101      	movs	r1, #1
 800482e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	223c      	movs	r2, #60	; 0x3c
 8004834:	2100      	movs	r1, #0
 8004836:	5499      	strb	r1, [r3, r2]

  return status;
 8004838:	230f      	movs	r3, #15
 800483a:	18fb      	adds	r3, r7, r3
 800483c:	781b      	ldrb	r3, [r3, #0]
}
 800483e:	0018      	movs	r0, r3
 8004840:	46bd      	mov	sp, r7
 8004842:	b004      	add	sp, #16
 8004844:	bd80      	pop	{r7, pc}
 8004846:	46c0      	nop			; (mov r8, r8)
 8004848:	ffceff88 	.word	0xffceff88
 800484c:	ffff00ff 	.word	0xffff00ff

08004850 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004858:	46c0      	nop			; (mov r8, r8)
 800485a:	46bd      	mov	sp, r7
 800485c:	b002      	add	sp, #8
 800485e:	bd80      	pop	{r7, pc}

08004860 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004868:	46c0      	nop			; (mov r8, r8)
 800486a:	46bd      	mov	sp, r7
 800486c:	b002      	add	sp, #8
 800486e:	bd80      	pop	{r7, pc}

08004870 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004878:	46c0      	nop			; (mov r8, r8)
 800487a:	46bd      	mov	sp, r7
 800487c:	b002      	add	sp, #8
 800487e:	bd80      	pop	{r7, pc}

08004880 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004888:	46c0      	nop			; (mov r8, r8)
 800488a:	46bd      	mov	sp, r7
 800488c:	b002      	add	sp, #8
 800488e:	bd80      	pop	{r7, pc}

08004890 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a3b      	ldr	r2, [pc, #236]	; (8004990 <TIM_Base_SetConfig+0x100>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d008      	beq.n	80048ba <TIM_Base_SetConfig+0x2a>
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	2380      	movs	r3, #128	; 0x80
 80048ac:	05db      	lsls	r3, r3, #23
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d003      	beq.n	80048ba <TIM_Base_SetConfig+0x2a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a37      	ldr	r2, [pc, #220]	; (8004994 <TIM_Base_SetConfig+0x104>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d108      	bne.n	80048cc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2270      	movs	r2, #112	; 0x70
 80048be:	4393      	bics	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a30      	ldr	r2, [pc, #192]	; (8004990 <TIM_Base_SetConfig+0x100>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d018      	beq.n	8004906 <TIM_Base_SetConfig+0x76>
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	2380      	movs	r3, #128	; 0x80
 80048d8:	05db      	lsls	r3, r3, #23
 80048da:	429a      	cmp	r2, r3
 80048dc:	d013      	beq.n	8004906 <TIM_Base_SetConfig+0x76>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a2c      	ldr	r2, [pc, #176]	; (8004994 <TIM_Base_SetConfig+0x104>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d00f      	beq.n	8004906 <TIM_Base_SetConfig+0x76>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a2b      	ldr	r2, [pc, #172]	; (8004998 <TIM_Base_SetConfig+0x108>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d00b      	beq.n	8004906 <TIM_Base_SetConfig+0x76>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a2a      	ldr	r2, [pc, #168]	; (800499c <TIM_Base_SetConfig+0x10c>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d007      	beq.n	8004906 <TIM_Base_SetConfig+0x76>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a29      	ldr	r2, [pc, #164]	; (80049a0 <TIM_Base_SetConfig+0x110>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d003      	beq.n	8004906 <TIM_Base_SetConfig+0x76>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a28      	ldr	r2, [pc, #160]	; (80049a4 <TIM_Base_SetConfig+0x114>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d108      	bne.n	8004918 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	4a27      	ldr	r2, [pc, #156]	; (80049a8 <TIM_Base_SetConfig+0x118>)
 800490a:	4013      	ands	r3, r2
 800490c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	4313      	orrs	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2280      	movs	r2, #128	; 0x80
 800491c:	4393      	bics	r3, r2
 800491e:	001a      	movs	r2, r3
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	4313      	orrs	r3, r2
 8004926:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a13      	ldr	r2, [pc, #76]	; (8004990 <TIM_Base_SetConfig+0x100>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d00b      	beq.n	800495e <TIM_Base_SetConfig+0xce>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a14      	ldr	r2, [pc, #80]	; (800499c <TIM_Base_SetConfig+0x10c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d007      	beq.n	800495e <TIM_Base_SetConfig+0xce>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a13      	ldr	r2, [pc, #76]	; (80049a0 <TIM_Base_SetConfig+0x110>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d003      	beq.n	800495e <TIM_Base_SetConfig+0xce>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a12      	ldr	r2, [pc, #72]	; (80049a4 <TIM_Base_SetConfig+0x114>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d103      	bne.n	8004966 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	691a      	ldr	r2, [r3, #16]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	2201      	movs	r2, #1
 8004972:	4013      	ands	r3, r2
 8004974:	2b01      	cmp	r3, #1
 8004976:	d106      	bne.n	8004986 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	2201      	movs	r2, #1
 800497e:	4393      	bics	r3, r2
 8004980:	001a      	movs	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	611a      	str	r2, [r3, #16]
  }
}
 8004986:	46c0      	nop			; (mov r8, r8)
 8004988:	46bd      	mov	sp, r7
 800498a:	b004      	add	sp, #16
 800498c:	bd80      	pop	{r7, pc}
 800498e:	46c0      	nop			; (mov r8, r8)
 8004990:	40012c00 	.word	0x40012c00
 8004994:	40000400 	.word	0x40000400
 8004998:	40002000 	.word	0x40002000
 800499c:	40014000 	.word	0x40014000
 80049a0:	40014400 	.word	0x40014400
 80049a4:	40014800 	.word	0x40014800
 80049a8:	fffffcff 	.word	0xfffffcff

080049ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b086      	sub	sp, #24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	2201      	movs	r2, #1
 80049c2:	4393      	bics	r3, r2
 80049c4:	001a      	movs	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	4a32      	ldr	r2, [pc, #200]	; (8004aa4 <TIM_OC1_SetConfig+0xf8>)
 80049da:	4013      	ands	r3, r2
 80049dc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2203      	movs	r2, #3
 80049e2:	4393      	bics	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	2202      	movs	r2, #2
 80049f4:	4393      	bics	r3, r2
 80049f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a28      	ldr	r2, [pc, #160]	; (8004aa8 <TIM_OC1_SetConfig+0xfc>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d00b      	beq.n	8004a22 <TIM_OC1_SetConfig+0x76>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a27      	ldr	r2, [pc, #156]	; (8004aac <TIM_OC1_SetConfig+0x100>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d007      	beq.n	8004a22 <TIM_OC1_SetConfig+0x76>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a26      	ldr	r2, [pc, #152]	; (8004ab0 <TIM_OC1_SetConfig+0x104>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d003      	beq.n	8004a22 <TIM_OC1_SetConfig+0x76>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a25      	ldr	r2, [pc, #148]	; (8004ab4 <TIM_OC1_SetConfig+0x108>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d10c      	bne.n	8004a3c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	2208      	movs	r2, #8
 8004a26:	4393      	bics	r3, r2
 8004a28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	2204      	movs	r2, #4
 8004a38:	4393      	bics	r3, r2
 8004a3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a1a      	ldr	r2, [pc, #104]	; (8004aa8 <TIM_OC1_SetConfig+0xfc>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d00b      	beq.n	8004a5c <TIM_OC1_SetConfig+0xb0>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a19      	ldr	r2, [pc, #100]	; (8004aac <TIM_OC1_SetConfig+0x100>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d007      	beq.n	8004a5c <TIM_OC1_SetConfig+0xb0>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a18      	ldr	r2, [pc, #96]	; (8004ab0 <TIM_OC1_SetConfig+0x104>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d003      	beq.n	8004a5c <TIM_OC1_SetConfig+0xb0>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a17      	ldr	r2, [pc, #92]	; (8004ab4 <TIM_OC1_SetConfig+0x108>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d111      	bne.n	8004a80 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	4a16      	ldr	r2, [pc, #88]	; (8004ab8 <TIM_OC1_SetConfig+0x10c>)
 8004a60:	4013      	ands	r3, r2
 8004a62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	4a15      	ldr	r2, [pc, #84]	; (8004abc <TIM_OC1_SetConfig+0x110>)
 8004a68:	4013      	ands	r3, r2
 8004a6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	621a      	str	r2, [r3, #32]
}
 8004a9a:	46c0      	nop			; (mov r8, r8)
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	b006      	add	sp, #24
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	46c0      	nop			; (mov r8, r8)
 8004aa4:	fffeff8f 	.word	0xfffeff8f
 8004aa8:	40012c00 	.word	0x40012c00
 8004aac:	40014000 	.word	0x40014000
 8004ab0:	40014400 	.word	0x40014400
 8004ab4:	40014800 	.word	0x40014800
 8004ab8:	fffffeff 	.word	0xfffffeff
 8004abc:	fffffdff 	.word	0xfffffdff

08004ac0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	2210      	movs	r2, #16
 8004ad6:	4393      	bics	r3, r2
 8004ad8:	001a      	movs	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	4a2e      	ldr	r2, [pc, #184]	; (8004ba8 <TIM_OC2_SetConfig+0xe8>)
 8004aee:	4013      	ands	r3, r2
 8004af0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	4a2d      	ldr	r2, [pc, #180]	; (8004bac <TIM_OC2_SetConfig+0xec>)
 8004af6:	4013      	ands	r3, r2
 8004af8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	021b      	lsls	r3, r3, #8
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	4393      	bics	r3, r2
 8004b0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	011b      	lsls	r3, r3, #4
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a24      	ldr	r2, [pc, #144]	; (8004bb0 <TIM_OC2_SetConfig+0xf0>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d10d      	bne.n	8004b3e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	2280      	movs	r2, #128	; 0x80
 8004b26:	4393      	bics	r3, r2
 8004b28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	011b      	lsls	r3, r3, #4
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	2240      	movs	r2, #64	; 0x40
 8004b3a:	4393      	bics	r3, r2
 8004b3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a1b      	ldr	r2, [pc, #108]	; (8004bb0 <TIM_OC2_SetConfig+0xf0>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d00b      	beq.n	8004b5e <TIM_OC2_SetConfig+0x9e>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a1a      	ldr	r2, [pc, #104]	; (8004bb4 <TIM_OC2_SetConfig+0xf4>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d007      	beq.n	8004b5e <TIM_OC2_SetConfig+0x9e>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a19      	ldr	r2, [pc, #100]	; (8004bb8 <TIM_OC2_SetConfig+0xf8>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d003      	beq.n	8004b5e <TIM_OC2_SetConfig+0x9e>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a18      	ldr	r2, [pc, #96]	; (8004bbc <TIM_OC2_SetConfig+0xfc>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d113      	bne.n	8004b86 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	4a17      	ldr	r2, [pc, #92]	; (8004bc0 <TIM_OC2_SetConfig+0x100>)
 8004b62:	4013      	ands	r3, r2
 8004b64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	4a16      	ldr	r2, [pc, #88]	; (8004bc4 <TIM_OC2_SetConfig+0x104>)
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685a      	ldr	r2, [r3, #4]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	621a      	str	r2, [r3, #32]
}
 8004ba0:	46c0      	nop			; (mov r8, r8)
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	b006      	add	sp, #24
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	feff8fff 	.word	0xfeff8fff
 8004bac:	fffffcff 	.word	0xfffffcff
 8004bb0:	40012c00 	.word	0x40012c00
 8004bb4:	40014000 	.word	0x40014000
 8004bb8:	40014400 	.word	0x40014400
 8004bbc:	40014800 	.word	0x40014800
 8004bc0:	fffffbff 	.word	0xfffffbff
 8004bc4:	fffff7ff 	.word	0xfffff7ff

08004bc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a1b      	ldr	r3, [r3, #32]
 8004bdc:	4a33      	ldr	r2, [pc, #204]	; (8004cac <TIM_OC3_SetConfig+0xe4>)
 8004bde:	401a      	ands	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	69db      	ldr	r3, [r3, #28]
 8004bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	4a2f      	ldr	r2, [pc, #188]	; (8004cb0 <TIM_OC3_SetConfig+0xe8>)
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2203      	movs	r2, #3
 8004bfc:	4393      	bics	r3, r2
 8004bfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	4a29      	ldr	r2, [pc, #164]	; (8004cb4 <TIM_OC3_SetConfig+0xec>)
 8004c0e:	4013      	ands	r3, r2
 8004c10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	021b      	lsls	r3, r3, #8
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a25      	ldr	r2, [pc, #148]	; (8004cb8 <TIM_OC3_SetConfig+0xf0>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d10d      	bne.n	8004c42 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	4a24      	ldr	r2, [pc, #144]	; (8004cbc <TIM_OC3_SetConfig+0xf4>)
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	021b      	lsls	r3, r3, #8
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	4a20      	ldr	r2, [pc, #128]	; (8004cc0 <TIM_OC3_SetConfig+0xf8>)
 8004c3e:	4013      	ands	r3, r2
 8004c40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a1c      	ldr	r2, [pc, #112]	; (8004cb8 <TIM_OC3_SetConfig+0xf0>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d00b      	beq.n	8004c62 <TIM_OC3_SetConfig+0x9a>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a1d      	ldr	r2, [pc, #116]	; (8004cc4 <TIM_OC3_SetConfig+0xfc>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d007      	beq.n	8004c62 <TIM_OC3_SetConfig+0x9a>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a1c      	ldr	r2, [pc, #112]	; (8004cc8 <TIM_OC3_SetConfig+0x100>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d003      	beq.n	8004c62 <TIM_OC3_SetConfig+0x9a>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a1b      	ldr	r2, [pc, #108]	; (8004ccc <TIM_OC3_SetConfig+0x104>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d113      	bne.n	8004c8a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	4a1a      	ldr	r2, [pc, #104]	; (8004cd0 <TIM_OC3_SetConfig+0x108>)
 8004c66:	4013      	ands	r3, r2
 8004c68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	4a19      	ldr	r2, [pc, #100]	; (8004cd4 <TIM_OC3_SetConfig+0x10c>)
 8004c6e:	4013      	ands	r3, r2
 8004c70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	011b      	lsls	r3, r3, #4
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	011b      	lsls	r3, r3, #4
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	621a      	str	r2, [r3, #32]
}
 8004ca4:	46c0      	nop			; (mov r8, r8)
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	b006      	add	sp, #24
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	fffffeff 	.word	0xfffffeff
 8004cb0:	fffeff8f 	.word	0xfffeff8f
 8004cb4:	fffffdff 	.word	0xfffffdff
 8004cb8:	40012c00 	.word	0x40012c00
 8004cbc:	fffff7ff 	.word	0xfffff7ff
 8004cc0:	fffffbff 	.word	0xfffffbff
 8004cc4:	40014000 	.word	0x40014000
 8004cc8:	40014400 	.word	0x40014400
 8004ccc:	40014800 	.word	0x40014800
 8004cd0:	ffffefff 	.word	0xffffefff
 8004cd4:	ffffdfff 	.word	0xffffdfff

08004cd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	4a26      	ldr	r2, [pc, #152]	; (8004d88 <TIM_OC4_SetConfig+0xb0>)
 8004cee:	401a      	ands	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4a22      	ldr	r2, [pc, #136]	; (8004d8c <TIM_OC4_SetConfig+0xb4>)
 8004d04:	4013      	ands	r3, r2
 8004d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	4a21      	ldr	r2, [pc, #132]	; (8004d90 <TIM_OC4_SetConfig+0xb8>)
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	021b      	lsls	r3, r3, #8
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	4a1d      	ldr	r2, [pc, #116]	; (8004d94 <TIM_OC4_SetConfig+0xbc>)
 8004d20:	4013      	ands	r3, r2
 8004d22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	031b      	lsls	r3, r3, #12
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a19      	ldr	r2, [pc, #100]	; (8004d98 <TIM_OC4_SetConfig+0xc0>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d00b      	beq.n	8004d50 <TIM_OC4_SetConfig+0x78>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a18      	ldr	r2, [pc, #96]	; (8004d9c <TIM_OC4_SetConfig+0xc4>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d007      	beq.n	8004d50 <TIM_OC4_SetConfig+0x78>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a17      	ldr	r2, [pc, #92]	; (8004da0 <TIM_OC4_SetConfig+0xc8>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d003      	beq.n	8004d50 <TIM_OC4_SetConfig+0x78>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a16      	ldr	r2, [pc, #88]	; (8004da4 <TIM_OC4_SetConfig+0xcc>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d109      	bne.n	8004d64 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	4a15      	ldr	r2, [pc, #84]	; (8004da8 <TIM_OC4_SetConfig+0xd0>)
 8004d54:	4013      	ands	r3, r2
 8004d56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	019b      	lsls	r3, r3, #6
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	621a      	str	r2, [r3, #32]
}
 8004d7e:	46c0      	nop			; (mov r8, r8)
 8004d80:	46bd      	mov	sp, r7
 8004d82:	b006      	add	sp, #24
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	46c0      	nop			; (mov r8, r8)
 8004d88:	ffffefff 	.word	0xffffefff
 8004d8c:	feff8fff 	.word	0xfeff8fff
 8004d90:	fffffcff 	.word	0xfffffcff
 8004d94:	ffffdfff 	.word	0xffffdfff
 8004d98:	40012c00 	.word	0x40012c00
 8004d9c:	40014000 	.word	0x40014000
 8004da0:	40014400 	.word	0x40014400
 8004da4:	40014800 	.word	0x40014800
 8004da8:	ffffbfff 	.word	0xffffbfff

08004dac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	4a23      	ldr	r2, [pc, #140]	; (8004e50 <TIM_OC5_SetConfig+0xa4>)
 8004dc2:	401a      	ands	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4a1f      	ldr	r2, [pc, #124]	; (8004e54 <TIM_OC5_SetConfig+0xa8>)
 8004dd8:	4013      	ands	r3, r2
 8004dda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	4a1b      	ldr	r2, [pc, #108]	; (8004e58 <TIM_OC5_SetConfig+0xac>)
 8004dea:	4013      	ands	r3, r2
 8004dec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	041b      	lsls	r3, r3, #16
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a17      	ldr	r2, [pc, #92]	; (8004e5c <TIM_OC5_SetConfig+0xb0>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d00b      	beq.n	8004e1a <TIM_OC5_SetConfig+0x6e>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a16      	ldr	r2, [pc, #88]	; (8004e60 <TIM_OC5_SetConfig+0xb4>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d007      	beq.n	8004e1a <TIM_OC5_SetConfig+0x6e>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a15      	ldr	r2, [pc, #84]	; (8004e64 <TIM_OC5_SetConfig+0xb8>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d003      	beq.n	8004e1a <TIM_OC5_SetConfig+0x6e>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a14      	ldr	r2, [pc, #80]	; (8004e68 <TIM_OC5_SetConfig+0xbc>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d109      	bne.n	8004e2e <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	4a0c      	ldr	r2, [pc, #48]	; (8004e50 <TIM_OC5_SetConfig+0xa4>)
 8004e1e:	4013      	ands	r3, r2
 8004e20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	021b      	lsls	r3, r3, #8
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	621a      	str	r2, [r3, #32]
}
 8004e48:	46c0      	nop			; (mov r8, r8)
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	b006      	add	sp, #24
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	fffeffff 	.word	0xfffeffff
 8004e54:	fffeff8f 	.word	0xfffeff8f
 8004e58:	fffdffff 	.word	0xfffdffff
 8004e5c:	40012c00 	.word	0x40012c00
 8004e60:	40014000 	.word	0x40014000
 8004e64:	40014400 	.word	0x40014400
 8004e68:	40014800 	.word	0x40014800

08004e6c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	4a24      	ldr	r2, [pc, #144]	; (8004f14 <TIM_OC6_SetConfig+0xa8>)
 8004e82:	401a      	ands	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	4a20      	ldr	r2, [pc, #128]	; (8004f18 <TIM_OC6_SetConfig+0xac>)
 8004e98:	4013      	ands	r3, r2
 8004e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	021b      	lsls	r3, r3, #8
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	4a1c      	ldr	r2, [pc, #112]	; (8004f1c <TIM_OC6_SetConfig+0xb0>)
 8004eac:	4013      	ands	r3, r2
 8004eae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	051b      	lsls	r3, r3, #20
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a18      	ldr	r2, [pc, #96]	; (8004f20 <TIM_OC6_SetConfig+0xb4>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d00b      	beq.n	8004edc <TIM_OC6_SetConfig+0x70>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a17      	ldr	r2, [pc, #92]	; (8004f24 <TIM_OC6_SetConfig+0xb8>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d007      	beq.n	8004edc <TIM_OC6_SetConfig+0x70>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a16      	ldr	r2, [pc, #88]	; (8004f28 <TIM_OC6_SetConfig+0xbc>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d003      	beq.n	8004edc <TIM_OC6_SetConfig+0x70>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a15      	ldr	r2, [pc, #84]	; (8004f2c <TIM_OC6_SetConfig+0xc0>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d109      	bne.n	8004ef0 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	4a14      	ldr	r2, [pc, #80]	; (8004f30 <TIM_OC6_SetConfig+0xc4>)
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	029b      	lsls	r3, r3, #10
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	621a      	str	r2, [r3, #32]
}
 8004f0a:	46c0      	nop			; (mov r8, r8)
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	b006      	add	sp, #24
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	46c0      	nop			; (mov r8, r8)
 8004f14:	ffefffff 	.word	0xffefffff
 8004f18:	feff8fff 	.word	0xfeff8fff
 8004f1c:	ffdfffff 	.word	0xffdfffff
 8004f20:	40012c00 	.word	0x40012c00
 8004f24:	40014000 	.word	0x40014000
 8004f28:	40014400 	.word	0x40014400
 8004f2c:	40014800 	.word	0x40014800
 8004f30:	fffbffff 	.word	0xfffbffff

08004f34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	4393      	bics	r3, r2
 8004f4e:	001a      	movs	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	22f0      	movs	r2, #240	; 0xf0
 8004f5e:	4393      	bics	r3, r2
 8004f60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	011b      	lsls	r3, r3, #4
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	220a      	movs	r2, #10
 8004f70:	4393      	bics	r3, r2
 8004f72:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	621a      	str	r2, [r3, #32]
}
 8004f88:	46c0      	nop			; (mov r8, r8)
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	b006      	add	sp, #24
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6a1b      	ldr	r3, [r3, #32]
 8004fa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	2210      	movs	r2, #16
 8004fa8:	4393      	bics	r3, r2
 8004faa:	001a      	movs	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	4a0d      	ldr	r2, [pc, #52]	; (8004ff0 <TIM_TI2_ConfigInputStage+0x60>)
 8004fba:	4013      	ands	r3, r2
 8004fbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	031b      	lsls	r3, r3, #12
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	22a0      	movs	r2, #160	; 0xa0
 8004fcc:	4393      	bics	r3, r2
 8004fce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	011b      	lsls	r3, r3, #4
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	621a      	str	r2, [r3, #32]
}
 8004fe6:	46c0      	nop			; (mov r8, r8)
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	b006      	add	sp, #24
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	46c0      	nop			; (mov r8, r8)
 8004ff0:	ffff0fff 	.word	0xffff0fff

08004ff4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	4a08      	ldr	r2, [pc, #32]	; (8005028 <TIM_ITRx_SetConfig+0x34>)
 8005008:	4013      	ands	r3, r2
 800500a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	4313      	orrs	r3, r2
 8005012:	2207      	movs	r2, #7
 8005014:	4313      	orrs	r3, r2
 8005016:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	609a      	str	r2, [r3, #8]
}
 800501e:	46c0      	nop			; (mov r8, r8)
 8005020:	46bd      	mov	sp, r7
 8005022:	b004      	add	sp, #16
 8005024:	bd80      	pop	{r7, pc}
 8005026:	46c0      	nop			; (mov r8, r8)
 8005028:	ffcfff8f 	.word	0xffcfff8f

0800502c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
 8005038:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	4a09      	ldr	r2, [pc, #36]	; (8005068 <TIM_ETR_SetConfig+0x3c>)
 8005044:	4013      	ands	r3, r2
 8005046:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	021a      	lsls	r2, r3, #8
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	431a      	orrs	r2, r3
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	4313      	orrs	r3, r2
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	4313      	orrs	r3, r2
 8005058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	609a      	str	r2, [r3, #8]
}
 8005060:	46c0      	nop			; (mov r8, r8)
 8005062:	46bd      	mov	sp, r7
 8005064:	b006      	add	sp, #24
 8005066:	bd80      	pop	{r7, pc}
 8005068:	ffff00ff 	.word	0xffff00ff

0800506c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	221f      	movs	r2, #31
 800507c:	4013      	ands	r3, r2
 800507e:	2201      	movs	r2, #1
 8005080:	409a      	lsls	r2, r3
 8005082:	0013      	movs	r3, r2
 8005084:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	43d2      	mvns	r2, r2
 800508e:	401a      	ands	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6a1a      	ldr	r2, [r3, #32]
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	211f      	movs	r1, #31
 800509c:	400b      	ands	r3, r1
 800509e:	6879      	ldr	r1, [r7, #4]
 80050a0:	4099      	lsls	r1, r3
 80050a2:	000b      	movs	r3, r1
 80050a4:	431a      	orrs	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	621a      	str	r2, [r3, #32]
}
 80050aa:	46c0      	nop			; (mov r8, r8)
 80050ac:	46bd      	mov	sp, r7
 80050ae:	b006      	add	sp, #24
 80050b0:	bd80      	pop	{r7, pc}
	...

080050b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	223c      	movs	r2, #60	; 0x3c
 80050c2:	5c9b      	ldrb	r3, [r3, r2]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d101      	bne.n	80050cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050c8:	2302      	movs	r3, #2
 80050ca:	e055      	b.n	8005178 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	223c      	movs	r2, #60	; 0x3c
 80050d0:	2101      	movs	r1, #1
 80050d2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	223d      	movs	r2, #61	; 0x3d
 80050d8:	2102      	movs	r1, #2
 80050da:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a23      	ldr	r2, [pc, #140]	; (8005180 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d108      	bne.n	8005108 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	4a22      	ldr	r2, [pc, #136]	; (8005184 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80050fa:	4013      	ands	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	4313      	orrs	r3, r2
 8005106:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2270      	movs	r2, #112	; 0x70
 800510c:	4393      	bics	r3, r2
 800510e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	4313      	orrs	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a16      	ldr	r2, [pc, #88]	; (8005180 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d00f      	beq.n	800514c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	2380      	movs	r3, #128	; 0x80
 8005132:	05db      	lsls	r3, r3, #23
 8005134:	429a      	cmp	r2, r3
 8005136:	d009      	beq.n	800514c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a12      	ldr	r2, [pc, #72]	; (8005188 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d004      	beq.n	800514c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a11      	ldr	r2, [pc, #68]	; (800518c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d10c      	bne.n	8005166 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	2280      	movs	r2, #128	; 0x80
 8005150:	4393      	bics	r3, r2
 8005152:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	4313      	orrs	r3, r2
 800515c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68ba      	ldr	r2, [r7, #8]
 8005164:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	223d      	movs	r2, #61	; 0x3d
 800516a:	2101      	movs	r1, #1
 800516c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	223c      	movs	r2, #60	; 0x3c
 8005172:	2100      	movs	r1, #0
 8005174:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	0018      	movs	r0, r3
 800517a:	46bd      	mov	sp, r7
 800517c:	b004      	add	sp, #16
 800517e:	bd80      	pop	{r7, pc}
 8005180:	40012c00 	.word	0x40012c00
 8005184:	ff0fffff 	.word	0xff0fffff
 8005188:	40000400 	.word	0x40000400
 800518c:	40014000 	.word	0x40014000

08005190 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005198:	46c0      	nop			; (mov r8, r8)
 800519a:	46bd      	mov	sp, r7
 800519c:	b002      	add	sp, #8
 800519e:	bd80      	pop	{r7, pc}

080051a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051a8:	46c0      	nop			; (mov r8, r8)
 80051aa:	46bd      	mov	sp, r7
 80051ac:	b002      	add	sp, #8
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80051b8:	46c0      	nop			; (mov r8, r8)
 80051ba:	46bd      	mov	sp, r7
 80051bc:	b002      	add	sp, #8
 80051be:	bd80      	pop	{r7, pc}

080051c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e046      	b.n	8005260 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2288      	movs	r2, #136	; 0x88
 80051d6:	589b      	ldr	r3, [r3, r2]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d107      	bne.n	80051ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2284      	movs	r2, #132	; 0x84
 80051e0:	2100      	movs	r1, #0
 80051e2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	0018      	movs	r0, r3
 80051e8:	f7fc f852 	bl	8001290 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2288      	movs	r2, #136	; 0x88
 80051f0:	2124      	movs	r1, #36	; 0x24
 80051f2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2101      	movs	r1, #1
 8005200:	438a      	bics	r2, r1
 8005202:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005208:	2b00      	cmp	r3, #0
 800520a:	d003      	beq.n	8005214 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	0018      	movs	r0, r3
 8005210:	f000 ff2e 	bl	8006070 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	0018      	movs	r0, r3
 8005218:	f000 fc6c 	bl	8005af4 <UART_SetConfig>
 800521c:	0003      	movs	r3, r0
 800521e:	2b01      	cmp	r3, #1
 8005220:	d101      	bne.n	8005226 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e01c      	b.n	8005260 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	490d      	ldr	r1, [pc, #52]	; (8005268 <HAL_UART_Init+0xa8>)
 8005232:	400a      	ands	r2, r1
 8005234:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689a      	ldr	r2, [r3, #8]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	212a      	movs	r1, #42	; 0x2a
 8005242:	438a      	bics	r2, r1
 8005244:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2101      	movs	r1, #1
 8005252:	430a      	orrs	r2, r1
 8005254:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	0018      	movs	r0, r3
 800525a:	f000 ffbd 	bl	80061d8 <UART_CheckIdleState>
 800525e:	0003      	movs	r3, r0
}
 8005260:	0018      	movs	r0, r3
 8005262:	46bd      	mov	sp, r7
 8005264:	b002      	add	sp, #8
 8005266:	bd80      	pop	{r7, pc}
 8005268:	ffffb7ff 	.word	0xffffb7ff

0800526c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b08a      	sub	sp, #40	; 0x28
 8005270:	af02      	add	r7, sp, #8
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	603b      	str	r3, [r7, #0]
 8005278:	1dbb      	adds	r3, r7, #6
 800527a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2288      	movs	r2, #136	; 0x88
 8005280:	589b      	ldr	r3, [r3, r2]
 8005282:	2b20      	cmp	r3, #32
 8005284:	d000      	beq.n	8005288 <HAL_UART_Transmit+0x1c>
 8005286:	e090      	b.n	80053aa <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <HAL_UART_Transmit+0x2a>
 800528e:	1dbb      	adds	r3, r7, #6
 8005290:	881b      	ldrh	r3, [r3, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e088      	b.n	80053ac <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	689a      	ldr	r2, [r3, #8]
 800529e:	2380      	movs	r3, #128	; 0x80
 80052a0:	015b      	lsls	r3, r3, #5
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d109      	bne.n	80052ba <HAL_UART_Transmit+0x4e>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d105      	bne.n	80052ba <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	2201      	movs	r2, #1
 80052b2:	4013      	ands	r3, r2
 80052b4:	d001      	beq.n	80052ba <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e078      	b.n	80053ac <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2290      	movs	r2, #144	; 0x90
 80052be:	2100      	movs	r1, #0
 80052c0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2288      	movs	r2, #136	; 0x88
 80052c6:	2121      	movs	r1, #33	; 0x21
 80052c8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052ca:	f7fc f973 	bl	80015b4 <HAL_GetTick>
 80052ce:	0003      	movs	r3, r0
 80052d0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	1dba      	adds	r2, r7, #6
 80052d6:	2154      	movs	r1, #84	; 0x54
 80052d8:	8812      	ldrh	r2, [r2, #0]
 80052da:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	1dba      	adds	r2, r7, #6
 80052e0:	2156      	movs	r1, #86	; 0x56
 80052e2:	8812      	ldrh	r2, [r2, #0]
 80052e4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	689a      	ldr	r2, [r3, #8]
 80052ea:	2380      	movs	r3, #128	; 0x80
 80052ec:	015b      	lsls	r3, r3, #5
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d108      	bne.n	8005304 <HAL_UART_Transmit+0x98>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d104      	bne.n	8005304 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80052fa:	2300      	movs	r3, #0
 80052fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	61bb      	str	r3, [r7, #24]
 8005302:	e003      	b.n	800530c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005308:	2300      	movs	r3, #0
 800530a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800530c:	e030      	b.n	8005370 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	0013      	movs	r3, r2
 8005318:	2200      	movs	r2, #0
 800531a:	2180      	movs	r1, #128	; 0x80
 800531c:	f001 f806 	bl	800632c <UART_WaitOnFlagUntilTimeout>
 8005320:	1e03      	subs	r3, r0, #0
 8005322:	d005      	beq.n	8005330 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2288      	movs	r2, #136	; 0x88
 8005328:	2120      	movs	r1, #32
 800532a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	e03d      	b.n	80053ac <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d10b      	bne.n	800534e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	881b      	ldrh	r3, [r3, #0]
 800533a:	001a      	movs	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	05d2      	lsls	r2, r2, #23
 8005342:	0dd2      	lsrs	r2, r2, #23
 8005344:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	3302      	adds	r3, #2
 800534a:	61bb      	str	r3, [r7, #24]
 800534c:	e007      	b.n	800535e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	781a      	ldrb	r2, [r3, #0]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	3301      	adds	r3, #1
 800535c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2256      	movs	r2, #86	; 0x56
 8005362:	5a9b      	ldrh	r3, [r3, r2]
 8005364:	b29b      	uxth	r3, r3
 8005366:	3b01      	subs	r3, #1
 8005368:	b299      	uxth	r1, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2256      	movs	r2, #86	; 0x56
 800536e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2256      	movs	r2, #86	; 0x56
 8005374:	5a9b      	ldrh	r3, [r3, r2]
 8005376:	b29b      	uxth	r3, r3
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1c8      	bne.n	800530e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	9300      	str	r3, [sp, #0]
 8005384:	0013      	movs	r3, r2
 8005386:	2200      	movs	r2, #0
 8005388:	2140      	movs	r1, #64	; 0x40
 800538a:	f000 ffcf 	bl	800632c <UART_WaitOnFlagUntilTimeout>
 800538e:	1e03      	subs	r3, r0, #0
 8005390:	d005      	beq.n	800539e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2288      	movs	r2, #136	; 0x88
 8005396:	2120      	movs	r1, #32
 8005398:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e006      	b.n	80053ac <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2288      	movs	r2, #136	; 0x88
 80053a2:	2120      	movs	r1, #32
 80053a4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80053a6:	2300      	movs	r3, #0
 80053a8:	e000      	b.n	80053ac <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80053aa:	2302      	movs	r3, #2
  }
}
 80053ac:	0018      	movs	r0, r3
 80053ae:	46bd      	mov	sp, r7
 80053b0:	b008      	add	sp, #32
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b088      	sub	sp, #32
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	1dbb      	adds	r3, r7, #6
 80053c0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	228c      	movs	r2, #140	; 0x8c
 80053c6:	589b      	ldr	r3, [r3, r2]
 80053c8:	2b20      	cmp	r3, #32
 80053ca:	d14a      	bne.n	8005462 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <HAL_UART_Receive_IT+0x26>
 80053d2:	1dbb      	adds	r3, r7, #6
 80053d4:	881b      	ldrh	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e042      	b.n	8005464 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	689a      	ldr	r2, [r3, #8]
 80053e2:	2380      	movs	r3, #128	; 0x80
 80053e4:	015b      	lsls	r3, r3, #5
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d109      	bne.n	80053fe <HAL_UART_Receive_IT+0x4a>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d105      	bne.n	80053fe <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	2201      	movs	r2, #1
 80053f6:	4013      	ands	r3, r2
 80053f8:	d001      	beq.n	80053fe <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e032      	b.n	8005464 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a18      	ldr	r2, [pc, #96]	; (800546c <HAL_UART_Receive_IT+0xb8>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d020      	beq.n	8005450 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	2380      	movs	r3, #128	; 0x80
 8005416:	041b      	lsls	r3, r3, #16
 8005418:	4013      	ands	r3, r2
 800541a:	d019      	beq.n	8005450 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800541c:	f3ef 8310 	mrs	r3, PRIMASK
 8005420:	613b      	str	r3, [r7, #16]
  return(result);
 8005422:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005424:	61fb      	str	r3, [r7, #28]
 8005426:	2301      	movs	r3, #1
 8005428:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f383 8810 	msr	PRIMASK, r3
}
 8005430:	46c0      	nop			; (mov r8, r8)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2180      	movs	r1, #128	; 0x80
 800543e:	04c9      	lsls	r1, r1, #19
 8005440:	430a      	orrs	r2, r1
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	f383 8810 	msr	PRIMASK, r3
}
 800544e:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005450:	1dbb      	adds	r3, r7, #6
 8005452:	881a      	ldrh	r2, [r3, #0]
 8005454:	68b9      	ldr	r1, [r7, #8]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	0018      	movs	r0, r3
 800545a:	f000 ffd7 	bl	800640c <UART_Start_Receive_IT>
 800545e:	0003      	movs	r3, r0
 8005460:	e000      	b.n	8005464 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8005462:	2302      	movs	r3, #2
  }
}
 8005464:	0018      	movs	r0, r3
 8005466:	46bd      	mov	sp, r7
 8005468:	b008      	add	sp, #32
 800546a:	bd80      	pop	{r7, pc}
 800546c:	40008000 	.word	0x40008000

08005470 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005470:	b5b0      	push	{r4, r5, r7, lr}
 8005472:	b0aa      	sub	sp, #168	; 0xa8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	69db      	ldr	r3, [r3, #28]
 800547e:	22a4      	movs	r2, #164	; 0xa4
 8005480:	18b9      	adds	r1, r7, r2
 8005482:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	20a0      	movs	r0, #160	; 0xa0
 800548c:	1839      	adds	r1, r7, r0
 800548e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	249c      	movs	r4, #156	; 0x9c
 8005498:	1939      	adds	r1, r7, r4
 800549a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800549c:	0011      	movs	r1, r2
 800549e:	18bb      	adds	r3, r7, r2
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4aa2      	ldr	r2, [pc, #648]	; (800572c <HAL_UART_IRQHandler+0x2bc>)
 80054a4:	4013      	ands	r3, r2
 80054a6:	2298      	movs	r2, #152	; 0x98
 80054a8:	18bd      	adds	r5, r7, r2
 80054aa:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80054ac:	18bb      	adds	r3, r7, r2
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d11a      	bne.n	80054ea <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80054b4:	187b      	adds	r3, r7, r1
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2220      	movs	r2, #32
 80054ba:	4013      	ands	r3, r2
 80054bc:	d015      	beq.n	80054ea <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80054be:	183b      	adds	r3, r7, r0
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2220      	movs	r2, #32
 80054c4:	4013      	ands	r3, r2
 80054c6:	d105      	bne.n	80054d4 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80054c8:	193b      	adds	r3, r7, r4
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	2380      	movs	r3, #128	; 0x80
 80054ce:	055b      	lsls	r3, r3, #21
 80054d0:	4013      	ands	r3, r2
 80054d2:	d00a      	beq.n	80054ea <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d100      	bne.n	80054de <HAL_UART_IRQHandler+0x6e>
 80054dc:	e2dc      	b.n	8005a98 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	0010      	movs	r0, r2
 80054e6:	4798      	blx	r3
      }
      return;
 80054e8:	e2d6      	b.n	8005a98 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80054ea:	2398      	movs	r3, #152	; 0x98
 80054ec:	18fb      	adds	r3, r7, r3
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d100      	bne.n	80054f6 <HAL_UART_IRQHandler+0x86>
 80054f4:	e122      	b.n	800573c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80054f6:	239c      	movs	r3, #156	; 0x9c
 80054f8:	18fb      	adds	r3, r7, r3
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a8c      	ldr	r2, [pc, #560]	; (8005730 <HAL_UART_IRQHandler+0x2c0>)
 80054fe:	4013      	ands	r3, r2
 8005500:	d106      	bne.n	8005510 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005502:	23a0      	movs	r3, #160	; 0xa0
 8005504:	18fb      	adds	r3, r7, r3
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a8a      	ldr	r2, [pc, #552]	; (8005734 <HAL_UART_IRQHandler+0x2c4>)
 800550a:	4013      	ands	r3, r2
 800550c:	d100      	bne.n	8005510 <HAL_UART_IRQHandler+0xa0>
 800550e:	e115      	b.n	800573c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005510:	23a4      	movs	r3, #164	; 0xa4
 8005512:	18fb      	adds	r3, r7, r3
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2201      	movs	r2, #1
 8005518:	4013      	ands	r3, r2
 800551a:	d012      	beq.n	8005542 <HAL_UART_IRQHandler+0xd2>
 800551c:	23a0      	movs	r3, #160	; 0xa0
 800551e:	18fb      	adds	r3, r7, r3
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	2380      	movs	r3, #128	; 0x80
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	4013      	ands	r3, r2
 8005528:	d00b      	beq.n	8005542 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2201      	movs	r2, #1
 8005530:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2290      	movs	r2, #144	; 0x90
 8005536:	589b      	ldr	r3, [r3, r2]
 8005538:	2201      	movs	r2, #1
 800553a:	431a      	orrs	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2190      	movs	r1, #144	; 0x90
 8005540:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005542:	23a4      	movs	r3, #164	; 0xa4
 8005544:	18fb      	adds	r3, r7, r3
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2202      	movs	r2, #2
 800554a:	4013      	ands	r3, r2
 800554c:	d011      	beq.n	8005572 <HAL_UART_IRQHandler+0x102>
 800554e:	239c      	movs	r3, #156	; 0x9c
 8005550:	18fb      	adds	r3, r7, r3
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2201      	movs	r2, #1
 8005556:	4013      	ands	r3, r2
 8005558:	d00b      	beq.n	8005572 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2202      	movs	r2, #2
 8005560:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2290      	movs	r2, #144	; 0x90
 8005566:	589b      	ldr	r3, [r3, r2]
 8005568:	2204      	movs	r2, #4
 800556a:	431a      	orrs	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2190      	movs	r1, #144	; 0x90
 8005570:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005572:	23a4      	movs	r3, #164	; 0xa4
 8005574:	18fb      	adds	r3, r7, r3
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2204      	movs	r2, #4
 800557a:	4013      	ands	r3, r2
 800557c:	d011      	beq.n	80055a2 <HAL_UART_IRQHandler+0x132>
 800557e:	239c      	movs	r3, #156	; 0x9c
 8005580:	18fb      	adds	r3, r7, r3
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2201      	movs	r2, #1
 8005586:	4013      	ands	r3, r2
 8005588:	d00b      	beq.n	80055a2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2204      	movs	r2, #4
 8005590:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2290      	movs	r2, #144	; 0x90
 8005596:	589b      	ldr	r3, [r3, r2]
 8005598:	2202      	movs	r2, #2
 800559a:	431a      	orrs	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2190      	movs	r1, #144	; 0x90
 80055a0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80055a2:	23a4      	movs	r3, #164	; 0xa4
 80055a4:	18fb      	adds	r3, r7, r3
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2208      	movs	r2, #8
 80055aa:	4013      	ands	r3, r2
 80055ac:	d017      	beq.n	80055de <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80055ae:	23a0      	movs	r3, #160	; 0xa0
 80055b0:	18fb      	adds	r3, r7, r3
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2220      	movs	r2, #32
 80055b6:	4013      	ands	r3, r2
 80055b8:	d105      	bne.n	80055c6 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80055ba:	239c      	movs	r3, #156	; 0x9c
 80055bc:	18fb      	adds	r3, r7, r3
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a5b      	ldr	r2, [pc, #364]	; (8005730 <HAL_UART_IRQHandler+0x2c0>)
 80055c2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80055c4:	d00b      	beq.n	80055de <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2208      	movs	r2, #8
 80055cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2290      	movs	r2, #144	; 0x90
 80055d2:	589b      	ldr	r3, [r3, r2]
 80055d4:	2208      	movs	r2, #8
 80055d6:	431a      	orrs	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2190      	movs	r1, #144	; 0x90
 80055dc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80055de:	23a4      	movs	r3, #164	; 0xa4
 80055e0:	18fb      	adds	r3, r7, r3
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	2380      	movs	r3, #128	; 0x80
 80055e6:	011b      	lsls	r3, r3, #4
 80055e8:	4013      	ands	r3, r2
 80055ea:	d013      	beq.n	8005614 <HAL_UART_IRQHandler+0x1a4>
 80055ec:	23a0      	movs	r3, #160	; 0xa0
 80055ee:	18fb      	adds	r3, r7, r3
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	2380      	movs	r3, #128	; 0x80
 80055f4:	04db      	lsls	r3, r3, #19
 80055f6:	4013      	ands	r3, r2
 80055f8:	d00c      	beq.n	8005614 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2280      	movs	r2, #128	; 0x80
 8005600:	0112      	lsls	r2, r2, #4
 8005602:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2290      	movs	r2, #144	; 0x90
 8005608:	589b      	ldr	r3, [r3, r2]
 800560a:	2220      	movs	r2, #32
 800560c:	431a      	orrs	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2190      	movs	r1, #144	; 0x90
 8005612:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2290      	movs	r2, #144	; 0x90
 8005618:	589b      	ldr	r3, [r3, r2]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d100      	bne.n	8005620 <HAL_UART_IRQHandler+0x1b0>
 800561e:	e23d      	b.n	8005a9c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005620:	23a4      	movs	r3, #164	; 0xa4
 8005622:	18fb      	adds	r3, r7, r3
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2220      	movs	r2, #32
 8005628:	4013      	ands	r3, r2
 800562a:	d015      	beq.n	8005658 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800562c:	23a0      	movs	r3, #160	; 0xa0
 800562e:	18fb      	adds	r3, r7, r3
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2220      	movs	r2, #32
 8005634:	4013      	ands	r3, r2
 8005636:	d106      	bne.n	8005646 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005638:	239c      	movs	r3, #156	; 0x9c
 800563a:	18fb      	adds	r3, r7, r3
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	2380      	movs	r3, #128	; 0x80
 8005640:	055b      	lsls	r3, r3, #21
 8005642:	4013      	ands	r3, r2
 8005644:	d008      	beq.n	8005658 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800564a:	2b00      	cmp	r3, #0
 800564c:	d004      	beq.n	8005658 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	0010      	movs	r0, r2
 8005656:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2290      	movs	r2, #144	; 0x90
 800565c:	589b      	ldr	r3, [r3, r2]
 800565e:	2194      	movs	r1, #148	; 0x94
 8005660:	187a      	adds	r2, r7, r1
 8005662:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	2240      	movs	r2, #64	; 0x40
 800566c:	4013      	ands	r3, r2
 800566e:	2b40      	cmp	r3, #64	; 0x40
 8005670:	d004      	beq.n	800567c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005672:	187b      	adds	r3, r7, r1
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2228      	movs	r2, #40	; 0x28
 8005678:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800567a:	d04c      	beq.n	8005716 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	0018      	movs	r0, r3
 8005680:	f000 ffe8 	bl	8006654 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	2240      	movs	r2, #64	; 0x40
 800568c:	4013      	ands	r3, r2
 800568e:	2b40      	cmp	r3, #64	; 0x40
 8005690:	d13c      	bne.n	800570c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005692:	f3ef 8310 	mrs	r3, PRIMASK
 8005696:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005698:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800569a:	2090      	movs	r0, #144	; 0x90
 800569c:	183a      	adds	r2, r7, r0
 800569e:	6013      	str	r3, [r2, #0]
 80056a0:	2301      	movs	r3, #1
 80056a2:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056a6:	f383 8810 	msr	PRIMASK, r3
}
 80056aa:	46c0      	nop			; (mov r8, r8)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	689a      	ldr	r2, [r3, #8]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2140      	movs	r1, #64	; 0x40
 80056b8:	438a      	bics	r2, r1
 80056ba:	609a      	str	r2, [r3, #8]
 80056bc:	183b      	adds	r3, r7, r0
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056c4:	f383 8810 	msr	PRIMASK, r3
}
 80056c8:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2280      	movs	r2, #128	; 0x80
 80056ce:	589b      	ldr	r3, [r3, r2]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d016      	beq.n	8005702 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2280      	movs	r2, #128	; 0x80
 80056d8:	589b      	ldr	r3, [r3, r2]
 80056da:	4a17      	ldr	r2, [pc, #92]	; (8005738 <HAL_UART_IRQHandler+0x2c8>)
 80056dc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2280      	movs	r2, #128	; 0x80
 80056e2:	589b      	ldr	r3, [r3, r2]
 80056e4:	0018      	movs	r0, r3
 80056e6:	f7fc fd67 	bl	80021b8 <HAL_DMA_Abort_IT>
 80056ea:	1e03      	subs	r3, r0, #0
 80056ec:	d01c      	beq.n	8005728 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2280      	movs	r2, #128	; 0x80
 80056f2:	589b      	ldr	r3, [r3, r2]
 80056f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	2180      	movs	r1, #128	; 0x80
 80056fa:	5852      	ldr	r2, [r2, r1]
 80056fc:	0010      	movs	r0, r2
 80056fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005700:	e012      	b.n	8005728 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	0018      	movs	r0, r3
 8005706:	f000 f9e1 	bl	8005acc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800570a:	e00d      	b.n	8005728 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	0018      	movs	r0, r3
 8005710:	f000 f9dc 	bl	8005acc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005714:	e008      	b.n	8005728 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	0018      	movs	r0, r3
 800571a:	f000 f9d7 	bl	8005acc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2290      	movs	r2, #144	; 0x90
 8005722:	2100      	movs	r1, #0
 8005724:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005726:	e1b9      	b.n	8005a9c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005728:	46c0      	nop			; (mov r8, r8)
    return;
 800572a:	e1b7      	b.n	8005a9c <HAL_UART_IRQHandler+0x62c>
 800572c:	0000080f 	.word	0x0000080f
 8005730:	10000001 	.word	0x10000001
 8005734:	04000120 	.word	0x04000120
 8005738:	08006721 	.word	0x08006721

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005740:	2b01      	cmp	r3, #1
 8005742:	d000      	beq.n	8005746 <HAL_UART_IRQHandler+0x2d6>
 8005744:	e13e      	b.n	80059c4 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005746:	23a4      	movs	r3, #164	; 0xa4
 8005748:	18fb      	adds	r3, r7, r3
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2210      	movs	r2, #16
 800574e:	4013      	ands	r3, r2
 8005750:	d100      	bne.n	8005754 <HAL_UART_IRQHandler+0x2e4>
 8005752:	e137      	b.n	80059c4 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005754:	23a0      	movs	r3, #160	; 0xa0
 8005756:	18fb      	adds	r3, r7, r3
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2210      	movs	r2, #16
 800575c:	4013      	ands	r3, r2
 800575e:	d100      	bne.n	8005762 <HAL_UART_IRQHandler+0x2f2>
 8005760:	e130      	b.n	80059c4 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2210      	movs	r2, #16
 8005768:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	2240      	movs	r2, #64	; 0x40
 8005772:	4013      	ands	r3, r2
 8005774:	2b40      	cmp	r3, #64	; 0x40
 8005776:	d000      	beq.n	800577a <HAL_UART_IRQHandler+0x30a>
 8005778:	e0a4      	b.n	80058c4 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2280      	movs	r2, #128	; 0x80
 800577e:	589b      	ldr	r3, [r3, r2]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	217e      	movs	r1, #126	; 0x7e
 8005786:	187b      	adds	r3, r7, r1
 8005788:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800578a:	187b      	adds	r3, r7, r1
 800578c:	881b      	ldrh	r3, [r3, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d100      	bne.n	8005794 <HAL_UART_IRQHandler+0x324>
 8005792:	e185      	b.n	8005aa0 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	225c      	movs	r2, #92	; 0x5c
 8005798:	5a9b      	ldrh	r3, [r3, r2]
 800579a:	187a      	adds	r2, r7, r1
 800579c:	8812      	ldrh	r2, [r2, #0]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d300      	bcc.n	80057a4 <HAL_UART_IRQHandler+0x334>
 80057a2:	e17d      	b.n	8005aa0 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	187a      	adds	r2, r7, r1
 80057a8:	215e      	movs	r1, #94	; 0x5e
 80057aa:	8812      	ldrh	r2, [r2, #0]
 80057ac:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2280      	movs	r2, #128	; 0x80
 80057b2:	589b      	ldr	r3, [r3, r2]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2220      	movs	r2, #32
 80057ba:	4013      	ands	r3, r2
 80057bc:	d170      	bne.n	80058a0 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057be:	f3ef 8310 	mrs	r3, PRIMASK
 80057c2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80057c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80057c8:	2301      	movs	r3, #1
 80057ca:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ce:	f383 8810 	msr	PRIMASK, r3
}
 80057d2:	46c0      	nop			; (mov r8, r8)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	49b4      	ldr	r1, [pc, #720]	; (8005ab0 <HAL_UART_IRQHandler+0x640>)
 80057e0:	400a      	ands	r2, r1
 80057e2:	601a      	str	r2, [r3, #0]
 80057e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057e6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ea:	f383 8810 	msr	PRIMASK, r3
}
 80057ee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057f0:	f3ef 8310 	mrs	r3, PRIMASK
 80057f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80057f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057f8:	677b      	str	r3, [r7, #116]	; 0x74
 80057fa:	2301      	movs	r3, #1
 80057fc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005800:	f383 8810 	msr	PRIMASK, r3
}
 8005804:	46c0      	nop			; (mov r8, r8)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	689a      	ldr	r2, [r3, #8]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2101      	movs	r1, #1
 8005812:	438a      	bics	r2, r1
 8005814:	609a      	str	r2, [r3, #8]
 8005816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005818:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800581a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800581c:	f383 8810 	msr	PRIMASK, r3
}
 8005820:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005822:	f3ef 8310 	mrs	r3, PRIMASK
 8005826:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005828:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800582a:	673b      	str	r3, [r7, #112]	; 0x70
 800582c:	2301      	movs	r3, #1
 800582e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005832:	f383 8810 	msr	PRIMASK, r3
}
 8005836:	46c0      	nop			; (mov r8, r8)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689a      	ldr	r2, [r3, #8]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2140      	movs	r1, #64	; 0x40
 8005844:	438a      	bics	r2, r1
 8005846:	609a      	str	r2, [r3, #8]
 8005848:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800584a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800584c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800584e:	f383 8810 	msr	PRIMASK, r3
}
 8005852:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	228c      	movs	r2, #140	; 0x8c
 8005858:	2120      	movs	r1, #32
 800585a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005862:	f3ef 8310 	mrs	r3, PRIMASK
 8005866:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005868:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800586a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800586c:	2301      	movs	r3, #1
 800586e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005870:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005872:	f383 8810 	msr	PRIMASK, r3
}
 8005876:	46c0      	nop			; (mov r8, r8)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2110      	movs	r1, #16
 8005884:	438a      	bics	r2, r1
 8005886:	601a      	str	r2, [r3, #0]
 8005888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800588a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800588c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800588e:	f383 8810 	msr	PRIMASK, r3
}
 8005892:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2280      	movs	r2, #128	; 0x80
 8005898:	589b      	ldr	r3, [r3, r2]
 800589a:	0018      	movs	r0, r3
 800589c:	f7fc fc2a 	bl	80020f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2202      	movs	r2, #2
 80058a4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	225c      	movs	r2, #92	; 0x5c
 80058aa:	5a9a      	ldrh	r2, [r3, r2]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	215e      	movs	r1, #94	; 0x5e
 80058b0:	5a5b      	ldrh	r3, [r3, r1]
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	0011      	movs	r1, r2
 80058bc:	0018      	movs	r0, r3
 80058be:	f000 f90d 	bl	8005adc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80058c2:	e0ed      	b.n	8005aa0 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	225c      	movs	r2, #92	; 0x5c
 80058c8:	5a99      	ldrh	r1, [r3, r2]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	225e      	movs	r2, #94	; 0x5e
 80058ce:	5a9b      	ldrh	r3, [r3, r2]
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	208e      	movs	r0, #142	; 0x8e
 80058d4:	183b      	adds	r3, r7, r0
 80058d6:	1a8a      	subs	r2, r1, r2
 80058d8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	225e      	movs	r2, #94	; 0x5e
 80058de:	5a9b      	ldrh	r3, [r3, r2]
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d100      	bne.n	80058e8 <HAL_UART_IRQHandler+0x478>
 80058e6:	e0dd      	b.n	8005aa4 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80058e8:	183b      	adds	r3, r7, r0
 80058ea:	881b      	ldrh	r3, [r3, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d100      	bne.n	80058f2 <HAL_UART_IRQHandler+0x482>
 80058f0:	e0d8      	b.n	8005aa4 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058f2:	f3ef 8310 	mrs	r3, PRIMASK
 80058f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80058f8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058fa:	2488      	movs	r4, #136	; 0x88
 80058fc:	193a      	adds	r2, r7, r4
 80058fe:	6013      	str	r3, [r2, #0]
 8005900:	2301      	movs	r3, #1
 8005902:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	f383 8810 	msr	PRIMASK, r3
}
 800590a:	46c0      	nop			; (mov r8, r8)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4967      	ldr	r1, [pc, #412]	; (8005ab4 <HAL_UART_IRQHandler+0x644>)
 8005918:	400a      	ands	r2, r1
 800591a:	601a      	str	r2, [r3, #0]
 800591c:	193b      	adds	r3, r7, r4
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f383 8810 	msr	PRIMASK, r3
}
 8005928:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800592a:	f3ef 8310 	mrs	r3, PRIMASK
 800592e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005930:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005932:	2484      	movs	r4, #132	; 0x84
 8005934:	193a      	adds	r2, r7, r4
 8005936:	6013      	str	r3, [r2, #0]
 8005938:	2301      	movs	r3, #1
 800593a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	f383 8810 	msr	PRIMASK, r3
}
 8005942:	46c0      	nop			; (mov r8, r8)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	689a      	ldr	r2, [r3, #8]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	495a      	ldr	r1, [pc, #360]	; (8005ab8 <HAL_UART_IRQHandler+0x648>)
 8005950:	400a      	ands	r2, r1
 8005952:	609a      	str	r2, [r3, #8]
 8005954:	193b      	adds	r3, r7, r4
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800595a:	6a3b      	ldr	r3, [r7, #32]
 800595c:	f383 8810 	msr	PRIMASK, r3
}
 8005960:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	228c      	movs	r2, #140	; 0x8c
 8005966:	2120      	movs	r1, #32
 8005968:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005976:	f3ef 8310 	mrs	r3, PRIMASK
 800597a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800597e:	2480      	movs	r4, #128	; 0x80
 8005980:	193a      	adds	r2, r7, r4
 8005982:	6013      	str	r3, [r2, #0]
 8005984:	2301      	movs	r3, #1
 8005986:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598a:	f383 8810 	msr	PRIMASK, r3
}
 800598e:	46c0      	nop			; (mov r8, r8)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2110      	movs	r1, #16
 800599c:	438a      	bics	r2, r1
 800599e:	601a      	str	r2, [r3, #0]
 80059a0:	193b      	adds	r3, r7, r4
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a8:	f383 8810 	msr	PRIMASK, r3
}
 80059ac:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2202      	movs	r2, #2
 80059b2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059b4:	183b      	adds	r3, r7, r0
 80059b6:	881a      	ldrh	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	0011      	movs	r1, r2
 80059bc:	0018      	movs	r0, r3
 80059be:	f000 f88d 	bl	8005adc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80059c2:	e06f      	b.n	8005aa4 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80059c4:	23a4      	movs	r3, #164	; 0xa4
 80059c6:	18fb      	adds	r3, r7, r3
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	2380      	movs	r3, #128	; 0x80
 80059cc:	035b      	lsls	r3, r3, #13
 80059ce:	4013      	ands	r3, r2
 80059d0:	d010      	beq.n	80059f4 <HAL_UART_IRQHandler+0x584>
 80059d2:	239c      	movs	r3, #156	; 0x9c
 80059d4:	18fb      	adds	r3, r7, r3
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	2380      	movs	r3, #128	; 0x80
 80059da:	03db      	lsls	r3, r3, #15
 80059dc:	4013      	ands	r3, r2
 80059de:	d009      	beq.n	80059f4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2280      	movs	r2, #128	; 0x80
 80059e6:	0352      	lsls	r2, r2, #13
 80059e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	0018      	movs	r0, r3
 80059ee:	f001 fbeb 	bl	80071c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80059f2:	e05a      	b.n	8005aaa <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80059f4:	23a4      	movs	r3, #164	; 0xa4
 80059f6:	18fb      	adds	r3, r7, r3
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2280      	movs	r2, #128	; 0x80
 80059fc:	4013      	ands	r3, r2
 80059fe:	d016      	beq.n	8005a2e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005a00:	23a0      	movs	r3, #160	; 0xa0
 8005a02:	18fb      	adds	r3, r7, r3
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2280      	movs	r2, #128	; 0x80
 8005a08:	4013      	ands	r3, r2
 8005a0a:	d106      	bne.n	8005a1a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005a0c:	239c      	movs	r3, #156	; 0x9c
 8005a0e:	18fb      	adds	r3, r7, r3
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	2380      	movs	r3, #128	; 0x80
 8005a14:	041b      	lsls	r3, r3, #16
 8005a16:	4013      	ands	r3, r2
 8005a18:	d009      	beq.n	8005a2e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d042      	beq.n	8005aa8 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	0010      	movs	r0, r2
 8005a2a:	4798      	blx	r3
    }
    return;
 8005a2c:	e03c      	b.n	8005aa8 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005a2e:	23a4      	movs	r3, #164	; 0xa4
 8005a30:	18fb      	adds	r3, r7, r3
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2240      	movs	r2, #64	; 0x40
 8005a36:	4013      	ands	r3, r2
 8005a38:	d00a      	beq.n	8005a50 <HAL_UART_IRQHandler+0x5e0>
 8005a3a:	23a0      	movs	r3, #160	; 0xa0
 8005a3c:	18fb      	adds	r3, r7, r3
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2240      	movs	r2, #64	; 0x40
 8005a42:	4013      	ands	r3, r2
 8005a44:	d004      	beq.n	8005a50 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	0018      	movs	r0, r3
 8005a4a:	f000 fe80 	bl	800674e <UART_EndTransmit_IT>
    return;
 8005a4e:	e02c      	b.n	8005aaa <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005a50:	23a4      	movs	r3, #164	; 0xa4
 8005a52:	18fb      	adds	r3, r7, r3
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	2380      	movs	r3, #128	; 0x80
 8005a58:	041b      	lsls	r3, r3, #16
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	d00b      	beq.n	8005a76 <HAL_UART_IRQHandler+0x606>
 8005a5e:	23a0      	movs	r3, #160	; 0xa0
 8005a60:	18fb      	adds	r3, r7, r3
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	2380      	movs	r3, #128	; 0x80
 8005a66:	05db      	lsls	r3, r3, #23
 8005a68:	4013      	ands	r3, r2
 8005a6a:	d004      	beq.n	8005a76 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	0018      	movs	r0, r3
 8005a70:	f001 fbba 	bl	80071e8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a74:	e019      	b.n	8005aaa <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005a76:	23a4      	movs	r3, #164	; 0xa4
 8005a78:	18fb      	adds	r3, r7, r3
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	2380      	movs	r3, #128	; 0x80
 8005a7e:	045b      	lsls	r3, r3, #17
 8005a80:	4013      	ands	r3, r2
 8005a82:	d012      	beq.n	8005aaa <HAL_UART_IRQHandler+0x63a>
 8005a84:	23a0      	movs	r3, #160	; 0xa0
 8005a86:	18fb      	adds	r3, r7, r3
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	da0d      	bge.n	8005aaa <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	0018      	movs	r0, r3
 8005a92:	f001 fba1 	bl	80071d8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a96:	e008      	b.n	8005aaa <HAL_UART_IRQHandler+0x63a>
      return;
 8005a98:	46c0      	nop			; (mov r8, r8)
 8005a9a:	e006      	b.n	8005aaa <HAL_UART_IRQHandler+0x63a>
    return;
 8005a9c:	46c0      	nop			; (mov r8, r8)
 8005a9e:	e004      	b.n	8005aaa <HAL_UART_IRQHandler+0x63a>
      return;
 8005aa0:	46c0      	nop			; (mov r8, r8)
 8005aa2:	e002      	b.n	8005aaa <HAL_UART_IRQHandler+0x63a>
      return;
 8005aa4:	46c0      	nop			; (mov r8, r8)
 8005aa6:	e000      	b.n	8005aaa <HAL_UART_IRQHandler+0x63a>
    return;
 8005aa8:	46c0      	nop			; (mov r8, r8)
  }
}
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	b02a      	add	sp, #168	; 0xa8
 8005aae:	bdb0      	pop	{r4, r5, r7, pc}
 8005ab0:	fffffeff 	.word	0xfffffeff
 8005ab4:	fffffedf 	.word	0xfffffedf
 8005ab8:	effffffe 	.word	0xeffffffe

08005abc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005ac4:	46c0      	nop			; (mov r8, r8)
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	b002      	add	sp, #8
 8005aca:	bd80      	pop	{r7, pc}

08005acc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ad4:	46c0      	nop			; (mov r8, r8)
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	b002      	add	sp, #8
 8005ada:	bd80      	pop	{r7, pc}

08005adc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	000a      	movs	r2, r1
 8005ae6:	1cbb      	adds	r3, r7, #2
 8005ae8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005aea:	46c0      	nop			; (mov r8, r8)
 8005aec:	46bd      	mov	sp, r7
 8005aee:	b002      	add	sp, #8
 8005af0:	bd80      	pop	{r7, pc}
	...

08005af4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005af4:	b5b0      	push	{r4, r5, r7, lr}
 8005af6:	b090      	sub	sp, #64	; 0x40
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005afc:	231a      	movs	r3, #26
 8005afe:	2220      	movs	r2, #32
 8005b00:	189b      	adds	r3, r3, r2
 8005b02:	19db      	adds	r3, r3, r7
 8005b04:	2200      	movs	r2, #0
 8005b06:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0a:	689a      	ldr	r2, [r3, #8]
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	431a      	orrs	r2, r3
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	431a      	orrs	r2, r3
 8005b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1a:	69db      	ldr	r3, [r3, #28]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4aaf      	ldr	r2, [pc, #700]	; (8005de4 <UART_SetConfig+0x2f0>)
 8005b28:	4013      	ands	r3, r2
 8005b2a:	0019      	movs	r1, r3
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b32:	430b      	orrs	r3, r1
 8005b34:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	4aaa      	ldr	r2, [pc, #680]	; (8005de8 <UART_SetConfig+0x2f4>)
 8005b3e:	4013      	ands	r3, r2
 8005b40:	0018      	movs	r0, r3
 8005b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b44:	68d9      	ldr	r1, [r3, #12]
 8005b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	0003      	movs	r3, r0
 8005b4c:	430b      	orrs	r3, r1
 8005b4e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4aa4      	ldr	r2, [pc, #656]	; (8005dec <UART_SetConfig+0x2f8>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d004      	beq.n	8005b6a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b62:	6a1b      	ldr	r3, [r3, #32]
 8005b64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b66:	4313      	orrs	r3, r2
 8005b68:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	4a9f      	ldr	r2, [pc, #636]	; (8005df0 <UART_SetConfig+0x2fc>)
 8005b72:	4013      	ands	r3, r2
 8005b74:	0019      	movs	r1, r3
 8005b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b7c:	430b      	orrs	r3, r1
 8005b7e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b86:	220f      	movs	r2, #15
 8005b88:	4393      	bics	r3, r2
 8005b8a:	0018      	movs	r0, r3
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	0003      	movs	r3, r0
 8005b96:	430b      	orrs	r3, r1
 8005b98:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a95      	ldr	r2, [pc, #596]	; (8005df4 <UART_SetConfig+0x300>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d131      	bne.n	8005c08 <UART_SetConfig+0x114>
 8005ba4:	4b94      	ldr	r3, [pc, #592]	; (8005df8 <UART_SetConfig+0x304>)
 8005ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba8:	2203      	movs	r2, #3
 8005baa:	4013      	ands	r3, r2
 8005bac:	2b03      	cmp	r3, #3
 8005bae:	d01d      	beq.n	8005bec <UART_SetConfig+0xf8>
 8005bb0:	d823      	bhi.n	8005bfa <UART_SetConfig+0x106>
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d00c      	beq.n	8005bd0 <UART_SetConfig+0xdc>
 8005bb6:	d820      	bhi.n	8005bfa <UART_SetConfig+0x106>
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d002      	beq.n	8005bc2 <UART_SetConfig+0xce>
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d00e      	beq.n	8005bde <UART_SetConfig+0xea>
 8005bc0:	e01b      	b.n	8005bfa <UART_SetConfig+0x106>
 8005bc2:	231b      	movs	r3, #27
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	189b      	adds	r3, r3, r2
 8005bc8:	19db      	adds	r3, r3, r7
 8005bca:	2200      	movs	r2, #0
 8005bcc:	701a      	strb	r2, [r3, #0]
 8005bce:	e0b4      	b.n	8005d3a <UART_SetConfig+0x246>
 8005bd0:	231b      	movs	r3, #27
 8005bd2:	2220      	movs	r2, #32
 8005bd4:	189b      	adds	r3, r3, r2
 8005bd6:	19db      	adds	r3, r3, r7
 8005bd8:	2202      	movs	r2, #2
 8005bda:	701a      	strb	r2, [r3, #0]
 8005bdc:	e0ad      	b.n	8005d3a <UART_SetConfig+0x246>
 8005bde:	231b      	movs	r3, #27
 8005be0:	2220      	movs	r2, #32
 8005be2:	189b      	adds	r3, r3, r2
 8005be4:	19db      	adds	r3, r3, r7
 8005be6:	2204      	movs	r2, #4
 8005be8:	701a      	strb	r2, [r3, #0]
 8005bea:	e0a6      	b.n	8005d3a <UART_SetConfig+0x246>
 8005bec:	231b      	movs	r3, #27
 8005bee:	2220      	movs	r2, #32
 8005bf0:	189b      	adds	r3, r3, r2
 8005bf2:	19db      	adds	r3, r3, r7
 8005bf4:	2208      	movs	r2, #8
 8005bf6:	701a      	strb	r2, [r3, #0]
 8005bf8:	e09f      	b.n	8005d3a <UART_SetConfig+0x246>
 8005bfa:	231b      	movs	r3, #27
 8005bfc:	2220      	movs	r2, #32
 8005bfe:	189b      	adds	r3, r3, r2
 8005c00:	19db      	adds	r3, r3, r7
 8005c02:	2210      	movs	r2, #16
 8005c04:	701a      	strb	r2, [r3, #0]
 8005c06:	e098      	b.n	8005d3a <UART_SetConfig+0x246>
 8005c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a7b      	ldr	r2, [pc, #492]	; (8005dfc <UART_SetConfig+0x308>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d131      	bne.n	8005c76 <UART_SetConfig+0x182>
 8005c12:	4b79      	ldr	r3, [pc, #484]	; (8005df8 <UART_SetConfig+0x304>)
 8005c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c16:	220c      	movs	r2, #12
 8005c18:	4013      	ands	r3, r2
 8005c1a:	2b0c      	cmp	r3, #12
 8005c1c:	d01d      	beq.n	8005c5a <UART_SetConfig+0x166>
 8005c1e:	d823      	bhi.n	8005c68 <UART_SetConfig+0x174>
 8005c20:	2b08      	cmp	r3, #8
 8005c22:	d00c      	beq.n	8005c3e <UART_SetConfig+0x14a>
 8005c24:	d820      	bhi.n	8005c68 <UART_SetConfig+0x174>
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d002      	beq.n	8005c30 <UART_SetConfig+0x13c>
 8005c2a:	2b04      	cmp	r3, #4
 8005c2c:	d00e      	beq.n	8005c4c <UART_SetConfig+0x158>
 8005c2e:	e01b      	b.n	8005c68 <UART_SetConfig+0x174>
 8005c30:	231b      	movs	r3, #27
 8005c32:	2220      	movs	r2, #32
 8005c34:	189b      	adds	r3, r3, r2
 8005c36:	19db      	adds	r3, r3, r7
 8005c38:	2200      	movs	r2, #0
 8005c3a:	701a      	strb	r2, [r3, #0]
 8005c3c:	e07d      	b.n	8005d3a <UART_SetConfig+0x246>
 8005c3e:	231b      	movs	r3, #27
 8005c40:	2220      	movs	r2, #32
 8005c42:	189b      	adds	r3, r3, r2
 8005c44:	19db      	adds	r3, r3, r7
 8005c46:	2202      	movs	r2, #2
 8005c48:	701a      	strb	r2, [r3, #0]
 8005c4a:	e076      	b.n	8005d3a <UART_SetConfig+0x246>
 8005c4c:	231b      	movs	r3, #27
 8005c4e:	2220      	movs	r2, #32
 8005c50:	189b      	adds	r3, r3, r2
 8005c52:	19db      	adds	r3, r3, r7
 8005c54:	2204      	movs	r2, #4
 8005c56:	701a      	strb	r2, [r3, #0]
 8005c58:	e06f      	b.n	8005d3a <UART_SetConfig+0x246>
 8005c5a:	231b      	movs	r3, #27
 8005c5c:	2220      	movs	r2, #32
 8005c5e:	189b      	adds	r3, r3, r2
 8005c60:	19db      	adds	r3, r3, r7
 8005c62:	2208      	movs	r2, #8
 8005c64:	701a      	strb	r2, [r3, #0]
 8005c66:	e068      	b.n	8005d3a <UART_SetConfig+0x246>
 8005c68:	231b      	movs	r3, #27
 8005c6a:	2220      	movs	r2, #32
 8005c6c:	189b      	adds	r3, r3, r2
 8005c6e:	19db      	adds	r3, r3, r7
 8005c70:	2210      	movs	r2, #16
 8005c72:	701a      	strb	r2, [r3, #0]
 8005c74:	e061      	b.n	8005d3a <UART_SetConfig+0x246>
 8005c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a61      	ldr	r2, [pc, #388]	; (8005e00 <UART_SetConfig+0x30c>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d106      	bne.n	8005c8e <UART_SetConfig+0x19a>
 8005c80:	231b      	movs	r3, #27
 8005c82:	2220      	movs	r2, #32
 8005c84:	189b      	adds	r3, r3, r2
 8005c86:	19db      	adds	r3, r3, r7
 8005c88:	2200      	movs	r2, #0
 8005c8a:	701a      	strb	r2, [r3, #0]
 8005c8c:	e055      	b.n	8005d3a <UART_SetConfig+0x246>
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a5c      	ldr	r2, [pc, #368]	; (8005e04 <UART_SetConfig+0x310>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d106      	bne.n	8005ca6 <UART_SetConfig+0x1b2>
 8005c98:	231b      	movs	r3, #27
 8005c9a:	2220      	movs	r2, #32
 8005c9c:	189b      	adds	r3, r3, r2
 8005c9e:	19db      	adds	r3, r3, r7
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	701a      	strb	r2, [r3, #0]
 8005ca4:	e049      	b.n	8005d3a <UART_SetConfig+0x246>
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a50      	ldr	r2, [pc, #320]	; (8005dec <UART_SetConfig+0x2f8>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d13e      	bne.n	8005d2e <UART_SetConfig+0x23a>
 8005cb0:	4b51      	ldr	r3, [pc, #324]	; (8005df8 <UART_SetConfig+0x304>)
 8005cb2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005cb4:	23c0      	movs	r3, #192	; 0xc0
 8005cb6:	011b      	lsls	r3, r3, #4
 8005cb8:	4013      	ands	r3, r2
 8005cba:	22c0      	movs	r2, #192	; 0xc0
 8005cbc:	0112      	lsls	r2, r2, #4
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d027      	beq.n	8005d12 <UART_SetConfig+0x21e>
 8005cc2:	22c0      	movs	r2, #192	; 0xc0
 8005cc4:	0112      	lsls	r2, r2, #4
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d82a      	bhi.n	8005d20 <UART_SetConfig+0x22c>
 8005cca:	2280      	movs	r2, #128	; 0x80
 8005ccc:	0112      	lsls	r2, r2, #4
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d011      	beq.n	8005cf6 <UART_SetConfig+0x202>
 8005cd2:	2280      	movs	r2, #128	; 0x80
 8005cd4:	0112      	lsls	r2, r2, #4
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d822      	bhi.n	8005d20 <UART_SetConfig+0x22c>
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d004      	beq.n	8005ce8 <UART_SetConfig+0x1f4>
 8005cde:	2280      	movs	r2, #128	; 0x80
 8005ce0:	00d2      	lsls	r2, r2, #3
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d00e      	beq.n	8005d04 <UART_SetConfig+0x210>
 8005ce6:	e01b      	b.n	8005d20 <UART_SetConfig+0x22c>
 8005ce8:	231b      	movs	r3, #27
 8005cea:	2220      	movs	r2, #32
 8005cec:	189b      	adds	r3, r3, r2
 8005cee:	19db      	adds	r3, r3, r7
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	701a      	strb	r2, [r3, #0]
 8005cf4:	e021      	b.n	8005d3a <UART_SetConfig+0x246>
 8005cf6:	231b      	movs	r3, #27
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	189b      	adds	r3, r3, r2
 8005cfc:	19db      	adds	r3, r3, r7
 8005cfe:	2202      	movs	r2, #2
 8005d00:	701a      	strb	r2, [r3, #0]
 8005d02:	e01a      	b.n	8005d3a <UART_SetConfig+0x246>
 8005d04:	231b      	movs	r3, #27
 8005d06:	2220      	movs	r2, #32
 8005d08:	189b      	adds	r3, r3, r2
 8005d0a:	19db      	adds	r3, r3, r7
 8005d0c:	2204      	movs	r2, #4
 8005d0e:	701a      	strb	r2, [r3, #0]
 8005d10:	e013      	b.n	8005d3a <UART_SetConfig+0x246>
 8005d12:	231b      	movs	r3, #27
 8005d14:	2220      	movs	r2, #32
 8005d16:	189b      	adds	r3, r3, r2
 8005d18:	19db      	adds	r3, r3, r7
 8005d1a:	2208      	movs	r2, #8
 8005d1c:	701a      	strb	r2, [r3, #0]
 8005d1e:	e00c      	b.n	8005d3a <UART_SetConfig+0x246>
 8005d20:	231b      	movs	r3, #27
 8005d22:	2220      	movs	r2, #32
 8005d24:	189b      	adds	r3, r3, r2
 8005d26:	19db      	adds	r3, r3, r7
 8005d28:	2210      	movs	r2, #16
 8005d2a:	701a      	strb	r2, [r3, #0]
 8005d2c:	e005      	b.n	8005d3a <UART_SetConfig+0x246>
 8005d2e:	231b      	movs	r3, #27
 8005d30:	2220      	movs	r2, #32
 8005d32:	189b      	adds	r3, r3, r2
 8005d34:	19db      	adds	r3, r3, r7
 8005d36:	2210      	movs	r2, #16
 8005d38:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a2b      	ldr	r2, [pc, #172]	; (8005dec <UART_SetConfig+0x2f8>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d000      	beq.n	8005d46 <UART_SetConfig+0x252>
 8005d44:	e0a9      	b.n	8005e9a <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d46:	231b      	movs	r3, #27
 8005d48:	2220      	movs	r2, #32
 8005d4a:	189b      	adds	r3, r3, r2
 8005d4c:	19db      	adds	r3, r3, r7
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	2b08      	cmp	r3, #8
 8005d52:	d015      	beq.n	8005d80 <UART_SetConfig+0x28c>
 8005d54:	dc18      	bgt.n	8005d88 <UART_SetConfig+0x294>
 8005d56:	2b04      	cmp	r3, #4
 8005d58:	d00d      	beq.n	8005d76 <UART_SetConfig+0x282>
 8005d5a:	dc15      	bgt.n	8005d88 <UART_SetConfig+0x294>
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d002      	beq.n	8005d66 <UART_SetConfig+0x272>
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d005      	beq.n	8005d70 <UART_SetConfig+0x27c>
 8005d64:	e010      	b.n	8005d88 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d66:	f7fd fec9 	bl	8003afc <HAL_RCC_GetPCLK1Freq>
 8005d6a:	0003      	movs	r3, r0
 8005d6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d6e:	e014      	b.n	8005d9a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d70:	4b25      	ldr	r3, [pc, #148]	; (8005e08 <UART_SetConfig+0x314>)
 8005d72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d74:	e011      	b.n	8005d9a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d76:	f7fd fe35 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 8005d7a:	0003      	movs	r3, r0
 8005d7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d7e:	e00c      	b.n	8005d9a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d80:	2380      	movs	r3, #128	; 0x80
 8005d82:	021b      	lsls	r3, r3, #8
 8005d84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d86:	e008      	b.n	8005d9a <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005d8c:	231a      	movs	r3, #26
 8005d8e:	2220      	movs	r2, #32
 8005d90:	189b      	adds	r3, r3, r2
 8005d92:	19db      	adds	r3, r3, r7
 8005d94:	2201      	movs	r2, #1
 8005d96:	701a      	strb	r2, [r3, #0]
        break;
 8005d98:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d100      	bne.n	8005da2 <UART_SetConfig+0x2ae>
 8005da0:	e14b      	b.n	800603a <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005da6:	4b19      	ldr	r3, [pc, #100]	; (8005e0c <UART_SetConfig+0x318>)
 8005da8:	0052      	lsls	r2, r2, #1
 8005daa:	5ad3      	ldrh	r3, [r2, r3]
 8005dac:	0019      	movs	r1, r3
 8005dae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005db0:	f7fa f9ba 	bl	8000128 <__udivsi3>
 8005db4:	0003      	movs	r3, r0
 8005db6:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	0013      	movs	r3, r2
 8005dbe:	005b      	lsls	r3, r3, #1
 8005dc0:	189b      	adds	r3, r3, r2
 8005dc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d305      	bcc.n	8005dd4 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005dce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d91d      	bls.n	8005e10 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8005dd4:	231a      	movs	r3, #26
 8005dd6:	2220      	movs	r2, #32
 8005dd8:	189b      	adds	r3, r3, r2
 8005dda:	19db      	adds	r3, r3, r7
 8005ddc:	2201      	movs	r2, #1
 8005dde:	701a      	strb	r2, [r3, #0]
 8005de0:	e12b      	b.n	800603a <UART_SetConfig+0x546>
 8005de2:	46c0      	nop			; (mov r8, r8)
 8005de4:	cfff69f3 	.word	0xcfff69f3
 8005de8:	ffffcfff 	.word	0xffffcfff
 8005dec:	40008000 	.word	0x40008000
 8005df0:	11fff4ff 	.word	0x11fff4ff
 8005df4:	40013800 	.word	0x40013800
 8005df8:	40021000 	.word	0x40021000
 8005dfc:	40004400 	.word	0x40004400
 8005e00:	40004800 	.word	0x40004800
 8005e04:	40004c00 	.word	0x40004c00
 8005e08:	00f42400 	.word	0x00f42400
 8005e0c:	0800842c 	.word	0x0800842c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e12:	61bb      	str	r3, [r7, #24]
 8005e14:	2300      	movs	r3, #0
 8005e16:	61fb      	str	r3, [r7, #28]
 8005e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e1c:	4b92      	ldr	r3, [pc, #584]	; (8006068 <UART_SetConfig+0x574>)
 8005e1e:	0052      	lsls	r2, r2, #1
 8005e20:	5ad3      	ldrh	r3, [r2, r3]
 8005e22:	613b      	str	r3, [r7, #16]
 8005e24:	2300      	movs	r3, #0
 8005e26:	617b      	str	r3, [r7, #20]
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	69b8      	ldr	r0, [r7, #24]
 8005e2e:	69f9      	ldr	r1, [r7, #28]
 8005e30:	f7fa faf0 	bl	8000414 <__aeabi_uldivmod>
 8005e34:	0002      	movs	r2, r0
 8005e36:	000b      	movs	r3, r1
 8005e38:	0e11      	lsrs	r1, r2, #24
 8005e3a:	021d      	lsls	r5, r3, #8
 8005e3c:	430d      	orrs	r5, r1
 8005e3e:	0214      	lsls	r4, r2, #8
 8005e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	085b      	lsrs	r3, r3, #1
 8005e46:	60bb      	str	r3, [r7, #8]
 8005e48:	2300      	movs	r3, #0
 8005e4a:	60fb      	str	r3, [r7, #12]
 8005e4c:	68b8      	ldr	r0, [r7, #8]
 8005e4e:	68f9      	ldr	r1, [r7, #12]
 8005e50:	1900      	adds	r0, r0, r4
 8005e52:	4169      	adcs	r1, r5
 8005e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	603b      	str	r3, [r7, #0]
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	607b      	str	r3, [r7, #4]
 8005e5e:	683a      	ldr	r2, [r7, #0]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f7fa fad7 	bl	8000414 <__aeabi_uldivmod>
 8005e66:	0002      	movs	r2, r0
 8005e68:	000b      	movs	r3, r1
 8005e6a:	0013      	movs	r3, r2
 8005e6c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e70:	23c0      	movs	r3, #192	; 0xc0
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d309      	bcc.n	8005e8c <UART_SetConfig+0x398>
 8005e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e7a:	2380      	movs	r3, #128	; 0x80
 8005e7c:	035b      	lsls	r3, r3, #13
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d204      	bcs.n	8005e8c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8005e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e88:	60da      	str	r2, [r3, #12]
 8005e8a:	e0d6      	b.n	800603a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8005e8c:	231a      	movs	r3, #26
 8005e8e:	2220      	movs	r2, #32
 8005e90:	189b      	adds	r3, r3, r2
 8005e92:	19db      	adds	r3, r3, r7
 8005e94:	2201      	movs	r2, #1
 8005e96:	701a      	strb	r2, [r3, #0]
 8005e98:	e0cf      	b.n	800603a <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9c:	69da      	ldr	r2, [r3, #28]
 8005e9e:	2380      	movs	r3, #128	; 0x80
 8005ea0:	021b      	lsls	r3, r3, #8
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d000      	beq.n	8005ea8 <UART_SetConfig+0x3b4>
 8005ea6:	e070      	b.n	8005f8a <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8005ea8:	231b      	movs	r3, #27
 8005eaa:	2220      	movs	r2, #32
 8005eac:	189b      	adds	r3, r3, r2
 8005eae:	19db      	adds	r3, r3, r7
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	2b08      	cmp	r3, #8
 8005eb4:	d015      	beq.n	8005ee2 <UART_SetConfig+0x3ee>
 8005eb6:	dc18      	bgt.n	8005eea <UART_SetConfig+0x3f6>
 8005eb8:	2b04      	cmp	r3, #4
 8005eba:	d00d      	beq.n	8005ed8 <UART_SetConfig+0x3e4>
 8005ebc:	dc15      	bgt.n	8005eea <UART_SetConfig+0x3f6>
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d002      	beq.n	8005ec8 <UART_SetConfig+0x3d4>
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d005      	beq.n	8005ed2 <UART_SetConfig+0x3de>
 8005ec6:	e010      	b.n	8005eea <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ec8:	f7fd fe18 	bl	8003afc <HAL_RCC_GetPCLK1Freq>
 8005ecc:	0003      	movs	r3, r0
 8005ece:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ed0:	e014      	b.n	8005efc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ed2:	4b66      	ldr	r3, [pc, #408]	; (800606c <UART_SetConfig+0x578>)
 8005ed4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ed6:	e011      	b.n	8005efc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ed8:	f7fd fd84 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 8005edc:	0003      	movs	r3, r0
 8005ede:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ee0:	e00c      	b.n	8005efc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ee2:	2380      	movs	r3, #128	; 0x80
 8005ee4:	021b      	lsls	r3, r3, #8
 8005ee6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ee8:	e008      	b.n	8005efc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005eea:	2300      	movs	r3, #0
 8005eec:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005eee:	231a      	movs	r3, #26
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	189b      	adds	r3, r3, r2
 8005ef4:	19db      	adds	r3, r3, r7
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	701a      	strb	r2, [r3, #0]
        break;
 8005efa:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d100      	bne.n	8005f04 <UART_SetConfig+0x410>
 8005f02:	e09a      	b.n	800603a <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f08:	4b57      	ldr	r3, [pc, #348]	; (8006068 <UART_SetConfig+0x574>)
 8005f0a:	0052      	lsls	r2, r2, #1
 8005f0c:	5ad3      	ldrh	r3, [r2, r3]
 8005f0e:	0019      	movs	r1, r3
 8005f10:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005f12:	f7fa f909 	bl	8000128 <__udivsi3>
 8005f16:	0003      	movs	r3, r0
 8005f18:	005a      	lsls	r2, r3, #1
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	085b      	lsrs	r3, r3, #1
 8005f20:	18d2      	adds	r2, r2, r3
 8005f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	0019      	movs	r1, r3
 8005f28:	0010      	movs	r0, r2
 8005f2a:	f7fa f8fd 	bl	8000128 <__udivsi3>
 8005f2e:	0003      	movs	r3, r0
 8005f30:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f34:	2b0f      	cmp	r3, #15
 8005f36:	d921      	bls.n	8005f7c <UART_SetConfig+0x488>
 8005f38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f3a:	2380      	movs	r3, #128	; 0x80
 8005f3c:	025b      	lsls	r3, r3, #9
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d21c      	bcs.n	8005f7c <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	200e      	movs	r0, #14
 8005f48:	2420      	movs	r4, #32
 8005f4a:	1903      	adds	r3, r0, r4
 8005f4c:	19db      	adds	r3, r3, r7
 8005f4e:	210f      	movs	r1, #15
 8005f50:	438a      	bics	r2, r1
 8005f52:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f56:	085b      	lsrs	r3, r3, #1
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	2207      	movs	r2, #7
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	b299      	uxth	r1, r3
 8005f60:	1903      	adds	r3, r0, r4
 8005f62:	19db      	adds	r3, r3, r7
 8005f64:	1902      	adds	r2, r0, r4
 8005f66:	19d2      	adds	r2, r2, r7
 8005f68:	8812      	ldrh	r2, [r2, #0]
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	1902      	adds	r2, r0, r4
 8005f74:	19d2      	adds	r2, r2, r7
 8005f76:	8812      	ldrh	r2, [r2, #0]
 8005f78:	60da      	str	r2, [r3, #12]
 8005f7a:	e05e      	b.n	800603a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8005f7c:	231a      	movs	r3, #26
 8005f7e:	2220      	movs	r2, #32
 8005f80:	189b      	adds	r3, r3, r2
 8005f82:	19db      	adds	r3, r3, r7
 8005f84:	2201      	movs	r2, #1
 8005f86:	701a      	strb	r2, [r3, #0]
 8005f88:	e057      	b.n	800603a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f8a:	231b      	movs	r3, #27
 8005f8c:	2220      	movs	r2, #32
 8005f8e:	189b      	adds	r3, r3, r2
 8005f90:	19db      	adds	r3, r3, r7
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	2b08      	cmp	r3, #8
 8005f96:	d015      	beq.n	8005fc4 <UART_SetConfig+0x4d0>
 8005f98:	dc18      	bgt.n	8005fcc <UART_SetConfig+0x4d8>
 8005f9a:	2b04      	cmp	r3, #4
 8005f9c:	d00d      	beq.n	8005fba <UART_SetConfig+0x4c6>
 8005f9e:	dc15      	bgt.n	8005fcc <UART_SetConfig+0x4d8>
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d002      	beq.n	8005faa <UART_SetConfig+0x4b6>
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d005      	beq.n	8005fb4 <UART_SetConfig+0x4c0>
 8005fa8:	e010      	b.n	8005fcc <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005faa:	f7fd fda7 	bl	8003afc <HAL_RCC_GetPCLK1Freq>
 8005fae:	0003      	movs	r3, r0
 8005fb0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fb2:	e014      	b.n	8005fde <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fb4:	4b2d      	ldr	r3, [pc, #180]	; (800606c <UART_SetConfig+0x578>)
 8005fb6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fb8:	e011      	b.n	8005fde <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fba:	f7fd fd13 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 8005fbe:	0003      	movs	r3, r0
 8005fc0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fc2:	e00c      	b.n	8005fde <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fc4:	2380      	movs	r3, #128	; 0x80
 8005fc6:	021b      	lsls	r3, r3, #8
 8005fc8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fca:	e008      	b.n	8005fde <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005fd0:	231a      	movs	r3, #26
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	189b      	adds	r3, r3, r2
 8005fd6:	19db      	adds	r3, r3, r7
 8005fd8:	2201      	movs	r2, #1
 8005fda:	701a      	strb	r2, [r3, #0]
        break;
 8005fdc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d02a      	beq.n	800603a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fe8:	4b1f      	ldr	r3, [pc, #124]	; (8006068 <UART_SetConfig+0x574>)
 8005fea:	0052      	lsls	r2, r2, #1
 8005fec:	5ad3      	ldrh	r3, [r2, r3]
 8005fee:	0019      	movs	r1, r3
 8005ff0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005ff2:	f7fa f899 	bl	8000128 <__udivsi3>
 8005ff6:	0003      	movs	r3, r0
 8005ff8:	001a      	movs	r2, r3
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	085b      	lsrs	r3, r3, #1
 8006000:	18d2      	adds	r2, r2, r3
 8006002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	0019      	movs	r1, r3
 8006008:	0010      	movs	r0, r2
 800600a:	f7fa f88d 	bl	8000128 <__udivsi3>
 800600e:	0003      	movs	r3, r0
 8006010:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006014:	2b0f      	cmp	r3, #15
 8006016:	d90a      	bls.n	800602e <UART_SetConfig+0x53a>
 8006018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800601a:	2380      	movs	r3, #128	; 0x80
 800601c:	025b      	lsls	r3, r3, #9
 800601e:	429a      	cmp	r2, r3
 8006020:	d205      	bcs.n	800602e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006024:	b29a      	uxth	r2, r3
 8006026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	60da      	str	r2, [r3, #12]
 800602c:	e005      	b.n	800603a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800602e:	231a      	movs	r3, #26
 8006030:	2220      	movs	r2, #32
 8006032:	189b      	adds	r3, r3, r2
 8006034:	19db      	adds	r3, r3, r7
 8006036:	2201      	movs	r2, #1
 8006038:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800603a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603c:	226a      	movs	r2, #106	; 0x6a
 800603e:	2101      	movs	r1, #1
 8006040:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006044:	2268      	movs	r2, #104	; 0x68
 8006046:	2101      	movs	r1, #1
 8006048:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	2200      	movs	r2, #0
 800604e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006052:	2200      	movs	r2, #0
 8006054:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006056:	231a      	movs	r3, #26
 8006058:	2220      	movs	r2, #32
 800605a:	189b      	adds	r3, r3, r2
 800605c:	19db      	adds	r3, r3, r7
 800605e:	781b      	ldrb	r3, [r3, #0]
}
 8006060:	0018      	movs	r0, r3
 8006062:	46bd      	mov	sp, r7
 8006064:	b010      	add	sp, #64	; 0x40
 8006066:	bdb0      	pop	{r4, r5, r7, pc}
 8006068:	0800842c 	.word	0x0800842c
 800606c:	00f42400 	.word	0x00f42400

08006070 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607c:	2208      	movs	r2, #8
 800607e:	4013      	ands	r3, r2
 8006080:	d00b      	beq.n	800609a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	4a4a      	ldr	r2, [pc, #296]	; (80061b4 <UART_AdvFeatureConfig+0x144>)
 800608a:	4013      	ands	r3, r2
 800608c:	0019      	movs	r1, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	430a      	orrs	r2, r1
 8006098:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609e:	2201      	movs	r2, #1
 80060a0:	4013      	ands	r3, r2
 80060a2:	d00b      	beq.n	80060bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	4a43      	ldr	r2, [pc, #268]	; (80061b8 <UART_AdvFeatureConfig+0x148>)
 80060ac:	4013      	ands	r3, r2
 80060ae:	0019      	movs	r1, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	430a      	orrs	r2, r1
 80060ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c0:	2202      	movs	r2, #2
 80060c2:	4013      	ands	r3, r2
 80060c4:	d00b      	beq.n	80060de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	4a3b      	ldr	r2, [pc, #236]	; (80061bc <UART_AdvFeatureConfig+0x14c>)
 80060ce:	4013      	ands	r3, r2
 80060d0:	0019      	movs	r1, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	430a      	orrs	r2, r1
 80060dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e2:	2204      	movs	r2, #4
 80060e4:	4013      	ands	r3, r2
 80060e6:	d00b      	beq.n	8006100 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	4a34      	ldr	r2, [pc, #208]	; (80061c0 <UART_AdvFeatureConfig+0x150>)
 80060f0:	4013      	ands	r3, r2
 80060f2:	0019      	movs	r1, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	430a      	orrs	r2, r1
 80060fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006104:	2210      	movs	r2, #16
 8006106:	4013      	ands	r3, r2
 8006108:	d00b      	beq.n	8006122 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	4a2c      	ldr	r2, [pc, #176]	; (80061c4 <UART_AdvFeatureConfig+0x154>)
 8006112:	4013      	ands	r3, r2
 8006114:	0019      	movs	r1, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006126:	2220      	movs	r2, #32
 8006128:	4013      	ands	r3, r2
 800612a:	d00b      	beq.n	8006144 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	4a25      	ldr	r2, [pc, #148]	; (80061c8 <UART_AdvFeatureConfig+0x158>)
 8006134:	4013      	ands	r3, r2
 8006136:	0019      	movs	r1, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	430a      	orrs	r2, r1
 8006142:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006148:	2240      	movs	r2, #64	; 0x40
 800614a:	4013      	ands	r3, r2
 800614c:	d01d      	beq.n	800618a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	4a1d      	ldr	r2, [pc, #116]	; (80061cc <UART_AdvFeatureConfig+0x15c>)
 8006156:	4013      	ands	r3, r2
 8006158:	0019      	movs	r1, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	430a      	orrs	r2, r1
 8006164:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800616a:	2380      	movs	r3, #128	; 0x80
 800616c:	035b      	lsls	r3, r3, #13
 800616e:	429a      	cmp	r2, r3
 8006170:	d10b      	bne.n	800618a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	4a15      	ldr	r2, [pc, #84]	; (80061d0 <UART_AdvFeatureConfig+0x160>)
 800617a:	4013      	ands	r3, r2
 800617c:	0019      	movs	r1, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	430a      	orrs	r2, r1
 8006188:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618e:	2280      	movs	r2, #128	; 0x80
 8006190:	4013      	ands	r3, r2
 8006192:	d00b      	beq.n	80061ac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	4a0e      	ldr	r2, [pc, #56]	; (80061d4 <UART_AdvFeatureConfig+0x164>)
 800619c:	4013      	ands	r3, r2
 800619e:	0019      	movs	r1, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	430a      	orrs	r2, r1
 80061aa:	605a      	str	r2, [r3, #4]
  }
}
 80061ac:	46c0      	nop			; (mov r8, r8)
 80061ae:	46bd      	mov	sp, r7
 80061b0:	b002      	add	sp, #8
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	ffff7fff 	.word	0xffff7fff
 80061b8:	fffdffff 	.word	0xfffdffff
 80061bc:	fffeffff 	.word	0xfffeffff
 80061c0:	fffbffff 	.word	0xfffbffff
 80061c4:	ffffefff 	.word	0xffffefff
 80061c8:	ffffdfff 	.word	0xffffdfff
 80061cc:	ffefffff 	.word	0xffefffff
 80061d0:	ff9fffff 	.word	0xff9fffff
 80061d4:	fff7ffff 	.word	0xfff7ffff

080061d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b092      	sub	sp, #72	; 0x48
 80061dc:	af02      	add	r7, sp, #8
 80061de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2290      	movs	r2, #144	; 0x90
 80061e4:	2100      	movs	r1, #0
 80061e6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061e8:	f7fb f9e4 	bl	80015b4 <HAL_GetTick>
 80061ec:	0003      	movs	r3, r0
 80061ee:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2208      	movs	r2, #8
 80061f8:	4013      	ands	r3, r2
 80061fa:	2b08      	cmp	r3, #8
 80061fc:	d12d      	bne.n	800625a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006200:	2280      	movs	r2, #128	; 0x80
 8006202:	0391      	lsls	r1, r2, #14
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	4a47      	ldr	r2, [pc, #284]	; (8006324 <UART_CheckIdleState+0x14c>)
 8006208:	9200      	str	r2, [sp, #0]
 800620a:	2200      	movs	r2, #0
 800620c:	f000 f88e 	bl	800632c <UART_WaitOnFlagUntilTimeout>
 8006210:	1e03      	subs	r3, r0, #0
 8006212:	d022      	beq.n	800625a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006214:	f3ef 8310 	mrs	r3, PRIMASK
 8006218:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800621a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800621c:	63bb      	str	r3, [r7, #56]	; 0x38
 800621e:	2301      	movs	r3, #1
 8006220:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006224:	f383 8810 	msr	PRIMASK, r3
}
 8006228:	46c0      	nop			; (mov r8, r8)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2180      	movs	r1, #128	; 0x80
 8006236:	438a      	bics	r2, r1
 8006238:	601a      	str	r2, [r3, #0]
 800623a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800623e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006240:	f383 8810 	msr	PRIMASK, r3
}
 8006244:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2288      	movs	r2, #136	; 0x88
 800624a:	2120      	movs	r1, #32
 800624c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2284      	movs	r2, #132	; 0x84
 8006252:	2100      	movs	r1, #0
 8006254:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e060      	b.n	800631c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2204      	movs	r2, #4
 8006262:	4013      	ands	r3, r2
 8006264:	2b04      	cmp	r3, #4
 8006266:	d146      	bne.n	80062f6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800626a:	2280      	movs	r2, #128	; 0x80
 800626c:	03d1      	lsls	r1, r2, #15
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	4a2c      	ldr	r2, [pc, #176]	; (8006324 <UART_CheckIdleState+0x14c>)
 8006272:	9200      	str	r2, [sp, #0]
 8006274:	2200      	movs	r2, #0
 8006276:	f000 f859 	bl	800632c <UART_WaitOnFlagUntilTimeout>
 800627a:	1e03      	subs	r3, r0, #0
 800627c:	d03b      	beq.n	80062f6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800627e:	f3ef 8310 	mrs	r3, PRIMASK
 8006282:	60fb      	str	r3, [r7, #12]
  return(result);
 8006284:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006286:	637b      	str	r3, [r7, #52]	; 0x34
 8006288:	2301      	movs	r3, #1
 800628a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	f383 8810 	msr	PRIMASK, r3
}
 8006292:	46c0      	nop			; (mov r8, r8)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4922      	ldr	r1, [pc, #136]	; (8006328 <UART_CheckIdleState+0x150>)
 80062a0:	400a      	ands	r2, r1
 80062a2:	601a      	str	r2, [r3, #0]
 80062a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	f383 8810 	msr	PRIMASK, r3
}
 80062ae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062b0:	f3ef 8310 	mrs	r3, PRIMASK
 80062b4:	61bb      	str	r3, [r7, #24]
  return(result);
 80062b6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062b8:	633b      	str	r3, [r7, #48]	; 0x30
 80062ba:	2301      	movs	r3, #1
 80062bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	f383 8810 	msr	PRIMASK, r3
}
 80062c4:	46c0      	nop			; (mov r8, r8)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689a      	ldr	r2, [r3, #8]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2101      	movs	r1, #1
 80062d2:	438a      	bics	r2, r1
 80062d4:	609a      	str	r2, [r3, #8]
 80062d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	f383 8810 	msr	PRIMASK, r3
}
 80062e0:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	228c      	movs	r2, #140	; 0x8c
 80062e6:	2120      	movs	r1, #32
 80062e8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2284      	movs	r2, #132	; 0x84
 80062ee:	2100      	movs	r1, #0
 80062f0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e012      	b.n	800631c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2288      	movs	r2, #136	; 0x88
 80062fa:	2120      	movs	r1, #32
 80062fc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	228c      	movs	r2, #140	; 0x8c
 8006302:	2120      	movs	r1, #32
 8006304:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2284      	movs	r2, #132	; 0x84
 8006316:	2100      	movs	r1, #0
 8006318:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	0018      	movs	r0, r3
 800631e:	46bd      	mov	sp, r7
 8006320:	b010      	add	sp, #64	; 0x40
 8006322:	bd80      	pop	{r7, pc}
 8006324:	01ffffff 	.word	0x01ffffff
 8006328:	fffffedf 	.word	0xfffffedf

0800632c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	603b      	str	r3, [r7, #0]
 8006338:	1dfb      	adds	r3, r7, #7
 800633a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800633c:	e051      	b.n	80063e2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	3301      	adds	r3, #1
 8006342:	d04e      	beq.n	80063e2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006344:	f7fb f936 	bl	80015b4 <HAL_GetTick>
 8006348:	0002      	movs	r2, r0
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	69ba      	ldr	r2, [r7, #24]
 8006350:	429a      	cmp	r2, r3
 8006352:	d302      	bcc.n	800635a <UART_WaitOnFlagUntilTimeout+0x2e>
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d101      	bne.n	800635e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e051      	b.n	8006402 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2204      	movs	r2, #4
 8006366:	4013      	ands	r3, r2
 8006368:	d03b      	beq.n	80063e2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	2b80      	cmp	r3, #128	; 0x80
 800636e:	d038      	beq.n	80063e2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	2b40      	cmp	r3, #64	; 0x40
 8006374:	d035      	beq.n	80063e2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	69db      	ldr	r3, [r3, #28]
 800637c:	2208      	movs	r2, #8
 800637e:	4013      	ands	r3, r2
 8006380:	2b08      	cmp	r3, #8
 8006382:	d111      	bne.n	80063a8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2208      	movs	r2, #8
 800638a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	0018      	movs	r0, r3
 8006390:	f000 f960 	bl	8006654 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2290      	movs	r2, #144	; 0x90
 8006398:	2108      	movs	r1, #8
 800639a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2284      	movs	r2, #132	; 0x84
 80063a0:	2100      	movs	r1, #0
 80063a2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e02c      	b.n	8006402 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	69da      	ldr	r2, [r3, #28]
 80063ae:	2380      	movs	r3, #128	; 0x80
 80063b0:	011b      	lsls	r3, r3, #4
 80063b2:	401a      	ands	r2, r3
 80063b4:	2380      	movs	r3, #128	; 0x80
 80063b6:	011b      	lsls	r3, r3, #4
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d112      	bne.n	80063e2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2280      	movs	r2, #128	; 0x80
 80063c2:	0112      	lsls	r2, r2, #4
 80063c4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	0018      	movs	r0, r3
 80063ca:	f000 f943 	bl	8006654 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2290      	movs	r2, #144	; 0x90
 80063d2:	2120      	movs	r1, #32
 80063d4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2284      	movs	r2, #132	; 0x84
 80063da:	2100      	movs	r1, #0
 80063dc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e00f      	b.n	8006402 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	69db      	ldr	r3, [r3, #28]
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	4013      	ands	r3, r2
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	425a      	negs	r2, r3
 80063f2:	4153      	adcs	r3, r2
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	001a      	movs	r2, r3
 80063f8:	1dfb      	adds	r3, r7, #7
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d09e      	beq.n	800633e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	0018      	movs	r0, r3
 8006404:	46bd      	mov	sp, r7
 8006406:	b004      	add	sp, #16
 8006408:	bd80      	pop	{r7, pc}
	...

0800640c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b098      	sub	sp, #96	; 0x60
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	1dbb      	adds	r3, r7, #6
 8006418:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	68ba      	ldr	r2, [r7, #8]
 800641e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	1dba      	adds	r2, r7, #6
 8006424:	215c      	movs	r1, #92	; 0x5c
 8006426:	8812      	ldrh	r2, [r2, #0]
 8006428:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	1dba      	adds	r2, r7, #6
 800642e:	215e      	movs	r1, #94	; 0x5e
 8006430:	8812      	ldrh	r2, [r2, #0]
 8006432:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	689a      	ldr	r2, [r3, #8]
 800643e:	2380      	movs	r3, #128	; 0x80
 8006440:	015b      	lsls	r3, r3, #5
 8006442:	429a      	cmp	r2, r3
 8006444:	d10d      	bne.n	8006462 <UART_Start_Receive_IT+0x56>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d104      	bne.n	8006458 <UART_Start_Receive_IT+0x4c>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2260      	movs	r2, #96	; 0x60
 8006452:	497b      	ldr	r1, [pc, #492]	; (8006640 <UART_Start_Receive_IT+0x234>)
 8006454:	5299      	strh	r1, [r3, r2]
 8006456:	e02e      	b.n	80064b6 <UART_Start_Receive_IT+0xaa>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2260      	movs	r2, #96	; 0x60
 800645c:	21ff      	movs	r1, #255	; 0xff
 800645e:	5299      	strh	r1, [r3, r2]
 8006460:	e029      	b.n	80064b6 <UART_Start_Receive_IT+0xaa>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d10d      	bne.n	8006486 <UART_Start_Receive_IT+0x7a>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d104      	bne.n	800647c <UART_Start_Receive_IT+0x70>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2260      	movs	r2, #96	; 0x60
 8006476:	21ff      	movs	r1, #255	; 0xff
 8006478:	5299      	strh	r1, [r3, r2]
 800647a:	e01c      	b.n	80064b6 <UART_Start_Receive_IT+0xaa>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2260      	movs	r2, #96	; 0x60
 8006480:	217f      	movs	r1, #127	; 0x7f
 8006482:	5299      	strh	r1, [r3, r2]
 8006484:	e017      	b.n	80064b6 <UART_Start_Receive_IT+0xaa>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	689a      	ldr	r2, [r3, #8]
 800648a:	2380      	movs	r3, #128	; 0x80
 800648c:	055b      	lsls	r3, r3, #21
 800648e:	429a      	cmp	r2, r3
 8006490:	d10d      	bne.n	80064ae <UART_Start_Receive_IT+0xa2>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d104      	bne.n	80064a4 <UART_Start_Receive_IT+0x98>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2260      	movs	r2, #96	; 0x60
 800649e:	217f      	movs	r1, #127	; 0x7f
 80064a0:	5299      	strh	r1, [r3, r2]
 80064a2:	e008      	b.n	80064b6 <UART_Start_Receive_IT+0xaa>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2260      	movs	r2, #96	; 0x60
 80064a8:	213f      	movs	r1, #63	; 0x3f
 80064aa:	5299      	strh	r1, [r3, r2]
 80064ac:	e003      	b.n	80064b6 <UART_Start_Receive_IT+0xaa>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2260      	movs	r2, #96	; 0x60
 80064b2:	2100      	movs	r1, #0
 80064b4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2290      	movs	r2, #144	; 0x90
 80064ba:	2100      	movs	r1, #0
 80064bc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	228c      	movs	r2, #140	; 0x8c
 80064c2:	2122      	movs	r1, #34	; 0x22
 80064c4:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064c6:	f3ef 8310 	mrs	r3, PRIMASK
 80064ca:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 80064cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064d0:	2301      	movs	r3, #1
 80064d2:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064d6:	f383 8810 	msr	PRIMASK, r3
}
 80064da:	46c0      	nop			; (mov r8, r8)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689a      	ldr	r2, [r3, #8]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2101      	movs	r1, #1
 80064e8:	430a      	orrs	r2, r1
 80064ea:	609a      	str	r2, [r3, #8]
 80064ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064ee:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064f2:	f383 8810 	msr	PRIMASK, r3
}
 80064f6:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80064fc:	2380      	movs	r3, #128	; 0x80
 80064fe:	059b      	lsls	r3, r3, #22
 8006500:	429a      	cmp	r2, r3
 8006502:	d150      	bne.n	80065a6 <UART_Start_Receive_IT+0x19a>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2268      	movs	r2, #104	; 0x68
 8006508:	5a9b      	ldrh	r3, [r3, r2]
 800650a:	1dba      	adds	r2, r7, #6
 800650c:	8812      	ldrh	r2, [r2, #0]
 800650e:	429a      	cmp	r2, r3
 8006510:	d349      	bcc.n	80065a6 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	689a      	ldr	r2, [r3, #8]
 8006516:	2380      	movs	r3, #128	; 0x80
 8006518:	015b      	lsls	r3, r3, #5
 800651a:	429a      	cmp	r2, r3
 800651c:	d107      	bne.n	800652e <UART_Start_Receive_IT+0x122>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d103      	bne.n	800652e <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	4a46      	ldr	r2, [pc, #280]	; (8006644 <UART_Start_Receive_IT+0x238>)
 800652a:	675a      	str	r2, [r3, #116]	; 0x74
 800652c:	e002      	b.n	8006534 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	4a45      	ldr	r2, [pc, #276]	; (8006648 <UART_Start_Receive_IT+0x23c>)
 8006532:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d019      	beq.n	8006570 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800653c:	f3ef 8310 	mrs	r3, PRIMASK
 8006540:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006544:	65bb      	str	r3, [r7, #88]	; 0x58
 8006546:	2301      	movs	r3, #1
 8006548:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800654a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800654c:	f383 8810 	msr	PRIMASK, r3
}
 8006550:	46c0      	nop			; (mov r8, r8)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2180      	movs	r1, #128	; 0x80
 800655e:	0049      	lsls	r1, r1, #1
 8006560:	430a      	orrs	r2, r1
 8006562:	601a      	str	r2, [r3, #0]
 8006564:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006566:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800656a:	f383 8810 	msr	PRIMASK, r3
}
 800656e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006570:	f3ef 8310 	mrs	r3, PRIMASK
 8006574:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006576:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006578:	657b      	str	r3, [r7, #84]	; 0x54
 800657a:	2301      	movs	r3, #1
 800657c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800657e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006580:	f383 8810 	msr	PRIMASK, r3
}
 8006584:	46c0      	nop			; (mov r8, r8)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	689a      	ldr	r2, [r3, #8]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2180      	movs	r1, #128	; 0x80
 8006592:	0549      	lsls	r1, r1, #21
 8006594:	430a      	orrs	r2, r1
 8006596:	609a      	str	r2, [r3, #8]
 8006598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800659a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800659c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659e:	f383 8810 	msr	PRIMASK, r3
}
 80065a2:	46c0      	nop			; (mov r8, r8)
 80065a4:	e047      	b.n	8006636 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	689a      	ldr	r2, [r3, #8]
 80065aa:	2380      	movs	r3, #128	; 0x80
 80065ac:	015b      	lsls	r3, r3, #5
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d107      	bne.n	80065c2 <UART_Start_Receive_IT+0x1b6>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d103      	bne.n	80065c2 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	4a23      	ldr	r2, [pc, #140]	; (800664c <UART_Start_Receive_IT+0x240>)
 80065be:	675a      	str	r2, [r3, #116]	; 0x74
 80065c0:	e002      	b.n	80065c8 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	4a22      	ldr	r2, [pc, #136]	; (8006650 <UART_Start_Receive_IT+0x244>)
 80065c6:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d019      	beq.n	8006604 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065d0:	f3ef 8310 	mrs	r3, PRIMASK
 80065d4:	61fb      	str	r3, [r7, #28]
  return(result);
 80065d6:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80065d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065da:	2301      	movs	r3, #1
 80065dc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065de:	6a3b      	ldr	r3, [r7, #32]
 80065e0:	f383 8810 	msr	PRIMASK, r3
}
 80065e4:	46c0      	nop			; (mov r8, r8)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2190      	movs	r1, #144	; 0x90
 80065f2:	0049      	lsls	r1, r1, #1
 80065f4:	430a      	orrs	r2, r1
 80065f6:	601a      	str	r2, [r3, #0]
 80065f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065fa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fe:	f383 8810 	msr	PRIMASK, r3
}
 8006602:	e018      	b.n	8006636 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006604:	f3ef 8310 	mrs	r3, PRIMASK
 8006608:	613b      	str	r3, [r7, #16]
  return(result);
 800660a:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800660c:	653b      	str	r3, [r7, #80]	; 0x50
 800660e:	2301      	movs	r3, #1
 8006610:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	f383 8810 	msr	PRIMASK, r3
}
 8006618:	46c0      	nop			; (mov r8, r8)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2120      	movs	r1, #32
 8006626:	430a      	orrs	r2, r1
 8006628:	601a      	str	r2, [r3, #0]
 800662a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800662c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	f383 8810 	msr	PRIMASK, r3
}
 8006634:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	0018      	movs	r0, r3
 800663a:	46bd      	mov	sp, r7
 800663c:	b018      	add	sp, #96	; 0x60
 800663e:	bd80      	pop	{r7, pc}
 8006640:	000001ff 	.word	0x000001ff
 8006644:	08006e71 	.word	0x08006e71
 8006648:	08006b31 	.word	0x08006b31
 800664c:	0800696d 	.word	0x0800696d
 8006650:	080067a9 	.word	0x080067a9

08006654 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b08e      	sub	sp, #56	; 0x38
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800665c:	f3ef 8310 	mrs	r3, PRIMASK
 8006660:	617b      	str	r3, [r7, #20]
  return(result);
 8006662:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006664:	637b      	str	r3, [r7, #52]	; 0x34
 8006666:	2301      	movs	r3, #1
 8006668:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	f383 8810 	msr	PRIMASK, r3
}
 8006670:	46c0      	nop			; (mov r8, r8)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4926      	ldr	r1, [pc, #152]	; (8006718 <UART_EndRxTransfer+0xc4>)
 800667e:	400a      	ands	r2, r1
 8006680:	601a      	str	r2, [r3, #0]
 8006682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006684:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	f383 8810 	msr	PRIMASK, r3
}
 800668c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800668e:	f3ef 8310 	mrs	r3, PRIMASK
 8006692:	623b      	str	r3, [r7, #32]
  return(result);
 8006694:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006696:	633b      	str	r3, [r7, #48]	; 0x30
 8006698:	2301      	movs	r3, #1
 800669a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669e:	f383 8810 	msr	PRIMASK, r3
}
 80066a2:	46c0      	nop			; (mov r8, r8)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	689a      	ldr	r2, [r3, #8]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	491b      	ldr	r1, [pc, #108]	; (800671c <UART_EndRxTransfer+0xc8>)
 80066b0:	400a      	ands	r2, r1
 80066b2:	609a      	str	r2, [r3, #8]
 80066b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ba:	f383 8810 	msr	PRIMASK, r3
}
 80066be:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d118      	bne.n	80066fa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066c8:	f3ef 8310 	mrs	r3, PRIMASK
 80066cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80066ce:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066d2:	2301      	movs	r3, #1
 80066d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f383 8810 	msr	PRIMASK, r3
}
 80066dc:	46c0      	nop			; (mov r8, r8)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2110      	movs	r1, #16
 80066ea:	438a      	bics	r2, r1
 80066ec:	601a      	str	r2, [r3, #0]
 80066ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	f383 8810 	msr	PRIMASK, r3
}
 80066f8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	228c      	movs	r2, #140	; 0x8c
 80066fe:	2120      	movs	r1, #32
 8006700:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800670e:	46c0      	nop			; (mov r8, r8)
 8006710:	46bd      	mov	sp, r7
 8006712:	b00e      	add	sp, #56	; 0x38
 8006714:	bd80      	pop	{r7, pc}
 8006716:	46c0      	nop			; (mov r8, r8)
 8006718:	fffffedf 	.word	0xfffffedf
 800671c:	effffffe 	.word	0xeffffffe

08006720 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	225e      	movs	r2, #94	; 0x5e
 8006732:	2100      	movs	r1, #0
 8006734:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2256      	movs	r2, #86	; 0x56
 800673a:	2100      	movs	r1, #0
 800673c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	0018      	movs	r0, r3
 8006742:	f7ff f9c3 	bl	8005acc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006746:	46c0      	nop			; (mov r8, r8)
 8006748:	46bd      	mov	sp, r7
 800674a:	b004      	add	sp, #16
 800674c:	bd80      	pop	{r7, pc}

0800674e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b086      	sub	sp, #24
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006756:	f3ef 8310 	mrs	r3, PRIMASK
 800675a:	60bb      	str	r3, [r7, #8]
  return(result);
 800675c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800675e:	617b      	str	r3, [r7, #20]
 8006760:	2301      	movs	r3, #1
 8006762:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f383 8810 	msr	PRIMASK, r3
}
 800676a:	46c0      	nop			; (mov r8, r8)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2140      	movs	r1, #64	; 0x40
 8006778:	438a      	bics	r2, r1
 800677a:	601a      	str	r2, [r3, #0]
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	f383 8810 	msr	PRIMASK, r3
}
 8006786:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2288      	movs	r2, #136	; 0x88
 800678c:	2120      	movs	r1, #32
 800678e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	0018      	movs	r0, r3
 800679a:	f7ff f98f 	bl	8005abc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800679e:	46c0      	nop			; (mov r8, r8)
 80067a0:	46bd      	mov	sp, r7
 80067a2:	b006      	add	sp, #24
 80067a4:	bd80      	pop	{r7, pc}
	...

080067a8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b094      	sub	sp, #80	; 0x50
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80067b0:	204e      	movs	r0, #78	; 0x4e
 80067b2:	183b      	adds	r3, r7, r0
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	2160      	movs	r1, #96	; 0x60
 80067b8:	5a52      	ldrh	r2, [r2, r1]
 80067ba:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	228c      	movs	r2, #140	; 0x8c
 80067c0:	589b      	ldr	r3, [r3, r2]
 80067c2:	2b22      	cmp	r3, #34	; 0x22
 80067c4:	d000      	beq.n	80067c8 <UART_RxISR_8BIT+0x20>
 80067c6:	e0bf      	b.n	8006948 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067ce:	214c      	movs	r1, #76	; 0x4c
 80067d0:	187b      	adds	r3, r7, r1
 80067d2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80067d4:	187b      	adds	r3, r7, r1
 80067d6:	881b      	ldrh	r3, [r3, #0]
 80067d8:	b2da      	uxtb	r2, r3
 80067da:	183b      	adds	r3, r7, r0
 80067dc:	881b      	ldrh	r3, [r3, #0]
 80067de:	b2d9      	uxtb	r1, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067e4:	400a      	ands	r2, r1
 80067e6:	b2d2      	uxtb	r2, r2
 80067e8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ee:	1c5a      	adds	r2, r3, #1
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	225e      	movs	r2, #94	; 0x5e
 80067f8:	5a9b      	ldrh	r3, [r3, r2]
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	3b01      	subs	r3, #1
 80067fe:	b299      	uxth	r1, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	225e      	movs	r2, #94	; 0x5e
 8006804:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	225e      	movs	r2, #94	; 0x5e
 800680a:	5a9b      	ldrh	r3, [r3, r2]
 800680c:	b29b      	uxth	r3, r3
 800680e:	2b00      	cmp	r3, #0
 8006810:	d000      	beq.n	8006814 <UART_RxISR_8BIT+0x6c>
 8006812:	e0a1      	b.n	8006958 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006814:	f3ef 8310 	mrs	r3, PRIMASK
 8006818:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800681a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800681c:	64bb      	str	r3, [r7, #72]	; 0x48
 800681e:	2301      	movs	r3, #1
 8006820:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006824:	f383 8810 	msr	PRIMASK, r3
}
 8006828:	46c0      	nop			; (mov r8, r8)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	494a      	ldr	r1, [pc, #296]	; (8006960 <UART_RxISR_8BIT+0x1b8>)
 8006836:	400a      	ands	r2, r1
 8006838:	601a      	str	r2, [r3, #0]
 800683a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800683c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800683e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006840:	f383 8810 	msr	PRIMASK, r3
}
 8006844:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006846:	f3ef 8310 	mrs	r3, PRIMASK
 800684a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800684c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800684e:	647b      	str	r3, [r7, #68]	; 0x44
 8006850:	2301      	movs	r3, #1
 8006852:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006856:	f383 8810 	msr	PRIMASK, r3
}
 800685a:	46c0      	nop			; (mov r8, r8)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	689a      	ldr	r2, [r3, #8]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2101      	movs	r1, #1
 8006868:	438a      	bics	r2, r1
 800686a:	609a      	str	r2, [r3, #8]
 800686c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800686e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006872:	f383 8810 	msr	PRIMASK, r3
}
 8006876:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	228c      	movs	r2, #140	; 0x8c
 800687c:	2120      	movs	r1, #32
 800687e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a34      	ldr	r2, [pc, #208]	; (8006964 <UART_RxISR_8BIT+0x1bc>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d01f      	beq.n	80068d6 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	685a      	ldr	r2, [r3, #4]
 800689c:	2380      	movs	r3, #128	; 0x80
 800689e:	041b      	lsls	r3, r3, #16
 80068a0:	4013      	ands	r3, r2
 80068a2:	d018      	beq.n	80068d6 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068a4:	f3ef 8310 	mrs	r3, PRIMASK
 80068a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80068aa:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80068ac:	643b      	str	r3, [r7, #64]	; 0x40
 80068ae:	2301      	movs	r3, #1
 80068b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	f383 8810 	msr	PRIMASK, r3
}
 80068b8:	46c0      	nop			; (mov r8, r8)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4928      	ldr	r1, [pc, #160]	; (8006968 <UART_RxISR_8BIT+0x1c0>)
 80068c6:	400a      	ands	r2, r1
 80068c8:	601a      	str	r2, [r3, #0]
 80068ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068cc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068ce:	6a3b      	ldr	r3, [r7, #32]
 80068d0:	f383 8810 	msr	PRIMASK, r3
}
 80068d4:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d12f      	bne.n	800693e <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068e4:	f3ef 8310 	mrs	r3, PRIMASK
 80068e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80068ea:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068ee:	2301      	movs	r3, #1
 80068f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	f383 8810 	msr	PRIMASK, r3
}
 80068f8:	46c0      	nop			; (mov r8, r8)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2110      	movs	r1, #16
 8006906:	438a      	bics	r2, r1
 8006908:	601a      	str	r2, [r3, #0]
 800690a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800690c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	f383 8810 	msr	PRIMASK, r3
}
 8006914:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	69db      	ldr	r3, [r3, #28]
 800691c:	2210      	movs	r2, #16
 800691e:	4013      	ands	r3, r2
 8006920:	2b10      	cmp	r3, #16
 8006922:	d103      	bne.n	800692c <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2210      	movs	r2, #16
 800692a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	225c      	movs	r2, #92	; 0x5c
 8006930:	5a9a      	ldrh	r2, [r3, r2]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	0011      	movs	r1, r2
 8006936:	0018      	movs	r0, r3
 8006938:	f7ff f8d0 	bl	8005adc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800693c:	e00c      	b.n	8006958 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	0018      	movs	r0, r3
 8006942:	f7fa fb05 	bl	8000f50 <HAL_UART_RxCpltCallback>
}
 8006946:	e007      	b.n	8006958 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	699a      	ldr	r2, [r3, #24]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2108      	movs	r1, #8
 8006954:	430a      	orrs	r2, r1
 8006956:	619a      	str	r2, [r3, #24]
}
 8006958:	46c0      	nop			; (mov r8, r8)
 800695a:	46bd      	mov	sp, r7
 800695c:	b014      	add	sp, #80	; 0x50
 800695e:	bd80      	pop	{r7, pc}
 8006960:	fffffedf 	.word	0xfffffedf
 8006964:	40008000 	.word	0x40008000
 8006968:	fbffffff 	.word	0xfbffffff

0800696c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b094      	sub	sp, #80	; 0x50
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006974:	204e      	movs	r0, #78	; 0x4e
 8006976:	183b      	adds	r3, r7, r0
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	2160      	movs	r1, #96	; 0x60
 800697c:	5a52      	ldrh	r2, [r2, r1]
 800697e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	228c      	movs	r2, #140	; 0x8c
 8006984:	589b      	ldr	r3, [r3, r2]
 8006986:	2b22      	cmp	r3, #34	; 0x22
 8006988:	d000      	beq.n	800698c <UART_RxISR_16BIT+0x20>
 800698a:	e0bf      	b.n	8006b0c <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006992:	214c      	movs	r1, #76	; 0x4c
 8006994:	187b      	adds	r3, r7, r1
 8006996:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800699c:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800699e:	187b      	adds	r3, r7, r1
 80069a0:	183a      	adds	r2, r7, r0
 80069a2:	881b      	ldrh	r3, [r3, #0]
 80069a4:	8812      	ldrh	r2, [r2, #0]
 80069a6:	4013      	ands	r3, r2
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069ac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069b2:	1c9a      	adds	r2, r3, #2
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	225e      	movs	r2, #94	; 0x5e
 80069bc:	5a9b      	ldrh	r3, [r3, r2]
 80069be:	b29b      	uxth	r3, r3
 80069c0:	3b01      	subs	r3, #1
 80069c2:	b299      	uxth	r1, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	225e      	movs	r2, #94	; 0x5e
 80069c8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	225e      	movs	r2, #94	; 0x5e
 80069ce:	5a9b      	ldrh	r3, [r3, r2]
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d000      	beq.n	80069d8 <UART_RxISR_16BIT+0x6c>
 80069d6:	e0a1      	b.n	8006b1c <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069d8:	f3ef 8310 	mrs	r3, PRIMASK
 80069dc:	623b      	str	r3, [r7, #32]
  return(result);
 80069de:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069e0:	647b      	str	r3, [r7, #68]	; 0x44
 80069e2:	2301      	movs	r3, #1
 80069e4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e8:	f383 8810 	msr	PRIMASK, r3
}
 80069ec:	46c0      	nop			; (mov r8, r8)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	494a      	ldr	r1, [pc, #296]	; (8006b24 <UART_RxISR_16BIT+0x1b8>)
 80069fa:	400a      	ands	r2, r1
 80069fc:	601a      	str	r2, [r3, #0]
 80069fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a00:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a04:	f383 8810 	msr	PRIMASK, r3
}
 8006a08:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a0a:	f3ef 8310 	mrs	r3, PRIMASK
 8006a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8006a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a12:	643b      	str	r3, [r7, #64]	; 0x40
 8006a14:	2301      	movs	r3, #1
 8006a16:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1a:	f383 8810 	msr	PRIMASK, r3
}
 8006a1e:	46c0      	nop			; (mov r8, r8)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	689a      	ldr	r2, [r3, #8]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2101      	movs	r1, #1
 8006a2c:	438a      	bics	r2, r1
 8006a2e:	609a      	str	r2, [r3, #8]
 8006a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a32:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a36:	f383 8810 	msr	PRIMASK, r3
}
 8006a3a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	228c      	movs	r2, #140	; 0x8c
 8006a40:	2120      	movs	r1, #32
 8006a42:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a34      	ldr	r2, [pc, #208]	; (8006b28 <UART_RxISR_16BIT+0x1bc>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d01f      	beq.n	8006a9a <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	2380      	movs	r3, #128	; 0x80
 8006a62:	041b      	lsls	r3, r3, #16
 8006a64:	4013      	ands	r3, r2
 8006a66:	d018      	beq.n	8006a9a <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a68:	f3ef 8310 	mrs	r3, PRIMASK
 8006a6c:	617b      	str	r3, [r7, #20]
  return(result);
 8006a6e:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a72:	2301      	movs	r3, #1
 8006a74:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	f383 8810 	msr	PRIMASK, r3
}
 8006a7c:	46c0      	nop			; (mov r8, r8)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4928      	ldr	r1, [pc, #160]	; (8006b2c <UART_RxISR_16BIT+0x1c0>)
 8006a8a:	400a      	ands	r2, r1
 8006a8c:	601a      	str	r2, [r3, #0]
 8006a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	f383 8810 	msr	PRIMASK, r3
}
 8006a98:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d12f      	bne.n	8006b02 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006aa8:	f3ef 8310 	mrs	r3, PRIMASK
 8006aac:	60bb      	str	r3, [r7, #8]
  return(result);
 8006aae:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ab0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f383 8810 	msr	PRIMASK, r3
}
 8006abc:	46c0      	nop			; (mov r8, r8)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2110      	movs	r1, #16
 8006aca:	438a      	bics	r2, r1
 8006acc:	601a      	str	r2, [r3, #0]
 8006ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	f383 8810 	msr	PRIMASK, r3
}
 8006ad8:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	69db      	ldr	r3, [r3, #28]
 8006ae0:	2210      	movs	r2, #16
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	2b10      	cmp	r3, #16
 8006ae6:	d103      	bne.n	8006af0 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2210      	movs	r2, #16
 8006aee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	225c      	movs	r2, #92	; 0x5c
 8006af4:	5a9a      	ldrh	r2, [r3, r2]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	0011      	movs	r1, r2
 8006afa:	0018      	movs	r0, r3
 8006afc:	f7fe ffee 	bl	8005adc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b00:	e00c      	b.n	8006b1c <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	0018      	movs	r0, r3
 8006b06:	f7fa fa23 	bl	8000f50 <HAL_UART_RxCpltCallback>
}
 8006b0a:	e007      	b.n	8006b1c <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	699a      	ldr	r2, [r3, #24]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2108      	movs	r1, #8
 8006b18:	430a      	orrs	r2, r1
 8006b1a:	619a      	str	r2, [r3, #24]
}
 8006b1c:	46c0      	nop			; (mov r8, r8)
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	b014      	add	sp, #80	; 0x50
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	fffffedf 	.word	0xfffffedf
 8006b28:	40008000 	.word	0x40008000
 8006b2c:	fbffffff 	.word	0xfbffffff

08006b30 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b0a0      	sub	sp, #128	; 0x80
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006b38:	237a      	movs	r3, #122	; 0x7a
 8006b3a:	18fb      	adds	r3, r7, r3
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	2160      	movs	r1, #96	; 0x60
 8006b40:	5a52      	ldrh	r2, [r2, r1]
 8006b42:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	69db      	ldr	r3, [r3, #28]
 8006b4a:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	673b      	str	r3, [r7, #112]	; 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	228c      	movs	r2, #140	; 0x8c
 8006b60:	589b      	ldr	r3, [r3, r2]
 8006b62:	2b22      	cmp	r3, #34	; 0x22
 8006b64:	d000      	beq.n	8006b68 <UART_RxISR_8BIT_FIFOEN+0x38>
 8006b66:	e16a      	b.n	8006e3e <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006b68:	236e      	movs	r3, #110	; 0x6e
 8006b6a:	18fb      	adds	r3, r7, r3
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	2168      	movs	r1, #104	; 0x68
 8006b70:	5a52      	ldrh	r2, [r2, r1]
 8006b72:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006b74:	e111      	b.n	8006d9a <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b7c:	216c      	movs	r1, #108	; 0x6c
 8006b7e:	187b      	adds	r3, r7, r1
 8006b80:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006b82:	187b      	adds	r3, r7, r1
 8006b84:	881b      	ldrh	r3, [r3, #0]
 8006b86:	b2da      	uxtb	r2, r3
 8006b88:	237a      	movs	r3, #122	; 0x7a
 8006b8a:	18fb      	adds	r3, r7, r3
 8006b8c:	881b      	ldrh	r3, [r3, #0]
 8006b8e:	b2d9      	uxtb	r1, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b94:	400a      	ands	r2, r1
 8006b96:	b2d2      	uxtb	r2, r2
 8006b98:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b9e:	1c5a      	adds	r2, r3, #1
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	225e      	movs	r2, #94	; 0x5e
 8006ba8:	5a9b      	ldrh	r3, [r3, r2]
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	3b01      	subs	r3, #1
 8006bae:	b299      	uxth	r1, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	225e      	movs	r2, #94	; 0x5e
 8006bb4:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	69db      	ldr	r3, [r3, #28]
 8006bbc:	67fb      	str	r3, [r7, #124]	; 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006bbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006bc0:	2207      	movs	r2, #7
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	d049      	beq.n	8006c5a <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006bc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006bc8:	2201      	movs	r2, #1
 8006bca:	4013      	ands	r3, r2
 8006bcc:	d010      	beq.n	8006bf0 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8006bce:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006bd0:	2380      	movs	r3, #128	; 0x80
 8006bd2:	005b      	lsls	r3, r3, #1
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	d00b      	beq.n	8006bf0 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2290      	movs	r2, #144	; 0x90
 8006be4:	589b      	ldr	r3, [r3, r2]
 8006be6:	2201      	movs	r2, #1
 8006be8:	431a      	orrs	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2190      	movs	r1, #144	; 0x90
 8006bee:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bf0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	d00f      	beq.n	8006c18 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8006bf8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	d00b      	beq.n	8006c18 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2202      	movs	r2, #2
 8006c06:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2290      	movs	r2, #144	; 0x90
 8006c0c:	589b      	ldr	r3, [r3, r2]
 8006c0e:	2204      	movs	r2, #4
 8006c10:	431a      	orrs	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2190      	movs	r1, #144	; 0x90
 8006c16:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c1a:	2204      	movs	r2, #4
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	d00f      	beq.n	8006c40 <UART_RxISR_8BIT_FIFOEN+0x110>
 8006c20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c22:	2201      	movs	r2, #1
 8006c24:	4013      	ands	r3, r2
 8006c26:	d00b      	beq.n	8006c40 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2204      	movs	r2, #4
 8006c2e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2290      	movs	r2, #144	; 0x90
 8006c34:	589b      	ldr	r3, [r3, r2]
 8006c36:	2202      	movs	r2, #2
 8006c38:	431a      	orrs	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2190      	movs	r1, #144	; 0x90
 8006c3e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2290      	movs	r2, #144	; 0x90
 8006c44:	589b      	ldr	r3, [r3, r2]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d007      	beq.n	8006c5a <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	0018      	movs	r0, r3
 8006c4e:	f7fe ff3d 	bl	8005acc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2290      	movs	r2, #144	; 0x90
 8006c56:	2100      	movs	r1, #0
 8006c58:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	225e      	movs	r2, #94	; 0x5e
 8006c5e:	5a9b      	ldrh	r3, [r3, r2]
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d000      	beq.n	8006c68 <UART_RxISR_8BIT_FIFOEN+0x138>
 8006c66:	e098      	b.n	8006d9a <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c68:	f3ef 8310 	mrs	r3, PRIMASK
 8006c6c:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8006c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c70:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c72:	2301      	movs	r3, #1
 8006c74:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c78:	f383 8810 	msr	PRIMASK, r3
}
 8006c7c:	46c0      	nop			; (mov r8, r8)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4973      	ldr	r1, [pc, #460]	; (8006e58 <UART_RxISR_8BIT_FIFOEN+0x328>)
 8006c8a:	400a      	ands	r2, r1
 8006c8c:	601a      	str	r2, [r3, #0]
 8006c8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c90:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c94:	f383 8810 	msr	PRIMASK, r3
}
 8006c98:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c9a:	f3ef 8310 	mrs	r3, PRIMASK
 8006c9e:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 8006ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ca2:	667b      	str	r3, [r7, #100]	; 0x64
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ca8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006caa:	f383 8810 	msr	PRIMASK, r3
}
 8006cae:	46c0      	nop			; (mov r8, r8)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	689a      	ldr	r2, [r3, #8]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4968      	ldr	r1, [pc, #416]	; (8006e5c <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8006cbc:	400a      	ands	r2, r1
 8006cbe:	609a      	str	r2, [r3, #8]
 8006cc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cc6:	f383 8810 	msr	PRIMASK, r3
}
 8006cca:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	228c      	movs	r2, #140	; 0x8c
 8006cd0:	2120      	movs	r1, #32
 8006cd2:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a5e      	ldr	r2, [pc, #376]	; (8006e60 <UART_RxISR_8BIT_FIFOEN+0x330>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d01f      	beq.n	8006d2a <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	685a      	ldr	r2, [r3, #4]
 8006cf0:	2380      	movs	r3, #128	; 0x80
 8006cf2:	041b      	lsls	r3, r3, #16
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	d018      	beq.n	8006d2a <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8006cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8006cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d00:	663b      	str	r3, [r7, #96]	; 0x60
 8006d02:	2301      	movs	r3, #1
 8006d04:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d08:	f383 8810 	msr	PRIMASK, r3
}
 8006d0c:	46c0      	nop			; (mov r8, r8)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4952      	ldr	r1, [pc, #328]	; (8006e64 <UART_RxISR_8BIT_FIFOEN+0x334>)
 8006d1a:	400a      	ands	r2, r1
 8006d1c:	601a      	str	r2, [r3, #0]
 8006d1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d20:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d24:	f383 8810 	msr	PRIMASK, r3
}
 8006d28:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d12f      	bne.n	8006d92 <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d38:	f3ef 8310 	mrs	r3, PRIMASK
 8006d3c:	623b      	str	r3, [r7, #32]
  return(result);
 8006d3e:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d42:	2301      	movs	r3, #1
 8006d44:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d48:	f383 8810 	msr	PRIMASK, r3
}
 8006d4c:	46c0      	nop			; (mov r8, r8)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2110      	movs	r1, #16
 8006d5a:	438a      	bics	r2, r1
 8006d5c:	601a      	str	r2, [r3, #0]
 8006d5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d60:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d64:	f383 8810 	msr	PRIMASK, r3
}
 8006d68:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	69db      	ldr	r3, [r3, #28]
 8006d70:	2210      	movs	r2, #16
 8006d72:	4013      	ands	r3, r2
 8006d74:	2b10      	cmp	r3, #16
 8006d76:	d103      	bne.n	8006d80 <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2210      	movs	r2, #16
 8006d7e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	225c      	movs	r2, #92	; 0x5c
 8006d84:	5a9a      	ldrh	r2, [r3, r2]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	0011      	movs	r1, r2
 8006d8a:	0018      	movs	r0, r3
 8006d8c:	f7fe fea6 	bl	8005adc <HAL_UARTEx_RxEventCallback>
 8006d90:	e003      	b.n	8006d9a <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	0018      	movs	r0, r3
 8006d96:	f7fa f8db 	bl	8000f50 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006d9a:	236e      	movs	r3, #110	; 0x6e
 8006d9c:	18fb      	adds	r3, r7, r3
 8006d9e:	881b      	ldrh	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d004      	beq.n	8006dae <UART_RxISR_8BIT_FIFOEN+0x27e>
 8006da4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006da6:	2220      	movs	r2, #32
 8006da8:	4013      	ands	r3, r2
 8006daa:	d000      	beq.n	8006dae <UART_RxISR_8BIT_FIFOEN+0x27e>
 8006dac:	e6e3      	b.n	8006b76 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006dae:	205a      	movs	r0, #90	; 0x5a
 8006db0:	183b      	adds	r3, r7, r0
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	215e      	movs	r1, #94	; 0x5e
 8006db6:	5a52      	ldrh	r2, [r2, r1]
 8006db8:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006dba:	0001      	movs	r1, r0
 8006dbc:	187b      	adds	r3, r7, r1
 8006dbe:	881b      	ldrh	r3, [r3, #0]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d044      	beq.n	8006e4e <UART_RxISR_8BIT_FIFOEN+0x31e>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2268      	movs	r2, #104	; 0x68
 8006dc8:	5a9b      	ldrh	r3, [r3, r2]
 8006dca:	187a      	adds	r2, r7, r1
 8006dcc:	8812      	ldrh	r2, [r2, #0]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d23d      	bcs.n	8006e4e <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dd2:	f3ef 8310 	mrs	r3, PRIMASK
 8006dd6:	60bb      	str	r3, [r7, #8]
  return(result);
 8006dd8:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006dda:	657b      	str	r3, [r7, #84]	; 0x54
 8006ddc:	2301      	movs	r3, #1
 8006dde:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f383 8810 	msr	PRIMASK, r3
}
 8006de6:	46c0      	nop			; (mov r8, r8)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	689a      	ldr	r2, [r3, #8]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	491d      	ldr	r1, [pc, #116]	; (8006e68 <UART_RxISR_8BIT_FIFOEN+0x338>)
 8006df4:	400a      	ands	r2, r1
 8006df6:	609a      	str	r2, [r3, #8]
 8006df8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dfa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	f383 8810 	msr	PRIMASK, r3
}
 8006e02:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a19      	ldr	r2, [pc, #100]	; (8006e6c <UART_RxISR_8BIT_FIFOEN+0x33c>)
 8006e08:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e0a:	f3ef 8310 	mrs	r3, PRIMASK
 8006e0e:	617b      	str	r3, [r7, #20]
  return(result);
 8006e10:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006e12:	653b      	str	r3, [r7, #80]	; 0x50
 8006e14:	2301      	movs	r3, #1
 8006e16:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	f383 8810 	msr	PRIMASK, r3
}
 8006e1e:	46c0      	nop			; (mov r8, r8)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2120      	movs	r1, #32
 8006e2c:	430a      	orrs	r2, r1
 8006e2e:	601a      	str	r2, [r3, #0]
 8006e30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e32:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	f383 8810 	msr	PRIMASK, r3
}
 8006e3a:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e3c:	e007      	b.n	8006e4e <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	699a      	ldr	r2, [r3, #24]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2108      	movs	r1, #8
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	619a      	str	r2, [r3, #24]
}
 8006e4e:	46c0      	nop			; (mov r8, r8)
 8006e50:	46bd      	mov	sp, r7
 8006e52:	b020      	add	sp, #128	; 0x80
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	46c0      	nop			; (mov r8, r8)
 8006e58:	fffffeff 	.word	0xfffffeff
 8006e5c:	effffffe 	.word	0xeffffffe
 8006e60:	40008000 	.word	0x40008000
 8006e64:	fbffffff 	.word	0xfbffffff
 8006e68:	efffffff 	.word	0xefffffff
 8006e6c:	080067a9 	.word	0x080067a9

08006e70 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b0a2      	sub	sp, #136	; 0x88
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006e78:	2382      	movs	r3, #130	; 0x82
 8006e7a:	18fb      	adds	r3, r7, r3
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	2160      	movs	r1, #96	; 0x60
 8006e80:	5a52      	ldrh	r2, [r2, r1]
 8006e82:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	69db      	ldr	r3, [r3, #28]
 8006e8a:	2284      	movs	r2, #132	; 0x84
 8006e8c:	18ba      	adds	r2, r7, r2
 8006e8e:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	228c      	movs	r2, #140	; 0x8c
 8006ea4:	589b      	ldr	r3, [r3, r2]
 8006ea6:	2b22      	cmp	r3, #34	; 0x22
 8006ea8:	d000      	beq.n	8006eac <UART_RxISR_16BIT_FIFOEN+0x3c>
 8006eaa:	e174      	b.n	8007196 <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006eac:	2376      	movs	r3, #118	; 0x76
 8006eae:	18fb      	adds	r3, r7, r3
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	2168      	movs	r1, #104	; 0x68
 8006eb4:	5a52      	ldrh	r2, [r2, r1]
 8006eb6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006eb8:	e119      	b.n	80070ee <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ec0:	2174      	movs	r1, #116	; 0x74
 8006ec2:	187b      	adds	r3, r7, r1
 8006ec4:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eca:	673b      	str	r3, [r7, #112]	; 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8006ecc:	187b      	adds	r3, r7, r1
 8006ece:	2282      	movs	r2, #130	; 0x82
 8006ed0:	18ba      	adds	r2, r7, r2
 8006ed2:	881b      	ldrh	r3, [r3, #0]
 8006ed4:	8812      	ldrh	r2, [r2, #0]
 8006ed6:	4013      	ands	r3, r2
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006edc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ee2:	1c9a      	adds	r2, r3, #2
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	225e      	movs	r2, #94	; 0x5e
 8006eec:	5a9b      	ldrh	r3, [r3, r2]
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	b299      	uxth	r1, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	225e      	movs	r2, #94	; 0x5e
 8006ef8:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	69db      	ldr	r3, [r3, #28]
 8006f00:	2184      	movs	r1, #132	; 0x84
 8006f02:	187a      	adds	r2, r7, r1
 8006f04:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006f06:	187b      	adds	r3, r7, r1
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2207      	movs	r2, #7
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	d04e      	beq.n	8006fae <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f10:	187b      	adds	r3, r7, r1
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2201      	movs	r2, #1
 8006f16:	4013      	ands	r3, r2
 8006f18:	d010      	beq.n	8006f3c <UART_RxISR_16BIT_FIFOEN+0xcc>
 8006f1a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006f1c:	2380      	movs	r3, #128	; 0x80
 8006f1e:	005b      	lsls	r3, r3, #1
 8006f20:	4013      	ands	r3, r2
 8006f22:	d00b      	beq.n	8006f3c <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2290      	movs	r2, #144	; 0x90
 8006f30:	589b      	ldr	r3, [r3, r2]
 8006f32:	2201      	movs	r2, #1
 8006f34:	431a      	orrs	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2190      	movs	r1, #144	; 0x90
 8006f3a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f3c:	2384      	movs	r3, #132	; 0x84
 8006f3e:	18fb      	adds	r3, r7, r3
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2202      	movs	r2, #2
 8006f44:	4013      	ands	r3, r2
 8006f46:	d00f      	beq.n	8006f68 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8006f48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	d00b      	beq.n	8006f68 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2202      	movs	r2, #2
 8006f56:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2290      	movs	r2, #144	; 0x90
 8006f5c:	589b      	ldr	r3, [r3, r2]
 8006f5e:	2204      	movs	r2, #4
 8006f60:	431a      	orrs	r2, r3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2190      	movs	r1, #144	; 0x90
 8006f66:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f68:	2384      	movs	r3, #132	; 0x84
 8006f6a:	18fb      	adds	r3, r7, r3
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2204      	movs	r2, #4
 8006f70:	4013      	ands	r3, r2
 8006f72:	d00f      	beq.n	8006f94 <UART_RxISR_16BIT_FIFOEN+0x124>
 8006f74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f76:	2201      	movs	r2, #1
 8006f78:	4013      	ands	r3, r2
 8006f7a:	d00b      	beq.n	8006f94 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2204      	movs	r2, #4
 8006f82:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2290      	movs	r2, #144	; 0x90
 8006f88:	589b      	ldr	r3, [r3, r2]
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	431a      	orrs	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2190      	movs	r1, #144	; 0x90
 8006f92:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2290      	movs	r2, #144	; 0x90
 8006f98:	589b      	ldr	r3, [r3, r2]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d007      	beq.n	8006fae <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	0018      	movs	r0, r3
 8006fa2:	f7fe fd93 	bl	8005acc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2290      	movs	r2, #144	; 0x90
 8006faa:	2100      	movs	r1, #0
 8006fac:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	225e      	movs	r2, #94	; 0x5e
 8006fb2:	5a9b      	ldrh	r3, [r3, r2]
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d000      	beq.n	8006fbc <UART_RxISR_16BIT_FIFOEN+0x14c>
 8006fba:	e098      	b.n	80070ee <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fbc:	f3ef 8310 	mrs	r3, PRIMASK
 8006fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fc4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fcc:	f383 8810 	msr	PRIMASK, r3
}
 8006fd0:	46c0      	nop			; (mov r8, r8)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4974      	ldr	r1, [pc, #464]	; (80071b0 <UART_RxISR_16BIT_FIFOEN+0x340>)
 8006fde:	400a      	ands	r2, r1
 8006fe0:	601a      	str	r2, [r3, #0]
 8006fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fe4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fe8:	f383 8810 	msr	PRIMASK, r3
}
 8006fec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fee:	f3ef 8310 	mrs	r3, PRIMASK
 8006ff2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ff6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ffe:	f383 8810 	msr	PRIMASK, r3
}
 8007002:	46c0      	nop			; (mov r8, r8)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	689a      	ldr	r2, [r3, #8]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4969      	ldr	r1, [pc, #420]	; (80071b4 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8007010:	400a      	ands	r2, r1
 8007012:	609a      	str	r2, [r3, #8]
 8007014:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007016:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800701a:	f383 8810 	msr	PRIMASK, r3
}
 800701e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	228c      	movs	r2, #140	; 0x8c
 8007024:	2120      	movs	r1, #32
 8007026:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a5f      	ldr	r2, [pc, #380]	; (80071b8 <UART_RxISR_16BIT_FIFOEN+0x348>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d01f      	beq.n	800707e <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	685a      	ldr	r2, [r3, #4]
 8007044:	2380      	movs	r3, #128	; 0x80
 8007046:	041b      	lsls	r3, r3, #16
 8007048:	4013      	ands	r3, r2
 800704a:	d018      	beq.n	800707e <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800704c:	f3ef 8310 	mrs	r3, PRIMASK
 8007050:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007054:	667b      	str	r3, [r7, #100]	; 0x64
 8007056:	2301      	movs	r3, #1
 8007058:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800705a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800705c:	f383 8810 	msr	PRIMASK, r3
}
 8007060:	46c0      	nop			; (mov r8, r8)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4953      	ldr	r1, [pc, #332]	; (80071bc <UART_RxISR_16BIT_FIFOEN+0x34c>)
 800706e:	400a      	ands	r2, r1
 8007070:	601a      	str	r2, [r3, #0]
 8007072:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007074:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007078:	f383 8810 	msr	PRIMASK, r3
}
 800707c:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007082:	2b01      	cmp	r3, #1
 8007084:	d12f      	bne.n	80070e6 <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800708c:	f3ef 8310 	mrs	r3, PRIMASK
 8007090:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007092:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007094:	663b      	str	r3, [r7, #96]	; 0x60
 8007096:	2301      	movs	r3, #1
 8007098:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800709a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709c:	f383 8810 	msr	PRIMASK, r3
}
 80070a0:	46c0      	nop			; (mov r8, r8)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2110      	movs	r1, #16
 80070ae:	438a      	bics	r2, r1
 80070b0:	601a      	str	r2, [r3, #0]
 80070b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b8:	f383 8810 	msr	PRIMASK, r3
}
 80070bc:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	69db      	ldr	r3, [r3, #28]
 80070c4:	2210      	movs	r2, #16
 80070c6:	4013      	ands	r3, r2
 80070c8:	2b10      	cmp	r3, #16
 80070ca:	d103      	bne.n	80070d4 <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2210      	movs	r2, #16
 80070d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	225c      	movs	r2, #92	; 0x5c
 80070d8:	5a9a      	ldrh	r2, [r3, r2]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	0011      	movs	r1, r2
 80070de:	0018      	movs	r0, r3
 80070e0:	f7fe fcfc 	bl	8005adc <HAL_UARTEx_RxEventCallback>
 80070e4:	e003      	b.n	80070ee <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	0018      	movs	r0, r3
 80070ea:	f7f9 ff31 	bl	8000f50 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80070ee:	2376      	movs	r3, #118	; 0x76
 80070f0:	18fb      	adds	r3, r7, r3
 80070f2:	881b      	ldrh	r3, [r3, #0]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d006      	beq.n	8007106 <UART_RxISR_16BIT_FIFOEN+0x296>
 80070f8:	2384      	movs	r3, #132	; 0x84
 80070fa:	18fb      	adds	r3, r7, r3
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2220      	movs	r2, #32
 8007100:	4013      	ands	r3, r2
 8007102:	d000      	beq.n	8007106 <UART_RxISR_16BIT_FIFOEN+0x296>
 8007104:	e6d9      	b.n	8006eba <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007106:	205e      	movs	r0, #94	; 0x5e
 8007108:	183b      	adds	r3, r7, r0
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	215e      	movs	r1, #94	; 0x5e
 800710e:	5a52      	ldrh	r2, [r2, r1]
 8007110:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007112:	0001      	movs	r1, r0
 8007114:	187b      	adds	r3, r7, r1
 8007116:	881b      	ldrh	r3, [r3, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d044      	beq.n	80071a6 <UART_RxISR_16BIT_FIFOEN+0x336>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2268      	movs	r2, #104	; 0x68
 8007120:	5a9b      	ldrh	r3, [r3, r2]
 8007122:	187a      	adds	r2, r7, r1
 8007124:	8812      	ldrh	r2, [r2, #0]
 8007126:	429a      	cmp	r2, r3
 8007128:	d23d      	bcs.n	80071a6 <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800712a:	f3ef 8310 	mrs	r3, PRIMASK
 800712e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007130:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007132:	65bb      	str	r3, [r7, #88]	; 0x58
 8007134:	2301      	movs	r3, #1
 8007136:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	f383 8810 	msr	PRIMASK, r3
}
 800713e:	46c0      	nop			; (mov r8, r8)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	689a      	ldr	r2, [r3, #8]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	491d      	ldr	r1, [pc, #116]	; (80071c0 <UART_RxISR_16BIT_FIFOEN+0x350>)
 800714c:	400a      	ands	r2, r1
 800714e:	609a      	str	r2, [r3, #8]
 8007150:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007152:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	f383 8810 	msr	PRIMASK, r3
}
 800715a:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a19      	ldr	r2, [pc, #100]	; (80071c4 <UART_RxISR_16BIT_FIFOEN+0x354>)
 8007160:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007162:	f3ef 8310 	mrs	r3, PRIMASK
 8007166:	61bb      	str	r3, [r7, #24]
  return(result);
 8007168:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800716a:	657b      	str	r3, [r7, #84]	; 0x54
 800716c:	2301      	movs	r3, #1
 800716e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	f383 8810 	msr	PRIMASK, r3
}
 8007176:	46c0      	nop			; (mov r8, r8)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2120      	movs	r1, #32
 8007184:	430a      	orrs	r2, r1
 8007186:	601a      	str	r2, [r3, #0]
 8007188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800718a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800718c:	6a3b      	ldr	r3, [r7, #32]
 800718e:	f383 8810 	msr	PRIMASK, r3
}
 8007192:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007194:	e007      	b.n	80071a6 <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	699a      	ldr	r2, [r3, #24]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2108      	movs	r1, #8
 80071a2:	430a      	orrs	r2, r1
 80071a4:	619a      	str	r2, [r3, #24]
}
 80071a6:	46c0      	nop			; (mov r8, r8)
 80071a8:	46bd      	mov	sp, r7
 80071aa:	b022      	add	sp, #136	; 0x88
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	46c0      	nop			; (mov r8, r8)
 80071b0:	fffffeff 	.word	0xfffffeff
 80071b4:	effffffe 	.word	0xeffffffe
 80071b8:	40008000 	.word	0x40008000
 80071bc:	fbffffff 	.word	0xfbffffff
 80071c0:	efffffff 	.word	0xefffffff
 80071c4:	0800696d 	.word	0x0800696d

080071c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80071d0:	46c0      	nop			; (mov r8, r8)
 80071d2:	46bd      	mov	sp, r7
 80071d4:	b002      	add	sp, #8
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80071e0:	46c0      	nop			; (mov r8, r8)
 80071e2:	46bd      	mov	sp, r7
 80071e4:	b002      	add	sp, #8
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80071f0:	46c0      	nop			; (mov r8, r8)
 80071f2:	46bd      	mov	sp, r7
 80071f4:	b002      	add	sp, #8
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2284      	movs	r2, #132	; 0x84
 8007204:	5c9b      	ldrb	r3, [r3, r2]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d101      	bne.n	800720e <HAL_UARTEx_DisableFifoMode+0x16>
 800720a:	2302      	movs	r3, #2
 800720c:	e027      	b.n	800725e <HAL_UARTEx_DisableFifoMode+0x66>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2284      	movs	r2, #132	; 0x84
 8007212:	2101      	movs	r1, #1
 8007214:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2288      	movs	r2, #136	; 0x88
 800721a:	2124      	movs	r1, #36	; 0x24
 800721c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2101      	movs	r1, #1
 8007232:	438a      	bics	r2, r1
 8007234:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	4a0b      	ldr	r2, [pc, #44]	; (8007268 <HAL_UARTEx_DisableFifoMode+0x70>)
 800723a:	4013      	ands	r3, r2
 800723c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2288      	movs	r2, #136	; 0x88
 8007250:	2120      	movs	r1, #32
 8007252:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2284      	movs	r2, #132	; 0x84
 8007258:	2100      	movs	r1, #0
 800725a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	0018      	movs	r0, r3
 8007260:	46bd      	mov	sp, r7
 8007262:	b004      	add	sp, #16
 8007264:	bd80      	pop	{r7, pc}
 8007266:	46c0      	nop			; (mov r8, r8)
 8007268:	dfffffff 	.word	0xdfffffff

0800726c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2284      	movs	r2, #132	; 0x84
 800727a:	5c9b      	ldrb	r3, [r3, r2]
 800727c:	2b01      	cmp	r3, #1
 800727e:	d101      	bne.n	8007284 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007280:	2302      	movs	r3, #2
 8007282:	e02e      	b.n	80072e2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2284      	movs	r2, #132	; 0x84
 8007288:	2101      	movs	r1, #1
 800728a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2288      	movs	r2, #136	; 0x88
 8007290:	2124      	movs	r1, #36	; 0x24
 8007292:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2101      	movs	r1, #1
 80072a8:	438a      	bics	r2, r1
 80072aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	00db      	lsls	r3, r3, #3
 80072b4:	08d9      	lsrs	r1, r3, #3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	683a      	ldr	r2, [r7, #0]
 80072bc:	430a      	orrs	r2, r1
 80072be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	0018      	movs	r0, r3
 80072c4:	f000 f854 	bl	8007370 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2288      	movs	r2, #136	; 0x88
 80072d4:	2120      	movs	r1, #32
 80072d6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2284      	movs	r2, #132	; 0x84
 80072dc:	2100      	movs	r1, #0
 80072de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	0018      	movs	r0, r3
 80072e4:	46bd      	mov	sp, r7
 80072e6:	b004      	add	sp, #16
 80072e8:	bd80      	pop	{r7, pc}
	...

080072ec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2284      	movs	r2, #132	; 0x84
 80072fa:	5c9b      	ldrb	r3, [r3, r2]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d101      	bne.n	8007304 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007300:	2302      	movs	r3, #2
 8007302:	e02f      	b.n	8007364 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2284      	movs	r2, #132	; 0x84
 8007308:	2101      	movs	r1, #1
 800730a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2288      	movs	r2, #136	; 0x88
 8007310:	2124      	movs	r1, #36	; 0x24
 8007312:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2101      	movs	r1, #1
 8007328:	438a      	bics	r2, r1
 800732a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	4a0e      	ldr	r2, [pc, #56]	; (800736c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007334:	4013      	ands	r3, r2
 8007336:	0019      	movs	r1, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	683a      	ldr	r2, [r7, #0]
 800733e:	430a      	orrs	r2, r1
 8007340:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	0018      	movs	r0, r3
 8007346:	f000 f813 	bl	8007370 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2288      	movs	r2, #136	; 0x88
 8007356:	2120      	movs	r1, #32
 8007358:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2284      	movs	r2, #132	; 0x84
 800735e:	2100      	movs	r1, #0
 8007360:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	0018      	movs	r0, r3
 8007366:	46bd      	mov	sp, r7
 8007368:	b004      	add	sp, #16
 800736a:	bd80      	pop	{r7, pc}
 800736c:	f1ffffff 	.word	0xf1ffffff

08007370 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800737c:	2b00      	cmp	r3, #0
 800737e:	d108      	bne.n	8007392 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	226a      	movs	r2, #106	; 0x6a
 8007384:	2101      	movs	r1, #1
 8007386:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2268      	movs	r2, #104	; 0x68
 800738c:	2101      	movs	r1, #1
 800738e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007390:	e043      	b.n	800741a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007392:	260f      	movs	r6, #15
 8007394:	19bb      	adds	r3, r7, r6
 8007396:	2208      	movs	r2, #8
 8007398:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800739a:	200e      	movs	r0, #14
 800739c:	183b      	adds	r3, r7, r0
 800739e:	2208      	movs	r2, #8
 80073a0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	0e5b      	lsrs	r3, r3, #25
 80073aa:	b2da      	uxtb	r2, r3
 80073ac:	240d      	movs	r4, #13
 80073ae:	193b      	adds	r3, r7, r4
 80073b0:	2107      	movs	r1, #7
 80073b2:	400a      	ands	r2, r1
 80073b4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	0f5b      	lsrs	r3, r3, #29
 80073be:	b2da      	uxtb	r2, r3
 80073c0:	250c      	movs	r5, #12
 80073c2:	197b      	adds	r3, r7, r5
 80073c4:	2107      	movs	r1, #7
 80073c6:	400a      	ands	r2, r1
 80073c8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073ca:	183b      	adds	r3, r7, r0
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	197a      	adds	r2, r7, r5
 80073d0:	7812      	ldrb	r2, [r2, #0]
 80073d2:	4914      	ldr	r1, [pc, #80]	; (8007424 <UARTEx_SetNbDataToProcess+0xb4>)
 80073d4:	5c8a      	ldrb	r2, [r1, r2]
 80073d6:	435a      	muls	r2, r3
 80073d8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80073da:	197b      	adds	r3, r7, r5
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	4a12      	ldr	r2, [pc, #72]	; (8007428 <UARTEx_SetNbDataToProcess+0xb8>)
 80073e0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073e2:	0019      	movs	r1, r3
 80073e4:	f7f8 ff2a 	bl	800023c <__divsi3>
 80073e8:	0003      	movs	r3, r0
 80073ea:	b299      	uxth	r1, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	226a      	movs	r2, #106	; 0x6a
 80073f0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073f2:	19bb      	adds	r3, r7, r6
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	193a      	adds	r2, r7, r4
 80073f8:	7812      	ldrb	r2, [r2, #0]
 80073fa:	490a      	ldr	r1, [pc, #40]	; (8007424 <UARTEx_SetNbDataToProcess+0xb4>)
 80073fc:	5c8a      	ldrb	r2, [r1, r2]
 80073fe:	435a      	muls	r2, r3
 8007400:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007402:	193b      	adds	r3, r7, r4
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	4a08      	ldr	r2, [pc, #32]	; (8007428 <UARTEx_SetNbDataToProcess+0xb8>)
 8007408:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800740a:	0019      	movs	r1, r3
 800740c:	f7f8 ff16 	bl	800023c <__divsi3>
 8007410:	0003      	movs	r3, r0
 8007412:	b299      	uxth	r1, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2268      	movs	r2, #104	; 0x68
 8007418:	5299      	strh	r1, [r3, r2]
}
 800741a:	46c0      	nop			; (mov r8, r8)
 800741c:	46bd      	mov	sp, r7
 800741e:	b005      	add	sp, #20
 8007420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007422:	46c0      	nop			; (mov r8, r8)
 8007424:	08008444 	.word	0x08008444
 8007428:	0800844c 	.word	0x0800844c

0800742c <I2C_LCD_ExpanderWrite>:
static I2C_LCD_InfoParam_t I2C_LCD_InfoParam_g[I2C_LCD_MAX];

/*---------------------[STATIC INTERNAL FUNCTIONS]-----------------------*/

static void I2C_LCD_ExpanderWrite(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 800742c:	b590      	push	{r4, r7, lr}
 800742e:	b087      	sub	sp, #28
 8007430:	af02      	add	r7, sp, #8
 8007432:	0002      	movs	r2, r0
 8007434:	1dfb      	adds	r3, r7, #7
 8007436:	701a      	strb	r2, [r3, #0]
 8007438:	1dbb      	adds	r3, r7, #6
 800743a:	1c0a      	adds	r2, r1, #0
 800743c:	701a      	strb	r2, [r3, #0]
    uint8_t TxData = (DATA) | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal;
 800743e:	1dfb      	adds	r3, r7, #7
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	4a16      	ldr	r2, [pc, #88]	; (800749c <I2C_LCD_ExpanderWrite+0x70>)
 8007444:	005b      	lsls	r3, r3, #1
 8007446:	18d3      	adds	r3, r2, r3
 8007448:	3301      	adds	r3, #1
 800744a:	781a      	ldrb	r2, [r3, #0]
 800744c:	1dbb      	adds	r3, r7, #6
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	4313      	orrs	r3, r2
 8007452:	b2da      	uxtb	r2, r3
 8007454:	240f      	movs	r4, #15
 8007456:	193b      	adds	r3, r7, r4
 8007458:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_Handle, (I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_Address<<1), &TxData, sizeof(TxData), 100);
 800745a:	1dfb      	adds	r3, r7, #7
 800745c:	781a      	ldrb	r2, [r3, #0]
 800745e:	4910      	ldr	r1, [pc, #64]	; (80074a0 <I2C_LCD_ExpanderWrite+0x74>)
 8007460:	0013      	movs	r3, r2
 8007462:	005b      	lsls	r3, r3, #1
 8007464:	189b      	adds	r3, r3, r2
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	18cb      	adds	r3, r1, r3
 800746a:	3304      	adds	r3, #4
 800746c:	6818      	ldr	r0, [r3, #0]
 800746e:	1dfb      	adds	r3, r7, #7
 8007470:	781a      	ldrb	r2, [r3, #0]
 8007472:	490b      	ldr	r1, [pc, #44]	; (80074a0 <I2C_LCD_ExpanderWrite+0x74>)
 8007474:	0013      	movs	r3, r2
 8007476:	005b      	lsls	r3, r3, #1
 8007478:	189b      	adds	r3, r3, r2
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	18cb      	adds	r3, r1, r3
 800747e:	3308      	adds	r3, #8
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	b29b      	uxth	r3, r3
 8007484:	18db      	adds	r3, r3, r3
 8007486:	b299      	uxth	r1, r3
 8007488:	193a      	adds	r2, r7, r4
 800748a:	2364      	movs	r3, #100	; 0x64
 800748c:	9300      	str	r3, [sp, #0]
 800748e:	2301      	movs	r3, #1
 8007490:	f7fb f93e 	bl	8002710 <HAL_I2C_Master_Transmit>
}
 8007494:	46c0      	nop			; (mov r8, r8)
 8007496:	46bd      	mov	sp, r7
 8007498:	b005      	add	sp, #20
 800749a:	bd90      	pop	{r4, r7, pc}
 800749c:	200002fc 	.word	0x200002fc
 80074a0:	08008454 	.word	0x08008454

080074a4 <I2C_LCD_EnPulse>:

static void I2C_LCD_EnPulse(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 80074a4:	b590      	push	{r4, r7, lr}
 80074a6:	b087      	sub	sp, #28
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	0002      	movs	r2, r0
 80074ac:	1dfb      	adds	r3, r7, #7
 80074ae:	701a      	strb	r2, [r3, #0]
 80074b0:	1dbb      	adds	r3, r7, #6
 80074b2:	1c0a      	adds	r2, r1, #0
 80074b4:	701a      	strb	r2, [r3, #0]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA | EN)); // En high
 80074b6:	1dbb      	adds	r3, r7, #6
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	2204      	movs	r2, #4
 80074bc:	4313      	orrs	r3, r2
 80074be:	b2da      	uxtb	r2, r3
 80074c0:	1dfb      	adds	r3, r7, #7
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	0011      	movs	r1, r2
 80074c6:	0018      	movs	r0, r3
 80074c8:	f7ff ffb0 	bl	800742c <I2C_LCD_ExpanderWrite>
	DELAY_US(2); // enable pulse must be >450ns
 80074cc:	4b25      	ldr	r3, [pc, #148]	; (8007564 <I2C_LCD_EnPulse+0xc0>)
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	617b      	str	r3, [r7, #20]
 80074d2:	4b25      	ldr	r3, [pc, #148]	; (8007568 <I2C_LCD_EnPulse+0xc4>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4925      	ldr	r1, [pc, #148]	; (800756c <I2C_LCD_EnPulse+0xc8>)
 80074d8:	0018      	movs	r0, r3
 80074da:	f7f8 fe25 	bl	8000128 <__udivsi3>
 80074de:	0003      	movs	r3, r0
 80074e0:	005c      	lsls	r4, r3, #1
 80074e2:	4b21      	ldr	r3, [pc, #132]	; (8007568 <I2C_LCD_EnPulse+0xc4>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4921      	ldr	r1, [pc, #132]	; (800756c <I2C_LCD_EnPulse+0xc8>)
 80074e8:	0018      	movs	r0, r3
 80074ea:	f7f8 fe1d 	bl	8000128 <__udivsi3>
 80074ee:	0003      	movs	r3, r0
 80074f0:	085b      	lsrs	r3, r3, #1
 80074f2:	1ae3      	subs	r3, r4, r3
 80074f4:	613b      	str	r3, [r7, #16]
 80074f6:	4b1b      	ldr	r3, [pc, #108]	; (8007564 <I2C_LCD_EnPulse+0xc0>)
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	697a      	ldr	r2, [r7, #20]
 80074fc:	1ad3      	subs	r3, r2, r3
 80074fe:	693a      	ldr	r2, [r7, #16]
 8007500:	429a      	cmp	r2, r3
 8007502:	d8f8      	bhi.n	80074f6 <I2C_LCD_EnPulse+0x52>

    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA & ~EN)); // En low
 8007504:	1dbb      	adds	r3, r7, #6
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	2204      	movs	r2, #4
 800750a:	4393      	bics	r3, r2
 800750c:	b2da      	uxtb	r2, r3
 800750e:	1dfb      	adds	r3, r7, #7
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	0011      	movs	r1, r2
 8007514:	0018      	movs	r0, r3
 8007516:	f7ff ff89 	bl	800742c <I2C_LCD_ExpanderWrite>
    DELAY_US(50); // commands need > 37us to settle
 800751a:	4b12      	ldr	r3, [pc, #72]	; (8007564 <I2C_LCD_EnPulse+0xc0>)
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	60fb      	str	r3, [r7, #12]
 8007520:	4b11      	ldr	r3, [pc, #68]	; (8007568 <I2C_LCD_EnPulse+0xc4>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4911      	ldr	r1, [pc, #68]	; (800756c <I2C_LCD_EnPulse+0xc8>)
 8007526:	0018      	movs	r0, r3
 8007528:	f7f8 fdfe 	bl	8000128 <__udivsi3>
 800752c:	0003      	movs	r3, r0
 800752e:	001a      	movs	r2, r3
 8007530:	2332      	movs	r3, #50	; 0x32
 8007532:	4353      	muls	r3, r2
 8007534:	001c      	movs	r4, r3
 8007536:	4b0c      	ldr	r3, [pc, #48]	; (8007568 <I2C_LCD_EnPulse+0xc4>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	490c      	ldr	r1, [pc, #48]	; (800756c <I2C_LCD_EnPulse+0xc8>)
 800753c:	0018      	movs	r0, r3
 800753e:	f7f8 fdf3 	bl	8000128 <__udivsi3>
 8007542:	0003      	movs	r3, r0
 8007544:	085b      	lsrs	r3, r3, #1
 8007546:	1ae3      	subs	r3, r4, r3
 8007548:	60bb      	str	r3, [r7, #8]
 800754a:	4b06      	ldr	r3, [pc, #24]	; (8007564 <I2C_LCD_EnPulse+0xc0>)
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	1ad3      	subs	r3, r2, r3
 8007552:	68ba      	ldr	r2, [r7, #8]
 8007554:	429a      	cmp	r2, r3
 8007556:	d8f8      	bhi.n	800754a <I2C_LCD_EnPulse+0xa6>
}
 8007558:	46c0      	nop			; (mov r8, r8)
 800755a:	46c0      	nop			; (mov r8, r8)
 800755c:	46bd      	mov	sp, r7
 800755e:	b007      	add	sp, #28
 8007560:	bd90      	pop	{r4, r7, pc}
 8007562:	46c0      	nop			; (mov r8, r8)
 8007564:	e000e010 	.word	0xe000e010
 8007568:	20000000 	.word	0x20000000
 800756c:	000f4240 	.word	0x000f4240

08007570 <I2C_LCD_Write4Bits>:

static void I2C_LCD_Write4Bits(uint8_t I2C_LCD_InstanceIndex, uint8_t Val)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	0002      	movs	r2, r0
 8007578:	1dfb      	adds	r3, r7, #7
 800757a:	701a      	strb	r2, [r3, #0]
 800757c:	1dbb      	adds	r3, r7, #6
 800757e:	1c0a      	adds	r2, r1, #0
 8007580:	701a      	strb	r2, [r3, #0]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, Val);
 8007582:	1dbb      	adds	r3, r7, #6
 8007584:	781a      	ldrb	r2, [r3, #0]
 8007586:	1dfb      	adds	r3, r7, #7
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	0011      	movs	r1, r2
 800758c:	0018      	movs	r0, r3
 800758e:	f7ff ff4d 	bl	800742c <I2C_LCD_ExpanderWrite>
	I2C_LCD_EnPulse(I2C_LCD_InstanceIndex, Val);
 8007592:	1dbb      	adds	r3, r7, #6
 8007594:	781a      	ldrb	r2, [r3, #0]
 8007596:	1dfb      	adds	r3, r7, #7
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	0011      	movs	r1, r2
 800759c:	0018      	movs	r0, r3
 800759e:	f7ff ff81 	bl	80074a4 <I2C_LCD_EnPulse>
}
 80075a2:	46c0      	nop			; (mov r8, r8)
 80075a4:	46bd      	mov	sp, r7
 80075a6:	b002      	add	sp, #8
 80075a8:	bd80      	pop	{r7, pc}

080075aa <I2C_LCD_Send>:

static void I2C_LCD_Send(uint8_t I2C_LCD_InstanceIndex, uint8_t Val, uint8_t Mode)
{
 80075aa:	b590      	push	{r4, r7, lr}
 80075ac:	b085      	sub	sp, #20
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	0004      	movs	r4, r0
 80075b2:	0008      	movs	r0, r1
 80075b4:	0011      	movs	r1, r2
 80075b6:	1dfb      	adds	r3, r7, #7
 80075b8:	1c22      	adds	r2, r4, #0
 80075ba:	701a      	strb	r2, [r3, #0]
 80075bc:	1dbb      	adds	r3, r7, #6
 80075be:	1c02      	adds	r2, r0, #0
 80075c0:	701a      	strb	r2, [r3, #0]
 80075c2:	1d7b      	adds	r3, r7, #5
 80075c4:	1c0a      	adds	r2, r1, #0
 80075c6:	701a      	strb	r2, [r3, #0]
    uint8_t HighNib = Val & 0xF0;
 80075c8:	200f      	movs	r0, #15
 80075ca:	183b      	adds	r3, r7, r0
 80075cc:	1dba      	adds	r2, r7, #6
 80075ce:	7812      	ldrb	r2, [r2, #0]
 80075d0:	210f      	movs	r1, #15
 80075d2:	438a      	bics	r2, r1
 80075d4:	701a      	strb	r2, [r3, #0]
    uint8_t LowNib = (Val << 4) & 0xF0;
 80075d6:	1dbb      	adds	r3, r7, #6
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	011a      	lsls	r2, r3, #4
 80075dc:	240e      	movs	r4, #14
 80075de:	193b      	adds	r3, r7, r4
 80075e0:	701a      	strb	r2, [r3, #0]
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (HighNib) | Mode);
 80075e2:	183a      	adds	r2, r7, r0
 80075e4:	1d7b      	adds	r3, r7, #5
 80075e6:	7812      	ldrb	r2, [r2, #0]
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	1dfb      	adds	r3, r7, #7
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	0011      	movs	r1, r2
 80075f4:	0018      	movs	r0, r3
 80075f6:	f7ff ffbb 	bl	8007570 <I2C_LCD_Write4Bits>
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (LowNib) | Mode);
 80075fa:	193a      	adds	r2, r7, r4
 80075fc:	1d7b      	adds	r3, r7, #5
 80075fe:	7812      	ldrb	r2, [r2, #0]
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	4313      	orrs	r3, r2
 8007604:	b2da      	uxtb	r2, r3
 8007606:	1dfb      	adds	r3, r7, #7
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	0011      	movs	r1, r2
 800760c:	0018      	movs	r0, r3
 800760e:	f7ff ffaf 	bl	8007570 <I2C_LCD_Write4Bits>
}
 8007612:	46c0      	nop			; (mov r8, r8)
 8007614:	46bd      	mov	sp, r7
 8007616:	b005      	add	sp, #20
 8007618:	bd90      	pop	{r4, r7, pc}

0800761a <I2C_LCD_Cmd>:

static void I2C_LCD_Cmd(uint8_t I2C_LCD_InstanceIndex, uint8_t CMD)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b082      	sub	sp, #8
 800761e:	af00      	add	r7, sp, #0
 8007620:	0002      	movs	r2, r0
 8007622:	1dfb      	adds	r3, r7, #7
 8007624:	701a      	strb	r2, [r3, #0]
 8007626:	1dbb      	adds	r3, r7, #6
 8007628:	1c0a      	adds	r2, r1, #0
 800762a:	701a      	strb	r2, [r3, #0]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CMD, 0);
 800762c:	1dbb      	adds	r3, r7, #6
 800762e:	7819      	ldrb	r1, [r3, #0]
 8007630:	1dfb      	adds	r3, r7, #7
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	2200      	movs	r2, #0
 8007636:	0018      	movs	r0, r3
 8007638:	f7ff ffb7 	bl	80075aa <I2C_LCD_Send>
}
 800763c:	46c0      	nop			; (mov r8, r8)
 800763e:	46bd      	mov	sp, r7
 8007640:	b002      	add	sp, #8
 8007642:	bd80      	pop	{r7, pc}

08007644 <I2C_LCD_Data>:

static void I2C_LCD_Data(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	0002      	movs	r2, r0
 800764c:	1dfb      	adds	r3, r7, #7
 800764e:	701a      	strb	r2, [r3, #0]
 8007650:	1dbb      	adds	r3, r7, #6
 8007652:	1c0a      	adds	r2, r1, #0
 8007654:	701a      	strb	r2, [r3, #0]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, DATA, 1);
 8007656:	1dbb      	adds	r3, r7, #6
 8007658:	7819      	ldrb	r1, [r3, #0]
 800765a:	1dfb      	adds	r3, r7, #7
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	2201      	movs	r2, #1
 8007660:	0018      	movs	r0, r3
 8007662:	f7ff ffa2 	bl	80075aa <I2C_LCD_Send>
}
 8007666:	46c0      	nop			; (mov r8, r8)
 8007668:	46bd      	mov	sp, r7
 800766a:	b002      	add	sp, #8
 800766c:	bd80      	pop	{r7, pc}
	...

08007670 <I2C_LCD_Init>:
//=========================================================================================================================

/*-----------------------[USER EXTERNAL FUNCTIONS]-----------------------*/

void I2C_LCD_Init(uint8_t I2C_LCD_InstanceIndex)
{
 8007670:	b590      	push	{r4, r7, lr}
 8007672:	b08b      	sub	sp, #44	; 0x2c
 8007674:	af00      	add	r7, sp, #0
 8007676:	0002      	movs	r2, r0
 8007678:	1dfb      	adds	r3, r7, #7
 800767a:	701a      	strb	r2, [r3, #0]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 800767c:	46c0      	nop			; (mov r8, r8)
 800767e:	f7f9 ff99 	bl	80015b4 <HAL_GetTick>
 8007682:	0003      	movs	r3, r0
 8007684:	2b31      	cmp	r3, #49	; 0x31
 8007686:	d9fa      	bls.n	800767e <I2C_LCD_Init+0xe>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8007688:	1dfb      	adds	r3, r7, #7
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	2130      	movs	r1, #48	; 0x30
 800768e:	0018      	movs	r0, r3
 8007690:	f7ff ffc3 	bl	800761a <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8007694:	2300      	movs	r3, #0
 8007696:	627b      	str	r3, [r7, #36]	; 0x24
 8007698:	e025      	b.n	80076e6 <I2C_LCD_Init+0x76>
 800769a:	4b57      	ldr	r3, [pc, #348]	; (80077f8 <I2C_LCD_Init+0x188>)
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	60fb      	str	r3, [r7, #12]
 80076a0:	4b56      	ldr	r3, [pc, #344]	; (80077fc <I2C_LCD_Init+0x18c>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4956      	ldr	r1, [pc, #344]	; (8007800 <I2C_LCD_Init+0x190>)
 80076a6:	0018      	movs	r0, r3
 80076a8:	f7f8 fd3e 	bl	8000128 <__udivsi3>
 80076ac:	0003      	movs	r3, r0
 80076ae:	001a      	movs	r2, r3
 80076b0:	0013      	movs	r3, r2
 80076b2:	015b      	lsls	r3, r3, #5
 80076b4:	1a9b      	subs	r3, r3, r2
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	189b      	adds	r3, r3, r2
 80076ba:	00db      	lsls	r3, r3, #3
 80076bc:	001c      	movs	r4, r3
 80076be:	4b4f      	ldr	r3, [pc, #316]	; (80077fc <I2C_LCD_Init+0x18c>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	494f      	ldr	r1, [pc, #316]	; (8007800 <I2C_LCD_Init+0x190>)
 80076c4:	0018      	movs	r0, r3
 80076c6:	f7f8 fd2f 	bl	8000128 <__udivsi3>
 80076ca:	0003      	movs	r3, r0
 80076cc:	085b      	lsrs	r3, r3, #1
 80076ce:	1ae3      	subs	r3, r4, r3
 80076d0:	60bb      	str	r3, [r7, #8]
 80076d2:	4b49      	ldr	r3, [pc, #292]	; (80077f8 <I2C_LCD_Init+0x188>)
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	1ad3      	subs	r3, r2, r3
 80076da:	68ba      	ldr	r2, [r7, #8]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d8f8      	bhi.n	80076d2 <I2C_LCD_Init+0x62>
 80076e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e2:	3301      	adds	r3, #1
 80076e4:	627b      	str	r3, [r7, #36]	; 0x24
 80076e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e8:	2b04      	cmp	r3, #4
 80076ea:	d9d6      	bls.n	800769a <I2C_LCD_Init+0x2a>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 80076ec:	1dfb      	adds	r3, r7, #7
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	2130      	movs	r1, #48	; 0x30
 80076f2:	0018      	movs	r0, r3
 80076f4:	f7ff ff91 	bl	800761a <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 80076f8:	2300      	movs	r3, #0
 80076fa:	623b      	str	r3, [r7, #32]
 80076fc:	e025      	b.n	800774a <I2C_LCD_Init+0xda>
 80076fe:	4b3e      	ldr	r3, [pc, #248]	; (80077f8 <I2C_LCD_Init+0x188>)
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	617b      	str	r3, [r7, #20]
 8007704:	4b3d      	ldr	r3, [pc, #244]	; (80077fc <I2C_LCD_Init+0x18c>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	493d      	ldr	r1, [pc, #244]	; (8007800 <I2C_LCD_Init+0x190>)
 800770a:	0018      	movs	r0, r3
 800770c:	f7f8 fd0c 	bl	8000128 <__udivsi3>
 8007710:	0003      	movs	r3, r0
 8007712:	001a      	movs	r2, r3
 8007714:	0013      	movs	r3, r2
 8007716:	015b      	lsls	r3, r3, #5
 8007718:	1a9b      	subs	r3, r3, r2
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	189b      	adds	r3, r3, r2
 800771e:	00db      	lsls	r3, r3, #3
 8007720:	001c      	movs	r4, r3
 8007722:	4b36      	ldr	r3, [pc, #216]	; (80077fc <I2C_LCD_Init+0x18c>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4936      	ldr	r1, [pc, #216]	; (8007800 <I2C_LCD_Init+0x190>)
 8007728:	0018      	movs	r0, r3
 800772a:	f7f8 fcfd 	bl	8000128 <__udivsi3>
 800772e:	0003      	movs	r3, r0
 8007730:	085b      	lsrs	r3, r3, #1
 8007732:	1ae3      	subs	r3, r4, r3
 8007734:	613b      	str	r3, [r7, #16]
 8007736:	4b30      	ldr	r3, [pc, #192]	; (80077f8 <I2C_LCD_Init+0x188>)
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	697a      	ldr	r2, [r7, #20]
 800773c:	1ad3      	subs	r3, r2, r3
 800773e:	693a      	ldr	r2, [r7, #16]
 8007740:	429a      	cmp	r2, r3
 8007742:	d8f8      	bhi.n	8007736 <I2C_LCD_Init+0xc6>
 8007744:	6a3b      	ldr	r3, [r7, #32]
 8007746:	3301      	adds	r3, #1
 8007748:	623b      	str	r3, [r7, #32]
 800774a:	6a3b      	ldr	r3, [r7, #32]
 800774c:	2b04      	cmp	r3, #4
 800774e:	d9d6      	bls.n	80076fe <I2C_LCD_Init+0x8e>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8007750:	1dfb      	adds	r3, r7, #7
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	2130      	movs	r1, #48	; 0x30
 8007756:	0018      	movs	r0, r3
 8007758:	f7ff ff5f 	bl	800761a <I2C_LCD_Cmd>
    DELAY_US(150);  // Delay > 100μs
 800775c:	4b26      	ldr	r3, [pc, #152]	; (80077f8 <I2C_LCD_Init+0x188>)
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	61fb      	str	r3, [r7, #28]
 8007762:	4b26      	ldr	r3, [pc, #152]	; (80077fc <I2C_LCD_Init+0x18c>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4926      	ldr	r1, [pc, #152]	; (8007800 <I2C_LCD_Init+0x190>)
 8007768:	0018      	movs	r0, r3
 800776a:	f7f8 fcdd 	bl	8000128 <__udivsi3>
 800776e:	0003      	movs	r3, r0
 8007770:	001a      	movs	r2, r3
 8007772:	2396      	movs	r3, #150	; 0x96
 8007774:	4353      	muls	r3, r2
 8007776:	001c      	movs	r4, r3
 8007778:	4b20      	ldr	r3, [pc, #128]	; (80077fc <I2C_LCD_Init+0x18c>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4920      	ldr	r1, [pc, #128]	; (8007800 <I2C_LCD_Init+0x190>)
 800777e:	0018      	movs	r0, r3
 8007780:	f7f8 fcd2 	bl	8000128 <__udivsi3>
 8007784:	0003      	movs	r3, r0
 8007786:	085b      	lsrs	r3, r3, #1
 8007788:	1ae3      	subs	r3, r4, r3
 800778a:	61bb      	str	r3, [r7, #24]
 800778c:	4b1a      	ldr	r3, [pc, #104]	; (80077f8 <I2C_LCD_Init+0x188>)
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	69fa      	ldr	r2, [r7, #28]
 8007792:	1ad3      	subs	r3, r2, r3
 8007794:	69ba      	ldr	r2, [r7, #24]
 8007796:	429a      	cmp	r2, r3
 8007798:	d8f8      	bhi.n	800778c <I2C_LCD_Init+0x11c>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x02);
 800779a:	1dfb      	adds	r3, r7, #7
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	2102      	movs	r1, #2
 80077a0:	0018      	movs	r0, r3
 80077a2:	f7ff ff3a 	bl	800761a <I2C_LCD_Cmd>
    // Configure the LCD
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 80077a6:	1dfb      	adds	r3, r7, #7
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	2128      	movs	r1, #40	; 0x28
 80077ac:	0018      	movs	r0, r3
 80077ae:	f7ff ff34 	bl	800761a <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 80077b2:	1dfb      	adds	r3, r7, #7
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	210c      	movs	r1, #12
 80077b8:	0018      	movs	r0, r3
 80077ba:	f7ff ff2e 	bl	800761a <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 80077be:	1dfb      	adds	r3, r7, #7
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	2106      	movs	r1, #6
 80077c4:	0018      	movs	r0, r3
 80077c6:	f7ff ff28 	bl	800761a <I2C_LCD_Cmd>
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80077ca:	1dfb      	adds	r3, r7, #7
 80077cc:	781a      	ldrb	r2, [r3, #0]
 80077ce:	4b0d      	ldr	r3, [pc, #52]	; (8007804 <I2C_LCD_Init+0x194>)
 80077d0:	0052      	lsls	r2, r2, #1
 80077d2:	2104      	movs	r1, #4
 80077d4:	54d1      	strb	r1, [r2, r3]
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 80077d6:	1dfb      	adds	r3, r7, #7
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	4a0a      	ldr	r2, [pc, #40]	; (8007804 <I2C_LCD_Init+0x194>)
 80077dc:	005b      	lsls	r3, r3, #1
 80077de:	18d3      	adds	r3, r2, r3
 80077e0:	3301      	adds	r3, #1
 80077e2:	2208      	movs	r2, #8
 80077e4:	701a      	strb	r2, [r3, #0]
    // Clear the LCD
    I2C_LCD_Clear(I2C_LCD_InstanceIndex);
 80077e6:	1dfb      	adds	r3, r7, #7
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	0018      	movs	r0, r3
 80077ec:	f000 f80c 	bl	8007808 <I2C_LCD_Clear>
}
 80077f0:	46c0      	nop			; (mov r8, r8)
 80077f2:	46bd      	mov	sp, r7
 80077f4:	b00b      	add	sp, #44	; 0x2c
 80077f6:	bd90      	pop	{r4, r7, pc}
 80077f8:	e000e010 	.word	0xe000e010
 80077fc:	20000000 	.word	0x20000000
 8007800:	000f4240 	.word	0x000f4240
 8007804:	200002fc 	.word	0x200002fc

08007808 <I2C_LCD_Clear>:

void I2C_LCD_Clear(uint8_t I2C_LCD_InstanceIndex)
{
 8007808:	b590      	push	{r4, r7, lr}
 800780a:	b087      	sub	sp, #28
 800780c:	af00      	add	r7, sp, #0
 800780e:	0002      	movs	r2, r0
 8007810:	1dfb      	adds	r3, r7, #7
 8007812:	701a      	strb	r2, [r3, #0]
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CLEARDISPLAY);
 8007814:	1dfb      	adds	r3, r7, #7
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	2101      	movs	r1, #1
 800781a:	0018      	movs	r0, r3
 800781c:	f7ff fefd 	bl	800761a <I2C_LCD_Cmd>
    DELAY_MS(2);
 8007820:	2300      	movs	r3, #0
 8007822:	617b      	str	r3, [r7, #20]
 8007824:	e025      	b.n	8007872 <I2C_LCD_Clear+0x6a>
 8007826:	4b17      	ldr	r3, [pc, #92]	; (8007884 <I2C_LCD_Clear+0x7c>)
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	613b      	str	r3, [r7, #16]
 800782c:	4b16      	ldr	r3, [pc, #88]	; (8007888 <I2C_LCD_Clear+0x80>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4916      	ldr	r1, [pc, #88]	; (800788c <I2C_LCD_Clear+0x84>)
 8007832:	0018      	movs	r0, r3
 8007834:	f7f8 fc78 	bl	8000128 <__udivsi3>
 8007838:	0003      	movs	r3, r0
 800783a:	001a      	movs	r2, r3
 800783c:	0013      	movs	r3, r2
 800783e:	015b      	lsls	r3, r3, #5
 8007840:	1a9b      	subs	r3, r3, r2
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	189b      	adds	r3, r3, r2
 8007846:	00db      	lsls	r3, r3, #3
 8007848:	001c      	movs	r4, r3
 800784a:	4b0f      	ldr	r3, [pc, #60]	; (8007888 <I2C_LCD_Clear+0x80>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	490f      	ldr	r1, [pc, #60]	; (800788c <I2C_LCD_Clear+0x84>)
 8007850:	0018      	movs	r0, r3
 8007852:	f7f8 fc69 	bl	8000128 <__udivsi3>
 8007856:	0003      	movs	r3, r0
 8007858:	085b      	lsrs	r3, r3, #1
 800785a:	1ae3      	subs	r3, r4, r3
 800785c:	60fb      	str	r3, [r7, #12]
 800785e:	4b09      	ldr	r3, [pc, #36]	; (8007884 <I2C_LCD_Clear+0x7c>)
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	693a      	ldr	r2, [r7, #16]
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	429a      	cmp	r2, r3
 800786a:	d8f8      	bhi.n	800785e <I2C_LCD_Clear+0x56>
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	3301      	adds	r3, #1
 8007870:	617b      	str	r3, [r7, #20]
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	2b01      	cmp	r3, #1
 8007876:	d9d6      	bls.n	8007826 <I2C_LCD_Clear+0x1e>
}
 8007878:	46c0      	nop			; (mov r8, r8)
 800787a:	46c0      	nop			; (mov r8, r8)
 800787c:	46bd      	mov	sp, r7
 800787e:	b007      	add	sp, #28
 8007880:	bd90      	pop	{r4, r7, pc}
 8007882:	46c0      	nop			; (mov r8, r8)
 8007884:	e000e010 	.word	0xe000e010
 8007888:	20000000 	.word	0x20000000
 800788c:	000f4240 	.word	0x000f4240

08007890 <I2C_LCD_SetCursor>:
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_RETURNHOME);
    DELAY_MS(2);
}

void I2C_LCD_SetCursor(uint8_t I2C_LCD_InstanceIndex, uint8_t Col, uint8_t Row)
{
 8007890:	b590      	push	{r4, r7, lr}
 8007892:	b087      	sub	sp, #28
 8007894:	af00      	add	r7, sp, #0
 8007896:	0004      	movs	r4, r0
 8007898:	0008      	movs	r0, r1
 800789a:	0011      	movs	r1, r2
 800789c:	1dfb      	adds	r3, r7, #7
 800789e:	1c22      	adds	r2, r4, #0
 80078a0:	701a      	strb	r2, [r3, #0]
 80078a2:	1dbb      	adds	r3, r7, #6
 80078a4:	1c02      	adds	r2, r0, #0
 80078a6:	701a      	strb	r2, [r3, #0]
 80078a8:	1d7b      	adds	r3, r7, #5
 80078aa:	1c0a      	adds	r2, r1, #0
 80078ac:	701a      	strb	r2, [r3, #0]
    int Row_Offsets[] = {0x00, 0x40, 0x14, 0x54};
 80078ae:	2308      	movs	r3, #8
 80078b0:	18fb      	adds	r3, r7, r3
 80078b2:	4a1d      	ldr	r2, [pc, #116]	; (8007928 <I2C_LCD_SetCursor+0x98>)
 80078b4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80078b6:	c313      	stmia	r3!, {r0, r1, r4}
 80078b8:	6812      	ldr	r2, [r2, #0]
 80078ba:	601a      	str	r2, [r3, #0]
    if (Row > I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow)
 80078bc:	1dfb      	adds	r3, r7, #7
 80078be:	781a      	ldrb	r2, [r3, #0]
 80078c0:	491a      	ldr	r1, [pc, #104]	; (800792c <I2C_LCD_SetCursor+0x9c>)
 80078c2:	0013      	movs	r3, r2
 80078c4:	005b      	lsls	r3, r3, #1
 80078c6:	189b      	adds	r3, r3, r2
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	18cb      	adds	r3, r1, r3
 80078cc:	330a      	adds	r3, #10
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	1d7a      	adds	r2, r7, #5
 80078d2:	7812      	ldrb	r2, [r2, #0]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d90c      	bls.n	80078f2 <I2C_LCD_SetCursor+0x62>
    {
    	Row = I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow - 1;
 80078d8:	1dfb      	adds	r3, r7, #7
 80078da:	781a      	ldrb	r2, [r3, #0]
 80078dc:	4913      	ldr	r1, [pc, #76]	; (800792c <I2C_LCD_SetCursor+0x9c>)
 80078de:	0013      	movs	r3, r2
 80078e0:	005b      	lsls	r3, r3, #1
 80078e2:	189b      	adds	r3, r3, r2
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	18cb      	adds	r3, r1, r3
 80078e8:	330a      	adds	r3, #10
 80078ea:	781a      	ldrb	r2, [r3, #0]
 80078ec:	1d7b      	adds	r3, r7, #5
 80078ee:	3a01      	subs	r2, #1
 80078f0:	701a      	strb	r2, [r3, #0]
    }
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_SETDDRAMADDR | (Col + Row_Offsets[Row]));
 80078f2:	1d7b      	adds	r3, r7, #5
 80078f4:	781a      	ldrb	r2, [r3, #0]
 80078f6:	2308      	movs	r3, #8
 80078f8:	18fb      	adds	r3, r7, r3
 80078fa:	0092      	lsls	r2, r2, #2
 80078fc:	58d3      	ldr	r3, [r2, r3]
 80078fe:	b2da      	uxtb	r2, r3
 8007900:	1dbb      	adds	r3, r7, #6
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	18d3      	adds	r3, r2, r3
 8007906:	b2db      	uxtb	r3, r3
 8007908:	b25b      	sxtb	r3, r3
 800790a:	2280      	movs	r2, #128	; 0x80
 800790c:	4252      	negs	r2, r2
 800790e:	4313      	orrs	r3, r2
 8007910:	b25b      	sxtb	r3, r3
 8007912:	b2da      	uxtb	r2, r3
 8007914:	1dfb      	adds	r3, r7, #7
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	0011      	movs	r1, r2
 800791a:	0018      	movs	r0, r3
 800791c:	f7ff fe7d 	bl	800761a <I2C_LCD_Cmd>
}
 8007920:	46c0      	nop			; (mov r8, r8)
 8007922:	46bd      	mov	sp, r7
 8007924:	b007      	add	sp, #28
 8007926:	bd90      	pop	{r4, r7, pc}
 8007928:	08008368 	.word	0x08008368
 800792c:	08008454 	.word	0x08008454

08007930 <I2C_LCD_WriteString>:
{
    I2C_LCD_Data(I2C_LCD_InstanceIndex, Ch);
}

void I2C_LCD_WriteString(uint8_t I2C_LCD_InstanceIndex, char *Str)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	0002      	movs	r2, r0
 8007938:	6039      	str	r1, [r7, #0]
 800793a:	1dfb      	adds	r3, r7, #7
 800793c:	701a      	strb	r2, [r3, #0]
    while (*Str)
 800793e:	e009      	b.n	8007954 <I2C_LCD_WriteString+0x24>
    {
        I2C_LCD_Data(I2C_LCD_InstanceIndex, *Str++);
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	1c5a      	adds	r2, r3, #1
 8007944:	603a      	str	r2, [r7, #0]
 8007946:	781a      	ldrb	r2, [r3, #0]
 8007948:	1dfb      	adds	r3, r7, #7
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	0011      	movs	r1, r2
 800794e:	0018      	movs	r0, r3
 8007950:	f7ff fe78 	bl	8007644 <I2C_LCD_Data>
    while (*Str)
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d1f1      	bne.n	8007940 <I2C_LCD_WriteString+0x10>
    }
}
 800795c:	46c0      	nop			; (mov r8, r8)
 800795e:	46c0      	nop			; (mov r8, r8)
 8007960:	46bd      	mov	sp, r7
 8007962:	b002      	add	sp, #8
 8007964:	bd80      	pop	{r7, pc}
	...

08007968 <siprintf>:
 8007968:	b40e      	push	{r1, r2, r3}
 800796a:	b500      	push	{lr}
 800796c:	490b      	ldr	r1, [pc, #44]	; (800799c <siprintf+0x34>)
 800796e:	b09c      	sub	sp, #112	; 0x70
 8007970:	ab1d      	add	r3, sp, #116	; 0x74
 8007972:	9002      	str	r0, [sp, #8]
 8007974:	9006      	str	r0, [sp, #24]
 8007976:	9107      	str	r1, [sp, #28]
 8007978:	9104      	str	r1, [sp, #16]
 800797a:	4809      	ldr	r0, [pc, #36]	; (80079a0 <siprintf+0x38>)
 800797c:	4909      	ldr	r1, [pc, #36]	; (80079a4 <siprintf+0x3c>)
 800797e:	cb04      	ldmia	r3!, {r2}
 8007980:	9105      	str	r1, [sp, #20]
 8007982:	6800      	ldr	r0, [r0, #0]
 8007984:	a902      	add	r1, sp, #8
 8007986:	9301      	str	r3, [sp, #4]
 8007988:	f000 f9a2 	bl	8007cd0 <_svfiprintf_r>
 800798c:	2200      	movs	r2, #0
 800798e:	9b02      	ldr	r3, [sp, #8]
 8007990:	701a      	strb	r2, [r3, #0]
 8007992:	b01c      	add	sp, #112	; 0x70
 8007994:	bc08      	pop	{r3}
 8007996:	b003      	add	sp, #12
 8007998:	4718      	bx	r3
 800799a:	46c0      	nop			; (mov r8, r8)
 800799c:	7fffffff 	.word	0x7fffffff
 80079a0:	20000058 	.word	0x20000058
 80079a4:	ffff0208 	.word	0xffff0208

080079a8 <memset>:
 80079a8:	0003      	movs	r3, r0
 80079aa:	1882      	adds	r2, r0, r2
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d100      	bne.n	80079b2 <memset+0xa>
 80079b0:	4770      	bx	lr
 80079b2:	7019      	strb	r1, [r3, #0]
 80079b4:	3301      	adds	r3, #1
 80079b6:	e7f9      	b.n	80079ac <memset+0x4>

080079b8 <__errno>:
 80079b8:	4b01      	ldr	r3, [pc, #4]	; (80079c0 <__errno+0x8>)
 80079ba:	6818      	ldr	r0, [r3, #0]
 80079bc:	4770      	bx	lr
 80079be:	46c0      	nop			; (mov r8, r8)
 80079c0:	20000058 	.word	0x20000058

080079c4 <__libc_init_array>:
 80079c4:	b570      	push	{r4, r5, r6, lr}
 80079c6:	2600      	movs	r6, #0
 80079c8:	4c0c      	ldr	r4, [pc, #48]	; (80079fc <__libc_init_array+0x38>)
 80079ca:	4d0d      	ldr	r5, [pc, #52]	; (8007a00 <__libc_init_array+0x3c>)
 80079cc:	1b64      	subs	r4, r4, r5
 80079ce:	10a4      	asrs	r4, r4, #2
 80079d0:	42a6      	cmp	r6, r4
 80079d2:	d109      	bne.n	80079e8 <__libc_init_array+0x24>
 80079d4:	2600      	movs	r6, #0
 80079d6:	f000 fc6d 	bl	80082b4 <_init>
 80079da:	4c0a      	ldr	r4, [pc, #40]	; (8007a04 <__libc_init_array+0x40>)
 80079dc:	4d0a      	ldr	r5, [pc, #40]	; (8007a08 <__libc_init_array+0x44>)
 80079de:	1b64      	subs	r4, r4, r5
 80079e0:	10a4      	asrs	r4, r4, #2
 80079e2:	42a6      	cmp	r6, r4
 80079e4:	d105      	bne.n	80079f2 <__libc_init_array+0x2e>
 80079e6:	bd70      	pop	{r4, r5, r6, pc}
 80079e8:	00b3      	lsls	r3, r6, #2
 80079ea:	58eb      	ldr	r3, [r5, r3]
 80079ec:	4798      	blx	r3
 80079ee:	3601      	adds	r6, #1
 80079f0:	e7ee      	b.n	80079d0 <__libc_init_array+0xc>
 80079f2:	00b3      	lsls	r3, r6, #2
 80079f4:	58eb      	ldr	r3, [r5, r3]
 80079f6:	4798      	blx	r3
 80079f8:	3601      	adds	r6, #1
 80079fa:	e7f2      	b.n	80079e2 <__libc_init_array+0x1e>
 80079fc:	0800849c 	.word	0x0800849c
 8007a00:	0800849c 	.word	0x0800849c
 8007a04:	080084a0 	.word	0x080084a0
 8007a08:	0800849c 	.word	0x0800849c

08007a0c <__retarget_lock_acquire_recursive>:
 8007a0c:	4770      	bx	lr

08007a0e <__retarget_lock_release_recursive>:
 8007a0e:	4770      	bx	lr

08007a10 <_free_r>:
 8007a10:	b570      	push	{r4, r5, r6, lr}
 8007a12:	0005      	movs	r5, r0
 8007a14:	2900      	cmp	r1, #0
 8007a16:	d010      	beq.n	8007a3a <_free_r+0x2a>
 8007a18:	1f0c      	subs	r4, r1, #4
 8007a1a:	6823      	ldr	r3, [r4, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	da00      	bge.n	8007a22 <_free_r+0x12>
 8007a20:	18e4      	adds	r4, r4, r3
 8007a22:	0028      	movs	r0, r5
 8007a24:	f000 f8e2 	bl	8007bec <__malloc_lock>
 8007a28:	4a1d      	ldr	r2, [pc, #116]	; (8007aa0 <_free_r+0x90>)
 8007a2a:	6813      	ldr	r3, [r2, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d105      	bne.n	8007a3c <_free_r+0x2c>
 8007a30:	6063      	str	r3, [r4, #4]
 8007a32:	6014      	str	r4, [r2, #0]
 8007a34:	0028      	movs	r0, r5
 8007a36:	f000 f8e1 	bl	8007bfc <__malloc_unlock>
 8007a3a:	bd70      	pop	{r4, r5, r6, pc}
 8007a3c:	42a3      	cmp	r3, r4
 8007a3e:	d908      	bls.n	8007a52 <_free_r+0x42>
 8007a40:	6820      	ldr	r0, [r4, #0]
 8007a42:	1821      	adds	r1, r4, r0
 8007a44:	428b      	cmp	r3, r1
 8007a46:	d1f3      	bne.n	8007a30 <_free_r+0x20>
 8007a48:	6819      	ldr	r1, [r3, #0]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	1809      	adds	r1, r1, r0
 8007a4e:	6021      	str	r1, [r4, #0]
 8007a50:	e7ee      	b.n	8007a30 <_free_r+0x20>
 8007a52:	001a      	movs	r2, r3
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d001      	beq.n	8007a5e <_free_r+0x4e>
 8007a5a:	42a3      	cmp	r3, r4
 8007a5c:	d9f9      	bls.n	8007a52 <_free_r+0x42>
 8007a5e:	6811      	ldr	r1, [r2, #0]
 8007a60:	1850      	adds	r0, r2, r1
 8007a62:	42a0      	cmp	r0, r4
 8007a64:	d10b      	bne.n	8007a7e <_free_r+0x6e>
 8007a66:	6820      	ldr	r0, [r4, #0]
 8007a68:	1809      	adds	r1, r1, r0
 8007a6a:	1850      	adds	r0, r2, r1
 8007a6c:	6011      	str	r1, [r2, #0]
 8007a6e:	4283      	cmp	r3, r0
 8007a70:	d1e0      	bne.n	8007a34 <_free_r+0x24>
 8007a72:	6818      	ldr	r0, [r3, #0]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	1841      	adds	r1, r0, r1
 8007a78:	6011      	str	r1, [r2, #0]
 8007a7a:	6053      	str	r3, [r2, #4]
 8007a7c:	e7da      	b.n	8007a34 <_free_r+0x24>
 8007a7e:	42a0      	cmp	r0, r4
 8007a80:	d902      	bls.n	8007a88 <_free_r+0x78>
 8007a82:	230c      	movs	r3, #12
 8007a84:	602b      	str	r3, [r5, #0]
 8007a86:	e7d5      	b.n	8007a34 <_free_r+0x24>
 8007a88:	6820      	ldr	r0, [r4, #0]
 8007a8a:	1821      	adds	r1, r4, r0
 8007a8c:	428b      	cmp	r3, r1
 8007a8e:	d103      	bne.n	8007a98 <_free_r+0x88>
 8007a90:	6819      	ldr	r1, [r3, #0]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	1809      	adds	r1, r1, r0
 8007a96:	6021      	str	r1, [r4, #0]
 8007a98:	6063      	str	r3, [r4, #4]
 8007a9a:	6054      	str	r4, [r2, #4]
 8007a9c:	e7ca      	b.n	8007a34 <_free_r+0x24>
 8007a9e:	46c0      	nop			; (mov r8, r8)
 8007aa0:	20000440 	.word	0x20000440

08007aa4 <sbrk_aligned>:
 8007aa4:	b570      	push	{r4, r5, r6, lr}
 8007aa6:	4e0f      	ldr	r6, [pc, #60]	; (8007ae4 <sbrk_aligned+0x40>)
 8007aa8:	000d      	movs	r5, r1
 8007aaa:	6831      	ldr	r1, [r6, #0]
 8007aac:	0004      	movs	r4, r0
 8007aae:	2900      	cmp	r1, #0
 8007ab0:	d102      	bne.n	8007ab8 <sbrk_aligned+0x14>
 8007ab2:	f000 fba1 	bl	80081f8 <_sbrk_r>
 8007ab6:	6030      	str	r0, [r6, #0]
 8007ab8:	0029      	movs	r1, r5
 8007aba:	0020      	movs	r0, r4
 8007abc:	f000 fb9c 	bl	80081f8 <_sbrk_r>
 8007ac0:	1c43      	adds	r3, r0, #1
 8007ac2:	d00a      	beq.n	8007ada <sbrk_aligned+0x36>
 8007ac4:	2303      	movs	r3, #3
 8007ac6:	1cc5      	adds	r5, r0, #3
 8007ac8:	439d      	bics	r5, r3
 8007aca:	42a8      	cmp	r0, r5
 8007acc:	d007      	beq.n	8007ade <sbrk_aligned+0x3a>
 8007ace:	1a29      	subs	r1, r5, r0
 8007ad0:	0020      	movs	r0, r4
 8007ad2:	f000 fb91 	bl	80081f8 <_sbrk_r>
 8007ad6:	3001      	adds	r0, #1
 8007ad8:	d101      	bne.n	8007ade <sbrk_aligned+0x3a>
 8007ada:	2501      	movs	r5, #1
 8007adc:	426d      	negs	r5, r5
 8007ade:	0028      	movs	r0, r5
 8007ae0:	bd70      	pop	{r4, r5, r6, pc}
 8007ae2:	46c0      	nop			; (mov r8, r8)
 8007ae4:	20000444 	.word	0x20000444

08007ae8 <_malloc_r>:
 8007ae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007aea:	2203      	movs	r2, #3
 8007aec:	1ccb      	adds	r3, r1, #3
 8007aee:	4393      	bics	r3, r2
 8007af0:	3308      	adds	r3, #8
 8007af2:	0006      	movs	r6, r0
 8007af4:	001f      	movs	r7, r3
 8007af6:	2b0c      	cmp	r3, #12
 8007af8:	d238      	bcs.n	8007b6c <_malloc_r+0x84>
 8007afa:	270c      	movs	r7, #12
 8007afc:	42b9      	cmp	r1, r7
 8007afe:	d837      	bhi.n	8007b70 <_malloc_r+0x88>
 8007b00:	0030      	movs	r0, r6
 8007b02:	f000 f873 	bl	8007bec <__malloc_lock>
 8007b06:	4b38      	ldr	r3, [pc, #224]	; (8007be8 <_malloc_r+0x100>)
 8007b08:	9300      	str	r3, [sp, #0]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	001c      	movs	r4, r3
 8007b0e:	2c00      	cmp	r4, #0
 8007b10:	d133      	bne.n	8007b7a <_malloc_r+0x92>
 8007b12:	0039      	movs	r1, r7
 8007b14:	0030      	movs	r0, r6
 8007b16:	f7ff ffc5 	bl	8007aa4 <sbrk_aligned>
 8007b1a:	0004      	movs	r4, r0
 8007b1c:	1c43      	adds	r3, r0, #1
 8007b1e:	d15e      	bne.n	8007bde <_malloc_r+0xf6>
 8007b20:	9b00      	ldr	r3, [sp, #0]
 8007b22:	681c      	ldr	r4, [r3, #0]
 8007b24:	0025      	movs	r5, r4
 8007b26:	2d00      	cmp	r5, #0
 8007b28:	d14e      	bne.n	8007bc8 <_malloc_r+0xe0>
 8007b2a:	2c00      	cmp	r4, #0
 8007b2c:	d051      	beq.n	8007bd2 <_malloc_r+0xea>
 8007b2e:	6823      	ldr	r3, [r4, #0]
 8007b30:	0029      	movs	r1, r5
 8007b32:	18e3      	adds	r3, r4, r3
 8007b34:	0030      	movs	r0, r6
 8007b36:	9301      	str	r3, [sp, #4]
 8007b38:	f000 fb5e 	bl	80081f8 <_sbrk_r>
 8007b3c:	9b01      	ldr	r3, [sp, #4]
 8007b3e:	4283      	cmp	r3, r0
 8007b40:	d147      	bne.n	8007bd2 <_malloc_r+0xea>
 8007b42:	6823      	ldr	r3, [r4, #0]
 8007b44:	0030      	movs	r0, r6
 8007b46:	1aff      	subs	r7, r7, r3
 8007b48:	0039      	movs	r1, r7
 8007b4a:	f7ff ffab 	bl	8007aa4 <sbrk_aligned>
 8007b4e:	3001      	adds	r0, #1
 8007b50:	d03f      	beq.n	8007bd2 <_malloc_r+0xea>
 8007b52:	6823      	ldr	r3, [r4, #0]
 8007b54:	19db      	adds	r3, r3, r7
 8007b56:	6023      	str	r3, [r4, #0]
 8007b58:	9b00      	ldr	r3, [sp, #0]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d040      	beq.n	8007be2 <_malloc_r+0xfa>
 8007b60:	685a      	ldr	r2, [r3, #4]
 8007b62:	42a2      	cmp	r2, r4
 8007b64:	d133      	bne.n	8007bce <_malloc_r+0xe6>
 8007b66:	2200      	movs	r2, #0
 8007b68:	605a      	str	r2, [r3, #4]
 8007b6a:	e014      	b.n	8007b96 <_malloc_r+0xae>
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	dac5      	bge.n	8007afc <_malloc_r+0x14>
 8007b70:	230c      	movs	r3, #12
 8007b72:	2500      	movs	r5, #0
 8007b74:	6033      	str	r3, [r6, #0]
 8007b76:	0028      	movs	r0, r5
 8007b78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007b7a:	6821      	ldr	r1, [r4, #0]
 8007b7c:	1bc9      	subs	r1, r1, r7
 8007b7e:	d420      	bmi.n	8007bc2 <_malloc_r+0xda>
 8007b80:	290b      	cmp	r1, #11
 8007b82:	d918      	bls.n	8007bb6 <_malloc_r+0xce>
 8007b84:	19e2      	adds	r2, r4, r7
 8007b86:	6027      	str	r7, [r4, #0]
 8007b88:	42a3      	cmp	r3, r4
 8007b8a:	d112      	bne.n	8007bb2 <_malloc_r+0xca>
 8007b8c:	9b00      	ldr	r3, [sp, #0]
 8007b8e:	601a      	str	r2, [r3, #0]
 8007b90:	6863      	ldr	r3, [r4, #4]
 8007b92:	6011      	str	r1, [r2, #0]
 8007b94:	6053      	str	r3, [r2, #4]
 8007b96:	0030      	movs	r0, r6
 8007b98:	0025      	movs	r5, r4
 8007b9a:	f000 f82f 	bl	8007bfc <__malloc_unlock>
 8007b9e:	2207      	movs	r2, #7
 8007ba0:	350b      	adds	r5, #11
 8007ba2:	1d23      	adds	r3, r4, #4
 8007ba4:	4395      	bics	r5, r2
 8007ba6:	1aea      	subs	r2, r5, r3
 8007ba8:	429d      	cmp	r5, r3
 8007baa:	d0e4      	beq.n	8007b76 <_malloc_r+0x8e>
 8007bac:	1b5b      	subs	r3, r3, r5
 8007bae:	50a3      	str	r3, [r4, r2]
 8007bb0:	e7e1      	b.n	8007b76 <_malloc_r+0x8e>
 8007bb2:	605a      	str	r2, [r3, #4]
 8007bb4:	e7ec      	b.n	8007b90 <_malloc_r+0xa8>
 8007bb6:	6862      	ldr	r2, [r4, #4]
 8007bb8:	42a3      	cmp	r3, r4
 8007bba:	d1d5      	bne.n	8007b68 <_malloc_r+0x80>
 8007bbc:	9b00      	ldr	r3, [sp, #0]
 8007bbe:	601a      	str	r2, [r3, #0]
 8007bc0:	e7e9      	b.n	8007b96 <_malloc_r+0xae>
 8007bc2:	0023      	movs	r3, r4
 8007bc4:	6864      	ldr	r4, [r4, #4]
 8007bc6:	e7a2      	b.n	8007b0e <_malloc_r+0x26>
 8007bc8:	002c      	movs	r4, r5
 8007bca:	686d      	ldr	r5, [r5, #4]
 8007bcc:	e7ab      	b.n	8007b26 <_malloc_r+0x3e>
 8007bce:	0013      	movs	r3, r2
 8007bd0:	e7c4      	b.n	8007b5c <_malloc_r+0x74>
 8007bd2:	230c      	movs	r3, #12
 8007bd4:	0030      	movs	r0, r6
 8007bd6:	6033      	str	r3, [r6, #0]
 8007bd8:	f000 f810 	bl	8007bfc <__malloc_unlock>
 8007bdc:	e7cb      	b.n	8007b76 <_malloc_r+0x8e>
 8007bde:	6027      	str	r7, [r4, #0]
 8007be0:	e7d9      	b.n	8007b96 <_malloc_r+0xae>
 8007be2:	605b      	str	r3, [r3, #4]
 8007be4:	deff      	udf	#255	; 0xff
 8007be6:	46c0      	nop			; (mov r8, r8)
 8007be8:	20000440 	.word	0x20000440

08007bec <__malloc_lock>:
 8007bec:	b510      	push	{r4, lr}
 8007bee:	4802      	ldr	r0, [pc, #8]	; (8007bf8 <__malloc_lock+0xc>)
 8007bf0:	f7ff ff0c 	bl	8007a0c <__retarget_lock_acquire_recursive>
 8007bf4:	bd10      	pop	{r4, pc}
 8007bf6:	46c0      	nop			; (mov r8, r8)
 8007bf8:	2000043c 	.word	0x2000043c

08007bfc <__malloc_unlock>:
 8007bfc:	b510      	push	{r4, lr}
 8007bfe:	4802      	ldr	r0, [pc, #8]	; (8007c08 <__malloc_unlock+0xc>)
 8007c00:	f7ff ff05 	bl	8007a0e <__retarget_lock_release_recursive>
 8007c04:	bd10      	pop	{r4, pc}
 8007c06:	46c0      	nop			; (mov r8, r8)
 8007c08:	2000043c 	.word	0x2000043c

08007c0c <__ssputs_r>:
 8007c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c0e:	b085      	sub	sp, #20
 8007c10:	9301      	str	r3, [sp, #4]
 8007c12:	9203      	str	r2, [sp, #12]
 8007c14:	688e      	ldr	r6, [r1, #8]
 8007c16:	9a01      	ldr	r2, [sp, #4]
 8007c18:	0007      	movs	r7, r0
 8007c1a:	000c      	movs	r4, r1
 8007c1c:	680b      	ldr	r3, [r1, #0]
 8007c1e:	4296      	cmp	r6, r2
 8007c20:	d831      	bhi.n	8007c86 <__ssputs_r+0x7a>
 8007c22:	898a      	ldrh	r2, [r1, #12]
 8007c24:	2190      	movs	r1, #144	; 0x90
 8007c26:	00c9      	lsls	r1, r1, #3
 8007c28:	420a      	tst	r2, r1
 8007c2a:	d029      	beq.n	8007c80 <__ssputs_r+0x74>
 8007c2c:	2003      	movs	r0, #3
 8007c2e:	6921      	ldr	r1, [r4, #16]
 8007c30:	1a5b      	subs	r3, r3, r1
 8007c32:	9302      	str	r3, [sp, #8]
 8007c34:	6963      	ldr	r3, [r4, #20]
 8007c36:	4343      	muls	r3, r0
 8007c38:	0fdd      	lsrs	r5, r3, #31
 8007c3a:	18ed      	adds	r5, r5, r3
 8007c3c:	9b01      	ldr	r3, [sp, #4]
 8007c3e:	9802      	ldr	r0, [sp, #8]
 8007c40:	3301      	adds	r3, #1
 8007c42:	181b      	adds	r3, r3, r0
 8007c44:	106d      	asrs	r5, r5, #1
 8007c46:	42ab      	cmp	r3, r5
 8007c48:	d900      	bls.n	8007c4c <__ssputs_r+0x40>
 8007c4a:	001d      	movs	r5, r3
 8007c4c:	0552      	lsls	r2, r2, #21
 8007c4e:	d529      	bpl.n	8007ca4 <__ssputs_r+0x98>
 8007c50:	0029      	movs	r1, r5
 8007c52:	0038      	movs	r0, r7
 8007c54:	f7ff ff48 	bl	8007ae8 <_malloc_r>
 8007c58:	1e06      	subs	r6, r0, #0
 8007c5a:	d02d      	beq.n	8007cb8 <__ssputs_r+0xac>
 8007c5c:	9a02      	ldr	r2, [sp, #8]
 8007c5e:	6921      	ldr	r1, [r4, #16]
 8007c60:	f000 fae7 	bl	8008232 <memcpy>
 8007c64:	89a2      	ldrh	r2, [r4, #12]
 8007c66:	4b19      	ldr	r3, [pc, #100]	; (8007ccc <__ssputs_r+0xc0>)
 8007c68:	401a      	ands	r2, r3
 8007c6a:	2380      	movs	r3, #128	; 0x80
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	81a3      	strh	r3, [r4, #12]
 8007c70:	9b02      	ldr	r3, [sp, #8]
 8007c72:	6126      	str	r6, [r4, #16]
 8007c74:	18f6      	adds	r6, r6, r3
 8007c76:	6026      	str	r6, [r4, #0]
 8007c78:	6165      	str	r5, [r4, #20]
 8007c7a:	9e01      	ldr	r6, [sp, #4]
 8007c7c:	1aed      	subs	r5, r5, r3
 8007c7e:	60a5      	str	r5, [r4, #8]
 8007c80:	9b01      	ldr	r3, [sp, #4]
 8007c82:	429e      	cmp	r6, r3
 8007c84:	d900      	bls.n	8007c88 <__ssputs_r+0x7c>
 8007c86:	9e01      	ldr	r6, [sp, #4]
 8007c88:	0032      	movs	r2, r6
 8007c8a:	9903      	ldr	r1, [sp, #12]
 8007c8c:	6820      	ldr	r0, [r4, #0]
 8007c8e:	f000 fa9f 	bl	80081d0 <memmove>
 8007c92:	2000      	movs	r0, #0
 8007c94:	68a3      	ldr	r3, [r4, #8]
 8007c96:	1b9b      	subs	r3, r3, r6
 8007c98:	60a3      	str	r3, [r4, #8]
 8007c9a:	6823      	ldr	r3, [r4, #0]
 8007c9c:	199b      	adds	r3, r3, r6
 8007c9e:	6023      	str	r3, [r4, #0]
 8007ca0:	b005      	add	sp, #20
 8007ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ca4:	002a      	movs	r2, r5
 8007ca6:	0038      	movs	r0, r7
 8007ca8:	f000 facc 	bl	8008244 <_realloc_r>
 8007cac:	1e06      	subs	r6, r0, #0
 8007cae:	d1df      	bne.n	8007c70 <__ssputs_r+0x64>
 8007cb0:	0038      	movs	r0, r7
 8007cb2:	6921      	ldr	r1, [r4, #16]
 8007cb4:	f7ff feac 	bl	8007a10 <_free_r>
 8007cb8:	230c      	movs	r3, #12
 8007cba:	2001      	movs	r0, #1
 8007cbc:	603b      	str	r3, [r7, #0]
 8007cbe:	89a2      	ldrh	r2, [r4, #12]
 8007cc0:	3334      	adds	r3, #52	; 0x34
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	81a3      	strh	r3, [r4, #12]
 8007cc6:	4240      	negs	r0, r0
 8007cc8:	e7ea      	b.n	8007ca0 <__ssputs_r+0x94>
 8007cca:	46c0      	nop			; (mov r8, r8)
 8007ccc:	fffffb7f 	.word	0xfffffb7f

08007cd0 <_svfiprintf_r>:
 8007cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cd2:	b0a1      	sub	sp, #132	; 0x84
 8007cd4:	9003      	str	r0, [sp, #12]
 8007cd6:	001d      	movs	r5, r3
 8007cd8:	898b      	ldrh	r3, [r1, #12]
 8007cda:	000f      	movs	r7, r1
 8007cdc:	0016      	movs	r6, r2
 8007cde:	061b      	lsls	r3, r3, #24
 8007ce0:	d511      	bpl.n	8007d06 <_svfiprintf_r+0x36>
 8007ce2:	690b      	ldr	r3, [r1, #16]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d10e      	bne.n	8007d06 <_svfiprintf_r+0x36>
 8007ce8:	2140      	movs	r1, #64	; 0x40
 8007cea:	f7ff fefd 	bl	8007ae8 <_malloc_r>
 8007cee:	6038      	str	r0, [r7, #0]
 8007cf0:	6138      	str	r0, [r7, #16]
 8007cf2:	2800      	cmp	r0, #0
 8007cf4:	d105      	bne.n	8007d02 <_svfiprintf_r+0x32>
 8007cf6:	230c      	movs	r3, #12
 8007cf8:	9a03      	ldr	r2, [sp, #12]
 8007cfa:	3801      	subs	r0, #1
 8007cfc:	6013      	str	r3, [r2, #0]
 8007cfe:	b021      	add	sp, #132	; 0x84
 8007d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d02:	2340      	movs	r3, #64	; 0x40
 8007d04:	617b      	str	r3, [r7, #20]
 8007d06:	2300      	movs	r3, #0
 8007d08:	ac08      	add	r4, sp, #32
 8007d0a:	6163      	str	r3, [r4, #20]
 8007d0c:	3320      	adds	r3, #32
 8007d0e:	7663      	strb	r3, [r4, #25]
 8007d10:	3310      	adds	r3, #16
 8007d12:	76a3      	strb	r3, [r4, #26]
 8007d14:	9507      	str	r5, [sp, #28]
 8007d16:	0035      	movs	r5, r6
 8007d18:	782b      	ldrb	r3, [r5, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d001      	beq.n	8007d22 <_svfiprintf_r+0x52>
 8007d1e:	2b25      	cmp	r3, #37	; 0x25
 8007d20:	d148      	bne.n	8007db4 <_svfiprintf_r+0xe4>
 8007d22:	1bab      	subs	r3, r5, r6
 8007d24:	9305      	str	r3, [sp, #20]
 8007d26:	42b5      	cmp	r5, r6
 8007d28:	d00b      	beq.n	8007d42 <_svfiprintf_r+0x72>
 8007d2a:	0032      	movs	r2, r6
 8007d2c:	0039      	movs	r1, r7
 8007d2e:	9803      	ldr	r0, [sp, #12]
 8007d30:	f7ff ff6c 	bl	8007c0c <__ssputs_r>
 8007d34:	3001      	adds	r0, #1
 8007d36:	d100      	bne.n	8007d3a <_svfiprintf_r+0x6a>
 8007d38:	e0af      	b.n	8007e9a <_svfiprintf_r+0x1ca>
 8007d3a:	6963      	ldr	r3, [r4, #20]
 8007d3c:	9a05      	ldr	r2, [sp, #20]
 8007d3e:	189b      	adds	r3, r3, r2
 8007d40:	6163      	str	r3, [r4, #20]
 8007d42:	782b      	ldrb	r3, [r5, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d100      	bne.n	8007d4a <_svfiprintf_r+0x7a>
 8007d48:	e0a7      	b.n	8007e9a <_svfiprintf_r+0x1ca>
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	4252      	negs	r2, r2
 8007d50:	6062      	str	r2, [r4, #4]
 8007d52:	a904      	add	r1, sp, #16
 8007d54:	3254      	adds	r2, #84	; 0x54
 8007d56:	1852      	adds	r2, r2, r1
 8007d58:	1c6e      	adds	r6, r5, #1
 8007d5a:	6023      	str	r3, [r4, #0]
 8007d5c:	60e3      	str	r3, [r4, #12]
 8007d5e:	60a3      	str	r3, [r4, #8]
 8007d60:	7013      	strb	r3, [r2, #0]
 8007d62:	65a3      	str	r3, [r4, #88]	; 0x58
 8007d64:	4b55      	ldr	r3, [pc, #340]	; (8007ebc <_svfiprintf_r+0x1ec>)
 8007d66:	2205      	movs	r2, #5
 8007d68:	0018      	movs	r0, r3
 8007d6a:	7831      	ldrb	r1, [r6, #0]
 8007d6c:	9305      	str	r3, [sp, #20]
 8007d6e:	f000 fa55 	bl	800821c <memchr>
 8007d72:	1c75      	adds	r5, r6, #1
 8007d74:	2800      	cmp	r0, #0
 8007d76:	d11f      	bne.n	8007db8 <_svfiprintf_r+0xe8>
 8007d78:	6822      	ldr	r2, [r4, #0]
 8007d7a:	06d3      	lsls	r3, r2, #27
 8007d7c:	d504      	bpl.n	8007d88 <_svfiprintf_r+0xb8>
 8007d7e:	2353      	movs	r3, #83	; 0x53
 8007d80:	a904      	add	r1, sp, #16
 8007d82:	185b      	adds	r3, r3, r1
 8007d84:	2120      	movs	r1, #32
 8007d86:	7019      	strb	r1, [r3, #0]
 8007d88:	0713      	lsls	r3, r2, #28
 8007d8a:	d504      	bpl.n	8007d96 <_svfiprintf_r+0xc6>
 8007d8c:	2353      	movs	r3, #83	; 0x53
 8007d8e:	a904      	add	r1, sp, #16
 8007d90:	185b      	adds	r3, r3, r1
 8007d92:	212b      	movs	r1, #43	; 0x2b
 8007d94:	7019      	strb	r1, [r3, #0]
 8007d96:	7833      	ldrb	r3, [r6, #0]
 8007d98:	2b2a      	cmp	r3, #42	; 0x2a
 8007d9a:	d016      	beq.n	8007dca <_svfiprintf_r+0xfa>
 8007d9c:	0035      	movs	r5, r6
 8007d9e:	2100      	movs	r1, #0
 8007da0:	200a      	movs	r0, #10
 8007da2:	68e3      	ldr	r3, [r4, #12]
 8007da4:	782a      	ldrb	r2, [r5, #0]
 8007da6:	1c6e      	adds	r6, r5, #1
 8007da8:	3a30      	subs	r2, #48	; 0x30
 8007daa:	2a09      	cmp	r2, #9
 8007dac:	d94e      	bls.n	8007e4c <_svfiprintf_r+0x17c>
 8007dae:	2900      	cmp	r1, #0
 8007db0:	d111      	bne.n	8007dd6 <_svfiprintf_r+0x106>
 8007db2:	e017      	b.n	8007de4 <_svfiprintf_r+0x114>
 8007db4:	3501      	adds	r5, #1
 8007db6:	e7af      	b.n	8007d18 <_svfiprintf_r+0x48>
 8007db8:	9b05      	ldr	r3, [sp, #20]
 8007dba:	6822      	ldr	r2, [r4, #0]
 8007dbc:	1ac0      	subs	r0, r0, r3
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	4083      	lsls	r3, r0
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	002e      	movs	r6, r5
 8007dc6:	6023      	str	r3, [r4, #0]
 8007dc8:	e7cc      	b.n	8007d64 <_svfiprintf_r+0x94>
 8007dca:	9b07      	ldr	r3, [sp, #28]
 8007dcc:	1d19      	adds	r1, r3, #4
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	9107      	str	r1, [sp, #28]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	db01      	blt.n	8007dda <_svfiprintf_r+0x10a>
 8007dd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007dd8:	e004      	b.n	8007de4 <_svfiprintf_r+0x114>
 8007dda:	425b      	negs	r3, r3
 8007ddc:	60e3      	str	r3, [r4, #12]
 8007dde:	2302      	movs	r3, #2
 8007de0:	4313      	orrs	r3, r2
 8007de2:	6023      	str	r3, [r4, #0]
 8007de4:	782b      	ldrb	r3, [r5, #0]
 8007de6:	2b2e      	cmp	r3, #46	; 0x2e
 8007de8:	d10a      	bne.n	8007e00 <_svfiprintf_r+0x130>
 8007dea:	786b      	ldrb	r3, [r5, #1]
 8007dec:	2b2a      	cmp	r3, #42	; 0x2a
 8007dee:	d135      	bne.n	8007e5c <_svfiprintf_r+0x18c>
 8007df0:	9b07      	ldr	r3, [sp, #28]
 8007df2:	3502      	adds	r5, #2
 8007df4:	1d1a      	adds	r2, r3, #4
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	9207      	str	r2, [sp, #28]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	db2b      	blt.n	8007e56 <_svfiprintf_r+0x186>
 8007dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8007e00:	4e2f      	ldr	r6, [pc, #188]	; (8007ec0 <_svfiprintf_r+0x1f0>)
 8007e02:	2203      	movs	r2, #3
 8007e04:	0030      	movs	r0, r6
 8007e06:	7829      	ldrb	r1, [r5, #0]
 8007e08:	f000 fa08 	bl	800821c <memchr>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	d006      	beq.n	8007e1e <_svfiprintf_r+0x14e>
 8007e10:	2340      	movs	r3, #64	; 0x40
 8007e12:	1b80      	subs	r0, r0, r6
 8007e14:	4083      	lsls	r3, r0
 8007e16:	6822      	ldr	r2, [r4, #0]
 8007e18:	3501      	adds	r5, #1
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	6023      	str	r3, [r4, #0]
 8007e1e:	7829      	ldrb	r1, [r5, #0]
 8007e20:	2206      	movs	r2, #6
 8007e22:	4828      	ldr	r0, [pc, #160]	; (8007ec4 <_svfiprintf_r+0x1f4>)
 8007e24:	1c6e      	adds	r6, r5, #1
 8007e26:	7621      	strb	r1, [r4, #24]
 8007e28:	f000 f9f8 	bl	800821c <memchr>
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	d03c      	beq.n	8007eaa <_svfiprintf_r+0x1da>
 8007e30:	4b25      	ldr	r3, [pc, #148]	; (8007ec8 <_svfiprintf_r+0x1f8>)
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d125      	bne.n	8007e82 <_svfiprintf_r+0x1b2>
 8007e36:	2207      	movs	r2, #7
 8007e38:	9b07      	ldr	r3, [sp, #28]
 8007e3a:	3307      	adds	r3, #7
 8007e3c:	4393      	bics	r3, r2
 8007e3e:	3308      	adds	r3, #8
 8007e40:	9307      	str	r3, [sp, #28]
 8007e42:	6963      	ldr	r3, [r4, #20]
 8007e44:	9a04      	ldr	r2, [sp, #16]
 8007e46:	189b      	adds	r3, r3, r2
 8007e48:	6163      	str	r3, [r4, #20]
 8007e4a:	e764      	b.n	8007d16 <_svfiprintf_r+0x46>
 8007e4c:	4343      	muls	r3, r0
 8007e4e:	0035      	movs	r5, r6
 8007e50:	2101      	movs	r1, #1
 8007e52:	189b      	adds	r3, r3, r2
 8007e54:	e7a6      	b.n	8007da4 <_svfiprintf_r+0xd4>
 8007e56:	2301      	movs	r3, #1
 8007e58:	425b      	negs	r3, r3
 8007e5a:	e7d0      	b.n	8007dfe <_svfiprintf_r+0x12e>
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	200a      	movs	r0, #10
 8007e60:	001a      	movs	r2, r3
 8007e62:	3501      	adds	r5, #1
 8007e64:	6063      	str	r3, [r4, #4]
 8007e66:	7829      	ldrb	r1, [r5, #0]
 8007e68:	1c6e      	adds	r6, r5, #1
 8007e6a:	3930      	subs	r1, #48	; 0x30
 8007e6c:	2909      	cmp	r1, #9
 8007e6e:	d903      	bls.n	8007e78 <_svfiprintf_r+0x1a8>
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d0c5      	beq.n	8007e00 <_svfiprintf_r+0x130>
 8007e74:	9209      	str	r2, [sp, #36]	; 0x24
 8007e76:	e7c3      	b.n	8007e00 <_svfiprintf_r+0x130>
 8007e78:	4342      	muls	r2, r0
 8007e7a:	0035      	movs	r5, r6
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	1852      	adds	r2, r2, r1
 8007e80:	e7f1      	b.n	8007e66 <_svfiprintf_r+0x196>
 8007e82:	aa07      	add	r2, sp, #28
 8007e84:	9200      	str	r2, [sp, #0]
 8007e86:	0021      	movs	r1, r4
 8007e88:	003a      	movs	r2, r7
 8007e8a:	4b10      	ldr	r3, [pc, #64]	; (8007ecc <_svfiprintf_r+0x1fc>)
 8007e8c:	9803      	ldr	r0, [sp, #12]
 8007e8e:	e000      	b.n	8007e92 <_svfiprintf_r+0x1c2>
 8007e90:	bf00      	nop
 8007e92:	9004      	str	r0, [sp, #16]
 8007e94:	9b04      	ldr	r3, [sp, #16]
 8007e96:	3301      	adds	r3, #1
 8007e98:	d1d3      	bne.n	8007e42 <_svfiprintf_r+0x172>
 8007e9a:	89bb      	ldrh	r3, [r7, #12]
 8007e9c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007e9e:	065b      	lsls	r3, r3, #25
 8007ea0:	d400      	bmi.n	8007ea4 <_svfiprintf_r+0x1d4>
 8007ea2:	e72c      	b.n	8007cfe <_svfiprintf_r+0x2e>
 8007ea4:	2001      	movs	r0, #1
 8007ea6:	4240      	negs	r0, r0
 8007ea8:	e729      	b.n	8007cfe <_svfiprintf_r+0x2e>
 8007eaa:	aa07      	add	r2, sp, #28
 8007eac:	9200      	str	r2, [sp, #0]
 8007eae:	0021      	movs	r1, r4
 8007eb0:	003a      	movs	r2, r7
 8007eb2:	4b06      	ldr	r3, [pc, #24]	; (8007ecc <_svfiprintf_r+0x1fc>)
 8007eb4:	9803      	ldr	r0, [sp, #12]
 8007eb6:	f000 f87b 	bl	8007fb0 <_printf_i>
 8007eba:	e7ea      	b.n	8007e92 <_svfiprintf_r+0x1c2>
 8007ebc:	08008460 	.word	0x08008460
 8007ec0:	08008466 	.word	0x08008466
 8007ec4:	0800846a 	.word	0x0800846a
 8007ec8:	00000000 	.word	0x00000000
 8007ecc:	08007c0d 	.word	0x08007c0d

08007ed0 <_printf_common>:
 8007ed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ed2:	0016      	movs	r6, r2
 8007ed4:	9301      	str	r3, [sp, #4]
 8007ed6:	688a      	ldr	r2, [r1, #8]
 8007ed8:	690b      	ldr	r3, [r1, #16]
 8007eda:	000c      	movs	r4, r1
 8007edc:	9000      	str	r0, [sp, #0]
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	da00      	bge.n	8007ee4 <_printf_common+0x14>
 8007ee2:	0013      	movs	r3, r2
 8007ee4:	0022      	movs	r2, r4
 8007ee6:	6033      	str	r3, [r6, #0]
 8007ee8:	3243      	adds	r2, #67	; 0x43
 8007eea:	7812      	ldrb	r2, [r2, #0]
 8007eec:	2a00      	cmp	r2, #0
 8007eee:	d001      	beq.n	8007ef4 <_printf_common+0x24>
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	6033      	str	r3, [r6, #0]
 8007ef4:	6823      	ldr	r3, [r4, #0]
 8007ef6:	069b      	lsls	r3, r3, #26
 8007ef8:	d502      	bpl.n	8007f00 <_printf_common+0x30>
 8007efa:	6833      	ldr	r3, [r6, #0]
 8007efc:	3302      	adds	r3, #2
 8007efe:	6033      	str	r3, [r6, #0]
 8007f00:	6822      	ldr	r2, [r4, #0]
 8007f02:	2306      	movs	r3, #6
 8007f04:	0015      	movs	r5, r2
 8007f06:	401d      	ands	r5, r3
 8007f08:	421a      	tst	r2, r3
 8007f0a:	d027      	beq.n	8007f5c <_printf_common+0x8c>
 8007f0c:	0023      	movs	r3, r4
 8007f0e:	3343      	adds	r3, #67	; 0x43
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	1e5a      	subs	r2, r3, #1
 8007f14:	4193      	sbcs	r3, r2
 8007f16:	6822      	ldr	r2, [r4, #0]
 8007f18:	0692      	lsls	r2, r2, #26
 8007f1a:	d430      	bmi.n	8007f7e <_printf_common+0xae>
 8007f1c:	0022      	movs	r2, r4
 8007f1e:	9901      	ldr	r1, [sp, #4]
 8007f20:	9800      	ldr	r0, [sp, #0]
 8007f22:	9d08      	ldr	r5, [sp, #32]
 8007f24:	3243      	adds	r2, #67	; 0x43
 8007f26:	47a8      	blx	r5
 8007f28:	3001      	adds	r0, #1
 8007f2a:	d025      	beq.n	8007f78 <_printf_common+0xa8>
 8007f2c:	2206      	movs	r2, #6
 8007f2e:	6823      	ldr	r3, [r4, #0]
 8007f30:	2500      	movs	r5, #0
 8007f32:	4013      	ands	r3, r2
 8007f34:	2b04      	cmp	r3, #4
 8007f36:	d105      	bne.n	8007f44 <_printf_common+0x74>
 8007f38:	6833      	ldr	r3, [r6, #0]
 8007f3a:	68e5      	ldr	r5, [r4, #12]
 8007f3c:	1aed      	subs	r5, r5, r3
 8007f3e:	43eb      	mvns	r3, r5
 8007f40:	17db      	asrs	r3, r3, #31
 8007f42:	401d      	ands	r5, r3
 8007f44:	68a3      	ldr	r3, [r4, #8]
 8007f46:	6922      	ldr	r2, [r4, #16]
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	dd01      	ble.n	8007f50 <_printf_common+0x80>
 8007f4c:	1a9b      	subs	r3, r3, r2
 8007f4e:	18ed      	adds	r5, r5, r3
 8007f50:	2600      	movs	r6, #0
 8007f52:	42b5      	cmp	r5, r6
 8007f54:	d120      	bne.n	8007f98 <_printf_common+0xc8>
 8007f56:	2000      	movs	r0, #0
 8007f58:	e010      	b.n	8007f7c <_printf_common+0xac>
 8007f5a:	3501      	adds	r5, #1
 8007f5c:	68e3      	ldr	r3, [r4, #12]
 8007f5e:	6832      	ldr	r2, [r6, #0]
 8007f60:	1a9b      	subs	r3, r3, r2
 8007f62:	42ab      	cmp	r3, r5
 8007f64:	ddd2      	ble.n	8007f0c <_printf_common+0x3c>
 8007f66:	0022      	movs	r2, r4
 8007f68:	2301      	movs	r3, #1
 8007f6a:	9901      	ldr	r1, [sp, #4]
 8007f6c:	9800      	ldr	r0, [sp, #0]
 8007f6e:	9f08      	ldr	r7, [sp, #32]
 8007f70:	3219      	adds	r2, #25
 8007f72:	47b8      	blx	r7
 8007f74:	3001      	adds	r0, #1
 8007f76:	d1f0      	bne.n	8007f5a <_printf_common+0x8a>
 8007f78:	2001      	movs	r0, #1
 8007f7a:	4240      	negs	r0, r0
 8007f7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007f7e:	2030      	movs	r0, #48	; 0x30
 8007f80:	18e1      	adds	r1, r4, r3
 8007f82:	3143      	adds	r1, #67	; 0x43
 8007f84:	7008      	strb	r0, [r1, #0]
 8007f86:	0021      	movs	r1, r4
 8007f88:	1c5a      	adds	r2, r3, #1
 8007f8a:	3145      	adds	r1, #69	; 0x45
 8007f8c:	7809      	ldrb	r1, [r1, #0]
 8007f8e:	18a2      	adds	r2, r4, r2
 8007f90:	3243      	adds	r2, #67	; 0x43
 8007f92:	3302      	adds	r3, #2
 8007f94:	7011      	strb	r1, [r2, #0]
 8007f96:	e7c1      	b.n	8007f1c <_printf_common+0x4c>
 8007f98:	0022      	movs	r2, r4
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	9901      	ldr	r1, [sp, #4]
 8007f9e:	9800      	ldr	r0, [sp, #0]
 8007fa0:	9f08      	ldr	r7, [sp, #32]
 8007fa2:	321a      	adds	r2, #26
 8007fa4:	47b8      	blx	r7
 8007fa6:	3001      	adds	r0, #1
 8007fa8:	d0e6      	beq.n	8007f78 <_printf_common+0xa8>
 8007faa:	3601      	adds	r6, #1
 8007fac:	e7d1      	b.n	8007f52 <_printf_common+0x82>
	...

08007fb0 <_printf_i>:
 8007fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fb2:	b08b      	sub	sp, #44	; 0x2c
 8007fb4:	9206      	str	r2, [sp, #24]
 8007fb6:	000a      	movs	r2, r1
 8007fb8:	3243      	adds	r2, #67	; 0x43
 8007fba:	9307      	str	r3, [sp, #28]
 8007fbc:	9005      	str	r0, [sp, #20]
 8007fbe:	9204      	str	r2, [sp, #16]
 8007fc0:	7e0a      	ldrb	r2, [r1, #24]
 8007fc2:	000c      	movs	r4, r1
 8007fc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fc6:	2a78      	cmp	r2, #120	; 0x78
 8007fc8:	d809      	bhi.n	8007fde <_printf_i+0x2e>
 8007fca:	2a62      	cmp	r2, #98	; 0x62
 8007fcc:	d80b      	bhi.n	8007fe6 <_printf_i+0x36>
 8007fce:	2a00      	cmp	r2, #0
 8007fd0:	d100      	bne.n	8007fd4 <_printf_i+0x24>
 8007fd2:	e0be      	b.n	8008152 <_printf_i+0x1a2>
 8007fd4:	497c      	ldr	r1, [pc, #496]	; (80081c8 <_printf_i+0x218>)
 8007fd6:	9103      	str	r1, [sp, #12]
 8007fd8:	2a58      	cmp	r2, #88	; 0x58
 8007fda:	d100      	bne.n	8007fde <_printf_i+0x2e>
 8007fdc:	e093      	b.n	8008106 <_printf_i+0x156>
 8007fde:	0026      	movs	r6, r4
 8007fe0:	3642      	adds	r6, #66	; 0x42
 8007fe2:	7032      	strb	r2, [r6, #0]
 8007fe4:	e022      	b.n	800802c <_printf_i+0x7c>
 8007fe6:	0010      	movs	r0, r2
 8007fe8:	3863      	subs	r0, #99	; 0x63
 8007fea:	2815      	cmp	r0, #21
 8007fec:	d8f7      	bhi.n	8007fde <_printf_i+0x2e>
 8007fee:	f7f8 f891 	bl	8000114 <__gnu_thumb1_case_shi>
 8007ff2:	0016      	.short	0x0016
 8007ff4:	fff6001f 	.word	0xfff6001f
 8007ff8:	fff6fff6 	.word	0xfff6fff6
 8007ffc:	001ffff6 	.word	0x001ffff6
 8008000:	fff6fff6 	.word	0xfff6fff6
 8008004:	fff6fff6 	.word	0xfff6fff6
 8008008:	003600a3 	.word	0x003600a3
 800800c:	fff60083 	.word	0xfff60083
 8008010:	00b4fff6 	.word	0x00b4fff6
 8008014:	0036fff6 	.word	0x0036fff6
 8008018:	fff6fff6 	.word	0xfff6fff6
 800801c:	0087      	.short	0x0087
 800801e:	0026      	movs	r6, r4
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	3642      	adds	r6, #66	; 0x42
 8008024:	1d11      	adds	r1, r2, #4
 8008026:	6019      	str	r1, [r3, #0]
 8008028:	6813      	ldr	r3, [r2, #0]
 800802a:	7033      	strb	r3, [r6, #0]
 800802c:	2301      	movs	r3, #1
 800802e:	e0a2      	b.n	8008176 <_printf_i+0x1c6>
 8008030:	6818      	ldr	r0, [r3, #0]
 8008032:	6809      	ldr	r1, [r1, #0]
 8008034:	1d02      	adds	r2, r0, #4
 8008036:	060d      	lsls	r5, r1, #24
 8008038:	d50b      	bpl.n	8008052 <_printf_i+0xa2>
 800803a:	6805      	ldr	r5, [r0, #0]
 800803c:	601a      	str	r2, [r3, #0]
 800803e:	2d00      	cmp	r5, #0
 8008040:	da03      	bge.n	800804a <_printf_i+0x9a>
 8008042:	232d      	movs	r3, #45	; 0x2d
 8008044:	9a04      	ldr	r2, [sp, #16]
 8008046:	426d      	negs	r5, r5
 8008048:	7013      	strb	r3, [r2, #0]
 800804a:	4b5f      	ldr	r3, [pc, #380]	; (80081c8 <_printf_i+0x218>)
 800804c:	270a      	movs	r7, #10
 800804e:	9303      	str	r3, [sp, #12]
 8008050:	e01b      	b.n	800808a <_printf_i+0xda>
 8008052:	6805      	ldr	r5, [r0, #0]
 8008054:	601a      	str	r2, [r3, #0]
 8008056:	0649      	lsls	r1, r1, #25
 8008058:	d5f1      	bpl.n	800803e <_printf_i+0x8e>
 800805a:	b22d      	sxth	r5, r5
 800805c:	e7ef      	b.n	800803e <_printf_i+0x8e>
 800805e:	680d      	ldr	r5, [r1, #0]
 8008060:	6819      	ldr	r1, [r3, #0]
 8008062:	1d08      	adds	r0, r1, #4
 8008064:	6018      	str	r0, [r3, #0]
 8008066:	062e      	lsls	r6, r5, #24
 8008068:	d501      	bpl.n	800806e <_printf_i+0xbe>
 800806a:	680d      	ldr	r5, [r1, #0]
 800806c:	e003      	b.n	8008076 <_printf_i+0xc6>
 800806e:	066d      	lsls	r5, r5, #25
 8008070:	d5fb      	bpl.n	800806a <_printf_i+0xba>
 8008072:	680d      	ldr	r5, [r1, #0]
 8008074:	b2ad      	uxth	r5, r5
 8008076:	4b54      	ldr	r3, [pc, #336]	; (80081c8 <_printf_i+0x218>)
 8008078:	2708      	movs	r7, #8
 800807a:	9303      	str	r3, [sp, #12]
 800807c:	2a6f      	cmp	r2, #111	; 0x6f
 800807e:	d000      	beq.n	8008082 <_printf_i+0xd2>
 8008080:	3702      	adds	r7, #2
 8008082:	0023      	movs	r3, r4
 8008084:	2200      	movs	r2, #0
 8008086:	3343      	adds	r3, #67	; 0x43
 8008088:	701a      	strb	r2, [r3, #0]
 800808a:	6863      	ldr	r3, [r4, #4]
 800808c:	60a3      	str	r3, [r4, #8]
 800808e:	2b00      	cmp	r3, #0
 8008090:	db03      	blt.n	800809a <_printf_i+0xea>
 8008092:	2104      	movs	r1, #4
 8008094:	6822      	ldr	r2, [r4, #0]
 8008096:	438a      	bics	r2, r1
 8008098:	6022      	str	r2, [r4, #0]
 800809a:	2d00      	cmp	r5, #0
 800809c:	d102      	bne.n	80080a4 <_printf_i+0xf4>
 800809e:	9e04      	ldr	r6, [sp, #16]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00c      	beq.n	80080be <_printf_i+0x10e>
 80080a4:	9e04      	ldr	r6, [sp, #16]
 80080a6:	0028      	movs	r0, r5
 80080a8:	0039      	movs	r1, r7
 80080aa:	f7f8 f8c3 	bl	8000234 <__aeabi_uidivmod>
 80080ae:	9b03      	ldr	r3, [sp, #12]
 80080b0:	3e01      	subs	r6, #1
 80080b2:	5c5b      	ldrb	r3, [r3, r1]
 80080b4:	7033      	strb	r3, [r6, #0]
 80080b6:	002b      	movs	r3, r5
 80080b8:	0005      	movs	r5, r0
 80080ba:	429f      	cmp	r7, r3
 80080bc:	d9f3      	bls.n	80080a6 <_printf_i+0xf6>
 80080be:	2f08      	cmp	r7, #8
 80080c0:	d109      	bne.n	80080d6 <_printf_i+0x126>
 80080c2:	6823      	ldr	r3, [r4, #0]
 80080c4:	07db      	lsls	r3, r3, #31
 80080c6:	d506      	bpl.n	80080d6 <_printf_i+0x126>
 80080c8:	6862      	ldr	r2, [r4, #4]
 80080ca:	6923      	ldr	r3, [r4, #16]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	dc02      	bgt.n	80080d6 <_printf_i+0x126>
 80080d0:	2330      	movs	r3, #48	; 0x30
 80080d2:	3e01      	subs	r6, #1
 80080d4:	7033      	strb	r3, [r6, #0]
 80080d6:	9b04      	ldr	r3, [sp, #16]
 80080d8:	1b9b      	subs	r3, r3, r6
 80080da:	6123      	str	r3, [r4, #16]
 80080dc:	9b07      	ldr	r3, [sp, #28]
 80080de:	0021      	movs	r1, r4
 80080e0:	9300      	str	r3, [sp, #0]
 80080e2:	9805      	ldr	r0, [sp, #20]
 80080e4:	9b06      	ldr	r3, [sp, #24]
 80080e6:	aa09      	add	r2, sp, #36	; 0x24
 80080e8:	f7ff fef2 	bl	8007ed0 <_printf_common>
 80080ec:	3001      	adds	r0, #1
 80080ee:	d147      	bne.n	8008180 <_printf_i+0x1d0>
 80080f0:	2001      	movs	r0, #1
 80080f2:	4240      	negs	r0, r0
 80080f4:	b00b      	add	sp, #44	; 0x2c
 80080f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080f8:	2220      	movs	r2, #32
 80080fa:	6809      	ldr	r1, [r1, #0]
 80080fc:	430a      	orrs	r2, r1
 80080fe:	6022      	str	r2, [r4, #0]
 8008100:	2278      	movs	r2, #120	; 0x78
 8008102:	4932      	ldr	r1, [pc, #200]	; (80081cc <_printf_i+0x21c>)
 8008104:	9103      	str	r1, [sp, #12]
 8008106:	0021      	movs	r1, r4
 8008108:	3145      	adds	r1, #69	; 0x45
 800810a:	700a      	strb	r2, [r1, #0]
 800810c:	6819      	ldr	r1, [r3, #0]
 800810e:	6822      	ldr	r2, [r4, #0]
 8008110:	c920      	ldmia	r1!, {r5}
 8008112:	0610      	lsls	r0, r2, #24
 8008114:	d402      	bmi.n	800811c <_printf_i+0x16c>
 8008116:	0650      	lsls	r0, r2, #25
 8008118:	d500      	bpl.n	800811c <_printf_i+0x16c>
 800811a:	b2ad      	uxth	r5, r5
 800811c:	6019      	str	r1, [r3, #0]
 800811e:	07d3      	lsls	r3, r2, #31
 8008120:	d502      	bpl.n	8008128 <_printf_i+0x178>
 8008122:	2320      	movs	r3, #32
 8008124:	4313      	orrs	r3, r2
 8008126:	6023      	str	r3, [r4, #0]
 8008128:	2710      	movs	r7, #16
 800812a:	2d00      	cmp	r5, #0
 800812c:	d1a9      	bne.n	8008082 <_printf_i+0xd2>
 800812e:	2220      	movs	r2, #32
 8008130:	6823      	ldr	r3, [r4, #0]
 8008132:	4393      	bics	r3, r2
 8008134:	6023      	str	r3, [r4, #0]
 8008136:	e7a4      	b.n	8008082 <_printf_i+0xd2>
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	680d      	ldr	r5, [r1, #0]
 800813c:	1d10      	adds	r0, r2, #4
 800813e:	6949      	ldr	r1, [r1, #20]
 8008140:	6018      	str	r0, [r3, #0]
 8008142:	6813      	ldr	r3, [r2, #0]
 8008144:	062e      	lsls	r6, r5, #24
 8008146:	d501      	bpl.n	800814c <_printf_i+0x19c>
 8008148:	6019      	str	r1, [r3, #0]
 800814a:	e002      	b.n	8008152 <_printf_i+0x1a2>
 800814c:	066d      	lsls	r5, r5, #25
 800814e:	d5fb      	bpl.n	8008148 <_printf_i+0x198>
 8008150:	8019      	strh	r1, [r3, #0]
 8008152:	2300      	movs	r3, #0
 8008154:	9e04      	ldr	r6, [sp, #16]
 8008156:	6123      	str	r3, [r4, #16]
 8008158:	e7c0      	b.n	80080dc <_printf_i+0x12c>
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	1d11      	adds	r1, r2, #4
 800815e:	6019      	str	r1, [r3, #0]
 8008160:	6816      	ldr	r6, [r2, #0]
 8008162:	2100      	movs	r1, #0
 8008164:	0030      	movs	r0, r6
 8008166:	6862      	ldr	r2, [r4, #4]
 8008168:	f000 f858 	bl	800821c <memchr>
 800816c:	2800      	cmp	r0, #0
 800816e:	d001      	beq.n	8008174 <_printf_i+0x1c4>
 8008170:	1b80      	subs	r0, r0, r6
 8008172:	6060      	str	r0, [r4, #4]
 8008174:	6863      	ldr	r3, [r4, #4]
 8008176:	6123      	str	r3, [r4, #16]
 8008178:	2300      	movs	r3, #0
 800817a:	9a04      	ldr	r2, [sp, #16]
 800817c:	7013      	strb	r3, [r2, #0]
 800817e:	e7ad      	b.n	80080dc <_printf_i+0x12c>
 8008180:	0032      	movs	r2, r6
 8008182:	6923      	ldr	r3, [r4, #16]
 8008184:	9906      	ldr	r1, [sp, #24]
 8008186:	9805      	ldr	r0, [sp, #20]
 8008188:	9d07      	ldr	r5, [sp, #28]
 800818a:	47a8      	blx	r5
 800818c:	3001      	adds	r0, #1
 800818e:	d0af      	beq.n	80080f0 <_printf_i+0x140>
 8008190:	6823      	ldr	r3, [r4, #0]
 8008192:	079b      	lsls	r3, r3, #30
 8008194:	d415      	bmi.n	80081c2 <_printf_i+0x212>
 8008196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008198:	68e0      	ldr	r0, [r4, #12]
 800819a:	4298      	cmp	r0, r3
 800819c:	daaa      	bge.n	80080f4 <_printf_i+0x144>
 800819e:	0018      	movs	r0, r3
 80081a0:	e7a8      	b.n	80080f4 <_printf_i+0x144>
 80081a2:	0022      	movs	r2, r4
 80081a4:	2301      	movs	r3, #1
 80081a6:	9906      	ldr	r1, [sp, #24]
 80081a8:	9805      	ldr	r0, [sp, #20]
 80081aa:	9e07      	ldr	r6, [sp, #28]
 80081ac:	3219      	adds	r2, #25
 80081ae:	47b0      	blx	r6
 80081b0:	3001      	adds	r0, #1
 80081b2:	d09d      	beq.n	80080f0 <_printf_i+0x140>
 80081b4:	3501      	adds	r5, #1
 80081b6:	68e3      	ldr	r3, [r4, #12]
 80081b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081ba:	1a9b      	subs	r3, r3, r2
 80081bc:	42ab      	cmp	r3, r5
 80081be:	dcf0      	bgt.n	80081a2 <_printf_i+0x1f2>
 80081c0:	e7e9      	b.n	8008196 <_printf_i+0x1e6>
 80081c2:	2500      	movs	r5, #0
 80081c4:	e7f7      	b.n	80081b6 <_printf_i+0x206>
 80081c6:	46c0      	nop			; (mov r8, r8)
 80081c8:	08008471 	.word	0x08008471
 80081cc:	08008482 	.word	0x08008482

080081d0 <memmove>:
 80081d0:	b510      	push	{r4, lr}
 80081d2:	4288      	cmp	r0, r1
 80081d4:	d902      	bls.n	80081dc <memmove+0xc>
 80081d6:	188b      	adds	r3, r1, r2
 80081d8:	4298      	cmp	r0, r3
 80081da:	d303      	bcc.n	80081e4 <memmove+0x14>
 80081dc:	2300      	movs	r3, #0
 80081de:	e007      	b.n	80081f0 <memmove+0x20>
 80081e0:	5c8b      	ldrb	r3, [r1, r2]
 80081e2:	5483      	strb	r3, [r0, r2]
 80081e4:	3a01      	subs	r2, #1
 80081e6:	d2fb      	bcs.n	80081e0 <memmove+0x10>
 80081e8:	bd10      	pop	{r4, pc}
 80081ea:	5ccc      	ldrb	r4, [r1, r3]
 80081ec:	54c4      	strb	r4, [r0, r3]
 80081ee:	3301      	adds	r3, #1
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d1fa      	bne.n	80081ea <memmove+0x1a>
 80081f4:	e7f8      	b.n	80081e8 <memmove+0x18>
	...

080081f8 <_sbrk_r>:
 80081f8:	2300      	movs	r3, #0
 80081fa:	b570      	push	{r4, r5, r6, lr}
 80081fc:	4d06      	ldr	r5, [pc, #24]	; (8008218 <_sbrk_r+0x20>)
 80081fe:	0004      	movs	r4, r0
 8008200:	0008      	movs	r0, r1
 8008202:	602b      	str	r3, [r5, #0]
 8008204:	f7f9 f8f4 	bl	80013f0 <_sbrk>
 8008208:	1c43      	adds	r3, r0, #1
 800820a:	d103      	bne.n	8008214 <_sbrk_r+0x1c>
 800820c:	682b      	ldr	r3, [r5, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d000      	beq.n	8008214 <_sbrk_r+0x1c>
 8008212:	6023      	str	r3, [r4, #0]
 8008214:	bd70      	pop	{r4, r5, r6, pc}
 8008216:	46c0      	nop			; (mov r8, r8)
 8008218:	20000438 	.word	0x20000438

0800821c <memchr>:
 800821c:	b2c9      	uxtb	r1, r1
 800821e:	1882      	adds	r2, r0, r2
 8008220:	4290      	cmp	r0, r2
 8008222:	d101      	bne.n	8008228 <memchr+0xc>
 8008224:	2000      	movs	r0, #0
 8008226:	4770      	bx	lr
 8008228:	7803      	ldrb	r3, [r0, #0]
 800822a:	428b      	cmp	r3, r1
 800822c:	d0fb      	beq.n	8008226 <memchr+0xa>
 800822e:	3001      	adds	r0, #1
 8008230:	e7f6      	b.n	8008220 <memchr+0x4>

08008232 <memcpy>:
 8008232:	2300      	movs	r3, #0
 8008234:	b510      	push	{r4, lr}
 8008236:	429a      	cmp	r2, r3
 8008238:	d100      	bne.n	800823c <memcpy+0xa>
 800823a:	bd10      	pop	{r4, pc}
 800823c:	5ccc      	ldrb	r4, [r1, r3]
 800823e:	54c4      	strb	r4, [r0, r3]
 8008240:	3301      	adds	r3, #1
 8008242:	e7f8      	b.n	8008236 <memcpy+0x4>

08008244 <_realloc_r>:
 8008244:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008246:	0007      	movs	r7, r0
 8008248:	000e      	movs	r6, r1
 800824a:	0014      	movs	r4, r2
 800824c:	2900      	cmp	r1, #0
 800824e:	d105      	bne.n	800825c <_realloc_r+0x18>
 8008250:	0011      	movs	r1, r2
 8008252:	f7ff fc49 	bl	8007ae8 <_malloc_r>
 8008256:	0005      	movs	r5, r0
 8008258:	0028      	movs	r0, r5
 800825a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800825c:	2a00      	cmp	r2, #0
 800825e:	d103      	bne.n	8008268 <_realloc_r+0x24>
 8008260:	f7ff fbd6 	bl	8007a10 <_free_r>
 8008264:	0025      	movs	r5, r4
 8008266:	e7f7      	b.n	8008258 <_realloc_r+0x14>
 8008268:	f000 f81b 	bl	80082a2 <_malloc_usable_size_r>
 800826c:	9001      	str	r0, [sp, #4]
 800826e:	4284      	cmp	r4, r0
 8008270:	d803      	bhi.n	800827a <_realloc_r+0x36>
 8008272:	0035      	movs	r5, r6
 8008274:	0843      	lsrs	r3, r0, #1
 8008276:	42a3      	cmp	r3, r4
 8008278:	d3ee      	bcc.n	8008258 <_realloc_r+0x14>
 800827a:	0021      	movs	r1, r4
 800827c:	0038      	movs	r0, r7
 800827e:	f7ff fc33 	bl	8007ae8 <_malloc_r>
 8008282:	1e05      	subs	r5, r0, #0
 8008284:	d0e8      	beq.n	8008258 <_realloc_r+0x14>
 8008286:	9b01      	ldr	r3, [sp, #4]
 8008288:	0022      	movs	r2, r4
 800828a:	429c      	cmp	r4, r3
 800828c:	d900      	bls.n	8008290 <_realloc_r+0x4c>
 800828e:	001a      	movs	r2, r3
 8008290:	0031      	movs	r1, r6
 8008292:	0028      	movs	r0, r5
 8008294:	f7ff ffcd 	bl	8008232 <memcpy>
 8008298:	0031      	movs	r1, r6
 800829a:	0038      	movs	r0, r7
 800829c:	f7ff fbb8 	bl	8007a10 <_free_r>
 80082a0:	e7da      	b.n	8008258 <_realloc_r+0x14>

080082a2 <_malloc_usable_size_r>:
 80082a2:	1f0b      	subs	r3, r1, #4
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	1f18      	subs	r0, r3, #4
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	da01      	bge.n	80082b0 <_malloc_usable_size_r+0xe>
 80082ac:	580b      	ldr	r3, [r1, r0]
 80082ae:	18c0      	adds	r0, r0, r3
 80082b0:	4770      	bx	lr
	...

080082b4 <_init>:
 80082b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082b6:	46c0      	nop			; (mov r8, r8)
 80082b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ba:	bc08      	pop	{r3}
 80082bc:	469e      	mov	lr, r3
 80082be:	4770      	bx	lr

080082c0 <_fini>:
 80082c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082c2:	46c0      	nop			; (mov r8, r8)
 80082c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082c6:	bc08      	pop	{r3}
 80082c8:	469e      	mov	lr, r3
 80082ca:	4770      	bx	lr
