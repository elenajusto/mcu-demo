
mcu-demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089bc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08008a78  08008a78  00018a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d18  08008d18  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08008d18  08008d18  00018d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d20  08008d20  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d20  08008d20  00018d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d24  08008d24  00018d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08008d28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000498  20000068  08008d90  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  08008d90  00020500  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017b18  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f82  00000000  00000000  00037beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001520  00000000  00000000  0003ab70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001099  00000000  00000000  0003c090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b179  00000000  00000000  0003d129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019f9d  00000000  00000000  000582a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aeec8  00000000  00000000  0007223f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005284  00000000  00000000  00121108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0012638c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000068 	.word	0x20000068
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08008a60 	.word	0x08008a60

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000006c 	.word	0x2000006c
 8000100:	08008a60 	.word	0x08008a60

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_uldivmod>:
 8000428:	2b00      	cmp	r3, #0
 800042a:	d111      	bne.n	8000450 <__aeabi_uldivmod+0x28>
 800042c:	2a00      	cmp	r2, #0
 800042e:	d10f      	bne.n	8000450 <__aeabi_uldivmod+0x28>
 8000430:	2900      	cmp	r1, #0
 8000432:	d100      	bne.n	8000436 <__aeabi_uldivmod+0xe>
 8000434:	2800      	cmp	r0, #0
 8000436:	d002      	beq.n	800043e <__aeabi_uldivmod+0x16>
 8000438:	2100      	movs	r1, #0
 800043a:	43c9      	mvns	r1, r1
 800043c:	0008      	movs	r0, r1
 800043e:	b407      	push	{r0, r1, r2}
 8000440:	4802      	ldr	r0, [pc, #8]	; (800044c <__aeabi_uldivmod+0x24>)
 8000442:	a102      	add	r1, pc, #8	; (adr r1, 800044c <__aeabi_uldivmod+0x24>)
 8000444:	1840      	adds	r0, r0, r1
 8000446:	9002      	str	r0, [sp, #8]
 8000448:	bd03      	pop	{r0, r1, pc}
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	ffffffd9 	.word	0xffffffd9
 8000450:	b403      	push	{r0, r1}
 8000452:	4668      	mov	r0, sp
 8000454:	b501      	push	{r0, lr}
 8000456:	9802      	ldr	r0, [sp, #8]
 8000458:	f000 f806 	bl	8000468 <__udivmoddi4>
 800045c:	9b01      	ldr	r3, [sp, #4]
 800045e:	469e      	mov	lr, r3
 8000460:	b002      	add	sp, #8
 8000462:	bc0c      	pop	{r2, r3}
 8000464:	4770      	bx	lr
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__udivmoddi4>:
 8000468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800046a:	4657      	mov	r7, sl
 800046c:	464e      	mov	r6, r9
 800046e:	4645      	mov	r5, r8
 8000470:	46de      	mov	lr, fp
 8000472:	b5e0      	push	{r5, r6, r7, lr}
 8000474:	0004      	movs	r4, r0
 8000476:	000d      	movs	r5, r1
 8000478:	4692      	mov	sl, r2
 800047a:	4699      	mov	r9, r3
 800047c:	b083      	sub	sp, #12
 800047e:	428b      	cmp	r3, r1
 8000480:	d830      	bhi.n	80004e4 <__udivmoddi4+0x7c>
 8000482:	d02d      	beq.n	80004e0 <__udivmoddi4+0x78>
 8000484:	4649      	mov	r1, r9
 8000486:	4650      	mov	r0, sl
 8000488:	f000 f8ba 	bl	8000600 <__clzdi2>
 800048c:	0029      	movs	r1, r5
 800048e:	0006      	movs	r6, r0
 8000490:	0020      	movs	r0, r4
 8000492:	f000 f8b5 	bl	8000600 <__clzdi2>
 8000496:	1a33      	subs	r3, r6, r0
 8000498:	4698      	mov	r8, r3
 800049a:	3b20      	subs	r3, #32
 800049c:	d434      	bmi.n	8000508 <__udivmoddi4+0xa0>
 800049e:	469b      	mov	fp, r3
 80004a0:	4653      	mov	r3, sl
 80004a2:	465a      	mov	r2, fp
 80004a4:	4093      	lsls	r3, r2
 80004a6:	4642      	mov	r2, r8
 80004a8:	001f      	movs	r7, r3
 80004aa:	4653      	mov	r3, sl
 80004ac:	4093      	lsls	r3, r2
 80004ae:	001e      	movs	r6, r3
 80004b0:	42af      	cmp	r7, r5
 80004b2:	d83b      	bhi.n	800052c <__udivmoddi4+0xc4>
 80004b4:	42af      	cmp	r7, r5
 80004b6:	d100      	bne.n	80004ba <__udivmoddi4+0x52>
 80004b8:	e079      	b.n	80005ae <__udivmoddi4+0x146>
 80004ba:	465b      	mov	r3, fp
 80004bc:	1ba4      	subs	r4, r4, r6
 80004be:	41bd      	sbcs	r5, r7
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	da00      	bge.n	80004c6 <__udivmoddi4+0x5e>
 80004c4:	e076      	b.n	80005b4 <__udivmoddi4+0x14c>
 80004c6:	2200      	movs	r2, #0
 80004c8:	2300      	movs	r3, #0
 80004ca:	9200      	str	r2, [sp, #0]
 80004cc:	9301      	str	r3, [sp, #4]
 80004ce:	2301      	movs	r3, #1
 80004d0:	465a      	mov	r2, fp
 80004d2:	4093      	lsls	r3, r2
 80004d4:	9301      	str	r3, [sp, #4]
 80004d6:	2301      	movs	r3, #1
 80004d8:	4642      	mov	r2, r8
 80004da:	4093      	lsls	r3, r2
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	e029      	b.n	8000534 <__udivmoddi4+0xcc>
 80004e0:	4282      	cmp	r2, r0
 80004e2:	d9cf      	bls.n	8000484 <__udivmoddi4+0x1c>
 80004e4:	2200      	movs	r2, #0
 80004e6:	2300      	movs	r3, #0
 80004e8:	9200      	str	r2, [sp, #0]
 80004ea:	9301      	str	r3, [sp, #4]
 80004ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <__udivmoddi4+0x8e>
 80004f2:	601c      	str	r4, [r3, #0]
 80004f4:	605d      	str	r5, [r3, #4]
 80004f6:	9800      	ldr	r0, [sp, #0]
 80004f8:	9901      	ldr	r1, [sp, #4]
 80004fa:	b003      	add	sp, #12
 80004fc:	bcf0      	pop	{r4, r5, r6, r7}
 80004fe:	46bb      	mov	fp, r7
 8000500:	46b2      	mov	sl, r6
 8000502:	46a9      	mov	r9, r5
 8000504:	46a0      	mov	r8, r4
 8000506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000508:	4642      	mov	r2, r8
 800050a:	469b      	mov	fp, r3
 800050c:	2320      	movs	r3, #32
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	4652      	mov	r2, sl
 8000512:	40da      	lsrs	r2, r3
 8000514:	4641      	mov	r1, r8
 8000516:	0013      	movs	r3, r2
 8000518:	464a      	mov	r2, r9
 800051a:	408a      	lsls	r2, r1
 800051c:	0017      	movs	r7, r2
 800051e:	4642      	mov	r2, r8
 8000520:	431f      	orrs	r7, r3
 8000522:	4653      	mov	r3, sl
 8000524:	4093      	lsls	r3, r2
 8000526:	001e      	movs	r6, r3
 8000528:	42af      	cmp	r7, r5
 800052a:	d9c3      	bls.n	80004b4 <__udivmoddi4+0x4c>
 800052c:	2200      	movs	r2, #0
 800052e:	2300      	movs	r3, #0
 8000530:	9200      	str	r2, [sp, #0]
 8000532:	9301      	str	r3, [sp, #4]
 8000534:	4643      	mov	r3, r8
 8000536:	2b00      	cmp	r3, #0
 8000538:	d0d8      	beq.n	80004ec <__udivmoddi4+0x84>
 800053a:	07fb      	lsls	r3, r7, #31
 800053c:	0872      	lsrs	r2, r6, #1
 800053e:	431a      	orrs	r2, r3
 8000540:	4646      	mov	r6, r8
 8000542:	087b      	lsrs	r3, r7, #1
 8000544:	e00e      	b.n	8000564 <__udivmoddi4+0xfc>
 8000546:	42ab      	cmp	r3, r5
 8000548:	d101      	bne.n	800054e <__udivmoddi4+0xe6>
 800054a:	42a2      	cmp	r2, r4
 800054c:	d80c      	bhi.n	8000568 <__udivmoddi4+0x100>
 800054e:	1aa4      	subs	r4, r4, r2
 8000550:	419d      	sbcs	r5, r3
 8000552:	2001      	movs	r0, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2100      	movs	r1, #0
 800055a:	3e01      	subs	r6, #1
 800055c:	1824      	adds	r4, r4, r0
 800055e:	414d      	adcs	r5, r1
 8000560:	2e00      	cmp	r6, #0
 8000562:	d006      	beq.n	8000572 <__udivmoddi4+0x10a>
 8000564:	42ab      	cmp	r3, r5
 8000566:	d9ee      	bls.n	8000546 <__udivmoddi4+0xde>
 8000568:	3e01      	subs	r6, #1
 800056a:	1924      	adds	r4, r4, r4
 800056c:	416d      	adcs	r5, r5
 800056e:	2e00      	cmp	r6, #0
 8000570:	d1f8      	bne.n	8000564 <__udivmoddi4+0xfc>
 8000572:	9800      	ldr	r0, [sp, #0]
 8000574:	9901      	ldr	r1, [sp, #4]
 8000576:	465b      	mov	r3, fp
 8000578:	1900      	adds	r0, r0, r4
 800057a:	4169      	adcs	r1, r5
 800057c:	2b00      	cmp	r3, #0
 800057e:	db24      	blt.n	80005ca <__udivmoddi4+0x162>
 8000580:	002b      	movs	r3, r5
 8000582:	465a      	mov	r2, fp
 8000584:	4644      	mov	r4, r8
 8000586:	40d3      	lsrs	r3, r2
 8000588:	002a      	movs	r2, r5
 800058a:	40e2      	lsrs	r2, r4
 800058c:	001c      	movs	r4, r3
 800058e:	465b      	mov	r3, fp
 8000590:	0015      	movs	r5, r2
 8000592:	2b00      	cmp	r3, #0
 8000594:	db2a      	blt.n	80005ec <__udivmoddi4+0x184>
 8000596:	0026      	movs	r6, r4
 8000598:	409e      	lsls	r6, r3
 800059a:	0033      	movs	r3, r6
 800059c:	0026      	movs	r6, r4
 800059e:	4647      	mov	r7, r8
 80005a0:	40be      	lsls	r6, r7
 80005a2:	0032      	movs	r2, r6
 80005a4:	1a80      	subs	r0, r0, r2
 80005a6:	4199      	sbcs	r1, r3
 80005a8:	9000      	str	r0, [sp, #0]
 80005aa:	9101      	str	r1, [sp, #4]
 80005ac:	e79e      	b.n	80004ec <__udivmoddi4+0x84>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d8bc      	bhi.n	800052c <__udivmoddi4+0xc4>
 80005b2:	e782      	b.n	80004ba <__udivmoddi4+0x52>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	2100      	movs	r1, #0
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	2200      	movs	r2, #0
 80005be:	9100      	str	r1, [sp, #0]
 80005c0:	9201      	str	r2, [sp, #4]
 80005c2:	2201      	movs	r2, #1
 80005c4:	40da      	lsrs	r2, r3
 80005c6:	9201      	str	r2, [sp, #4]
 80005c8:	e785      	b.n	80004d6 <__udivmoddi4+0x6e>
 80005ca:	4642      	mov	r2, r8
 80005cc:	2320      	movs	r3, #32
 80005ce:	1a9b      	subs	r3, r3, r2
 80005d0:	002a      	movs	r2, r5
 80005d2:	4646      	mov	r6, r8
 80005d4:	409a      	lsls	r2, r3
 80005d6:	0023      	movs	r3, r4
 80005d8:	40f3      	lsrs	r3, r6
 80005da:	4644      	mov	r4, r8
 80005dc:	4313      	orrs	r3, r2
 80005de:	002a      	movs	r2, r5
 80005e0:	40e2      	lsrs	r2, r4
 80005e2:	001c      	movs	r4, r3
 80005e4:	465b      	mov	r3, fp
 80005e6:	0015      	movs	r5, r2
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	dad4      	bge.n	8000596 <__udivmoddi4+0x12e>
 80005ec:	4642      	mov	r2, r8
 80005ee:	002f      	movs	r7, r5
 80005f0:	2320      	movs	r3, #32
 80005f2:	0026      	movs	r6, r4
 80005f4:	4097      	lsls	r7, r2
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	40de      	lsrs	r6, r3
 80005fa:	003b      	movs	r3, r7
 80005fc:	4333      	orrs	r3, r6
 80005fe:	e7cd      	b.n	800059c <__udivmoddi4+0x134>

08000600 <__clzdi2>:
 8000600:	b510      	push	{r4, lr}
 8000602:	2900      	cmp	r1, #0
 8000604:	d103      	bne.n	800060e <__clzdi2+0xe>
 8000606:	f000 f807 	bl	8000618 <__clzsi2>
 800060a:	3020      	adds	r0, #32
 800060c:	e002      	b.n	8000614 <__clzdi2+0x14>
 800060e:	0008      	movs	r0, r1
 8000610:	f000 f802 	bl	8000618 <__clzsi2>
 8000614:	bd10      	pop	{r4, pc}
 8000616:	46c0      	nop			; (mov r8, r8)

08000618 <__clzsi2>:
 8000618:	211c      	movs	r1, #28
 800061a:	2301      	movs	r3, #1
 800061c:	041b      	lsls	r3, r3, #16
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0xe>
 8000622:	0c00      	lsrs	r0, r0, #16
 8000624:	3910      	subs	r1, #16
 8000626:	0a1b      	lsrs	r3, r3, #8
 8000628:	4298      	cmp	r0, r3
 800062a:	d301      	bcc.n	8000630 <__clzsi2+0x18>
 800062c:	0a00      	lsrs	r0, r0, #8
 800062e:	3908      	subs	r1, #8
 8000630:	091b      	lsrs	r3, r3, #4
 8000632:	4298      	cmp	r0, r3
 8000634:	d301      	bcc.n	800063a <__clzsi2+0x22>
 8000636:	0900      	lsrs	r0, r0, #4
 8000638:	3904      	subs	r1, #4
 800063a:	a202      	add	r2, pc, #8	; (adr r2, 8000644 <__clzsi2+0x2c>)
 800063c:	5c10      	ldrb	r0, [r2, r0]
 800063e:	1840      	adds	r0, r0, r1
 8000640:	4770      	bx	lr
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	02020304 	.word	0x02020304
 8000648:	01010101 	.word	0x01010101
	...

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065a:	f001 fa0d 	bl	8001a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065e:	f000 f8c5 	bl	80007ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000662:	f000 fb79 	bl	8000d58 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000666:	f000 fb29 	bl	8000cbc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800066a:	f000 f907 	bl	800087c <MX_ADC1_Init>
  MX_I2C1_Init();
 800066e:	f000 f96b 	bl	8000948 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000672:	f000 f9a9 	bl	80009c8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000676:	f000 f9fb 	bl	8000a70 <MX_TIM3_Init>
  MX_TIM6_Init();
 800067a:	f000 fa7b 	bl	8000b74 <MX_TIM6_Init>
  MX_TIM7_Init();
 800067e:	f000 fab7 	bl	8000bf0 <MX_TIM7_Init>
  MX_TIM14_Init();
 8000682:	f000 faf3 	bl	8000c6c <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  // Enable the TIM2 peripheral
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000686:	4b4b      	ldr	r3, [pc, #300]	; (80007b4 <main+0x160>)
 8000688:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800068a:	4b4a      	ldr	r3, [pc, #296]	; (80007b4 <main+0x160>)
 800068c:	2101      	movs	r1, #1
 800068e:	430a      	orrs	r2, r1
 8000690:	63da      	str	r2, [r3, #60]	; 0x3c
 8000692:	4b48      	ldr	r3, [pc, #288]	; (80007b4 <main+0x160>)
 8000694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000696:	2201      	movs	r2, #1
 8000698:	4013      	ands	r3, r2
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]

  // Enable the TIM6 peripheral
  __HAL_RCC_TIM6_CLK_ENABLE();
 800069e:	4b45      	ldr	r3, [pc, #276]	; (80007b4 <main+0x160>)
 80006a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006a2:	4b44      	ldr	r3, [pc, #272]	; (80007b4 <main+0x160>)
 80006a4:	2110      	movs	r1, #16
 80006a6:	430a      	orrs	r2, r1
 80006a8:	63da      	str	r2, [r3, #60]	; 0x3c
 80006aa:	4b42      	ldr	r3, [pc, #264]	; (80007b4 <main+0x160>)
 80006ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006ae:	2210      	movs	r2, #16
 80006b0:	4013      	ands	r3, r2
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	68bb      	ldr	r3, [r7, #8]

  // Enable the TIM7 peripheral
  __HAL_RCC_TIM7_CLK_ENABLE();
 80006b6:	4b3f      	ldr	r3, [pc, #252]	; (80007b4 <main+0x160>)
 80006b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006ba:	4b3e      	ldr	r3, [pc, #248]	; (80007b4 <main+0x160>)
 80006bc:	2120      	movs	r1, #32
 80006be:	430a      	orrs	r2, r1
 80006c0:	63da      	str	r2, [r3, #60]	; 0x3c
 80006c2:	4b3c      	ldr	r3, [pc, #240]	; (80007b4 <main+0x160>)
 80006c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006c6:	2220      	movs	r2, #32
 80006c8:	4013      	ands	r3, r2
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]

  // Enable the TIM14 peripheral
   __HAL_RCC_TIM14_CLK_ENABLE();
 80006ce:	4b39      	ldr	r3, [pc, #228]	; (80007b4 <main+0x160>)
 80006d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006d2:	4b38      	ldr	r3, [pc, #224]	; (80007b4 <main+0x160>)
 80006d4:	2180      	movs	r1, #128	; 0x80
 80006d6:	0209      	lsls	r1, r1, #8
 80006d8:	430a      	orrs	r2, r1
 80006da:	641a      	str	r2, [r3, #64]	; 0x40
 80006dc:	4b35      	ldr	r3, [pc, #212]	; (80007b4 <main+0x160>)
 80006de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006e0:	2380      	movs	r3, #128	; 0x80
 80006e2:	021b      	lsls	r3, r3, #8
 80006e4:	4013      	ands	r3, r2
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]

  // Enable the peripheral IRQ for TIM2
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2100      	movs	r1, #0
 80006ee:	200f      	movs	r0, #15
 80006f0:	f002 f982 	bl	80029f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80006f4:	200f      	movs	r0, #15
 80006f6:	f002 f994 	bl	8002a22 <HAL_NVIC_EnableIRQ>

  // Enable the peripheral IRQ for TIM6
  HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2100      	movs	r1, #0
 80006fe:	2011      	movs	r0, #17
 8000700:	f002 f97a 	bl	80029f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8000704:	2011      	movs	r0, #17
 8000706:	f002 f98c 	bl	8002a22 <HAL_NVIC_EnableIRQ>

  // Enable the peripheral IRQ for TIM7
  HAL_NVIC_SetPriority(TIM7_LPTIM2_IRQn, 0, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	2100      	movs	r1, #0
 800070e:	2012      	movs	r0, #18
 8000710:	f002 f972 	bl	80029f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_LPTIM2_IRQn);
 8000714:	2012      	movs	r0, #18
 8000716:	f002 f984 	bl	8002a22 <HAL_NVIC_EnableIRQ>

  // Enable the peripheral IRQ for TIM14
  HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800071a:	2200      	movs	r2, #0
 800071c:	2100      	movs	r1, #0
 800071e:	2013      	movs	r0, #19
 8000720:	f002 f96a 	bl	80029f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000724:	2013      	movs	r0, #19
 8000726:	f002 f97c 	bl	8002a22 <HAL_NVIC_EnableIRQ>

  // Start the timers
  HAL_TIM_Base_Start_IT(&htim2);
 800072a:	4b23      	ldr	r3, [pc, #140]	; (80007b8 <main+0x164>)
 800072c:	0018      	movs	r0, r3
 800072e:	f003 ffe1 	bl	80046f4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8000732:	4b22      	ldr	r3, [pc, #136]	; (80007bc <main+0x168>)
 8000734:	0018      	movs	r0, r3
 8000736:	f003 ffdd 	bl	80046f4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 800073a:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <main+0x16c>)
 800073c:	0018      	movs	r0, r3
 800073e:	f003 ffd9 	bl	80046f4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim14);
 8000742:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <main+0x170>)
 8000744:	0018      	movs	r0, r3
 8000746:	f003 ffd5 	bl	80046f4 <HAL_TIM_Base_Start_IT>

  // Enable PWM on TIM3 (for motor control)
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800074a:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <main+0x174>)
 800074c:	2100      	movs	r1, #0
 800074e:	0018      	movs	r0, r3
 8000750:	f004 f88c 	bl	800486c <HAL_TIM_PWM_Start>

  // I2C Display
  hardwareTestLCD();
 8000754:	f000 fbe0 	bl	8000f18 <hardwareTestLCD>

  // Variables
  int servoAngle;
  int adcValue;
  stateTracker = 1;
 8000758:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <main+0x178>)
 800075a:	2201      	movs	r2, #1
 800075c:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Check UART Transmissions
	  HAL_UART_Receive_IT(&huart2, msgRx, 1);
 800075e:	491c      	ldr	r1, [pc, #112]	; (80007d0 <main+0x17c>)
 8000760:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <main+0x180>)
 8000762:	2201      	movs	r2, #1
 8000764:	0018      	movs	r0, r3
 8000766:	f005 f9fb 	bl	8005b60 <HAL_UART_Receive_IT>

	  // Get potentiometer value
	  HAL_ADC_Start_IT(&hadc1);
 800076a:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <main+0x184>)
 800076c:	0018      	movs	r0, r3
 800076e:	f001 fdb5 	bl	80022dc <HAL_ADC_Start_IT>
	  getPotValue();
 8000772:	f000 fba3 	bl	8000ebc <getPotValue>

	  // State Machine
	  stateMachineDecider();
 8000776:	f000 fc61 	bl	800103c <stateMachineDecider>
	  stateMachineController(stateTracker);
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <main+0x178>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	0018      	movs	r0, r3
 8000780:	f000 fc16 	bl	8000fb0 <stateMachineController>

	  // Monitor LEDs
	  if (ledOneFlag == 0 ){
 8000784:	4b15      	ldr	r3, [pc, #84]	; (80007dc <main+0x188>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d106      	bne.n	800079a <main+0x146>
		  HAL_GPIO_WritePin(LED_1_GPIO_Port,LED_1_Pin,GPIO_PIN_RESET);
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <main+0x18c>)
 800078e:	2200      	movs	r2, #0
 8000790:	2180      	movs	r1, #128	; 0x80
 8000792:	0018      	movs	r0, r3
 8000794:	f002 fbaf 	bl	8002ef6 <HAL_GPIO_WritePin>
 8000798:	e7e1      	b.n	800075e <main+0x10a>
	  } else if (ledTwoFlag == 0){
 800079a:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <main+0x190>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d1dd      	bne.n	800075e <main+0x10a>
		  HAL_GPIO_WritePin(LED_2_GPIO_Port,LED_2_Pin,GPIO_PIN_RESET);
 80007a2:	2380      	movs	r3, #128	; 0x80
 80007a4:	01db      	lsls	r3, r3, #7
 80007a6:	4810      	ldr	r0, [pc, #64]	; (80007e8 <main+0x194>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	0019      	movs	r1, r3
 80007ac:	f002 fba3 	bl	8002ef6 <HAL_GPIO_WritePin>
	  HAL_UART_Receive_IT(&huart2, msgRx, 1);
 80007b0:	e7d5      	b.n	800075e <main+0x10a>
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	40021000 	.word	0x40021000
 80007b8:	2000013c 	.word	0x2000013c
 80007bc:	200001d4 	.word	0x200001d4
 80007c0:	20000220 	.word	0x20000220
 80007c4:	2000026c 	.word	0x2000026c
 80007c8:	20000188 	.word	0x20000188
 80007cc:	200003a8 	.word	0x200003a8
 80007d0:	200003a0 	.word	0x200003a0
 80007d4:	200002b8 	.word	0x200002b8
 80007d8:	20000084 	.word	0x20000084
 80007dc:	20000004 	.word	0x20000004
 80007e0:	50000800 	.word	0x50000800
 80007e4:	20000008 	.word	0x20000008
 80007e8:	50000400 	.word	0x50000400

080007ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ec:	b590      	push	{r4, r7, lr}
 80007ee:	b093      	sub	sp, #76	; 0x4c
 80007f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f2:	2410      	movs	r4, #16
 80007f4:	193b      	adds	r3, r7, r4
 80007f6:	0018      	movs	r0, r3
 80007f8:	2338      	movs	r3, #56	; 0x38
 80007fa:	001a      	movs	r2, r3
 80007fc:	2100      	movs	r1, #0
 80007fe:	f007 fca9 	bl	8008154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000802:	003b      	movs	r3, r7
 8000804:	0018      	movs	r0, r3
 8000806:	2310      	movs	r3, #16
 8000808:	001a      	movs	r2, r3
 800080a:	2100      	movs	r1, #0
 800080c:	f007 fca2 	bl	8008154 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000810:	2380      	movs	r3, #128	; 0x80
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	0018      	movs	r0, r3
 8000816:	f003 f84d 	bl	80038b4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800081a:	193b      	adds	r3, r7, r4
 800081c:	2202      	movs	r2, #2
 800081e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000820:	193b      	adds	r3, r7, r4
 8000822:	2280      	movs	r2, #128	; 0x80
 8000824:	0052      	lsls	r2, r2, #1
 8000826:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000828:	193b      	adds	r3, r7, r4
 800082a:	2200      	movs	r2, #0
 800082c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800082e:	193b      	adds	r3, r7, r4
 8000830:	2240      	movs	r2, #64	; 0x40
 8000832:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000834:	193b      	adds	r3, r7, r4
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083a:	193b      	adds	r3, r7, r4
 800083c:	0018      	movs	r0, r3
 800083e:	f003 f885 	bl	800394c <HAL_RCC_OscConfig>
 8000842:	1e03      	subs	r3, r0, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000846:	f000 fe57 	bl	80014f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084a:	003b      	movs	r3, r7
 800084c:	2207      	movs	r2, #7
 800084e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000850:	003b      	movs	r3, r7
 8000852:	2200      	movs	r2, #0
 8000854:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000856:	003b      	movs	r3, r7
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800085c:	003b      	movs	r3, r7
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000862:	003b      	movs	r3, r7
 8000864:	2100      	movs	r1, #0
 8000866:	0018      	movs	r0, r3
 8000868:	f003 fb8a 	bl	8003f80 <HAL_RCC_ClockConfig>
 800086c:	1e03      	subs	r3, r0, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000870:	f000 fe42 	bl	80014f8 <Error_Handler>
  }
}
 8000874:	46c0      	nop			; (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	b013      	add	sp, #76	; 0x4c
 800087a:	bd90      	pop	{r4, r7, pc}

0800087c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	0018      	movs	r0, r3
 8000886:	230c      	movs	r3, #12
 8000888:	001a      	movs	r2, r3
 800088a:	2100      	movs	r1, #0
 800088c:	f007 fc62 	bl	8008154 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000890:	4b2b      	ldr	r3, [pc, #172]	; (8000940 <MX_ADC1_Init+0xc4>)
 8000892:	4a2c      	ldr	r2, [pc, #176]	; (8000944 <MX_ADC1_Init+0xc8>)
 8000894:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000896:	4b2a      	ldr	r3, [pc, #168]	; (8000940 <MX_ADC1_Init+0xc4>)
 8000898:	2280      	movs	r2, #128	; 0x80
 800089a:	05d2      	lsls	r2, r2, #23
 800089c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800089e:	4b28      	ldr	r3, [pc, #160]	; (8000940 <MX_ADC1_Init+0xc4>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008a4:	4b26      	ldr	r3, [pc, #152]	; (8000940 <MX_ADC1_Init+0xc4>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008aa:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC1_Init+0xc4>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008b0:	4b23      	ldr	r3, [pc, #140]	; (8000940 <MX_ADC1_Init+0xc4>)
 80008b2:	2204      	movs	r2, #4
 80008b4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008b6:	4b22      	ldr	r3, [pc, #136]	; (8000940 <MX_ADC1_Init+0xc4>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80008bc:	4b20      	ldr	r3, [pc, #128]	; (8000940 <MX_ADC1_Init+0xc4>)
 80008be:	2200      	movs	r2, #0
 80008c0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008c2:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <MX_ADC1_Init+0xc4>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80008c8:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <MX_ADC1_Init+0xc4>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008ce:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <MX_ADC1_Init+0xc4>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008d4:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <MX_ADC1_Init+0xc4>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008da:	4b19      	ldr	r3, [pc, #100]	; (8000940 <MX_ADC1_Init+0xc4>)
 80008dc:	222c      	movs	r2, #44	; 0x2c
 80008de:	2100      	movs	r1, #0
 80008e0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008e2:	4b17      	ldr	r3, [pc, #92]	; (8000940 <MX_ADC1_Init+0xc4>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80008e8:	4b15      	ldr	r3, [pc, #84]	; (8000940 <MX_ADC1_Init+0xc4>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_ADC1_Init+0xc4>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <MX_ADC1_Init+0xc4>)
 80008f6:	223c      	movs	r2, #60	; 0x3c
 80008f8:	2100      	movs	r1, #0
 80008fa:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80008fc:	4b10      	ldr	r3, [pc, #64]	; (8000940 <MX_ADC1_Init+0xc4>)
 80008fe:	2200      	movs	r2, #0
 8000900:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000902:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_ADC1_Init+0xc4>)
 8000904:	0018      	movs	r0, r3
 8000906:	f001 faad 	bl	8001e64 <HAL_ADC_Init>
 800090a:	1e03      	subs	r3, r0, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800090e:	f000 fdf3 	bl	80014f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	2201      	movs	r2, #1
 8000916:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2200      	movs	r2, #0
 800091c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000924:	1d3a      	adds	r2, r7, #4
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_ADC1_Init+0xc4>)
 8000928:	0011      	movs	r1, r2
 800092a:	0018      	movs	r0, r3
 800092c:	f001 fd5a 	bl	80023e4 <HAL_ADC_ConfigChannel>
 8000930:	1e03      	subs	r3, r0, #0
 8000932:	d001      	beq.n	8000938 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8000934:	f000 fde0 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000938:	46c0      	nop			; (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	b004      	add	sp, #16
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000084 	.word	0x20000084
 8000944:	40012400 	.word	0x40012400

08000948 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800094c:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <MX_I2C1_Init+0x74>)
 800094e:	4a1c      	ldr	r2, [pc, #112]	; (80009c0 <MX_I2C1_Init+0x78>)
 8000950:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000952:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <MX_I2C1_Init+0x74>)
 8000954:	4a1b      	ldr	r2, [pc, #108]	; (80009c4 <MX_I2C1_Init+0x7c>)
 8000956:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000958:	4b18      	ldr	r3, [pc, #96]	; (80009bc <MX_I2C1_Init+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800095e:	4b17      	ldr	r3, [pc, #92]	; (80009bc <MX_I2C1_Init+0x74>)
 8000960:	2201      	movs	r2, #1
 8000962:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000964:	4b15      	ldr	r3, [pc, #84]	; (80009bc <MX_I2C1_Init+0x74>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800096a:	4b14      	ldr	r3, [pc, #80]	; (80009bc <MX_I2C1_Init+0x74>)
 800096c:	2200      	movs	r2, #0
 800096e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <MX_I2C1_Init+0x74>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_I2C1_Init+0x74>)
 8000978:	2200      	movs	r2, #0
 800097a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_I2C1_Init+0x74>)
 800097e:	2200      	movs	r2, #0
 8000980:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_I2C1_Init+0x74>)
 8000984:	0018      	movs	r0, r3
 8000986:	f002 faef 	bl	8002f68 <HAL_I2C_Init>
 800098a:	1e03      	subs	r3, r0, #0
 800098c:	d001      	beq.n	8000992 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800098e:	f000 fdb3 	bl	80014f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000992:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <MX_I2C1_Init+0x74>)
 8000994:	2100      	movs	r1, #0
 8000996:	0018      	movs	r0, r3
 8000998:	f002 fef4 	bl	8003784 <HAL_I2CEx_ConfigAnalogFilter>
 800099c:	1e03      	subs	r3, r0, #0
 800099e:	d001      	beq.n	80009a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009a0:	f000 fdaa 	bl	80014f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <MX_I2C1_Init+0x74>)
 80009a6:	2100      	movs	r1, #0
 80009a8:	0018      	movs	r0, r3
 80009aa:	f002 ff37 	bl	800381c <HAL_I2CEx_ConfigDigitalFilter>
 80009ae:	1e03      	subs	r3, r0, #0
 80009b0:	d001      	beq.n	80009b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009b2:	f000 fda1 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	200000e8 	.word	0x200000e8
 80009c0:	40005400 	.word	0x40005400
 80009c4:	00303d5b 	.word	0x00303d5b

080009c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b088      	sub	sp, #32
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ce:	2310      	movs	r3, #16
 80009d0:	18fb      	adds	r3, r7, r3
 80009d2:	0018      	movs	r0, r3
 80009d4:	2310      	movs	r3, #16
 80009d6:	001a      	movs	r2, r3
 80009d8:	2100      	movs	r1, #0
 80009da:	f007 fbbb 	bl	8008154 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	0018      	movs	r0, r3
 80009e2:	230c      	movs	r3, #12
 80009e4:	001a      	movs	r2, r3
 80009e6:	2100      	movs	r1, #0
 80009e8:	f007 fbb4 	bl	8008154 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009ec:	4b1e      	ldr	r3, [pc, #120]	; (8000a68 <MX_TIM2_Init+0xa0>)
 80009ee:	2280      	movs	r2, #128	; 0x80
 80009f0:	05d2      	lsls	r2, r2, #23
 80009f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 80009f4:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <MX_TIM2_Init+0xa0>)
 80009f6:	4a1d      	ldr	r2, [pc, #116]	; (8000a6c <MX_TIM2_Init+0xa4>)
 80009f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fa:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <MX_TIM2_Init+0xa0>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000a00:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <MX_TIM2_Init+0xa0>)
 8000a02:	4a1a      	ldr	r2, [pc, #104]	; (8000a6c <MX_TIM2_Init+0xa4>)
 8000a04:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a06:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <MX_TIM2_Init+0xa0>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0c:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <MX_TIM2_Init+0xa0>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <MX_TIM2_Init+0xa0>)
 8000a14:	0018      	movs	r0, r3
 8000a16:	f003 fe15 	bl	8004644 <HAL_TIM_Base_Init>
 8000a1a:	1e03      	subs	r3, r0, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000a1e:	f000 fd6b 	bl	80014f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a22:	2110      	movs	r1, #16
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	2280      	movs	r2, #128	; 0x80
 8000a28:	0152      	lsls	r2, r2, #5
 8000a2a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a2c:	187a      	adds	r2, r7, r1
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <MX_TIM2_Init+0xa0>)
 8000a30:	0011      	movs	r1, r2
 8000a32:	0018      	movs	r0, r3
 8000a34:	f004 fa0c 	bl	8004e50 <HAL_TIM_ConfigClockSource>
 8000a38:	1e03      	subs	r3, r0, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000a3c:	f000 fd5c 	bl	80014f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a4c:	1d3a      	adds	r2, r7, #4
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_TIM2_Init+0xa0>)
 8000a50:	0011      	movs	r1, r2
 8000a52:	0018      	movs	r0, r3
 8000a54:	f004 ff04 	bl	8005860 <HAL_TIMEx_MasterConfigSynchronization>
 8000a58:	1e03      	subs	r3, r0, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000a5c:	f000 fd4c 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a60:	46c0      	nop			; (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b008      	add	sp, #32
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	2000013c 	.word	0x2000013c
 8000a6c:	000003e7 	.word	0x000003e7

08000a70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08e      	sub	sp, #56	; 0x38
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a76:	2328      	movs	r3, #40	; 0x28
 8000a78:	18fb      	adds	r3, r7, r3
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	2310      	movs	r3, #16
 8000a7e:	001a      	movs	r2, r3
 8000a80:	2100      	movs	r1, #0
 8000a82:	f007 fb67 	bl	8008154 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a86:	231c      	movs	r3, #28
 8000a88:	18fb      	adds	r3, r7, r3
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	230c      	movs	r3, #12
 8000a8e:	001a      	movs	r2, r3
 8000a90:	2100      	movs	r1, #0
 8000a92:	f007 fb5f 	bl	8008154 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a96:	003b      	movs	r3, r7
 8000a98:	0018      	movs	r0, r3
 8000a9a:	231c      	movs	r3, #28
 8000a9c:	001a      	movs	r2, r3
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	f007 fb58 	bl	8008154 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000aa4:	4b30      	ldr	r3, [pc, #192]	; (8000b68 <MX_TIM3_Init+0xf8>)
 8000aa6:	4a31      	ldr	r2, [pc, #196]	; (8000b6c <MX_TIM3_Init+0xfc>)
 8000aa8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 319;
 8000aaa:	4b2f      	ldr	r3, [pc, #188]	; (8000b68 <MX_TIM3_Init+0xf8>)
 8000aac:	2240      	movs	r2, #64	; 0x40
 8000aae:	32ff      	adds	r2, #255	; 0xff
 8000ab0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab2:	4b2d      	ldr	r3, [pc, #180]	; (8000b68 <MX_TIM3_Init+0xf8>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000ab8:	4b2b      	ldr	r3, [pc, #172]	; (8000b68 <MX_TIM3_Init+0xf8>)
 8000aba:	4a2d      	ldr	r2, [pc, #180]	; (8000b70 <MX_TIM3_Init+0x100>)
 8000abc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000abe:	4b2a      	ldr	r3, [pc, #168]	; (8000b68 <MX_TIM3_Init+0xf8>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac4:	4b28      	ldr	r3, [pc, #160]	; (8000b68 <MX_TIM3_Init+0xf8>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000aca:	4b27      	ldr	r3, [pc, #156]	; (8000b68 <MX_TIM3_Init+0xf8>)
 8000acc:	0018      	movs	r0, r3
 8000ace:	f003 fdb9 	bl	8004644 <HAL_TIM_Base_Init>
 8000ad2:	1e03      	subs	r3, r0, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000ad6:	f000 fd0f 	bl	80014f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ada:	2128      	movs	r1, #40	; 0x28
 8000adc:	187b      	adds	r3, r7, r1
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	0152      	lsls	r2, r2, #5
 8000ae2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ae4:	187a      	adds	r2, r7, r1
 8000ae6:	4b20      	ldr	r3, [pc, #128]	; (8000b68 <MX_TIM3_Init+0xf8>)
 8000ae8:	0011      	movs	r1, r2
 8000aea:	0018      	movs	r0, r3
 8000aec:	f004 f9b0 	bl	8004e50 <HAL_TIM_ConfigClockSource>
 8000af0:	1e03      	subs	r3, r0, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000af4:	f000 fd00 	bl	80014f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000af8:	4b1b      	ldr	r3, [pc, #108]	; (8000b68 <MX_TIM3_Init+0xf8>)
 8000afa:	0018      	movs	r0, r3
 8000afc:	f003 fe56 	bl	80047ac <HAL_TIM_PWM_Init>
 8000b00:	1e03      	subs	r3, r0, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000b04:	f000 fcf8 	bl	80014f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b08:	211c      	movs	r1, #28
 8000b0a:	187b      	adds	r3, r7, r1
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b10:	187b      	adds	r3, r7, r1
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b16:	187a      	adds	r2, r7, r1
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <MX_TIM3_Init+0xf8>)
 8000b1a:	0011      	movs	r1, r2
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f004 fe9f 	bl	8005860 <HAL_TIMEx_MasterConfigSynchronization>
 8000b22:	1e03      	subs	r3, r0, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8000b26:	f000 fce7 	bl	80014f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b2a:	003b      	movs	r3, r7
 8000b2c:	2260      	movs	r2, #96	; 0x60
 8000b2e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000b30:	003b      	movs	r3, r7
 8000b32:	2200      	movs	r2, #0
 8000b34:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b36:	003b      	movs	r3, r7
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b3c:	003b      	movs	r3, r7
 8000b3e:	2200      	movs	r2, #0
 8000b40:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b42:	0039      	movs	r1, r7
 8000b44:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <MX_TIM3_Init+0xf8>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f004 f881 	bl	8004c50 <HAL_TIM_PWM_ConfigChannel>
 8000b4e:	1e03      	subs	r3, r0, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8000b52:	f000 fcd1 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b56:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <MX_TIM3_Init+0xf8>)
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f000 fe2f 	bl	80017bc <HAL_TIM_MspPostInit>

}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	b00e      	add	sp, #56	; 0x38
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	20000188 	.word	0x20000188
 8000b6c:	40000400 	.word	0x40000400
 8000b70:	000003e7 	.word	0x000003e7

08000b74 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	230c      	movs	r3, #12
 8000b80:	001a      	movs	r2, r3
 8000b82:	2100      	movs	r1, #0
 8000b84:	f007 fae6 	bl	8008154 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b88:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <MX_TIM6_Init+0x6c>)
 8000b8a:	4a16      	ldr	r2, [pc, #88]	; (8000be4 <MX_TIM6_Init+0x70>)
 8000b8c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1999;
 8000b8e:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <MX_TIM6_Init+0x6c>)
 8000b90:	4a15      	ldr	r2, [pc, #84]	; (8000be8 <MX_TIM6_Init+0x74>)
 8000b92:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <MX_TIM6_Init+0x6c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <MX_TIM6_Init+0x6c>)
 8000b9c:	4a13      	ldr	r2, [pc, #76]	; (8000bec <MX_TIM6_Init+0x78>)
 8000b9e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <MX_TIM6_Init+0x6c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <MX_TIM6_Init+0x6c>)
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f003 fd4b 	bl	8004644 <HAL_TIM_Base_Init>
 8000bae:	1e03      	subs	r3, r0, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000bb2:	f000 fca1 	bl	80014f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000bc2:	1d3a      	adds	r2, r7, #4
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <MX_TIM6_Init+0x6c>)
 8000bc6:	0011      	movs	r1, r2
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f004 fe49 	bl	8005860 <HAL_TIMEx_MasterConfigSynchronization>
 8000bce:	1e03      	subs	r3, r0, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000bd2:	f000 fc91 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	b004      	add	sp, #16
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	200001d4 	.word	0x200001d4
 8000be4:	40001000 	.word	0x40001000
 8000be8:	000007cf 	.word	0x000007cf
 8000bec:	000003e7 	.word	0x000003e7

08000bf0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	230c      	movs	r3, #12
 8000bfc:	001a      	movs	r2, r3
 8000bfe:	2100      	movs	r1, #0
 8000c00:	f007 faa8 	bl	8008154 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000c04:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <MX_TIM7_Init+0x6c>)
 8000c06:	4a16      	ldr	r2, [pc, #88]	; (8000c60 <MX_TIM7_Init+0x70>)
 8000c08:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 3332;
 8000c0a:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <MX_TIM7_Init+0x6c>)
 8000c0c:	4a15      	ldr	r2, [pc, #84]	; (8000c64 <MX_TIM7_Init+0x74>)
 8000c0e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <MX_TIM7_Init+0x6c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <MX_TIM7_Init+0x6c>)
 8000c18:	4a13      	ldr	r2, [pc, #76]	; (8000c68 <MX_TIM7_Init+0x78>)
 8000c1a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <MX_TIM7_Init+0x6c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <MX_TIM7_Init+0x6c>)
 8000c24:	0018      	movs	r0, r3
 8000c26:	f003 fd0d 	bl	8004644 <HAL_TIM_Base_Init>
 8000c2a:	1e03      	subs	r3, r0, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000c2e:	f000 fc63 	bl	80014f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000c3e:	1d3a      	adds	r2, r7, #4
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <MX_TIM7_Init+0x6c>)
 8000c42:	0011      	movs	r1, r2
 8000c44:	0018      	movs	r0, r3
 8000c46:	f004 fe0b 	bl	8005860 <HAL_TIMEx_MasterConfigSynchronization>
 8000c4a:	1e03      	subs	r3, r0, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8000c4e:	f000 fc53 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	b004      	add	sp, #16
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	20000220 	.word	0x20000220
 8000c60:	40001400 	.word	0x40001400
 8000c64:	00000d04 	.word	0x00000d04
 8000c68:	000003e7 	.word	0x000003e7

08000c6c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000c70:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <MX_TIM14_Init+0x40>)
 8000c72:	4a0f      	ldr	r2, [pc, #60]	; (8000cb0 <MX_TIM14_Init+0x44>)
 8000c74:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 7999;
 8000c76:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <MX_TIM14_Init+0x40>)
 8000c78:	4a0e      	ldr	r2, [pc, #56]	; (8000cb4 <MX_TIM14_Init+0x48>)
 8000c7a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <MX_TIM14_Init+0x40>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 999;
 8000c82:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <MX_TIM14_Init+0x40>)
 8000c84:	4a0c      	ldr	r2, [pc, #48]	; (8000cb8 <MX_TIM14_Init+0x4c>)
 8000c86:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c88:	4b08      	ldr	r3, [pc, #32]	; (8000cac <MX_TIM14_Init+0x40>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c8e:	4b07      	ldr	r3, [pc, #28]	; (8000cac <MX_TIM14_Init+0x40>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000c94:	4b05      	ldr	r3, [pc, #20]	; (8000cac <MX_TIM14_Init+0x40>)
 8000c96:	0018      	movs	r0, r3
 8000c98:	f003 fcd4 	bl	8004644 <HAL_TIM_Base_Init>
 8000c9c:	1e03      	subs	r3, r0, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000ca0:	f000 fc2a 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000ca4:	46c0      	nop			; (mov r8, r8)
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	2000026c 	.word	0x2000026c
 8000cb0:	40002000 	.word	0x40002000
 8000cb4:	00001f3f 	.word	0x00001f3f
 8000cb8:	000003e7 	.word	0x000003e7

08000cbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cc0:	4b23      	ldr	r3, [pc, #140]	; (8000d50 <MX_USART2_UART_Init+0x94>)
 8000cc2:	4a24      	ldr	r2, [pc, #144]	; (8000d54 <MX_USART2_UART_Init+0x98>)
 8000cc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cc6:	4b22      	ldr	r3, [pc, #136]	; (8000d50 <MX_USART2_UART_Init+0x94>)
 8000cc8:	22e1      	movs	r2, #225	; 0xe1
 8000cca:	0252      	lsls	r2, r2, #9
 8000ccc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cce:	4b20      	ldr	r3, [pc, #128]	; (8000d50 <MX_USART2_UART_Init+0x94>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cd4:	4b1e      	ldr	r3, [pc, #120]	; (8000d50 <MX_USART2_UART_Init+0x94>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cda:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <MX_USART2_UART_Init+0x94>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ce0:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <MX_USART2_UART_Init+0x94>)
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <MX_USART2_UART_Init+0x94>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cec:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <MX_USART2_UART_Init+0x94>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cf2:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <MX_USART2_UART_Init+0x94>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cf8:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <MX_USART2_UART_Init+0x94>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cfe:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <MX_USART2_UART_Init+0x94>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <MX_USART2_UART_Init+0x94>)
 8000d06:	0018      	movs	r0, r3
 8000d08:	f004 fe30 	bl	800596c <HAL_UART_Init>
 8000d0c:	1e03      	subs	r3, r0, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000d10:	f000 fbf2 	bl	80014f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d14:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <MX_USART2_UART_Init+0x94>)
 8000d16:	2100      	movs	r1, #0
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f006 fe7d 	bl	8007a18 <HAL_UARTEx_SetTxFifoThreshold>
 8000d1e:	1e03      	subs	r3, r0, #0
 8000d20:	d001      	beq.n	8000d26 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000d22:	f000 fbe9 	bl	80014f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d26:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <MX_USART2_UART_Init+0x94>)
 8000d28:	2100      	movs	r1, #0
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f006 feb4 	bl	8007a98 <HAL_UARTEx_SetRxFifoThreshold>
 8000d30:	1e03      	subs	r3, r0, #0
 8000d32:	d001      	beq.n	8000d38 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000d34:	f000 fbe0 	bl	80014f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <MX_USART2_UART_Init+0x94>)
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f006 fe32 	bl	80079a4 <HAL_UARTEx_DisableFifoMode>
 8000d40:	1e03      	subs	r3, r0, #0
 8000d42:	d001      	beq.n	8000d48 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000d44:	f000 fbd8 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d48:	46c0      	nop			; (mov r8, r8)
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	46c0      	nop			; (mov r8, r8)
 8000d50:	200002b8 	.word	0x200002b8
 8000d54:	40004400 	.word	0x40004400

08000d58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b08b      	sub	sp, #44	; 0x2c
 8000d5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5e:	2414      	movs	r4, #20
 8000d60:	193b      	adds	r3, r7, r4
 8000d62:	0018      	movs	r0, r3
 8000d64:	2314      	movs	r3, #20
 8000d66:	001a      	movs	r2, r3
 8000d68:	2100      	movs	r1, #0
 8000d6a:	f007 f9f3 	bl	8008154 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6e:	4b4f      	ldr	r3, [pc, #316]	; (8000eac <MX_GPIO_Init+0x154>)
 8000d70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d72:	4b4e      	ldr	r3, [pc, #312]	; (8000eac <MX_GPIO_Init+0x154>)
 8000d74:	2104      	movs	r1, #4
 8000d76:	430a      	orrs	r2, r1
 8000d78:	635a      	str	r2, [r3, #52]	; 0x34
 8000d7a:	4b4c      	ldr	r3, [pc, #304]	; (8000eac <MX_GPIO_Init+0x154>)
 8000d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d7e:	2204      	movs	r2, #4
 8000d80:	4013      	ands	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d86:	4b49      	ldr	r3, [pc, #292]	; (8000eac <MX_GPIO_Init+0x154>)
 8000d88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d8a:	4b48      	ldr	r3, [pc, #288]	; (8000eac <MX_GPIO_Init+0x154>)
 8000d8c:	2120      	movs	r1, #32
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	635a      	str	r2, [r3, #52]	; 0x34
 8000d92:	4b46      	ldr	r3, [pc, #280]	; (8000eac <MX_GPIO_Init+0x154>)
 8000d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d96:	2220      	movs	r2, #32
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9e:	4b43      	ldr	r3, [pc, #268]	; (8000eac <MX_GPIO_Init+0x154>)
 8000da0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000da2:	4b42      	ldr	r3, [pc, #264]	; (8000eac <MX_GPIO_Init+0x154>)
 8000da4:	2101      	movs	r1, #1
 8000da6:	430a      	orrs	r2, r1
 8000da8:	635a      	str	r2, [r3, #52]	; 0x34
 8000daa:	4b40      	ldr	r3, [pc, #256]	; (8000eac <MX_GPIO_Init+0x154>)
 8000dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dae:	2201      	movs	r2, #1
 8000db0:	4013      	ands	r3, r2
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db6:	4b3d      	ldr	r3, [pc, #244]	; (8000eac <MX_GPIO_Init+0x154>)
 8000db8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dba:	4b3c      	ldr	r3, [pc, #240]	; (8000eac <MX_GPIO_Init+0x154>)
 8000dbc:	2102      	movs	r1, #2
 8000dbe:	430a      	orrs	r2, r1
 8000dc0:	635a      	str	r2, [r3, #52]	; 0x34
 8000dc2:	4b3a      	ldr	r3, [pc, #232]	; (8000eac <MX_GPIO_Init+0x154>)
 8000dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	4013      	ands	r3, r2
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000dce:	23a0      	movs	r3, #160	; 0xa0
 8000dd0:	05db      	lsls	r3, r3, #23
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2120      	movs	r1, #32
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f002 f88d 	bl	8002ef6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8000ddc:	4934      	ldr	r1, [pc, #208]	; (8000eb0 <MX_GPIO_Init+0x158>)
 8000dde:	4b35      	ldr	r3, [pc, #212]	; (8000eb4 <MX_GPIO_Init+0x15c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	0018      	movs	r0, r3
 8000de4:	f002 f887 	bl	8002ef6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000de8:	4b33      	ldr	r3, [pc, #204]	; (8000eb8 <MX_GPIO_Init+0x160>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	2180      	movs	r1, #128	; 0x80
 8000dee:	0018      	movs	r0, r3
 8000df0:	f002 f881 	bl	8002ef6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_INPUT_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_INPUT_2_Pin;
 8000df4:	193b      	adds	r3, r7, r4
 8000df6:	2280      	movs	r2, #128	; 0x80
 8000df8:	0192      	lsls	r2, r2, #6
 8000dfa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfc:	193b      	adds	r3, r7, r4
 8000dfe:	2200      	movs	r2, #0
 8000e00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e02:	193b      	adds	r3, r7, r4
 8000e04:	2201      	movs	r2, #1
 8000e06:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_INPUT_2_GPIO_Port, &GPIO_InitStruct);
 8000e08:	193b      	adds	r3, r7, r4
 8000e0a:	4a2b      	ldr	r2, [pc, #172]	; (8000eb8 <MX_GPIO_Init+0x160>)
 8000e0c:	0019      	movs	r1, r3
 8000e0e:	0010      	movs	r0, r2
 8000e10:	f001 fef0 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000e14:	193b      	adds	r3, r7, r4
 8000e16:	2220      	movs	r2, #32
 8000e18:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1a:	193b      	adds	r3, r7, r4
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	193b      	adds	r3, r7, r4
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e26:	193b      	adds	r3, r7, r4
 8000e28:	2202      	movs	r2, #2
 8000e2a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000e2c:	193a      	adds	r2, r7, r4
 8000e2e:	23a0      	movs	r3, #160	; 0xa0
 8000e30:	05db      	lsls	r3, r3, #23
 8000e32:	0011      	movs	r1, r2
 8000e34:	0018      	movs	r0, r3
 8000e36:	f001 fedd 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_2_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_3_Pin;
 8000e3a:	193b      	adds	r3, r7, r4
 8000e3c:	4a1c      	ldr	r2, [pc, #112]	; (8000eb0 <MX_GPIO_Init+0x158>)
 8000e3e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e40:	193b      	adds	r3, r7, r4
 8000e42:	2201      	movs	r2, #1
 8000e44:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	193b      	adds	r3, r7, r4
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	193b      	adds	r3, r7, r4
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e52:	193b      	adds	r3, r7, r4
 8000e54:	4a17      	ldr	r2, [pc, #92]	; (8000eb4 <MX_GPIO_Init+0x15c>)
 8000e56:	0019      	movs	r1, r3
 8000e58:	0010      	movs	r0, r2
 8000e5a:	f001 fecb 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_1_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 8000e5e:	193b      	adds	r3, r7, r4
 8000e60:	2280      	movs	r2, #128	; 0x80
 8000e62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e64:	193b      	adds	r3, r7, r4
 8000e66:	2201      	movs	r2, #1
 8000e68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	193b      	adds	r3, r7, r4
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e70:	193b      	adds	r3, r7, r4
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8000e76:	193b      	adds	r3, r7, r4
 8000e78:	4a0f      	ldr	r2, [pc, #60]	; (8000eb8 <MX_GPIO_Init+0x160>)
 8000e7a:	0019      	movs	r1, r3
 8000e7c:	0010      	movs	r0, r2
 8000e7e:	f001 feb9 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_INPUT_Pin */
  GPIO_InitStruct.Pin = BUTTON_INPUT_Pin;
 8000e82:	0021      	movs	r1, r4
 8000e84:	187b      	adds	r3, r7, r1
 8000e86:	2208      	movs	r2, #8
 8000e88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e8a:	187b      	adds	r3, r7, r1
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	187b      	adds	r3, r7, r1
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_INPUT_GPIO_Port, &GPIO_InitStruct);
 8000e96:	187b      	adds	r3, r7, r1
 8000e98:	4a06      	ldr	r2, [pc, #24]	; (8000eb4 <MX_GPIO_Init+0x15c>)
 8000e9a:	0019      	movs	r1, r3
 8000e9c:	0010      	movs	r0, r2
 8000e9e:	f001 fea9 	bl	8002bf4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	b00b      	add	sp, #44	; 0x2c
 8000ea8:	bd90      	pop	{r4, r7, pc}
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	00004010 	.word	0x00004010
 8000eb4:	50000400 	.word	0x50000400
 8000eb8:	50000800 	.word	0x50000800

08000ebc <getPotValue>:
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
		HAL_Delay(100);
	}

	/* Get ADC value from potentiometer */
	void getPotValue(void){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0

		/* Get pot value */
		HAL_ADC_PollForConversion(&hadc1, 5);
 8000ec0:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <getPotValue+0x24>)
 8000ec2:	2105      	movs	r1, #5
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f001 f975 	bl	80021b4 <HAL_ADC_PollForConversion>
		potValue = HAL_ADC_GetValue(&hadc1);
 8000eca:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <getPotValue+0x24>)
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f001 fa7d 	bl	80023cc <HAL_ADC_GetValue>
 8000ed2:	0003      	movs	r3, r0
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <getPotValue+0x28>)
 8000ed8:	801a      	strh	r2, [r3, #0]

		/* Debug */
		//sprintf(msg, "potValue: %hu\r\n", potValue);
		//HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
	}
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000084 	.word	0x20000084
 8000ee4:	200003a6 	.word	0x200003a6

08000ee8 <getAdcFromPot>:

	/* getADC from Pot */
	int getAdcFromPot(){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
		/* Get pot value */
		uint16_t potValue;
		HAL_ADC_PollForConversion(&hadc1, 5);
 8000eee:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <getAdcFromPot+0x2c>)
 8000ef0:	2105      	movs	r1, #5
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f001 f95e 	bl	80021b4 <HAL_ADC_PollForConversion>
		potValue = HAL_ADC_GetValue(&hadc1);
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <getAdcFromPot+0x2c>)
 8000efa:	0018      	movs	r0, r3
 8000efc:	f001 fa66 	bl	80023cc <HAL_ADC_GetValue>
 8000f00:	0002      	movs	r2, r0
 8000f02:	1dbb      	adds	r3, r7, #6
 8000f04:	801a      	strh	r2, [r3, #0]
		return potValue;
 8000f06:	1dbb      	adds	r3, r7, #6
 8000f08:	881b      	ldrh	r3, [r3, #0]
	}
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b002      	add	sp, #8
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	20000084 	.word	0x20000084

08000f18 <hardwareTestLCD>:
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
	 	}
	}

	/* Test LCD is working */
	void hardwareTestLCD(void){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
		I2C_LCD_Init(MyI2C_LCD);
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f006 ff7d 	bl	8007e1c <I2C_LCD_Init>
		I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2100      	movs	r1, #0
 8000f26:	2000      	movs	r0, #0
 8000f28:	f007 f888 	bl	800803c <I2C_LCD_SetCursor>
		I2C_LCD_WriteString(MyI2C_LCD, "Hardware Test");
 8000f2c:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <hardwareTestLCD+0x38>)
 8000f2e:	0019      	movs	r1, r3
 8000f30:	2000      	movs	r0, #0
 8000f32:	f007 f8d3 	bl	80080dc <I2C_LCD_WriteString>
		I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 8000f36:	2201      	movs	r2, #1
 8000f38:	2100      	movs	r1, #0
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	f007 f87e 	bl	800803c <I2C_LCD_SetCursor>
		I2C_LCD_WriteString(MyI2C_LCD, "Meow");
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <hardwareTestLCD+0x3c>)
 8000f42:	0019      	movs	r1, r3
 8000f44:	2000      	movs	r0, #0
 8000f46:	f007 f8c9 	bl	80080dc <I2C_LCD_WriteString>
	}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	08008aa0 	.word	0x08008aa0
 8000f54:	08008ab0 	.word	0x08008ab0

08000f58 <motorControl>:

	/* Motor control */
	void motorControl(int adcValue){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SET_COMPARE (&htim3, TIM_CHANNEL_1, adcValue); // Interpolate pot values to PWM range
 8000f60:	4b03      	ldr	r3, [pc, #12]	; (8000f70 <motorControl+0x18>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	635a      	str	r2, [r3, #52]	; 0x34
	}
 8000f68:	46c0      	nop			; (mov r8, r8)
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	b002      	add	sp, #8
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000188 	.word	0x20000188

08000f74 <myMap>:

	/* Mapping function */
	 int myMap(int x, int in_min, int in_max, int out_min, int out_max){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
 8000f80:	603b      	str	r3, [r7, #0]
		 return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	69b9      	ldr	r1, [r7, #24]
 8000f8a:	683a      	ldr	r2, [r7, #0]
 8000f8c:	1a8a      	subs	r2, r1, r2
 8000f8e:	435a      	muls	r2, r3
 8000f90:	0010      	movs	r0, r2
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	0019      	movs	r1, r3
 8000f9a:	f7ff f959 	bl	8000250 <__divsi3>
 8000f9e:	0003      	movs	r3, r0
 8000fa0:	001a      	movs	r2, r3
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	18d3      	adds	r3, r2, r3
	 }
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	b004      	add	sp, #16
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <stateMachineController>:

	 /* State Machine Controller */
	 // Description: Determines which state the program will execute.
	 //  Input:		 Integer corresponding to state (1 = A, 2 = B, 3 = C)
	 void stateMachineController(int state){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

		 switch(state){
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b03      	cmp	r3, #3
 8000fbc:	d015      	beq.n	8000fea <stateMachineController+0x3a>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b03      	cmp	r3, #3
 8000fc2:	dc2d      	bgt.n	8001020 <stateMachineController+0x70>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d003      	beq.n	8000fd2 <stateMachineController+0x22>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d009      	beq.n	8000fe4 <stateMachineController+0x34>
				 ledTwoFlag = 1;

				 stateHandlerC();
				 break;
		 }
	 }
 8000fd0:	e026      	b.n	8001020 <stateMachineController+0x70>
				 ledOneFlag = 1;
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <stateMachineController+0x78>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	601a      	str	r2, [r3, #0]
				 ledTwoFlag = 1;
 8000fd8:	4b14      	ldr	r3, [pc, #80]	; (800102c <stateMachineController+0x7c>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	601a      	str	r2, [r3, #0]
				 stateHandlerA();
 8000fde:	f000 f8ad 	bl	800113c <stateHandlerA>
				 break;
 8000fe2:	e01d      	b.n	8001020 <stateMachineController+0x70>
				 stateHandlerB();
 8000fe4:	f000 f8e8 	bl	80011b8 <stateHandlerB>
				 break;
 8000fe8:	e01a      	b.n	8001020 <stateMachineController+0x70>
				 sprintf(msg, "Executing C.\n\r");
 8000fea:	4a11      	ldr	r2, [pc, #68]	; (8001030 <stateMachineController+0x80>)
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <stateMachineController+0x84>)
 8000fee:	0011      	movs	r1, r2
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	f007 f88f 	bl	8008114 <siprintf>
				 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <stateMachineController+0x84>)
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f7ff f88d 	bl	8000118 <strlen>
 8000ffe:	0003      	movs	r3, r0
 8001000:	b29a      	uxth	r2, r3
 8001002:	2301      	movs	r3, #1
 8001004:	425b      	negs	r3, r3
 8001006:	490b      	ldr	r1, [pc, #44]	; (8001034 <stateMachineController+0x84>)
 8001008:	480b      	ldr	r0, [pc, #44]	; (8001038 <stateMachineController+0x88>)
 800100a:	f004 fd05 	bl	8005a18 <HAL_UART_Transmit>
				 ledOneFlag = 1;
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <stateMachineController+0x78>)
 8001010:	2201      	movs	r2, #1
 8001012:	601a      	str	r2, [r3, #0]
				 ledTwoFlag = 1;
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <stateMachineController+0x7c>)
 8001016:	2201      	movs	r2, #1
 8001018:	601a      	str	r2, [r3, #0]
				 stateHandlerC();
 800101a:	f000 f957 	bl	80012cc <stateHandlerC>
				 break;
 800101e:	46c0      	nop			; (mov r8, r8)
	 }
 8001020:	46c0      	nop			; (mov r8, r8)
 8001022:	46bd      	mov	sp, r7
 8001024:	b002      	add	sp, #8
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000004 	.word	0x20000004
 800102c:	20000008 	.word	0x20000008
 8001030:	08008ab8 	.word	0x08008ab8
 8001034:	2000034c 	.word	0x2000034c
 8001038:	200002b8 	.word	0x200002b8

0800103c <stateMachineDecider>:

	 /* State Machine Controller */
	 // Description: Monitors button pushes to update current state value.
	 void stateMachineDecider(){
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
		 // Go to State B if it is State A
		 if (HAL_GPIO_ReadPin(BUTTON_INPUT_GPIO_Port, BUTTON_INPUT_Pin) && stateTracker == 1){
 8001040:	4b36      	ldr	r3, [pc, #216]	; (800111c <stateMachineDecider+0xe0>)
 8001042:	2108      	movs	r1, #8
 8001044:	0018      	movs	r0, r3
 8001046:	f001 ff39 	bl	8002ebc <HAL_GPIO_ReadPin>
 800104a:	1e03      	subs	r3, r0, #0
 800104c:	d01c      	beq.n	8001088 <stateMachineDecider+0x4c>
 800104e:	4b34      	ldr	r3, [pc, #208]	; (8001120 <stateMachineDecider+0xe4>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d118      	bne.n	8001088 <stateMachineDecider+0x4c>

			 // Debug message
			 sprintf(msg, "Going to State B.\n\r");
 8001056:	4a33      	ldr	r2, [pc, #204]	; (8001124 <stateMachineDecider+0xe8>)
 8001058:	4b33      	ldr	r3, [pc, #204]	; (8001128 <stateMachineDecider+0xec>)
 800105a:	0011      	movs	r1, r2
 800105c:	0018      	movs	r0, r3
 800105e:	f007 f859 	bl	8008114 <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001062:	4b31      	ldr	r3, [pc, #196]	; (8001128 <stateMachineDecider+0xec>)
 8001064:	0018      	movs	r0, r3
 8001066:	f7ff f857 	bl	8000118 <strlen>
 800106a:	0003      	movs	r3, r0
 800106c:	b29a      	uxth	r2, r3
 800106e:	2301      	movs	r3, #1
 8001070:	425b      	negs	r3, r3
 8001072:	492d      	ldr	r1, [pc, #180]	; (8001128 <stateMachineDecider+0xec>)
 8001074:	482d      	ldr	r0, [pc, #180]	; (800112c <stateMachineDecider+0xf0>)
 8001076:	f004 fccf 	bl	8005a18 <HAL_UART_Transmit>

			 // Clear LCD
			 I2C_LCD_Clear(MyI2C_LCD);
 800107a:	2000      	movs	r0, #0
 800107c:	f006 ff9a 	bl	8007fb4 <I2C_LCD_Clear>

			 // Go to State B
			 stateTracker = 2;
 8001080:	4b27      	ldr	r3, [pc, #156]	; (8001120 <stateMachineDecider+0xe4>)
 8001082:	2202      	movs	r2, #2
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	e046      	b.n	8001116 <stateMachineDecider+0xda>

		 // Go to State A if it is State B
		 } else if (HAL_GPIO_ReadPin(BUTTON_INPUT_GPIO_Port, BUTTON_INPUT_Pin) && stateTracker == 2){
 8001088:	4b24      	ldr	r3, [pc, #144]	; (800111c <stateMachineDecider+0xe0>)
 800108a:	2108      	movs	r1, #8
 800108c:	0018      	movs	r0, r3
 800108e:	f001 ff15 	bl	8002ebc <HAL_GPIO_ReadPin>
 8001092:	1e03      	subs	r3, r0, #0
 8001094:	d01c      	beq.n	80010d0 <stateMachineDecider+0x94>
 8001096:	4b22      	ldr	r3, [pc, #136]	; (8001120 <stateMachineDecider+0xe4>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2b02      	cmp	r3, #2
 800109c:	d118      	bne.n	80010d0 <stateMachineDecider+0x94>

			 // Debug message
			 sprintf(msg, "Going to State A.\n\r");
 800109e:	4a24      	ldr	r2, [pc, #144]	; (8001130 <stateMachineDecider+0xf4>)
 80010a0:	4b21      	ldr	r3, [pc, #132]	; (8001128 <stateMachineDecider+0xec>)
 80010a2:	0011      	movs	r1, r2
 80010a4:	0018      	movs	r0, r3
 80010a6:	f007 f835 	bl	8008114 <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80010aa:	4b1f      	ldr	r3, [pc, #124]	; (8001128 <stateMachineDecider+0xec>)
 80010ac:	0018      	movs	r0, r3
 80010ae:	f7ff f833 	bl	8000118 <strlen>
 80010b2:	0003      	movs	r3, r0
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	2301      	movs	r3, #1
 80010b8:	425b      	negs	r3, r3
 80010ba:	491b      	ldr	r1, [pc, #108]	; (8001128 <stateMachineDecider+0xec>)
 80010bc:	481b      	ldr	r0, [pc, #108]	; (800112c <stateMachineDecider+0xf0>)
 80010be:	f004 fcab 	bl	8005a18 <HAL_UART_Transmit>

			 // Clear LCD
			 I2C_LCD_Clear(MyI2C_LCD);
 80010c2:	2000      	movs	r0, #0
 80010c4:	f006 ff76 	bl	8007fb4 <I2C_LCD_Clear>

			 // Stay in State A
			 stateTracker = 1;
 80010c8:	4b15      	ldr	r3, [pc, #84]	; (8001120 <stateMachineDecider+0xe4>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	e022      	b.n	8001116 <stateMachineDecider+0xda>

		// Button 2 pressed (State C)
		 } else if (!HAL_GPIO_ReadPin(BUTTON_INPUT_2_GPIO_Port, BUTTON_INPUT_2_Pin) && stateTracker == 1){
 80010d0:	2380      	movs	r3, #128	; 0x80
 80010d2:	019b      	lsls	r3, r3, #6
 80010d4:	4a17      	ldr	r2, [pc, #92]	; (8001134 <stateMachineDecider+0xf8>)
 80010d6:	0019      	movs	r1, r3
 80010d8:	0010      	movs	r0, r2
 80010da:	f001 feef 	bl	8002ebc <HAL_GPIO_ReadPin>
 80010de:	1e03      	subs	r3, r0, #0
 80010e0:	d119      	bne.n	8001116 <stateMachineDecider+0xda>
 80010e2:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <stateMachineDecider+0xe4>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d115      	bne.n	8001116 <stateMachineDecider+0xda>

			 // Debug message
			 sprintf(msg, "Going to State C.\n\r");
 80010ea:	4a13      	ldr	r2, [pc, #76]	; (8001138 <stateMachineDecider+0xfc>)
 80010ec:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <stateMachineDecider+0xec>)
 80010ee:	0011      	movs	r1, r2
 80010f0:	0018      	movs	r0, r3
 80010f2:	f007 f80f 	bl	8008114 <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <stateMachineDecider+0xec>)
 80010f8:	0018      	movs	r0, r3
 80010fa:	f7ff f80d 	bl	8000118 <strlen>
 80010fe:	0003      	movs	r3, r0
 8001100:	b29a      	uxth	r2, r3
 8001102:	2301      	movs	r3, #1
 8001104:	425b      	negs	r3, r3
 8001106:	4908      	ldr	r1, [pc, #32]	; (8001128 <stateMachineDecider+0xec>)
 8001108:	4808      	ldr	r0, [pc, #32]	; (800112c <stateMachineDecider+0xf0>)
 800110a:	f004 fc85 	bl	8005a18 <HAL_UART_Transmit>

			 // Go to State C
			 stateTracker = 3;
 800110e:	4b04      	ldr	r3, [pc, #16]	; (8001120 <stateMachineDecider+0xe4>)
 8001110:	2203      	movs	r2, #3
 8001112:	601a      	str	r2, [r3, #0]
		 }
	 }
 8001114:	e7ff      	b.n	8001116 <stateMachineDecider+0xda>
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	50000400 	.word	0x50000400
 8001120:	200003a8 	.word	0x200003a8
 8001124:	08008ac8 	.word	0x08008ac8
 8001128:	2000034c 	.word	0x2000034c
 800112c:	200002b8 	.word	0x200002b8
 8001130:	08008adc 	.word	0x08008adc
 8001134:	50000800 	.word	0x50000800
 8001138:	08008af0 	.word	0x08008af0

0800113c <stateHandlerA>:

	 /* State Handler A */
	 void stateHandlerA(void){
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af02      	add	r7, sp, #8
		 // LCD Control
		 I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	2100      	movs	r1, #0
 8001146:	2000      	movs	r0, #0
 8001148:	f006 ff78 	bl	800803c <I2C_LCD_SetCursor>
		 I2C_LCD_WriteString(MyI2C_LCD, "SID: 24429298");
 800114c:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <stateHandlerA+0x68>)
 800114e:	0019      	movs	r1, r3
 8001150:	2000      	movs	r0, #0
 8001152:	f006 ffc3 	bl	80080dc <I2C_LCD_WriteString>
		 I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 8001156:	2201      	movs	r2, #1
 8001158:	2100      	movs	r1, #0
 800115a:	2000      	movs	r0, #0
 800115c:	f006 ff6e 	bl	800803c <I2C_LCD_SetCursor>
		 I2C_LCD_WriteString(MyI2C_LCD, "Mechatronics 1");
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <stateHandlerA+0x6c>)
 8001162:	0019      	movs	r1, r3
 8001164:	2000      	movs	r0, #0
 8001166:	f006 ffb9 	bl	80080dc <I2C_LCD_WriteString>

		 // Get potentiometer value
		 HAL_ADC_Start_IT(&hadc1);	// Start conversion after each ADC cycle
 800116a:	4b10      	ldr	r3, [pc, #64]	; (80011ac <stateHandlerA+0x70>)
 800116c:	0018      	movs	r0, r3
 800116e:	f001 f8b5 	bl	80022dc <HAL_ADC_Start_IT>
		 getPotValue();
 8001172:	f7ff fea3 	bl	8000ebc <getPotValue>

		 // Motor control
		 int servoAngle = myMap(getAdcFromPot(), 60, 4095, 0, 180);
 8001176:	f7ff feb7 	bl	8000ee8 <getAdcFromPot>
 800117a:	4a0d      	ldr	r2, [pc, #52]	; (80011b0 <stateHandlerA+0x74>)
 800117c:	23b4      	movs	r3, #180	; 0xb4
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2300      	movs	r3, #0
 8001182:	213c      	movs	r1, #60	; 0x3c
 8001184:	f7ff fef6 	bl	8000f74 <myMap>
 8001188:	0003      	movs	r3, r0
 800118a:	607b      	str	r3, [r7, #4]
		 motorControl(servoAngle);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	0018      	movs	r0, r3
 8001190:	f7ff fee2 	bl	8000f58 <motorControl>

		 // No button pushes - Stay in State A
		 stateTracker = 1;
 8001194:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <stateHandlerA+0x78>)
 8001196:	2201      	movs	r2, #1
 8001198:	601a      	str	r2, [r3, #0]
	 }
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	46bd      	mov	sp, r7
 800119e:	b002      	add	sp, #8
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	08008b04 	.word	0x08008b04
 80011a8:	08008b14 	.word	0x08008b14
 80011ac:	20000084 	.word	0x20000084
 80011b0:	00000fff 	.word	0x00000fff
 80011b4:	200003a8 	.word	0x200003a8

080011b8 <stateHandlerB>:

	 /* State Handler B */
	 void stateHandlerB(void){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af02      	add	r7, sp, #8

		 // State B is initially called
		 if (ledOneFlag == 1 && ledTwoFlag == 1){
 80011be:	4b37      	ldr	r3, [pc, #220]	; (800129c <stateHandlerB+0xe4>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d109      	bne.n	80011da <stateHandlerB+0x22>
 80011c6:	4b36      	ldr	r3, [pc, #216]	; (80012a0 <stateHandlerB+0xe8>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d105      	bne.n	80011da <stateHandlerB+0x22>
			 ledOneFlag = 1;
 80011ce:	4b33      	ldr	r3, [pc, #204]	; (800129c <stateHandlerB+0xe4>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	601a      	str	r2, [r3, #0]
			 ledTwoFlag = 0;
 80011d4:	4b32      	ldr	r3, [pc, #200]	; (80012a0 <stateHandlerB+0xe8>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
		 }

		 // LCD Control
		 I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	2000      	movs	r0, #0
 80011e0:	f006 ff2c 	bl	800803c <I2C_LCD_SetCursor>
		 I2C_LCD_WriteString(MyI2C_LCD, "ADC: ");
 80011e4:	4b2f      	ldr	r3, [pc, #188]	; (80012a4 <stateHandlerB+0xec>)
 80011e6:	0019      	movs	r1, r3
 80011e8:	2000      	movs	r0, #0
 80011ea:	f006 ff77 	bl	80080dc <I2C_LCD_WriteString>
		 sprintf(msg2, "%hu", potValue);
 80011ee:	4b2e      	ldr	r3, [pc, #184]	; (80012a8 <stateHandlerB+0xf0>)
 80011f0:	881b      	ldrh	r3, [r3, #0]
 80011f2:	001a      	movs	r2, r3
 80011f4:	492d      	ldr	r1, [pc, #180]	; (80012ac <stateHandlerB+0xf4>)
 80011f6:	4b2e      	ldr	r3, [pc, #184]	; (80012b0 <stateHandlerB+0xf8>)
 80011f8:	0018      	movs	r0, r3
 80011fa:	f006 ff8b 	bl	8008114 <siprintf>
		 I2C_LCD_WriteString(MyI2C_LCD, msg2);
 80011fe:	4b2c      	ldr	r3, [pc, #176]	; (80012b0 <stateHandlerB+0xf8>)
 8001200:	0019      	movs	r1, r3
 8001202:	2000      	movs	r0, #0
 8001204:	f006 ff6a 	bl	80080dc <I2C_LCD_WriteString>
		 I2C_LCD_WriteString(MyI2C_LCD, " State B");
 8001208:	4b2a      	ldr	r3, [pc, #168]	; (80012b4 <stateHandlerB+0xfc>)
 800120a:	0019      	movs	r1, r3
 800120c:	2000      	movs	r0, #0
 800120e:	f006 ff65 	bl	80080dc <I2C_LCD_WriteString>
		 I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 8001212:	2201      	movs	r2, #1
 8001214:	2100      	movs	r1, #0
 8001216:	2000      	movs	r0, #0
 8001218:	f006 ff10 	bl	800803c <I2C_LCD_SetCursor>
		 I2C_LCD_WriteString(MyI2C_LCD, "Mechatronics 1");
 800121c:	4b26      	ldr	r3, [pc, #152]	; (80012b8 <stateHandlerB+0x100>)
 800121e:	0019      	movs	r1, r3
 8001220:	2000      	movs	r0, #0
 8001222:	f006 ff5b 	bl	80080dc <I2C_LCD_WriteString>

		 // Get potentiometer value
		 HAL_ADC_Start_IT(&hadc1);	// Start conversion after each ADC cycle
 8001226:	4b25      	ldr	r3, [pc, #148]	; (80012bc <stateHandlerB+0x104>)
 8001228:	0018      	movs	r0, r3
 800122a:	f001 f857 	bl	80022dc <HAL_ADC_Start_IT>
		 getPotValue();
 800122e:	f7ff fe45 	bl	8000ebc <getPotValue>

		 // Motor control
		 int servoAngle = myMap(getAdcFromPot(), 60, 4095, 0, 180);
 8001232:	f7ff fe59 	bl	8000ee8 <getAdcFromPot>
 8001236:	4a22      	ldr	r2, [pc, #136]	; (80012c0 <stateHandlerB+0x108>)
 8001238:	23b4      	movs	r3, #180	; 0xb4
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	2300      	movs	r3, #0
 800123e:	213c      	movs	r1, #60	; 0x3c
 8001240:	f7ff fe98 	bl	8000f74 <myMap>
 8001244:	0003      	movs	r3, r0
 8001246:	607b      	str	r3, [r7, #4]
		 motorControl(servoAngle);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	0018      	movs	r0, r3
 800124c:	f7ff fe84 	bl	8000f58 <motorControl>
		 // adc towards 5v = 1hz

		 // LED1 and LED2 toggle
		 // B1 pressed = Turn off
		 // B1 not pressed = Turn on, blink at 1 Hz (Modify PSC)
		 if (!HAL_GPIO_ReadPin(BUTTON_INPUT_2_GPIO_Port, BUTTON_INPUT_2_Pin)){
 8001250:	2380      	movs	r3, #128	; 0x80
 8001252:	019b      	lsls	r3, r3, #6
 8001254:	4a1b      	ldr	r2, [pc, #108]	; (80012c4 <stateHandlerB+0x10c>)
 8001256:	0019      	movs	r1, r3
 8001258:	0010      	movs	r0, r2
 800125a:	f001 fe2f 	bl	8002ebc <HAL_GPIO_ReadPin>
 800125e:	1e03      	subs	r3, r0, #0
 8001260:	d114      	bne.n	800128c <stateHandlerB+0xd4>

			 // If LED1 is on, swap with LED2
			 if (ledOneFlag == 1){
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <stateHandlerB+0xe4>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d106      	bne.n	8001278 <stateHandlerB+0xc0>
				 ledOneFlag = 0;
 800126a:	4b0c      	ldr	r3, [pc, #48]	; (800129c <stateHandlerB+0xe4>)
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
				 ledTwoFlag = 1;
 8001270:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <stateHandlerB+0xe8>)
 8001272:	2201      	movs	r2, #1
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	e009      	b.n	800128c <stateHandlerB+0xd4>

			// If LED2 is on, swap with LED1
			 } else if (ledTwoFlag == 1){
 8001278:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <stateHandlerB+0xe8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d105      	bne.n	800128c <stateHandlerB+0xd4>
				 ledTwoFlag = 0;
 8001280:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <stateHandlerB+0xe8>)
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
				 ledOneFlag = 1;
 8001286:	4b05      	ldr	r3, [pc, #20]	; (800129c <stateHandlerB+0xe4>)
 8001288:	2201      	movs	r2, #1
 800128a:	601a      	str	r2, [r3, #0]
			 }
		 }

		 // No button pushes - Stay in State B
		 stateTracker = 2;
 800128c:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <stateHandlerB+0x110>)
 800128e:	2202      	movs	r2, #2
 8001290:	601a      	str	r2, [r3, #0]
	 }
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	46bd      	mov	sp, r7
 8001296:	b002      	add	sp, #8
 8001298:	bd80      	pop	{r7, pc}
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	20000004 	.word	0x20000004
 80012a0:	20000008 	.word	0x20000008
 80012a4:	08008b24 	.word	0x08008b24
 80012a8:	200003a6 	.word	0x200003a6
 80012ac:	08008b2c 	.word	0x08008b2c
 80012b0:	20000364 	.word	0x20000364
 80012b4:	08008b30 	.word	0x08008b30
 80012b8:	08008b14 	.word	0x08008b14
 80012bc:	20000084 	.word	0x20000084
 80012c0:	00000fff 	.word	0x00000fff
 80012c4:	50000800 	.word	0x50000800
 80012c8:	200003a8 	.word	0x200003a8

080012cc <stateHandlerC>:

	 /* State Handler C */
	 void stateHandlerC(void){
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0

		 // Test function to show State C. State C functionality yet to be added.
		 HAL_Delay(2000);
 80012d0:	23fa      	movs	r3, #250	; 0xfa
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	0018      	movs	r0, r3
 80012d6:	f000 fc55 	bl	8001b84 <HAL_Delay>
		 // Set pin to toggle output based on TIM with frequency 1 Hz
		 // Cycle for 3 seconds
		 // Turn back into UART (tx)

		 // Return to State A
		 stateTracker = 1;
 80012da:	4b03      	ldr	r3, [pc, #12]	; (80012e8 <stateHandlerC+0x1c>)
 80012dc:	2201      	movs	r2, #1
 80012de:	601a      	str	r2, [r3, #0]
	 }
 80012e0:	46c0      	nop			; (mov r8, r8)
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	46c0      	nop			; (mov r8, r8)
 80012e8:	200003a8 	.word	0x200003a8

080012ec <HAL_TIM_PeriodElapsedCallback>:

	 /* Controller Function for LED1, LED2 and LED3*/
	 // Description: Frequency currently determined by each timer's PSC value.
	 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]

		 // TIM2 controls LED1
		 if(htim->Instance == TIM2){
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	05db      	lsls	r3, r3, #23
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d109      	bne.n	8001314 <HAL_TIM_PeriodElapsedCallback+0x28>
			 if (ledOneFlag == 1){
 8001300:	4b25      	ldr	r3, [pc, #148]	; (8001398 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d142      	bne.n	800138e <HAL_TIM_PeriodElapsedCallback+0xa2>
				 HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8001308:	4b24      	ldr	r3, [pc, #144]	; (800139c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800130a:	2180      	movs	r1, #128	; 0x80
 800130c:	0018      	movs	r0, r3
 800130e:	f001 fe0f 	bl	8002f30 <HAL_GPIO_TogglePin>
				 }
			 } else if (stateTracker == 2){
				 ; // UART do nothing
			 }
		 }
	 }
 8001312:	e03c      	b.n	800138e <HAL_TIM_PeriodElapsedCallback+0xa2>
		 } else if(htim->Instance == TIM6){
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a21      	ldr	r2, [pc, #132]	; (80013a0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d10b      	bne.n	8001336 <HAL_TIM_PeriodElapsedCallback+0x4a>
			 if (ledTwoFlag == 1) {
 800131e:	4b21      	ldr	r3, [pc, #132]	; (80013a4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d133      	bne.n	800138e <HAL_TIM_PeriodElapsedCallback+0xa2>
				 HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8001326:	2380      	movs	r3, #128	; 0x80
 8001328:	01db      	lsls	r3, r3, #7
 800132a:	4a1f      	ldr	r2, [pc, #124]	; (80013a8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800132c:	0019      	movs	r1, r3
 800132e:	0010      	movs	r0, r2
 8001330:	f001 fdfe 	bl	8002f30 <HAL_GPIO_TogglePin>
	 }
 8001334:	e02b      	b.n	800138e <HAL_TIM_PeriodElapsedCallback+0xa2>
		 } else if(htim->Instance == TIM7){
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a1c      	ldr	r2, [pc, #112]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d105      	bne.n	800134c <HAL_TIM_PeriodElapsedCallback+0x60>
			 HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 8001340:	4b19      	ldr	r3, [pc, #100]	; (80013a8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001342:	2110      	movs	r1, #16
 8001344:	0018      	movs	r0, r3
 8001346:	f001 fdf3 	bl	8002f30 <HAL_GPIO_TogglePin>
	 }
 800134a:	e020      	b.n	800138e <HAL_TIM_PeriodElapsedCallback+0xa2>
		 } else if(htim->Instance == TIM14){
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a17      	ldr	r2, [pc, #92]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d11b      	bne.n	800138e <HAL_TIM_PeriodElapsedCallback+0xa2>
			 if (stateTracker == 1){
 8001356:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d117      	bne.n	800138e <HAL_TIM_PeriodElapsedCallback+0xa2>
				 if (uartFlag == 1){
 800135e:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d113      	bne.n	800138e <HAL_TIM_PeriodElapsedCallback+0xa2>
					 sprintf(msg2, "Autumn2024 MX1 SID: 24429298, ADC Reading: %hu\r\n", potValue);
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	001a      	movs	r2, r3
 800136c:	4914      	ldr	r1, [pc, #80]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001370:	0018      	movs	r0, r3
 8001372:	f006 fecf 	bl	8008114 <siprintf>
					 HAL_UART_Transmit(&huart2, (uint8_t*) msg2, strlen(msg2), HAL_MAX_DELAY);
 8001376:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001378:	0018      	movs	r0, r3
 800137a:	f7fe fecd 	bl	8000118 <strlen>
 800137e:	0003      	movs	r3, r0
 8001380:	b29a      	uxth	r2, r3
 8001382:	2301      	movs	r3, #1
 8001384:	425b      	negs	r3, r3
 8001386:	490f      	ldr	r1, [pc, #60]	; (80013c4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001388:	480f      	ldr	r0, [pc, #60]	; (80013c8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800138a:	f004 fb45 	bl	8005a18 <HAL_UART_Transmit>
	 }
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	46bd      	mov	sp, r7
 8001392:	b002      	add	sp, #8
 8001394:	bd80      	pop	{r7, pc}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	20000004 	.word	0x20000004
 800139c:	50000800 	.word	0x50000800
 80013a0:	40001000 	.word	0x40001000
 80013a4:	20000008 	.word	0x20000008
 80013a8:	50000400 	.word	0x50000400
 80013ac:	40001400 	.word	0x40001400
 80013b0:	40002000 	.word	0x40002000
 80013b4:	200003a8 	.word	0x200003a8
 80013b8:	20000000 	.word	0x20000000
 80013bc:	200003a6 	.word	0x200003a6
 80013c0:	08008b3c 	.word	0x08008b3c
 80013c4:	20000364 	.word	0x20000364
 80013c8:	200002b8 	.word	0x200002b8

080013cc <HAL_UART_RxCpltCallback>:

	 /* UART Receive Interrupt Handler */
	 // Handles receiving of bytes
	 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]

		 sprintf(msg, "Value Received: %s\r\n", msgRx);
 80013d4:	4a3d      	ldr	r2, [pc, #244]	; (80014cc <HAL_UART_RxCpltCallback+0x100>)
 80013d6:	493e      	ldr	r1, [pc, #248]	; (80014d0 <HAL_UART_RxCpltCallback+0x104>)
 80013d8:	4b3e      	ldr	r3, [pc, #248]	; (80014d4 <HAL_UART_RxCpltCallback+0x108>)
 80013da:	0018      	movs	r0, r3
 80013dc:	f006 fe9a 	bl	8008114 <siprintf>
		 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80013e0:	4b3c      	ldr	r3, [pc, #240]	; (80014d4 <HAL_UART_RxCpltCallback+0x108>)
 80013e2:	0018      	movs	r0, r3
 80013e4:	f7fe fe98 	bl	8000118 <strlen>
 80013e8:	0003      	movs	r3, r0
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	2301      	movs	r3, #1
 80013ee:	425b      	negs	r3, r3
 80013f0:	4938      	ldr	r1, [pc, #224]	; (80014d4 <HAL_UART_RxCpltCallback+0x108>)
 80013f2:	4839      	ldr	r0, [pc, #228]	; (80014d8 <HAL_UART_RxCpltCallback+0x10c>)
 80013f4:	f004 fb10 	bl	8005a18 <HAL_UART_Transmit>

		 if (strcmp(msgRx,"j") == 0) {
 80013f8:	4a38      	ldr	r2, [pc, #224]	; (80014dc <HAL_UART_RxCpltCallback+0x110>)
 80013fa:	4b34      	ldr	r3, [pc, #208]	; (80014cc <HAL_UART_RxCpltCallback+0x100>)
 80013fc:	0011      	movs	r1, r2
 80013fe:	0018      	movs	r0, r3
 8001400:	f7fe fe80 	bl	8000104 <strcmp>
 8001404:	1e03      	subs	r3, r0, #0
 8001406:	d14a      	bne.n	800149e <HAL_UART_RxCpltCallback+0xd2>
			 if (stateTracker == 1){
 8001408:	4b35      	ldr	r3, [pc, #212]	; (80014e0 <HAL_UART_RxCpltCallback+0x114>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d133      	bne.n	8001478 <HAL_UART_RxCpltCallback+0xac>

				if (uartFlag == 0){
 8001410:	4b34      	ldr	r3, [pc, #208]	; (80014e4 <HAL_UART_RxCpltCallback+0x118>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d115      	bne.n	8001444 <HAL_UART_RxCpltCallback+0x78>
					sprintf(msg, "Turning ON UART.\r\n");
 8001418:	4a33      	ldr	r2, [pc, #204]	; (80014e8 <HAL_UART_RxCpltCallback+0x11c>)
 800141a:	4b2e      	ldr	r3, [pc, #184]	; (80014d4 <HAL_UART_RxCpltCallback+0x108>)
 800141c:	0011      	movs	r1, r2
 800141e:	0018      	movs	r0, r3
 8001420:	f006 fe78 	bl	8008114 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001424:	4b2b      	ldr	r3, [pc, #172]	; (80014d4 <HAL_UART_RxCpltCallback+0x108>)
 8001426:	0018      	movs	r0, r3
 8001428:	f7fe fe76 	bl	8000118 <strlen>
 800142c:	0003      	movs	r3, r0
 800142e:	b29a      	uxth	r2, r3
 8001430:	2301      	movs	r3, #1
 8001432:	425b      	negs	r3, r3
 8001434:	4927      	ldr	r1, [pc, #156]	; (80014d4 <HAL_UART_RxCpltCallback+0x108>)
 8001436:	4828      	ldr	r0, [pc, #160]	; (80014d8 <HAL_UART_RxCpltCallback+0x10c>)
 8001438:	f004 faee 	bl	8005a18 <HAL_UART_Transmit>
					uartFlag = 1;
 800143c:	4b29      	ldr	r3, [pc, #164]	; (80014e4 <HAL_UART_RxCpltCallback+0x118>)
 800143e:	2201      	movs	r2, #1
 8001440:	601a      	str	r2, [r3, #0]
			 }
		 } else {
			 sprintf(msg, "Incorrect key.\r\n");
			 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
		 }
	 }
 8001442:	e03e      	b.n	80014c2 <HAL_UART_RxCpltCallback+0xf6>
				} else if (uartFlag == 1) {
 8001444:	4b27      	ldr	r3, [pc, #156]	; (80014e4 <HAL_UART_RxCpltCallback+0x118>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d13a      	bne.n	80014c2 <HAL_UART_RxCpltCallback+0xf6>
					sprintf(msg, "Turning OFF UART.\r\n");
 800144c:	4a27      	ldr	r2, [pc, #156]	; (80014ec <HAL_UART_RxCpltCallback+0x120>)
 800144e:	4b21      	ldr	r3, [pc, #132]	; (80014d4 <HAL_UART_RxCpltCallback+0x108>)
 8001450:	0011      	movs	r1, r2
 8001452:	0018      	movs	r0, r3
 8001454:	f006 fe5e 	bl	8008114 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001458:	4b1e      	ldr	r3, [pc, #120]	; (80014d4 <HAL_UART_RxCpltCallback+0x108>)
 800145a:	0018      	movs	r0, r3
 800145c:	f7fe fe5c 	bl	8000118 <strlen>
 8001460:	0003      	movs	r3, r0
 8001462:	b29a      	uxth	r2, r3
 8001464:	2301      	movs	r3, #1
 8001466:	425b      	negs	r3, r3
 8001468:	491a      	ldr	r1, [pc, #104]	; (80014d4 <HAL_UART_RxCpltCallback+0x108>)
 800146a:	481b      	ldr	r0, [pc, #108]	; (80014d8 <HAL_UART_RxCpltCallback+0x10c>)
 800146c:	f004 fad4 	bl	8005a18 <HAL_UART_Transmit>
					uartFlag = 0;
 8001470:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <HAL_UART_RxCpltCallback+0x118>)
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
	 }
 8001476:	e024      	b.n	80014c2 <HAL_UART_RxCpltCallback+0xf6>
				 sprintf(msg, "Cannot disable, not in State A.\r\n");
 8001478:	4a1d      	ldr	r2, [pc, #116]	; (80014f0 <HAL_UART_RxCpltCallback+0x124>)
 800147a:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <HAL_UART_RxCpltCallback+0x108>)
 800147c:	0011      	movs	r1, r2
 800147e:	0018      	movs	r0, r3
 8001480:	f006 fe48 	bl	8008114 <siprintf>
				 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001484:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <HAL_UART_RxCpltCallback+0x108>)
 8001486:	0018      	movs	r0, r3
 8001488:	f7fe fe46 	bl	8000118 <strlen>
 800148c:	0003      	movs	r3, r0
 800148e:	b29a      	uxth	r2, r3
 8001490:	2301      	movs	r3, #1
 8001492:	425b      	negs	r3, r3
 8001494:	490f      	ldr	r1, [pc, #60]	; (80014d4 <HAL_UART_RxCpltCallback+0x108>)
 8001496:	4810      	ldr	r0, [pc, #64]	; (80014d8 <HAL_UART_RxCpltCallback+0x10c>)
 8001498:	f004 fabe 	bl	8005a18 <HAL_UART_Transmit>
	 }
 800149c:	e011      	b.n	80014c2 <HAL_UART_RxCpltCallback+0xf6>
			 sprintf(msg, "Incorrect key.\r\n");
 800149e:	4a15      	ldr	r2, [pc, #84]	; (80014f4 <HAL_UART_RxCpltCallback+0x128>)
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <HAL_UART_RxCpltCallback+0x108>)
 80014a2:	0011      	movs	r1, r2
 80014a4:	0018      	movs	r0, r3
 80014a6:	f006 fe35 	bl	8008114 <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80014aa:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <HAL_UART_RxCpltCallback+0x108>)
 80014ac:	0018      	movs	r0, r3
 80014ae:	f7fe fe33 	bl	8000118 <strlen>
 80014b2:	0003      	movs	r3, r0
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	2301      	movs	r3, #1
 80014b8:	425b      	negs	r3, r3
 80014ba:	4906      	ldr	r1, [pc, #24]	; (80014d4 <HAL_UART_RxCpltCallback+0x108>)
 80014bc:	4806      	ldr	r0, [pc, #24]	; (80014d8 <HAL_UART_RxCpltCallback+0x10c>)
 80014be:	f004 faab 	bl	8005a18 <HAL_UART_Transmit>
	 }
 80014c2:	46c0      	nop			; (mov r8, r8)
 80014c4:	46bd      	mov	sp, r7
 80014c6:	b002      	add	sp, #8
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	200003a0 	.word	0x200003a0
 80014d0:	08008b70 	.word	0x08008b70
 80014d4:	2000034c 	.word	0x2000034c
 80014d8:	200002b8 	.word	0x200002b8
 80014dc:	08008b88 	.word	0x08008b88
 80014e0:	200003a8 	.word	0x200003a8
 80014e4:	20000000 	.word	0x20000000
 80014e8:	08008b8c 	.word	0x08008b8c
 80014ec:	08008ba0 	.word	0x08008ba0
 80014f0:	08008bb4 	.word	0x08008bb4
 80014f4:	08008bd8 	.word	0x08008bd8

080014f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014fc:	b672      	cpsid	i
}
 80014fe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001500:	e7fe      	b.n	8001500 <Error_Handler+0x8>
	...

08001504 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150a:	4b11      	ldr	r3, [pc, #68]	; (8001550 <HAL_MspInit+0x4c>)
 800150c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800150e:	4b10      	ldr	r3, [pc, #64]	; (8001550 <HAL_MspInit+0x4c>)
 8001510:	2101      	movs	r1, #1
 8001512:	430a      	orrs	r2, r1
 8001514:	641a      	str	r2, [r3, #64]	; 0x40
 8001516:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <HAL_MspInit+0x4c>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	2201      	movs	r2, #1
 800151c:	4013      	ands	r3, r2
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <HAL_MspInit+0x4c>)
 8001524:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001526:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <HAL_MspInit+0x4c>)
 8001528:	2180      	movs	r1, #128	; 0x80
 800152a:	0549      	lsls	r1, r1, #21
 800152c:	430a      	orrs	r2, r1
 800152e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001530:	4b07      	ldr	r3, [pc, #28]	; (8001550 <HAL_MspInit+0x4c>)
 8001532:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	055b      	lsls	r3, r3, #21
 8001538:	4013      	ands	r3, r2
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800153e:	23c0      	movs	r3, #192	; 0xc0
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	0018      	movs	r0, r3
 8001544:	f000 fb42 	bl	8001bcc <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001548:	46c0      	nop			; (mov r8, r8)
 800154a:	46bd      	mov	sp, r7
 800154c:	b002      	add	sp, #8
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40021000 	.word	0x40021000

08001554 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001554:	b590      	push	{r4, r7, lr}
 8001556:	b08b      	sub	sp, #44	; 0x2c
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	2414      	movs	r4, #20
 800155e:	193b      	adds	r3, r7, r4
 8001560:	0018      	movs	r0, r3
 8001562:	2314      	movs	r3, #20
 8001564:	001a      	movs	r2, r3
 8001566:	2100      	movs	r1, #0
 8001568:	f006 fdf4 	bl	8008154 <memset>
  if(hadc->Instance==ADC1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a18      	ldr	r2, [pc, #96]	; (80015d4 <HAL_ADC_MspInit+0x80>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d129      	bne.n	80015ca <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001576:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <HAL_ADC_MspInit+0x84>)
 8001578:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800157a:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <HAL_ADC_MspInit+0x84>)
 800157c:	2180      	movs	r1, #128	; 0x80
 800157e:	0349      	lsls	r1, r1, #13
 8001580:	430a      	orrs	r2, r1
 8001582:	641a      	str	r2, [r3, #64]	; 0x40
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <HAL_ADC_MspInit+0x84>)
 8001586:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001588:	2380      	movs	r3, #128	; 0x80
 800158a:	035b      	lsls	r3, r3, #13
 800158c:	4013      	ands	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <HAL_ADC_MspInit+0x84>)
 8001594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <HAL_ADC_MspInit+0x84>)
 8001598:	2101      	movs	r1, #1
 800159a:	430a      	orrs	r2, r1
 800159c:	635a      	str	r2, [r3, #52]	; 0x34
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <HAL_ADC_MspInit+0x84>)
 80015a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015a2:	2201      	movs	r2, #1
 80015a4:	4013      	ands	r3, r2
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = POT_INPUT_Pin;
 80015aa:	193b      	adds	r3, r7, r4
 80015ac:	2201      	movs	r2, #1
 80015ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015b0:	193b      	adds	r3, r7, r4
 80015b2:	2203      	movs	r2, #3
 80015b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	193b      	adds	r3, r7, r4
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(POT_INPUT_GPIO_Port, &GPIO_InitStruct);
 80015bc:	193a      	adds	r2, r7, r4
 80015be:	23a0      	movs	r3, #160	; 0xa0
 80015c0:	05db      	lsls	r3, r3, #23
 80015c2:	0011      	movs	r1, r2
 80015c4:	0018      	movs	r0, r3
 80015c6:	f001 fb15 	bl	8002bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015ca:	46c0      	nop			; (mov r8, r8)
 80015cc:	46bd      	mov	sp, r7
 80015ce:	b00b      	add	sp, #44	; 0x2c
 80015d0:	bd90      	pop	{r4, r7, pc}
 80015d2:	46c0      	nop			; (mov r8, r8)
 80015d4:	40012400 	.word	0x40012400
 80015d8:	40021000 	.word	0x40021000

080015dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015dc:	b590      	push	{r4, r7, lr}
 80015de:	b097      	sub	sp, #92	; 0x5c
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	2344      	movs	r3, #68	; 0x44
 80015e6:	18fb      	adds	r3, r7, r3
 80015e8:	0018      	movs	r0, r3
 80015ea:	2314      	movs	r3, #20
 80015ec:	001a      	movs	r2, r3
 80015ee:	2100      	movs	r1, #0
 80015f0:	f006 fdb0 	bl	8008154 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015f4:	2410      	movs	r4, #16
 80015f6:	193b      	adds	r3, r7, r4
 80015f8:	0018      	movs	r0, r3
 80015fa:	2334      	movs	r3, #52	; 0x34
 80015fc:	001a      	movs	r2, r3
 80015fe:	2100      	movs	r1, #0
 8001600:	f006 fda8 	bl	8008154 <memset>
  if(hi2c->Instance==I2C1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a22      	ldr	r2, [pc, #136]	; (8001694 <HAL_I2C_MspInit+0xb8>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d13e      	bne.n	800168c <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800160e:	193b      	adds	r3, r7, r4
 8001610:	2220      	movs	r2, #32
 8001612:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001614:	193b      	adds	r3, r7, r4
 8001616:	2200      	movs	r2, #0
 8001618:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800161a:	193b      	adds	r3, r7, r4
 800161c:	0018      	movs	r0, r3
 800161e:	f002 fe59 	bl	80042d4 <HAL_RCCEx_PeriphCLKConfig>
 8001622:	1e03      	subs	r3, r0, #0
 8001624:	d001      	beq.n	800162a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001626:	f7ff ff67 	bl	80014f8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800162a:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <HAL_I2C_MspInit+0xbc>)
 800162c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800162e:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <HAL_I2C_MspInit+0xbc>)
 8001630:	2102      	movs	r1, #2
 8001632:	430a      	orrs	r2, r1
 8001634:	635a      	str	r2, [r3, #52]	; 0x34
 8001636:	4b18      	ldr	r3, [pc, #96]	; (8001698 <HAL_I2C_MspInit+0xbc>)
 8001638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800163a:	2202      	movs	r2, #2
 800163c:	4013      	ands	r3, r2
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001642:	2144      	movs	r1, #68	; 0x44
 8001644:	187b      	adds	r3, r7, r1
 8001646:	22c0      	movs	r2, #192	; 0xc0
 8001648:	0092      	lsls	r2, r2, #2
 800164a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800164c:	187b      	adds	r3, r7, r1
 800164e:	2212      	movs	r2, #18
 8001650:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	187b      	adds	r3, r7, r1
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	187b      	adds	r3, r7, r1
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800165e:	187b      	adds	r3, r7, r1
 8001660:	2206      	movs	r2, #6
 8001662:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001664:	187b      	adds	r3, r7, r1
 8001666:	4a0d      	ldr	r2, [pc, #52]	; (800169c <HAL_I2C_MspInit+0xc0>)
 8001668:	0019      	movs	r1, r3
 800166a:	0010      	movs	r0, r2
 800166c:	f001 fac2 	bl	8002bf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001670:	4b09      	ldr	r3, [pc, #36]	; (8001698 <HAL_I2C_MspInit+0xbc>)
 8001672:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <HAL_I2C_MspInit+0xbc>)
 8001676:	2180      	movs	r1, #128	; 0x80
 8001678:	0389      	lsls	r1, r1, #14
 800167a:	430a      	orrs	r2, r1
 800167c:	63da      	str	r2, [r3, #60]	; 0x3c
 800167e:	4b06      	ldr	r3, [pc, #24]	; (8001698 <HAL_I2C_MspInit+0xbc>)
 8001680:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001682:	2380      	movs	r3, #128	; 0x80
 8001684:	039b      	lsls	r3, r3, #14
 8001686:	4013      	ands	r3, r2
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800168c:	46c0      	nop			; (mov r8, r8)
 800168e:	46bd      	mov	sp, r7
 8001690:	b017      	add	sp, #92	; 0x5c
 8001692:	bd90      	pop	{r4, r7, pc}
 8001694:	40005400 	.word	0x40005400
 8001698:	40021000 	.word	0x40021000
 800169c:	50000400 	.word	0x50000400

080016a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	2380      	movs	r3, #128	; 0x80
 80016ae:	05db      	lsls	r3, r3, #23
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d114      	bne.n	80016de <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016b4:	4b3c      	ldr	r3, [pc, #240]	; (80017a8 <HAL_TIM_Base_MspInit+0x108>)
 80016b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016b8:	4b3b      	ldr	r3, [pc, #236]	; (80017a8 <HAL_TIM_Base_MspInit+0x108>)
 80016ba:	2101      	movs	r1, #1
 80016bc:	430a      	orrs	r2, r1
 80016be:	63da      	str	r2, [r3, #60]	; 0x3c
 80016c0:	4b39      	ldr	r3, [pc, #228]	; (80017a8 <HAL_TIM_Base_MspInit+0x108>)
 80016c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016c4:	2201      	movs	r2, #1
 80016c6:	4013      	ands	r3, r2
 80016c8:	61fb      	str	r3, [r7, #28]
 80016ca:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2100      	movs	r1, #0
 80016d0:	200f      	movs	r0, #15
 80016d2:	f001 f991 	bl	80029f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016d6:	200f      	movs	r0, #15
 80016d8:	f001 f9a3 	bl	8002a22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80016dc:	e060      	b.n	80017a0 <HAL_TIM_Base_MspInit+0x100>
  else if(htim_base->Instance==TIM3)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a32      	ldr	r2, [pc, #200]	; (80017ac <HAL_TIM_Base_MspInit+0x10c>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d10c      	bne.n	8001702 <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016e8:	4b2f      	ldr	r3, [pc, #188]	; (80017a8 <HAL_TIM_Base_MspInit+0x108>)
 80016ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016ec:	4b2e      	ldr	r3, [pc, #184]	; (80017a8 <HAL_TIM_Base_MspInit+0x108>)
 80016ee:	2102      	movs	r1, #2
 80016f0:	430a      	orrs	r2, r1
 80016f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80016f4:	4b2c      	ldr	r3, [pc, #176]	; (80017a8 <HAL_TIM_Base_MspInit+0x108>)
 80016f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016f8:	2202      	movs	r2, #2
 80016fa:	4013      	ands	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
 80016fe:	69bb      	ldr	r3, [r7, #24]
}
 8001700:	e04e      	b.n	80017a0 <HAL_TIM_Base_MspInit+0x100>
  else if(htim_base->Instance==TIM6)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a2a      	ldr	r2, [pc, #168]	; (80017b0 <HAL_TIM_Base_MspInit+0x110>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d114      	bne.n	8001736 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800170c:	4b26      	ldr	r3, [pc, #152]	; (80017a8 <HAL_TIM_Base_MspInit+0x108>)
 800170e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001710:	4b25      	ldr	r3, [pc, #148]	; (80017a8 <HAL_TIM_Base_MspInit+0x108>)
 8001712:	2110      	movs	r1, #16
 8001714:	430a      	orrs	r2, r1
 8001716:	63da      	str	r2, [r3, #60]	; 0x3c
 8001718:	4b23      	ldr	r3, [pc, #140]	; (80017a8 <HAL_TIM_Base_MspInit+0x108>)
 800171a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800171c:	2210      	movs	r2, #16
 800171e:	4013      	ands	r3, r2
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 8001724:	2200      	movs	r2, #0
 8001726:	2100      	movs	r1, #0
 8001728:	2011      	movs	r0, #17
 800172a:	f001 f965 	bl	80029f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 800172e:	2011      	movs	r0, #17
 8001730:	f001 f977 	bl	8002a22 <HAL_NVIC_EnableIRQ>
}
 8001734:	e034      	b.n	80017a0 <HAL_TIM_Base_MspInit+0x100>
  else if(htim_base->Instance==TIM7)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a1e      	ldr	r2, [pc, #120]	; (80017b4 <HAL_TIM_Base_MspInit+0x114>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d114      	bne.n	800176a <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001740:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <HAL_TIM_Base_MspInit+0x108>)
 8001742:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001744:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <HAL_TIM_Base_MspInit+0x108>)
 8001746:	2120      	movs	r1, #32
 8001748:	430a      	orrs	r2, r1
 800174a:	63da      	str	r2, [r3, #60]	; 0x3c
 800174c:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <HAL_TIM_Base_MspInit+0x108>)
 800174e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001750:	2220      	movs	r2, #32
 8001752:	4013      	ands	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
 8001756:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_LPTIM2_IRQn, 0, 0);
 8001758:	2200      	movs	r2, #0
 800175a:	2100      	movs	r1, #0
 800175c:	2012      	movs	r0, #18
 800175e:	f001 f94b 	bl	80029f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_LPTIM2_IRQn);
 8001762:	2012      	movs	r0, #18
 8001764:	f001 f95d 	bl	8002a22 <HAL_NVIC_EnableIRQ>
}
 8001768:	e01a      	b.n	80017a0 <HAL_TIM_Base_MspInit+0x100>
  else if(htim_base->Instance==TIM14)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a12      	ldr	r2, [pc, #72]	; (80017b8 <HAL_TIM_Base_MspInit+0x118>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d115      	bne.n	80017a0 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <HAL_TIM_Base_MspInit+0x108>)
 8001776:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001778:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <HAL_TIM_Base_MspInit+0x108>)
 800177a:	2180      	movs	r1, #128	; 0x80
 800177c:	0209      	lsls	r1, r1, #8
 800177e:	430a      	orrs	r2, r1
 8001780:	641a      	str	r2, [r3, #64]	; 0x40
 8001782:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <HAL_TIM_Base_MspInit+0x108>)
 8001784:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001786:	2380      	movs	r3, #128	; 0x80
 8001788:	021b      	lsls	r3, r3, #8
 800178a:	4013      	ands	r3, r2
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001790:	2200      	movs	r2, #0
 8001792:	2100      	movs	r1, #0
 8001794:	2013      	movs	r0, #19
 8001796:	f001 f92f 	bl	80029f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 800179a:	2013      	movs	r0, #19
 800179c:	f001 f941 	bl	8002a22 <HAL_NVIC_EnableIRQ>
}
 80017a0:	46c0      	nop			; (mov r8, r8)
 80017a2:	46bd      	mov	sp, r7
 80017a4:	b008      	add	sp, #32
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40000400 	.word	0x40000400
 80017b0:	40001000 	.word	0x40001000
 80017b4:	40001400 	.word	0x40001400
 80017b8:	40002000 	.word	0x40002000

080017bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017bc:	b590      	push	{r4, r7, lr}
 80017be:	b089      	sub	sp, #36	; 0x24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	240c      	movs	r4, #12
 80017c6:	193b      	adds	r3, r7, r4
 80017c8:	0018      	movs	r0, r3
 80017ca:	2314      	movs	r3, #20
 80017cc:	001a      	movs	r2, r3
 80017ce:	2100      	movs	r1, #0
 80017d0:	f006 fcc0 	bl	8008154 <memset>
  if(htim->Instance==TIM3)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a14      	ldr	r2, [pc, #80]	; (800182c <HAL_TIM_MspPostInit+0x70>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d122      	bne.n	8001824 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017de:	4b14      	ldr	r3, [pc, #80]	; (8001830 <HAL_TIM_MspPostInit+0x74>)
 80017e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017e2:	4b13      	ldr	r3, [pc, #76]	; (8001830 <HAL_TIM_MspPostInit+0x74>)
 80017e4:	2101      	movs	r1, #1
 80017e6:	430a      	orrs	r2, r1
 80017e8:	635a      	str	r2, [r3, #52]	; 0x34
 80017ea:	4b11      	ldr	r3, [pc, #68]	; (8001830 <HAL_TIM_MspPostInit+0x74>)
 80017ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ee:	2201      	movs	r2, #1
 80017f0:	4013      	ands	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017f6:	0021      	movs	r1, r4
 80017f8:	187b      	adds	r3, r7, r1
 80017fa:	2240      	movs	r2, #64	; 0x40
 80017fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fe:	187b      	adds	r3, r7, r1
 8001800:	2202      	movs	r2, #2
 8001802:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	187b      	adds	r3, r7, r1
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180a:	187b      	adds	r3, r7, r1
 800180c:	2200      	movs	r2, #0
 800180e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001810:	187b      	adds	r3, r7, r1
 8001812:	2201      	movs	r2, #1
 8001814:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001816:	187a      	adds	r2, r7, r1
 8001818:	23a0      	movs	r3, #160	; 0xa0
 800181a:	05db      	lsls	r3, r3, #23
 800181c:	0011      	movs	r1, r2
 800181e:	0018      	movs	r0, r3
 8001820:	f001 f9e8 	bl	8002bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001824:	46c0      	nop			; (mov r8, r8)
 8001826:	46bd      	mov	sp, r7
 8001828:	b009      	add	sp, #36	; 0x24
 800182a:	bd90      	pop	{r4, r7, pc}
 800182c:	40000400 	.word	0x40000400
 8001830:	40021000 	.word	0x40021000

08001834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001834:	b590      	push	{r4, r7, lr}
 8001836:	b097      	sub	sp, #92	; 0x5c
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	2344      	movs	r3, #68	; 0x44
 800183e:	18fb      	adds	r3, r7, r3
 8001840:	0018      	movs	r0, r3
 8001842:	2314      	movs	r3, #20
 8001844:	001a      	movs	r2, r3
 8001846:	2100      	movs	r1, #0
 8001848:	f006 fc84 	bl	8008154 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800184c:	2410      	movs	r4, #16
 800184e:	193b      	adds	r3, r7, r4
 8001850:	0018      	movs	r0, r3
 8001852:	2334      	movs	r3, #52	; 0x34
 8001854:	001a      	movs	r2, r3
 8001856:	2100      	movs	r1, #0
 8001858:	f006 fc7c 	bl	8008154 <memset>
  if(huart->Instance==USART2)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a26      	ldr	r2, [pc, #152]	; (80018fc <HAL_UART_MspInit+0xc8>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d146      	bne.n	80018f4 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001866:	193b      	adds	r3, r7, r4
 8001868:	2202      	movs	r2, #2
 800186a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800186c:	193b      	adds	r3, r7, r4
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001872:	193b      	adds	r3, r7, r4
 8001874:	0018      	movs	r0, r3
 8001876:	f002 fd2d 	bl	80042d4 <HAL_RCCEx_PeriphCLKConfig>
 800187a:	1e03      	subs	r3, r0, #0
 800187c:	d001      	beq.n	8001882 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800187e:	f7ff fe3b 	bl	80014f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001882:	4b1f      	ldr	r3, [pc, #124]	; (8001900 <HAL_UART_MspInit+0xcc>)
 8001884:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001886:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <HAL_UART_MspInit+0xcc>)
 8001888:	2180      	movs	r1, #128	; 0x80
 800188a:	0289      	lsls	r1, r1, #10
 800188c:	430a      	orrs	r2, r1
 800188e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001890:	4b1b      	ldr	r3, [pc, #108]	; (8001900 <HAL_UART_MspInit+0xcc>)
 8001892:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	029b      	lsls	r3, r3, #10
 8001898:	4013      	ands	r3, r2
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189e:	4b18      	ldr	r3, [pc, #96]	; (8001900 <HAL_UART_MspInit+0xcc>)
 80018a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018a2:	4b17      	ldr	r3, [pc, #92]	; (8001900 <HAL_UART_MspInit+0xcc>)
 80018a4:	2101      	movs	r1, #1
 80018a6:	430a      	orrs	r2, r1
 80018a8:	635a      	str	r2, [r3, #52]	; 0x34
 80018aa:	4b15      	ldr	r3, [pc, #84]	; (8001900 <HAL_UART_MspInit+0xcc>)
 80018ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ae:	2201      	movs	r2, #1
 80018b0:	4013      	ands	r3, r2
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80018b6:	2144      	movs	r1, #68	; 0x44
 80018b8:	187b      	adds	r3, r7, r1
 80018ba:	220c      	movs	r2, #12
 80018bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018be:	187b      	adds	r3, r7, r1
 80018c0:	2202      	movs	r2, #2
 80018c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018c4:	187b      	adds	r3, r7, r1
 80018c6:	2201      	movs	r2, #1
 80018c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ca:	187b      	adds	r3, r7, r1
 80018cc:	2200      	movs	r2, #0
 80018ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80018d0:	187b      	adds	r3, r7, r1
 80018d2:	2201      	movs	r2, #1
 80018d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d6:	187a      	adds	r2, r7, r1
 80018d8:	23a0      	movs	r3, #160	; 0xa0
 80018da:	05db      	lsls	r3, r3, #23
 80018dc:	0011      	movs	r1, r2
 80018de:	0018      	movs	r0, r3
 80018e0:	f001 f988 	bl	8002bf4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018e4:	2200      	movs	r2, #0
 80018e6:	2100      	movs	r1, #0
 80018e8:	201c      	movs	r0, #28
 80018ea:	f001 f885 	bl	80029f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018ee:	201c      	movs	r0, #28
 80018f0:	f001 f897 	bl	8002a22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018f4:	46c0      	nop			; (mov r8, r8)
 80018f6:	46bd      	mov	sp, r7
 80018f8:	b017      	add	sp, #92	; 0x5c
 80018fa:	bd90      	pop	{r4, r7, pc}
 80018fc:	40004400 	.word	0x40004400
 8001900:	40021000 	.word	0x40021000

08001904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001908:	e7fe      	b.n	8001908 <NMI_Handler+0x4>

0800190a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800190e:	e7fe      	b.n	800190e <HardFault_Handler+0x4>

08001910 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001914:	46c0      	nop			; (mov r8, r8)
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001928:	f000 f910 	bl	8001b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800192c:	46c0      	nop			; (mov r8, r8)
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001938:	4b03      	ldr	r3, [pc, #12]	; (8001948 <TIM2_IRQHandler+0x14>)
 800193a:	0018      	movs	r0, r3
 800193c:	f003 f880 	bl	8004a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001940:	46c0      	nop			; (mov r8, r8)
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	2000013c 	.word	0x2000013c

0800194c <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001950:	4b03      	ldr	r3, [pc, #12]	; (8001960 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8001952:	0018      	movs	r0, r3
 8001954:	f003 f874 	bl	8004a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8001958:	46c0      	nop			; (mov r8, r8)
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	200001d4 	.word	0x200001d4

08001964 <TIM7_LPTIM2_IRQHandler>:

/**
  * @brief This function handles TIM7 and LPTIM2 interrupts (LPTIM2 interrupt through EXTI line 30).
  */
void TIM7_LPTIM2_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 0 */

  /* USER CODE END TIM7_LPTIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001968:	4b03      	ldr	r3, [pc, #12]	; (8001978 <TIM7_LPTIM2_IRQHandler+0x14>)
 800196a:	0018      	movs	r0, r3
 800196c:	f003 f868 	bl	8004a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 1 */

  /* USER CODE END TIM7_LPTIM2_IRQn 1 */
}
 8001970:	46c0      	nop			; (mov r8, r8)
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	20000220 	.word	0x20000220

0800197c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001980:	4b03      	ldr	r3, [pc, #12]	; (8001990 <TIM14_IRQHandler+0x14>)
 8001982:	0018      	movs	r0, r3
 8001984:	f003 f85c 	bl	8004a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001988:	46c0      	nop			; (mov r8, r8)
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	2000026c 	.word	0x2000026c

08001994 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001998:	4b03      	ldr	r3, [pc, #12]	; (80019a8 <USART2_IRQHandler+0x14>)
 800199a:	0018      	movs	r0, r3
 800199c:	f004 f93e 	bl	8005c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019a0:	46c0      	nop			; (mov r8, r8)
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	200002b8 	.word	0x200002b8

080019ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b4:	4a14      	ldr	r2, [pc, #80]	; (8001a08 <_sbrk+0x5c>)
 80019b6:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <_sbrk+0x60>)
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c0:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <_sbrk+0x64>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d102      	bne.n	80019ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c8:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <_sbrk+0x64>)
 80019ca:	4a12      	ldr	r2, [pc, #72]	; (8001a14 <_sbrk+0x68>)
 80019cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ce:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <_sbrk+0x64>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	18d3      	adds	r3, r2, r3
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d207      	bcs.n	80019ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019dc:	f006 fbc2 	bl	8008164 <__errno>
 80019e0:	0003      	movs	r3, r0
 80019e2:	220c      	movs	r2, #12
 80019e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019e6:	2301      	movs	r3, #1
 80019e8:	425b      	negs	r3, r3
 80019ea:	e009      	b.n	8001a00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019ec:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <_sbrk+0x64>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019f2:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <_sbrk+0x64>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	18d2      	adds	r2, r2, r3
 80019fa:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <_sbrk+0x64>)
 80019fc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80019fe:	68fb      	ldr	r3, [r7, #12]
}
 8001a00:	0018      	movs	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	b006      	add	sp, #24
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20009000 	.word	0x20009000
 8001a0c:	00000400 	.word	0x00000400
 8001a10:	200003ac 	.word	0x200003ac
 8001a14:	20000500 	.word	0x20000500

08001a18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a1c:	46c0      	nop			; (mov r8, r8)
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a24:	480d      	ldr	r0, [pc, #52]	; (8001a5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a26:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a28:	f7ff fff6 	bl	8001a18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a2c:	480c      	ldr	r0, [pc, #48]	; (8001a60 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a2e:	490d      	ldr	r1, [pc, #52]	; (8001a64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a30:	4a0d      	ldr	r2, [pc, #52]	; (8001a68 <LoopForever+0xe>)
  movs r3, #0
 8001a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a34:	e002      	b.n	8001a3c <LoopCopyDataInit>

08001a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a3a:	3304      	adds	r3, #4

08001a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a40:	d3f9      	bcc.n	8001a36 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a42:	4a0a      	ldr	r2, [pc, #40]	; (8001a6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a44:	4c0a      	ldr	r4, [pc, #40]	; (8001a70 <LoopForever+0x16>)
  movs r3, #0
 8001a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a48:	e001      	b.n	8001a4e <LoopFillZerobss>

08001a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a4c:	3204      	adds	r2, #4

08001a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a50:	d3fb      	bcc.n	8001a4a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a52:	f006 fb8d 	bl	8008170 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001a56:	f7fe fdfd 	bl	8000654 <main>

08001a5a <LoopForever>:

LoopForever:
  b LoopForever
 8001a5a:	e7fe      	b.n	8001a5a <LoopForever>
  ldr   r0, =_estack
 8001a5c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a64:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001a68:	08008d28 	.word	0x08008d28
  ldr r2, =_sbss
 8001a6c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001a70:	20000500 	.word	0x20000500

08001a74 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a74:	e7fe      	b.n	8001a74 <ADC1_COMP_IRQHandler>
	...

08001a78 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a7e:	1dfb      	adds	r3, r7, #7
 8001a80:	2200      	movs	r2, #0
 8001a82:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a84:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <HAL_Init+0x3c>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <HAL_Init+0x3c>)
 8001a8a:	2180      	movs	r1, #128	; 0x80
 8001a8c:	0049      	lsls	r1, r1, #1
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a92:	2000      	movs	r0, #0
 8001a94:	f000 f810 	bl	8001ab8 <HAL_InitTick>
 8001a98:	1e03      	subs	r3, r0, #0
 8001a9a:	d003      	beq.n	8001aa4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001a9c:	1dfb      	adds	r3, r7, #7
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	701a      	strb	r2, [r3, #0]
 8001aa2:	e001      	b.n	8001aa8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001aa4:	f7ff fd2e 	bl	8001504 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001aa8:	1dfb      	adds	r3, r7, #7
 8001aaa:	781b      	ldrb	r3, [r3, #0]
}
 8001aac:	0018      	movs	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	b002      	add	sp, #8
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40022000 	.word	0x40022000

08001ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab8:	b590      	push	{r4, r7, lr}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ac0:	230f      	movs	r3, #15
 8001ac2:	18fb      	adds	r3, r7, r3
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001ac8:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <HAL_InitTick+0x88>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d02b      	beq.n	8001b28 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001ad0:	4b1c      	ldr	r3, [pc, #112]	; (8001b44 <HAL_InitTick+0x8c>)
 8001ad2:	681c      	ldr	r4, [r3, #0]
 8001ad4:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <HAL_InitTick+0x88>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	0019      	movs	r1, r3
 8001ada:	23fa      	movs	r3, #250	; 0xfa
 8001adc:	0098      	lsls	r0, r3, #2
 8001ade:	f7fe fb2d 	bl	800013c <__udivsi3>
 8001ae2:	0003      	movs	r3, r0
 8001ae4:	0019      	movs	r1, r3
 8001ae6:	0020      	movs	r0, r4
 8001ae8:	f7fe fb28 	bl	800013c <__udivsi3>
 8001aec:	0003      	movs	r3, r0
 8001aee:	0018      	movs	r0, r3
 8001af0:	f000 ffa7 	bl	8002a42 <HAL_SYSTICK_Config>
 8001af4:	1e03      	subs	r3, r0, #0
 8001af6:	d112      	bne.n	8001b1e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b03      	cmp	r3, #3
 8001afc:	d80a      	bhi.n	8001b14 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	2301      	movs	r3, #1
 8001b02:	425b      	negs	r3, r3
 8001b04:	2200      	movs	r2, #0
 8001b06:	0018      	movs	r0, r3
 8001b08:	f000 ff76 	bl	80029f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b0c:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <HAL_InitTick+0x90>)
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	e00d      	b.n	8001b30 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001b14:	230f      	movs	r3, #15
 8001b16:	18fb      	adds	r3, r7, r3
 8001b18:	2201      	movs	r2, #1
 8001b1a:	701a      	strb	r2, [r3, #0]
 8001b1c:	e008      	b.n	8001b30 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b1e:	230f      	movs	r3, #15
 8001b20:	18fb      	adds	r3, r7, r3
 8001b22:	2201      	movs	r2, #1
 8001b24:	701a      	strb	r2, [r3, #0]
 8001b26:	e003      	b.n	8001b30 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b28:	230f      	movs	r3, #15
 8001b2a:	18fb      	adds	r3, r7, r3
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001b30:	230f      	movs	r3, #15
 8001b32:	18fb      	adds	r3, r7, r3
 8001b34:	781b      	ldrb	r3, [r3, #0]
}
 8001b36:	0018      	movs	r0, r3
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	b005      	add	sp, #20
 8001b3c:	bd90      	pop	{r4, r7, pc}
 8001b3e:	46c0      	nop			; (mov r8, r8)
 8001b40:	20000014 	.word	0x20000014
 8001b44:	2000000c 	.word	0x2000000c
 8001b48:	20000010 	.word	0x20000010

08001b4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <HAL_IncTick+0x1c>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	001a      	movs	r2, r3
 8001b56:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <HAL_IncTick+0x20>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	18d2      	adds	r2, r2, r3
 8001b5c:	4b03      	ldr	r3, [pc, #12]	; (8001b6c <HAL_IncTick+0x20>)
 8001b5e:	601a      	str	r2, [r3, #0]
}
 8001b60:	46c0      	nop			; (mov r8, r8)
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	46c0      	nop			; (mov r8, r8)
 8001b68:	20000014 	.word	0x20000014
 8001b6c:	200003b0 	.word	0x200003b0

08001b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  return uwTick;
 8001b74:	4b02      	ldr	r3, [pc, #8]	; (8001b80 <HAL_GetTick+0x10>)
 8001b76:	681b      	ldr	r3, [r3, #0]
}
 8001b78:	0018      	movs	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	46c0      	nop			; (mov r8, r8)
 8001b80:	200003b0 	.word	0x200003b0

08001b84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b8c:	f7ff fff0 	bl	8001b70 <HAL_GetTick>
 8001b90:	0003      	movs	r3, r0
 8001b92:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	d005      	beq.n	8001baa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <HAL_Delay+0x44>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	001a      	movs	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	189b      	adds	r3, r3, r2
 8001ba8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001baa:	46c0      	nop			; (mov r8, r8)
 8001bac:	f7ff ffe0 	bl	8001b70 <HAL_GetTick>
 8001bb0:	0002      	movs	r2, r0
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d8f7      	bhi.n	8001bac <HAL_Delay+0x28>
  {
  }
}
 8001bbc:	46c0      	nop			; (mov r8, r8)
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	b004      	add	sp, #16
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	46c0      	nop			; (mov r8, r8)
 8001bc8:	20000014 	.word	0x20000014

08001bcc <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a06      	ldr	r2, [pc, #24]	; (8001bf4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001bda:	4013      	ands	r3, r2
 8001bdc:	0019      	movs	r1, r3
 8001bde:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	601a      	str	r2, [r3, #0]
}
 8001be6:	46c0      	nop			; (mov r8, r8)
 8001be8:	46bd      	mov	sp, r7
 8001bea:	b002      	add	sp, #8
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	46c0      	nop			; (mov r8, r8)
 8001bf0:	40010000 	.word	0x40010000
 8001bf4:	fffff9ff 	.word	0xfffff9ff

08001bf8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a05      	ldr	r2, [pc, #20]	; (8001c1c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001c08:	401a      	ands	r2, r3
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	601a      	str	r2, [r3, #0]
}
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	46bd      	mov	sp, r7
 8001c16:	b002      	add	sp, #8
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	fe3fffff 	.word	0xfe3fffff

08001c20 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	23e0      	movs	r3, #224	; 0xe0
 8001c2e:	045b      	lsls	r3, r3, #17
 8001c30:	4013      	ands	r3, r2
}
 8001c32:	0018      	movs	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	b002      	add	sp, #8
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b084      	sub	sp, #16
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	60f8      	str	r0, [r7, #12]
 8001c42:	60b9      	str	r1, [r7, #8]
 8001c44:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	2104      	movs	r1, #4
 8001c4e:	400a      	ands	r2, r1
 8001c50:	2107      	movs	r1, #7
 8001c52:	4091      	lsls	r1, r2
 8001c54:	000a      	movs	r2, r1
 8001c56:	43d2      	mvns	r2, r2
 8001c58:	401a      	ands	r2, r3
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	2104      	movs	r1, #4
 8001c5e:	400b      	ands	r3, r1
 8001c60:	6879      	ldr	r1, [r7, #4]
 8001c62:	4099      	lsls	r1, r3
 8001c64:	000b      	movs	r3, r1
 8001c66:	431a      	orrs	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001c6c:	46c0      	nop			; (mov r8, r8)
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	b004      	add	sp, #16
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	2104      	movs	r1, #4
 8001c86:	400a      	ands	r2, r1
 8001c88:	2107      	movs	r1, #7
 8001c8a:	4091      	lsls	r1, r2
 8001c8c:	000a      	movs	r2, r1
 8001c8e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	2104      	movs	r1, #4
 8001c94:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001c96:	40da      	lsrs	r2, r3
 8001c98:	0013      	movs	r3, r2
}
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	b002      	add	sp, #8
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68da      	ldr	r2, [r3, #12]
 8001cae:	23c0      	movs	r3, #192	; 0xc0
 8001cb0:	011b      	lsls	r3, r3, #4
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	d101      	bne.n	8001cba <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e000      	b.n	8001cbc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	b002      	add	sp, #8
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd4:	68ba      	ldr	r2, [r7, #8]
 8001cd6:	211f      	movs	r1, #31
 8001cd8:	400a      	ands	r2, r1
 8001cda:	210f      	movs	r1, #15
 8001cdc:	4091      	lsls	r1, r2
 8001cde:	000a      	movs	r2, r1
 8001ce0:	43d2      	mvns	r2, r2
 8001ce2:	401a      	ands	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	0e9b      	lsrs	r3, r3, #26
 8001ce8:	210f      	movs	r1, #15
 8001cea:	4019      	ands	r1, r3
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	201f      	movs	r0, #31
 8001cf0:	4003      	ands	r3, r0
 8001cf2:	4099      	lsls	r1, r3
 8001cf4:	000b      	movs	r3, r1
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001cfc:	46c0      	nop			; (mov r8, r8)
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	b004      	add	sp, #16
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	035b      	lsls	r3, r3, #13
 8001d16:	0b5b      	lsrs	r3, r3, #13
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	46bd      	mov	sp, r7
 8001d22:	b002      	add	sp, #8
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	0352      	lsls	r2, r2, #13
 8001d38:	0b52      	lsrs	r2, r2, #13
 8001d3a:	43d2      	mvns	r2, r2
 8001d3c:	401a      	ands	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d42:	46c0      	nop			; (mov r8, r8)
 8001d44:	46bd      	mov	sp, r7
 8001d46:	b002      	add	sp, #8
 8001d48:	bd80      	pop	{r7, pc}
	...

08001d4c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	68ba      	ldr	r2, [r7, #8]
 8001d5e:	0212      	lsls	r2, r2, #8
 8001d60:	43d2      	mvns	r2, r2
 8001d62:	401a      	ands	r2, r3
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	021b      	lsls	r3, r3, #8
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	400b      	ands	r3, r1
 8001d6c:	4904      	ldr	r1, [pc, #16]	; (8001d80 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001d6e:	400b      	ands	r3, r1
 8001d70:	431a      	orrs	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001d76:	46c0      	nop			; (mov r8, r8)
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	b004      	add	sp, #16
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	07ffff00 	.word	0x07ffff00

08001d84 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	4a05      	ldr	r2, [pc, #20]	; (8001da8 <LL_ADC_EnableInternalRegulator+0x24>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	2280      	movs	r2, #128	; 0x80
 8001d96:	0552      	lsls	r2, r2, #21
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d9e:	46c0      	nop			; (mov r8, r8)
 8001da0:	46bd      	mov	sp, r7
 8001da2:	b002      	add	sp, #8
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	46c0      	nop			; (mov r8, r8)
 8001da8:	6fffffe8 	.word	0x6fffffe8

08001dac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	2380      	movs	r3, #128	; 0x80
 8001dba:	055b      	lsls	r3, r3, #21
 8001dbc:	401a      	ands	r2, r3
 8001dbe:	2380      	movs	r3, #128	; 0x80
 8001dc0:	055b      	lsls	r3, r3, #21
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d101      	bne.n	8001dca <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e000      	b.n	8001dcc <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	0018      	movs	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	b002      	add	sp, #8
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	4a04      	ldr	r2, [pc, #16]	; (8001df4 <LL_ADC_Enable+0x20>)
 8001de2:	4013      	ands	r3, r2
 8001de4:	2201      	movs	r2, #1
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001dec:	46c0      	nop			; (mov r8, r8)
 8001dee:	46bd      	mov	sp, r7
 8001df0:	b002      	add	sp, #8
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	7fffffe8 	.word	0x7fffffe8

08001df8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	2201      	movs	r2, #1
 8001e06:	4013      	ands	r3, r2
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d101      	bne.n	8001e10 <LL_ADC_IsEnabled+0x18>
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e000      	b.n	8001e12 <LL_ADC_IsEnabled+0x1a>
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	0018      	movs	r0, r3
 8001e14:	46bd      	mov	sp, r7
 8001e16:	b002      	add	sp, #8
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	4a04      	ldr	r2, [pc, #16]	; (8001e3c <LL_ADC_REG_StartConversion+0x20>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	2204      	movs	r2, #4
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e34:	46c0      	nop			; (mov r8, r8)
 8001e36:	46bd      	mov	sp, r7
 8001e38:	b002      	add	sp, #8
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	7fffffe8 	.word	0x7fffffe8

08001e40 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	2204      	movs	r2, #4
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b04      	cmp	r3, #4
 8001e52:	d101      	bne.n	8001e58 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e54:	2301      	movs	r3, #1
 8001e56:	e000      	b.n	8001e5a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	b002      	add	sp, #8
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b088      	sub	sp, #32
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e6c:	231f      	movs	r3, #31
 8001e6e:	18fb      	adds	r3, r7, r3
 8001e70:	2200      	movs	r2, #0
 8001e72:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e17f      	b.n	800218a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10a      	bne.n	8001ea8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	0018      	movs	r0, r3
 8001e96:	f7ff fb5d 	bl	8001554 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2254      	movs	r2, #84	; 0x54
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	0018      	movs	r0, r3
 8001eae:	f7ff ff7d 	bl	8001dac <LL_ADC_IsInternalRegulatorEnabled>
 8001eb2:	1e03      	subs	r3, r0, #0
 8001eb4:	d115      	bne.n	8001ee2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	0018      	movs	r0, r3
 8001ebc:	f7ff ff62 	bl	8001d84 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ec0:	4bb4      	ldr	r3, [pc, #720]	; (8002194 <HAL_ADC_Init+0x330>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	49b4      	ldr	r1, [pc, #720]	; (8002198 <HAL_ADC_Init+0x334>)
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	f7fe f938 	bl	800013c <__udivsi3>
 8001ecc:	0003      	movs	r3, r0
 8001ece:	3301      	adds	r3, #1
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ed4:	e002      	b.n	8001edc <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f9      	bne.n	8001ed6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	f7ff ff60 	bl	8001dac <LL_ADC_IsInternalRegulatorEnabled>
 8001eec:	1e03      	subs	r3, r0, #0
 8001eee:	d10f      	bne.n	8001f10 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef4:	2210      	movs	r2, #16
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f00:	2201      	movs	r2, #1
 8001f02:	431a      	orrs	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001f08:	231f      	movs	r3, #31
 8001f0a:	18fb      	adds	r3, r7, r3
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	0018      	movs	r0, r3
 8001f16:	f7ff ff93 	bl	8001e40 <LL_ADC_REG_IsConversionOngoing>
 8001f1a:	0003      	movs	r3, r0
 8001f1c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f22:	2210      	movs	r2, #16
 8001f24:	4013      	ands	r3, r2
 8001f26:	d000      	beq.n	8001f2a <HAL_ADC_Init+0xc6>
 8001f28:	e122      	b.n	8002170 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d000      	beq.n	8001f32 <HAL_ADC_Init+0xce>
 8001f30:	e11e      	b.n	8002170 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f36:	4a99      	ldr	r2, [pc, #612]	; (800219c <HAL_ADC_Init+0x338>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	0018      	movs	r0, r3
 8001f48:	f7ff ff56 	bl	8001df8 <LL_ADC_IsEnabled>
 8001f4c:	1e03      	subs	r3, r0, #0
 8001f4e:	d000      	beq.n	8001f52 <HAL_ADC_Init+0xee>
 8001f50:	e0ad      	b.n	80020ae <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	7e1b      	ldrb	r3, [r3, #24]
 8001f5a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001f5c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	7e5b      	ldrb	r3, [r3, #25]
 8001f62:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001f64:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	7e9b      	ldrb	r3, [r3, #26]
 8001f6a:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001f6c:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d002      	beq.n	8001f7c <HAL_ADC_Init+0x118>
 8001f76:	2380      	movs	r3, #128	; 0x80
 8001f78:	015b      	lsls	r3, r3, #5
 8001f7a:	e000      	b.n	8001f7e <HAL_ADC_Init+0x11a>
 8001f7c:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001f7e:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001f84:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	da04      	bge.n	8001f98 <HAL_ADC_Init+0x134>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	085b      	lsrs	r3, r3, #1
 8001f96:	e001      	b.n	8001f9c <HAL_ADC_Init+0x138>
 8001f98:	2380      	movs	r3, #128	; 0x80
 8001f9a:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001f9c:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	212c      	movs	r1, #44	; 0x2c
 8001fa2:	5c5b      	ldrb	r3, [r3, r1]
 8001fa4:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001fa6:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2220      	movs	r2, #32
 8001fb2:	5c9b      	ldrb	r3, [r3, r2]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d115      	bne.n	8001fe4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	7e9b      	ldrb	r3, [r3, #26]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d105      	bne.n	8001fcc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	2280      	movs	r2, #128	; 0x80
 8001fc4:	0252      	lsls	r2, r2, #9
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
 8001fca:	e00b      	b.n	8001fe4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fdc:	2201      	movs	r2, #1
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00a      	beq.n	8002002 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ff0:	23e0      	movs	r3, #224	; 0xe0
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	4a65      	ldr	r2, [pc, #404]	; (80021a0 <HAL_ADC_Init+0x33c>)
 800200a:	4013      	ands	r3, r2
 800200c:	0019      	movs	r1, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	430a      	orrs	r2, r1
 8002016:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	0f9b      	lsrs	r3, r3, #30
 800201e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002024:	4313      	orrs	r3, r2
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	4313      	orrs	r3, r2
 800202a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	223c      	movs	r2, #60	; 0x3c
 8002030:	5c9b      	ldrb	r3, [r3, r2]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d111      	bne.n	800205a <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	0f9b      	lsrs	r3, r3, #30
 800203c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002042:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 8002048:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800204e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	4313      	orrs	r3, r2
 8002054:	2201      	movs	r2, #1
 8002056:	4313      	orrs	r3, r2
 8002058:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	4a50      	ldr	r2, [pc, #320]	; (80021a4 <HAL_ADC_Init+0x340>)
 8002062:	4013      	ands	r3, r2
 8002064:	0019      	movs	r1, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	430a      	orrs	r2, r1
 800206e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	23c0      	movs	r3, #192	; 0xc0
 8002076:	061b      	lsls	r3, r3, #24
 8002078:	429a      	cmp	r2, r3
 800207a:	d018      	beq.n	80020ae <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002080:	2380      	movs	r3, #128	; 0x80
 8002082:	05db      	lsls	r3, r3, #23
 8002084:	429a      	cmp	r2, r3
 8002086:	d012      	beq.n	80020ae <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800208c:	2380      	movs	r3, #128	; 0x80
 800208e:	061b      	lsls	r3, r3, #24
 8002090:	429a      	cmp	r2, r3
 8002092:	d00c      	beq.n	80020ae <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002094:	4b44      	ldr	r3, [pc, #272]	; (80021a8 <HAL_ADC_Init+0x344>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a44      	ldr	r2, [pc, #272]	; (80021ac <HAL_ADC_Init+0x348>)
 800209a:	4013      	ands	r3, r2
 800209c:	0019      	movs	r1, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	23f0      	movs	r3, #240	; 0xf0
 80020a4:	039b      	lsls	r3, r3, #14
 80020a6:	401a      	ands	r2, r3
 80020a8:	4b3f      	ldr	r3, [pc, #252]	; (80021a8 <HAL_ADC_Init+0x344>)
 80020aa:	430a      	orrs	r2, r1
 80020ac:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6818      	ldr	r0, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b6:	001a      	movs	r2, r3
 80020b8:	2100      	movs	r1, #0
 80020ba:	f7ff fdbe 	bl	8001c3a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6818      	ldr	r0, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c6:	493a      	ldr	r1, [pc, #232]	; (80021b0 <HAL_ADC_Init+0x34c>)
 80020c8:	001a      	movs	r2, r3
 80020ca:	f7ff fdb6 	bl	8001c3a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d109      	bne.n	80020ea <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2110      	movs	r1, #16
 80020e2:	4249      	negs	r1, r1
 80020e4:	430a      	orrs	r2, r1
 80020e6:	629a      	str	r2, [r3, #40]	; 0x28
 80020e8:	e018      	b.n	800211c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691a      	ldr	r2, [r3, #16]
 80020ee:	2380      	movs	r3, #128	; 0x80
 80020f0:	039b      	lsls	r3, r3, #14
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d112      	bne.n	800211c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	3b01      	subs	r3, #1
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	221c      	movs	r2, #28
 8002106:	4013      	ands	r3, r2
 8002108:	2210      	movs	r2, #16
 800210a:	4252      	negs	r2, r2
 800210c:	409a      	lsls	r2, r3
 800210e:	0011      	movs	r1, r2
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2100      	movs	r1, #0
 8002122:	0018      	movs	r0, r3
 8002124:	f7ff fda6 	bl	8001c74 <LL_ADC_GetSamplingTimeCommonChannels>
 8002128:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800212e:	429a      	cmp	r2, r3
 8002130:	d10b      	bne.n	800214a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213c:	2203      	movs	r2, #3
 800213e:	4393      	bics	r3, r2
 8002140:	2201      	movs	r2, #1
 8002142:	431a      	orrs	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002148:	e01c      	b.n	8002184 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214e:	2212      	movs	r2, #18
 8002150:	4393      	bics	r3, r2
 8002152:	2210      	movs	r2, #16
 8002154:	431a      	orrs	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215e:	2201      	movs	r2, #1
 8002160:	431a      	orrs	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002166:	231f      	movs	r3, #31
 8002168:	18fb      	adds	r3, r7, r3
 800216a:	2201      	movs	r2, #1
 800216c:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800216e:	e009      	b.n	8002184 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002174:	2210      	movs	r2, #16
 8002176:	431a      	orrs	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800217c:	231f      	movs	r3, #31
 800217e:	18fb      	adds	r3, r7, r3
 8002180:	2201      	movs	r2, #1
 8002182:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002184:	231f      	movs	r3, #31
 8002186:	18fb      	adds	r3, r7, r3
 8002188:	781b      	ldrb	r3, [r3, #0]
}
 800218a:	0018      	movs	r0, r3
 800218c:	46bd      	mov	sp, r7
 800218e:	b008      	add	sp, #32
 8002190:	bd80      	pop	{r7, pc}
 8002192:	46c0      	nop			; (mov r8, r8)
 8002194:	2000000c 	.word	0x2000000c
 8002198:	00030d40 	.word	0x00030d40
 800219c:	fffffefd 	.word	0xfffffefd
 80021a0:	ffde0201 	.word	0xffde0201
 80021a4:	1ffffc02 	.word	0x1ffffc02
 80021a8:	40012708 	.word	0x40012708
 80021ac:	ffc3ffff 	.word	0xffc3ffff
 80021b0:	07ffff04 	.word	0x07ffff04

080021b4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	2b08      	cmp	r3, #8
 80021c4:	d102      	bne.n	80021cc <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80021c6:	2308      	movs	r3, #8
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	e00f      	b.n	80021ec <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	2201      	movs	r2, #1
 80021d4:	4013      	ands	r3, r2
 80021d6:	d007      	beq.n	80021e8 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021dc:	2220      	movs	r2, #32
 80021de:	431a      	orrs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e072      	b.n	80022ce <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80021e8:	2304      	movs	r3, #4
 80021ea:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80021ec:	f7ff fcc0 	bl	8001b70 <HAL_GetTick>
 80021f0:	0003      	movs	r3, r0
 80021f2:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80021f4:	e01f      	b.n	8002236 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	3301      	adds	r3, #1
 80021fa:	d01c      	beq.n	8002236 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80021fc:	f7ff fcb8 	bl	8001b70 <HAL_GetTick>
 8002200:	0002      	movs	r2, r0
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	429a      	cmp	r2, r3
 800220a:	d302      	bcc.n	8002212 <HAL_ADC_PollForConversion+0x5e>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d111      	bne.n	8002236 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	4013      	ands	r3, r2
 800221c:	d10b      	bne.n	8002236 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002222:	2204      	movs	r2, #4
 8002224:	431a      	orrs	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2254      	movs	r2, #84	; 0x54
 800222e:	2100      	movs	r1, #0
 8002230:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e04b      	b.n	80022ce <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	4013      	ands	r3, r2
 8002240:	d0d9      	beq.n	80021f6 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002246:	2280      	movs	r2, #128	; 0x80
 8002248:	0092      	lsls	r2, r2, #2
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	0018      	movs	r0, r3
 8002256:	f7ff fd24 	bl	8001ca2 <LL_ADC_REG_IsTriggerSourceSWStart>
 800225a:	1e03      	subs	r3, r0, #0
 800225c:	d02e      	beq.n	80022bc <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	7e9b      	ldrb	r3, [r3, #26]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d12a      	bne.n	80022bc <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2208      	movs	r2, #8
 800226e:	4013      	ands	r3, r2
 8002270:	2b08      	cmp	r3, #8
 8002272:	d123      	bne.n	80022bc <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	0018      	movs	r0, r3
 800227a:	f7ff fde1 	bl	8001e40 <LL_ADC_REG_IsConversionOngoing>
 800227e:	1e03      	subs	r3, r0, #0
 8002280:	d110      	bne.n	80022a4 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	210c      	movs	r1, #12
 800228e:	438a      	bics	r2, r1
 8002290:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002296:	4a10      	ldr	r2, [pc, #64]	; (80022d8 <HAL_ADC_PollForConversion+0x124>)
 8002298:	4013      	ands	r3, r2
 800229a:	2201      	movs	r2, #1
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	659a      	str	r2, [r3, #88]	; 0x58
 80022a2:	e00b      	b.n	80022bc <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a8:	2220      	movs	r2, #32
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b4:	2201      	movs	r2, #1
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	7e1b      	ldrb	r3, [r3, #24]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d103      	bne.n	80022cc <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	220c      	movs	r2, #12
 80022ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	0018      	movs	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	b004      	add	sp, #16
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	fffffefe 	.word	0xfffffefe

080022dc <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80022dc:	b5b0      	push	{r4, r5, r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	0018      	movs	r0, r3
 80022ea:	f7ff fda9 	bl	8001e40 <LL_ADC_REG_IsConversionOngoing>
 80022ee:	1e03      	subs	r3, r0, #0
 80022f0:	d15f      	bne.n	80023b2 <HAL_ADC_Start_IT+0xd6>
  {
    __HAL_LOCK(hadc);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2254      	movs	r2, #84	; 0x54
 80022f6:	5c9b      	ldrb	r3, [r3, r2]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <HAL_ADC_Start_IT+0x24>
 80022fc:	2302      	movs	r3, #2
 80022fe:	e05f      	b.n	80023c0 <HAL_ADC_Start_IT+0xe4>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2254      	movs	r2, #84	; 0x54
 8002304:	2101      	movs	r1, #1
 8002306:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002308:	250f      	movs	r5, #15
 800230a:	197c      	adds	r4, r7, r5
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	0018      	movs	r0, r3
 8002310:	f000 fa40 	bl	8002794 <ADC_Enable>
 8002314:	0003      	movs	r3, r0
 8002316:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002318:	197b      	adds	r3, r7, r5
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d143      	bne.n	80023a8 <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002324:	4a28      	ldr	r2, [pc, #160]	; (80023c8 <HAL_ADC_Start_IT+0xec>)
 8002326:	4013      	ands	r3, r2
 8002328:	2280      	movs	r2, #128	; 0x80
 800232a:	0052      	lsls	r2, r2, #1
 800232c:	431a      	orrs	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	221c      	movs	r2, #28
 800233e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2254      	movs	r2, #84	; 0x54
 8002344:	2100      	movs	r1, #0
 8002346:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	211c      	movs	r1, #28
 8002354:	438a      	bics	r2, r1
 8002356:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	2b08      	cmp	r3, #8
 800235e:	d108      	bne.n	8002372 <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2108      	movs	r1, #8
 800236c:	430a      	orrs	r2, r1
 800236e:	605a      	str	r2, [r3, #4]
          break;
 8002370:	e008      	b.n	8002384 <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2104      	movs	r1, #4
 800237e:	430a      	orrs	r2, r1
 8002380:	605a      	str	r2, [r3, #4]
          break;
 8002382:	46c0      	nop			; (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002388:	2b00      	cmp	r3, #0
 800238a:	d107      	bne.n	800239c <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2110      	movs	r1, #16
 8002398:	430a      	orrs	r2, r1
 800239a:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	0018      	movs	r0, r3
 80023a2:	f7ff fd3b 	bl	8001e1c <LL_ADC_REG_StartConversion>
 80023a6:	e008      	b.n	80023ba <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2254      	movs	r2, #84	; 0x54
 80023ac:	2100      	movs	r1, #0
 80023ae:	5499      	strb	r1, [r3, r2]
 80023b0:	e003      	b.n	80023ba <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80023b2:	230f      	movs	r3, #15
 80023b4:	18fb      	adds	r3, r7, r3
 80023b6:	2202      	movs	r2, #2
 80023b8:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80023ba:	230f      	movs	r3, #15
 80023bc:	18fb      	adds	r3, r7, r3
 80023be:	781b      	ldrb	r3, [r3, #0]
}
 80023c0:	0018      	movs	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	b004      	add	sp, #16
 80023c6:	bdb0      	pop	{r4, r5, r7, pc}
 80023c8:	fffff0fe 	.word	0xfffff0fe

080023cc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80023da:	0018      	movs	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	b002      	add	sp, #8
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023ee:	2317      	movs	r3, #23
 80023f0:	18fb      	adds	r3, r7, r3
 80023f2:	2200      	movs	r2, #0
 80023f4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2254      	movs	r2, #84	; 0x54
 80023fe:	5c9b      	ldrb	r3, [r3, r2]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d101      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x24>
 8002404:	2302      	movs	r3, #2
 8002406:	e1c0      	b.n	800278a <HAL_ADC_ConfigChannel+0x3a6>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2254      	movs	r2, #84	; 0x54
 800240c:	2101      	movs	r1, #1
 800240e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	0018      	movs	r0, r3
 8002416:	f7ff fd13 	bl	8001e40 <LL_ADC_REG_IsConversionOngoing>
 800241a:	1e03      	subs	r3, r0, #0
 800241c:	d000      	beq.n	8002420 <HAL_ADC_ConfigChannel+0x3c>
 800241e:	e1a3      	b.n	8002768 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b02      	cmp	r3, #2
 8002426:	d100      	bne.n	800242a <HAL_ADC_ConfigChannel+0x46>
 8002428:	e143      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691a      	ldr	r2, [r3, #16]
 800242e:	2380      	movs	r3, #128	; 0x80
 8002430:	061b      	lsls	r3, r3, #24
 8002432:	429a      	cmp	r2, r3
 8002434:	d004      	beq.n	8002440 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800243a:	4ac1      	ldr	r2, [pc, #772]	; (8002740 <HAL_ADC_ConfigChannel+0x35c>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d108      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	0019      	movs	r1, r3
 800244a:	0010      	movs	r0, r2
 800244c:	f7ff fc5a 	bl	8001d04 <LL_ADC_REG_SetSequencerChAdd>
 8002450:	e0c9      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	211f      	movs	r1, #31
 800245c:	400b      	ands	r3, r1
 800245e:	210f      	movs	r1, #15
 8002460:	4099      	lsls	r1, r3
 8002462:	000b      	movs	r3, r1
 8002464:	43db      	mvns	r3, r3
 8002466:	4013      	ands	r3, r2
 8002468:	0019      	movs	r1, r3
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	035b      	lsls	r3, r3, #13
 8002470:	0b5b      	lsrs	r3, r3, #13
 8002472:	d105      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x9c>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	0e9b      	lsrs	r3, r3, #26
 800247a:	221f      	movs	r2, #31
 800247c:	4013      	ands	r3, r2
 800247e:	e098      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2201      	movs	r2, #1
 8002486:	4013      	ands	r3, r2
 8002488:	d000      	beq.n	800248c <HAL_ADC_ConfigChannel+0xa8>
 800248a:	e091      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x1cc>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2202      	movs	r2, #2
 8002492:	4013      	ands	r3, r2
 8002494:	d000      	beq.n	8002498 <HAL_ADC_ConfigChannel+0xb4>
 8002496:	e089      	b.n	80025ac <HAL_ADC_ConfigChannel+0x1c8>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2204      	movs	r2, #4
 800249e:	4013      	ands	r3, r2
 80024a0:	d000      	beq.n	80024a4 <HAL_ADC_ConfigChannel+0xc0>
 80024a2:	e081      	b.n	80025a8 <HAL_ADC_ConfigChannel+0x1c4>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2208      	movs	r2, #8
 80024aa:	4013      	ands	r3, r2
 80024ac:	d000      	beq.n	80024b0 <HAL_ADC_ConfigChannel+0xcc>
 80024ae:	e079      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x1c0>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2210      	movs	r2, #16
 80024b6:	4013      	ands	r3, r2
 80024b8:	d000      	beq.n	80024bc <HAL_ADC_ConfigChannel+0xd8>
 80024ba:	e071      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x1bc>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2220      	movs	r2, #32
 80024c2:	4013      	ands	r3, r2
 80024c4:	d000      	beq.n	80024c8 <HAL_ADC_ConfigChannel+0xe4>
 80024c6:	e069      	b.n	800259c <HAL_ADC_ConfigChannel+0x1b8>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2240      	movs	r2, #64	; 0x40
 80024ce:	4013      	ands	r3, r2
 80024d0:	d000      	beq.n	80024d4 <HAL_ADC_ConfigChannel+0xf0>
 80024d2:	e061      	b.n	8002598 <HAL_ADC_ConfigChannel+0x1b4>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2280      	movs	r2, #128	; 0x80
 80024da:	4013      	ands	r3, r2
 80024dc:	d000      	beq.n	80024e0 <HAL_ADC_ConfigChannel+0xfc>
 80024de:	e059      	b.n	8002594 <HAL_ADC_ConfigChannel+0x1b0>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	2380      	movs	r3, #128	; 0x80
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	4013      	ands	r3, r2
 80024ea:	d151      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x1ac>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	2380      	movs	r3, #128	; 0x80
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4013      	ands	r3, r2
 80024f6:	d149      	bne.n	800258c <HAL_ADC_ConfigChannel+0x1a8>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	2380      	movs	r3, #128	; 0x80
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	4013      	ands	r3, r2
 8002502:	d141      	bne.n	8002588 <HAL_ADC_ConfigChannel+0x1a4>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	2380      	movs	r3, #128	; 0x80
 800250a:	011b      	lsls	r3, r3, #4
 800250c:	4013      	ands	r3, r2
 800250e:	d139      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x1a0>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	2380      	movs	r3, #128	; 0x80
 8002516:	015b      	lsls	r3, r3, #5
 8002518:	4013      	ands	r3, r2
 800251a:	d131      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x19c>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	2380      	movs	r3, #128	; 0x80
 8002522:	019b      	lsls	r3, r3, #6
 8002524:	4013      	ands	r3, r2
 8002526:	d129      	bne.n	800257c <HAL_ADC_ConfigChannel+0x198>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	2380      	movs	r3, #128	; 0x80
 800252e:	01db      	lsls	r3, r3, #7
 8002530:	4013      	ands	r3, r2
 8002532:	d121      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x194>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	2380      	movs	r3, #128	; 0x80
 800253a:	021b      	lsls	r3, r3, #8
 800253c:	4013      	ands	r3, r2
 800253e:	d119      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x190>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	2380      	movs	r3, #128	; 0x80
 8002546:	025b      	lsls	r3, r3, #9
 8002548:	4013      	ands	r3, r2
 800254a:	d111      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x18c>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	2380      	movs	r3, #128	; 0x80
 8002552:	029b      	lsls	r3, r3, #10
 8002554:	4013      	ands	r3, r2
 8002556:	d109      	bne.n	800256c <HAL_ADC_ConfigChannel+0x188>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	2380      	movs	r3, #128	; 0x80
 800255e:	02db      	lsls	r3, r3, #11
 8002560:	4013      	ands	r3, r2
 8002562:	d001      	beq.n	8002568 <HAL_ADC_ConfigChannel+0x184>
 8002564:	2312      	movs	r3, #18
 8002566:	e024      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002568:	2300      	movs	r3, #0
 800256a:	e022      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 800256c:	2311      	movs	r3, #17
 800256e:	e020      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002570:	2310      	movs	r3, #16
 8002572:	e01e      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002574:	230f      	movs	r3, #15
 8002576:	e01c      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002578:	230e      	movs	r3, #14
 800257a:	e01a      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 800257c:	230d      	movs	r3, #13
 800257e:	e018      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002580:	230c      	movs	r3, #12
 8002582:	e016      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002584:	230b      	movs	r3, #11
 8002586:	e014      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002588:	230a      	movs	r3, #10
 800258a:	e012      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 800258c:	2309      	movs	r3, #9
 800258e:	e010      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002590:	2308      	movs	r3, #8
 8002592:	e00e      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002594:	2307      	movs	r3, #7
 8002596:	e00c      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 8002598:	2306      	movs	r3, #6
 800259a:	e00a      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 800259c:	2305      	movs	r3, #5
 800259e:	e008      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 80025a0:	2304      	movs	r3, #4
 80025a2:	e006      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 80025a4:	2303      	movs	r3, #3
 80025a6:	e004      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e002      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 80025ac:	2301      	movs	r3, #1
 80025ae:	e000      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x1ce>
 80025b0:	2300      	movs	r3, #0
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	6852      	ldr	r2, [r2, #4]
 80025b6:	201f      	movs	r0, #31
 80025b8:	4002      	ands	r2, r0
 80025ba:	4093      	lsls	r3, r2
 80025bc:	000a      	movs	r2, r1
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	089b      	lsrs	r3, r3, #2
 80025ca:	1c5a      	adds	r2, r3, #1
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d808      	bhi.n	80025e6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6818      	ldr	r0, [r3, #0]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	6859      	ldr	r1, [r3, #4]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	001a      	movs	r2, r3
 80025e2:	f7ff fb6f 	bl	8001cc4 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6818      	ldr	r0, [r3, #0]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	6819      	ldr	r1, [r3, #0]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	001a      	movs	r2, r3
 80025f4:	f7ff fbaa 	bl	8001d4c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	db00      	blt.n	8002602 <HAL_ADC_ConfigChannel+0x21e>
 8002600:	e0bc      	b.n	800277c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002602:	4b50      	ldr	r3, [pc, #320]	; (8002744 <HAL_ADC_ConfigChannel+0x360>)
 8002604:	0018      	movs	r0, r3
 8002606:	f7ff fb0b 	bl	8001c20 <LL_ADC_GetCommonPathInternalCh>
 800260a:	0003      	movs	r3, r0
 800260c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a4d      	ldr	r2, [pc, #308]	; (8002748 <HAL_ADC_ConfigChannel+0x364>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d122      	bne.n	800265e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	2380      	movs	r3, #128	; 0x80
 800261c:	041b      	lsls	r3, r3, #16
 800261e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002620:	d11d      	bne.n	800265e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	2280      	movs	r2, #128	; 0x80
 8002626:	0412      	lsls	r2, r2, #16
 8002628:	4313      	orrs	r3, r2
 800262a:	4a46      	ldr	r2, [pc, #280]	; (8002744 <HAL_ADC_ConfigChannel+0x360>)
 800262c:	0019      	movs	r1, r3
 800262e:	0010      	movs	r0, r2
 8002630:	f7ff fae2 	bl	8001bf8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002634:	4b45      	ldr	r3, [pc, #276]	; (800274c <HAL_ADC_ConfigChannel+0x368>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4945      	ldr	r1, [pc, #276]	; (8002750 <HAL_ADC_ConfigChannel+0x36c>)
 800263a:	0018      	movs	r0, r3
 800263c:	f7fd fd7e 	bl	800013c <__udivsi3>
 8002640:	0003      	movs	r3, r0
 8002642:	1c5a      	adds	r2, r3, #1
 8002644:	0013      	movs	r3, r2
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	189b      	adds	r3, r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800264e:	e002      	b.n	8002656 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	3b01      	subs	r3, #1
 8002654:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1f9      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800265c:	e08e      	b.n	800277c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a3c      	ldr	r2, [pc, #240]	; (8002754 <HAL_ADC_ConfigChannel+0x370>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d10e      	bne.n	8002686 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	2380      	movs	r3, #128	; 0x80
 800266c:	045b      	lsls	r3, r3, #17
 800266e:	4013      	ands	r3, r2
 8002670:	d109      	bne.n	8002686 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	2280      	movs	r2, #128	; 0x80
 8002676:	0452      	lsls	r2, r2, #17
 8002678:	4313      	orrs	r3, r2
 800267a:	4a32      	ldr	r2, [pc, #200]	; (8002744 <HAL_ADC_ConfigChannel+0x360>)
 800267c:	0019      	movs	r1, r3
 800267e:	0010      	movs	r0, r2
 8002680:	f7ff faba 	bl	8001bf8 <LL_ADC_SetCommonPathInternalCh>
 8002684:	e07a      	b.n	800277c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a33      	ldr	r2, [pc, #204]	; (8002758 <HAL_ADC_ConfigChannel+0x374>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d000      	beq.n	8002692 <HAL_ADC_ConfigChannel+0x2ae>
 8002690:	e074      	b.n	800277c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	2380      	movs	r3, #128	; 0x80
 8002696:	03db      	lsls	r3, r3, #15
 8002698:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800269a:	d000      	beq.n	800269e <HAL_ADC_ConfigChannel+0x2ba>
 800269c:	e06e      	b.n	800277c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	2280      	movs	r2, #128	; 0x80
 80026a2:	03d2      	lsls	r2, r2, #15
 80026a4:	4313      	orrs	r3, r2
 80026a6:	4a27      	ldr	r2, [pc, #156]	; (8002744 <HAL_ADC_ConfigChannel+0x360>)
 80026a8:	0019      	movs	r1, r3
 80026aa:	0010      	movs	r0, r2
 80026ac:	f7ff faa4 	bl	8001bf8 <LL_ADC_SetCommonPathInternalCh>
 80026b0:	e064      	b.n	800277c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691a      	ldr	r2, [r3, #16]
 80026b6:	2380      	movs	r3, #128	; 0x80
 80026b8:	061b      	lsls	r3, r3, #24
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d004      	beq.n	80026c8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80026c2:	4a1f      	ldr	r2, [pc, #124]	; (8002740 <HAL_ADC_ConfigChannel+0x35c>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d107      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	0019      	movs	r1, r3
 80026d2:	0010      	movs	r0, r2
 80026d4:	f7ff fb27 	bl	8001d26 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	da4d      	bge.n	800277c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026e0:	4b18      	ldr	r3, [pc, #96]	; (8002744 <HAL_ADC_ConfigChannel+0x360>)
 80026e2:	0018      	movs	r0, r3
 80026e4:	f7ff fa9c 	bl	8001c20 <LL_ADC_GetCommonPathInternalCh>
 80026e8:	0003      	movs	r3, r0
 80026ea:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a15      	ldr	r2, [pc, #84]	; (8002748 <HAL_ADC_ConfigChannel+0x364>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d108      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4a18      	ldr	r2, [pc, #96]	; (800275c <HAL_ADC_ConfigChannel+0x378>)
 80026fa:	4013      	ands	r3, r2
 80026fc:	4a11      	ldr	r2, [pc, #68]	; (8002744 <HAL_ADC_ConfigChannel+0x360>)
 80026fe:	0019      	movs	r1, r3
 8002700:	0010      	movs	r0, r2
 8002702:	f7ff fa79 	bl	8001bf8 <LL_ADC_SetCommonPathInternalCh>
 8002706:	e039      	b.n	800277c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a11      	ldr	r2, [pc, #68]	; (8002754 <HAL_ADC_ConfigChannel+0x370>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d108      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	4a12      	ldr	r2, [pc, #72]	; (8002760 <HAL_ADC_ConfigChannel+0x37c>)
 8002716:	4013      	ands	r3, r2
 8002718:	4a0a      	ldr	r2, [pc, #40]	; (8002744 <HAL_ADC_ConfigChannel+0x360>)
 800271a:	0019      	movs	r1, r3
 800271c:	0010      	movs	r0, r2
 800271e:	f7ff fa6b 	bl	8001bf8 <LL_ADC_SetCommonPathInternalCh>
 8002722:	e02b      	b.n	800277c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a0b      	ldr	r2, [pc, #44]	; (8002758 <HAL_ADC_ConfigChannel+0x374>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d126      	bne.n	800277c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	4a0c      	ldr	r2, [pc, #48]	; (8002764 <HAL_ADC_ConfigChannel+0x380>)
 8002732:	4013      	ands	r3, r2
 8002734:	4a03      	ldr	r2, [pc, #12]	; (8002744 <HAL_ADC_ConfigChannel+0x360>)
 8002736:	0019      	movs	r1, r3
 8002738:	0010      	movs	r0, r2
 800273a:	f7ff fa5d 	bl	8001bf8 <LL_ADC_SetCommonPathInternalCh>
 800273e:	e01d      	b.n	800277c <HAL_ADC_ConfigChannel+0x398>
 8002740:	80000004 	.word	0x80000004
 8002744:	40012708 	.word	0x40012708
 8002748:	b0001000 	.word	0xb0001000
 800274c:	2000000c 	.word	0x2000000c
 8002750:	00030d40 	.word	0x00030d40
 8002754:	b8004000 	.word	0xb8004000
 8002758:	b4002000 	.word	0xb4002000
 800275c:	ff7fffff 	.word	0xff7fffff
 8002760:	feffffff 	.word	0xfeffffff
 8002764:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276c:	2220      	movs	r2, #32
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002774:	2317      	movs	r3, #23
 8002776:	18fb      	adds	r3, r7, r3
 8002778:	2201      	movs	r2, #1
 800277a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2254      	movs	r2, #84	; 0x54
 8002780:	2100      	movs	r1, #0
 8002782:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002784:	2317      	movs	r3, #23
 8002786:	18fb      	adds	r3, r7, r3
 8002788:	781b      	ldrb	r3, [r3, #0]
}
 800278a:	0018      	movs	r0, r3
 800278c:	46bd      	mov	sp, r7
 800278e:	b006      	add	sp, #24
 8002790:	bd80      	pop	{r7, pc}
 8002792:	46c0      	nop			; (mov r8, r8)

08002794 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800279c:	2300      	movs	r3, #0
 800279e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	0018      	movs	r0, r3
 80027a6:	f7ff fb27 	bl	8001df8 <LL_ADC_IsEnabled>
 80027aa:	1e03      	subs	r3, r0, #0
 80027ac:	d000      	beq.n	80027b0 <ADC_Enable+0x1c>
 80027ae:	e069      	b.n	8002884 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	4a36      	ldr	r2, [pc, #216]	; (8002890 <ADC_Enable+0xfc>)
 80027b8:	4013      	ands	r3, r2
 80027ba:	d00d      	beq.n	80027d8 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c0:	2210      	movs	r2, #16
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027cc:	2201      	movs	r2, #1
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e056      	b.n	8002886 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	0018      	movs	r0, r3
 80027de:	f7ff faf9 	bl	8001dd4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80027e2:	4b2c      	ldr	r3, [pc, #176]	; (8002894 <ADC_Enable+0x100>)
 80027e4:	0018      	movs	r0, r3
 80027e6:	f7ff fa1b 	bl	8001c20 <LL_ADC_GetCommonPathInternalCh>
 80027ea:	0002      	movs	r2, r0
 80027ec:	2380      	movs	r3, #128	; 0x80
 80027ee:	041b      	lsls	r3, r3, #16
 80027f0:	4013      	ands	r3, r2
 80027f2:	d00f      	beq.n	8002814 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027f4:	4b28      	ldr	r3, [pc, #160]	; (8002898 <ADC_Enable+0x104>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4928      	ldr	r1, [pc, #160]	; (800289c <ADC_Enable+0x108>)
 80027fa:	0018      	movs	r0, r3
 80027fc:	f7fd fc9e 	bl	800013c <__udivsi3>
 8002800:	0003      	movs	r3, r0
 8002802:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002804:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002806:	e002      	b.n	800280e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	3b01      	subs	r3, #1
 800280c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1f9      	bne.n	8002808 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	7e5b      	ldrb	r3, [r3, #25]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d033      	beq.n	8002884 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800281c:	f7ff f9a8 	bl	8001b70 <HAL_GetTick>
 8002820:	0003      	movs	r3, r0
 8002822:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002824:	e027      	b.n	8002876 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	0018      	movs	r0, r3
 800282c:	f7ff fae4 	bl	8001df8 <LL_ADC_IsEnabled>
 8002830:	1e03      	subs	r3, r0, #0
 8002832:	d104      	bne.n	800283e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	0018      	movs	r0, r3
 800283a:	f7ff facb 	bl	8001dd4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800283e:	f7ff f997 	bl	8001b70 <HAL_GetTick>
 8002842:	0002      	movs	r2, r0
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d914      	bls.n	8002876 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2201      	movs	r2, #1
 8002854:	4013      	ands	r3, r2
 8002856:	2b01      	cmp	r3, #1
 8002858:	d00d      	beq.n	8002876 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285e:	2210      	movs	r2, #16
 8002860:	431a      	orrs	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286a:	2201      	movs	r2, #1
 800286c:	431a      	orrs	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e007      	b.n	8002886 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2201      	movs	r2, #1
 800287e:	4013      	ands	r3, r2
 8002880:	2b01      	cmp	r3, #1
 8002882:	d1d0      	bne.n	8002826 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	0018      	movs	r0, r3
 8002888:	46bd      	mov	sp, r7
 800288a:	b004      	add	sp, #16
 800288c:	bd80      	pop	{r7, pc}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	80000017 	.word	0x80000017
 8002894:	40012708 	.word	0x40012708
 8002898:	2000000c 	.word	0x2000000c
 800289c:	00030d40 	.word	0x00030d40

080028a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	0002      	movs	r2, r0
 80028a8:	1dfb      	adds	r3, r7, #7
 80028aa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80028ac:	1dfb      	adds	r3, r7, #7
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b7f      	cmp	r3, #127	; 0x7f
 80028b2:	d809      	bhi.n	80028c8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028b4:	1dfb      	adds	r3, r7, #7
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	001a      	movs	r2, r3
 80028ba:	231f      	movs	r3, #31
 80028bc:	401a      	ands	r2, r3
 80028be:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <__NVIC_EnableIRQ+0x30>)
 80028c0:	2101      	movs	r1, #1
 80028c2:	4091      	lsls	r1, r2
 80028c4:	000a      	movs	r2, r1
 80028c6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80028c8:	46c0      	nop			; (mov r8, r8)
 80028ca:	46bd      	mov	sp, r7
 80028cc:	b002      	add	sp, #8
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	e000e100 	.word	0xe000e100

080028d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028d4:	b590      	push	{r4, r7, lr}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	0002      	movs	r2, r0
 80028dc:	6039      	str	r1, [r7, #0]
 80028de:	1dfb      	adds	r3, r7, #7
 80028e0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80028e2:	1dfb      	adds	r3, r7, #7
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b7f      	cmp	r3, #127	; 0x7f
 80028e8:	d828      	bhi.n	800293c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028ea:	4a2f      	ldr	r2, [pc, #188]	; (80029a8 <__NVIC_SetPriority+0xd4>)
 80028ec:	1dfb      	adds	r3, r7, #7
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	b25b      	sxtb	r3, r3
 80028f2:	089b      	lsrs	r3, r3, #2
 80028f4:	33c0      	adds	r3, #192	; 0xc0
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	589b      	ldr	r3, [r3, r2]
 80028fa:	1dfa      	adds	r2, r7, #7
 80028fc:	7812      	ldrb	r2, [r2, #0]
 80028fe:	0011      	movs	r1, r2
 8002900:	2203      	movs	r2, #3
 8002902:	400a      	ands	r2, r1
 8002904:	00d2      	lsls	r2, r2, #3
 8002906:	21ff      	movs	r1, #255	; 0xff
 8002908:	4091      	lsls	r1, r2
 800290a:	000a      	movs	r2, r1
 800290c:	43d2      	mvns	r2, r2
 800290e:	401a      	ands	r2, r3
 8002910:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	019b      	lsls	r3, r3, #6
 8002916:	22ff      	movs	r2, #255	; 0xff
 8002918:	401a      	ands	r2, r3
 800291a:	1dfb      	adds	r3, r7, #7
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	0018      	movs	r0, r3
 8002920:	2303      	movs	r3, #3
 8002922:	4003      	ands	r3, r0
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002928:	481f      	ldr	r0, [pc, #124]	; (80029a8 <__NVIC_SetPriority+0xd4>)
 800292a:	1dfb      	adds	r3, r7, #7
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	b25b      	sxtb	r3, r3
 8002930:	089b      	lsrs	r3, r3, #2
 8002932:	430a      	orrs	r2, r1
 8002934:	33c0      	adds	r3, #192	; 0xc0
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800293a:	e031      	b.n	80029a0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800293c:	4a1b      	ldr	r2, [pc, #108]	; (80029ac <__NVIC_SetPriority+0xd8>)
 800293e:	1dfb      	adds	r3, r7, #7
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	0019      	movs	r1, r3
 8002944:	230f      	movs	r3, #15
 8002946:	400b      	ands	r3, r1
 8002948:	3b08      	subs	r3, #8
 800294a:	089b      	lsrs	r3, r3, #2
 800294c:	3306      	adds	r3, #6
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	18d3      	adds	r3, r2, r3
 8002952:	3304      	adds	r3, #4
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	1dfa      	adds	r2, r7, #7
 8002958:	7812      	ldrb	r2, [r2, #0]
 800295a:	0011      	movs	r1, r2
 800295c:	2203      	movs	r2, #3
 800295e:	400a      	ands	r2, r1
 8002960:	00d2      	lsls	r2, r2, #3
 8002962:	21ff      	movs	r1, #255	; 0xff
 8002964:	4091      	lsls	r1, r2
 8002966:	000a      	movs	r2, r1
 8002968:	43d2      	mvns	r2, r2
 800296a:	401a      	ands	r2, r3
 800296c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	019b      	lsls	r3, r3, #6
 8002972:	22ff      	movs	r2, #255	; 0xff
 8002974:	401a      	ands	r2, r3
 8002976:	1dfb      	adds	r3, r7, #7
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	0018      	movs	r0, r3
 800297c:	2303      	movs	r3, #3
 800297e:	4003      	ands	r3, r0
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002984:	4809      	ldr	r0, [pc, #36]	; (80029ac <__NVIC_SetPriority+0xd8>)
 8002986:	1dfb      	adds	r3, r7, #7
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	001c      	movs	r4, r3
 800298c:	230f      	movs	r3, #15
 800298e:	4023      	ands	r3, r4
 8002990:	3b08      	subs	r3, #8
 8002992:	089b      	lsrs	r3, r3, #2
 8002994:	430a      	orrs	r2, r1
 8002996:	3306      	adds	r3, #6
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	18c3      	adds	r3, r0, r3
 800299c:	3304      	adds	r3, #4
 800299e:	601a      	str	r2, [r3, #0]
}
 80029a0:	46c0      	nop			; (mov r8, r8)
 80029a2:	46bd      	mov	sp, r7
 80029a4:	b003      	add	sp, #12
 80029a6:	bd90      	pop	{r4, r7, pc}
 80029a8:	e000e100 	.word	0xe000e100
 80029ac:	e000ed00 	.word	0xe000ed00

080029b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	1e5a      	subs	r2, r3, #1
 80029bc:	2380      	movs	r3, #128	; 0x80
 80029be:	045b      	lsls	r3, r3, #17
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d301      	bcc.n	80029c8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029c4:	2301      	movs	r3, #1
 80029c6:	e010      	b.n	80029ea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029c8:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <SysTick_Config+0x44>)
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	3a01      	subs	r2, #1
 80029ce:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029d0:	2301      	movs	r3, #1
 80029d2:	425b      	negs	r3, r3
 80029d4:	2103      	movs	r1, #3
 80029d6:	0018      	movs	r0, r3
 80029d8:	f7ff ff7c 	bl	80028d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029dc:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <SysTick_Config+0x44>)
 80029de:	2200      	movs	r2, #0
 80029e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029e2:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <SysTick_Config+0x44>)
 80029e4:	2207      	movs	r2, #7
 80029e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	0018      	movs	r0, r3
 80029ec:	46bd      	mov	sp, r7
 80029ee:	b002      	add	sp, #8
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	e000e010 	.word	0xe000e010

080029f8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60b9      	str	r1, [r7, #8]
 8002a00:	607a      	str	r2, [r7, #4]
 8002a02:	210f      	movs	r1, #15
 8002a04:	187b      	adds	r3, r7, r1
 8002a06:	1c02      	adds	r2, r0, #0
 8002a08:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	187b      	adds	r3, r7, r1
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	b25b      	sxtb	r3, r3
 8002a12:	0011      	movs	r1, r2
 8002a14:	0018      	movs	r0, r3
 8002a16:	f7ff ff5d 	bl	80028d4 <__NVIC_SetPriority>
}
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	b004      	add	sp, #16
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	0002      	movs	r2, r0
 8002a2a:	1dfb      	adds	r3, r7, #7
 8002a2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a2e:	1dfb      	adds	r3, r7, #7
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	b25b      	sxtb	r3, r3
 8002a34:	0018      	movs	r0, r3
 8002a36:	f7ff ff33 	bl	80028a0 <__NVIC_EnableIRQ>
}
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	b002      	add	sp, #8
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b082      	sub	sp, #8
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f7ff ffaf 	bl	80029b0 <SysTick_Config>
 8002a52:	0003      	movs	r3, r0
}
 8002a54:	0018      	movs	r0, r3
 8002a56:	46bd      	mov	sp, r7
 8002a58:	b002      	add	sp, #8
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e050      	b.n	8002b10 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2225      	movs	r2, #37	; 0x25
 8002a72:	5c9b      	ldrb	r3, [r3, r2]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d008      	beq.n	8002a8c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2204      	movs	r2, #4
 8002a7e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2224      	movs	r2, #36	; 0x24
 8002a84:	2100      	movs	r1, #0
 8002a86:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e041      	b.n	8002b10 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	210e      	movs	r1, #14
 8002a98:	438a      	bics	r2, r1
 8002a9a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa6:	491c      	ldr	r1, [pc, #112]	; (8002b18 <HAL_DMA_Abort+0xbc>)
 8002aa8:	400a      	ands	r2, r1
 8002aaa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	438a      	bics	r2, r1
 8002aba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8002abc:	4b17      	ldr	r3, [pc, #92]	; (8002b1c <HAL_DMA_Abort+0xc0>)
 8002abe:	6859      	ldr	r1, [r3, #4]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac4:	221c      	movs	r2, #28
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	2201      	movs	r2, #1
 8002aca:	409a      	lsls	r2, r3
 8002acc:	4b13      	ldr	r3, [pc, #76]	; (8002b1c <HAL_DMA_Abort+0xc0>)
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002ada:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00c      	beq.n	8002afe <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aee:	490a      	ldr	r1, [pc, #40]	; (8002b18 <HAL_DMA_Abort+0xbc>)
 8002af0:	400a      	ands	r2, r1
 8002af2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002afc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2225      	movs	r2, #37	; 0x25
 8002b02:	2101      	movs	r1, #1
 8002b04:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2224      	movs	r2, #36	; 0x24
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	0018      	movs	r0, r3
 8002b12:	46bd      	mov	sp, r7
 8002b14:	b002      	add	sp, #8
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	fffffeff 	.word	0xfffffeff
 8002b1c:	40020000 	.word	0x40020000

08002b20 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b28:	210f      	movs	r1, #15
 8002b2a:	187b      	adds	r3, r7, r1
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2225      	movs	r2, #37	; 0x25
 8002b34:	5c9b      	ldrb	r3, [r3, r2]
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d006      	beq.n	8002b4a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2204      	movs	r2, #4
 8002b40:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002b42:	187b      	adds	r3, r7, r1
 8002b44:	2201      	movs	r2, #1
 8002b46:	701a      	strb	r2, [r3, #0]
 8002b48:	e049      	b.n	8002bde <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	210e      	movs	r1, #14
 8002b56:	438a      	bics	r2, r1
 8002b58:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2101      	movs	r1, #1
 8002b66:	438a      	bics	r2, r1
 8002b68:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b74:	491d      	ldr	r1, [pc, #116]	; (8002bec <HAL_DMA_Abort_IT+0xcc>)
 8002b76:	400a      	ands	r2, r1
 8002b78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002b7a:	4b1d      	ldr	r3, [pc, #116]	; (8002bf0 <HAL_DMA_Abort_IT+0xd0>)
 8002b7c:	6859      	ldr	r1, [r3, #4]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	221c      	movs	r2, #28
 8002b84:	4013      	ands	r3, r2
 8002b86:	2201      	movs	r2, #1
 8002b88:	409a      	lsls	r2, r3
 8002b8a:	4b19      	ldr	r3, [pc, #100]	; (8002bf0 <HAL_DMA_Abort_IT+0xd0>)
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002b98:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00c      	beq.n	8002bbc <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bac:	490f      	ldr	r1, [pc, #60]	; (8002bec <HAL_DMA_Abort_IT+0xcc>)
 8002bae:	400a      	ands	r2, r1
 8002bb0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002bba:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2225      	movs	r2, #37	; 0x25
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2224      	movs	r2, #36	; 0x24
 8002bc8:	2100      	movs	r1, #0
 8002bca:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d004      	beq.n	8002bde <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	0010      	movs	r0, r2
 8002bdc:	4798      	blx	r3
    }
  }
  return status;
 8002bde:	230f      	movs	r3, #15
 8002be0:	18fb      	adds	r3, r7, r3
 8002be2:	781b      	ldrb	r3, [r3, #0]
}
 8002be4:	0018      	movs	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	b004      	add	sp, #16
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	fffffeff 	.word	0xfffffeff
 8002bf0:	40020000 	.word	0x40020000

08002bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c02:	e147      	b.n	8002e94 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2101      	movs	r1, #1
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	4091      	lsls	r1, r2
 8002c0e:	000a      	movs	r2, r1
 8002c10:	4013      	ands	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d100      	bne.n	8002c1c <HAL_GPIO_Init+0x28>
 8002c1a:	e138      	b.n	8002e8e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2203      	movs	r2, #3
 8002c22:	4013      	ands	r3, r2
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d005      	beq.n	8002c34 <HAL_GPIO_Init+0x40>
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2203      	movs	r2, #3
 8002c2e:	4013      	ands	r3, r2
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d130      	bne.n	8002c96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	2203      	movs	r2, #3
 8002c40:	409a      	lsls	r2, r3
 8002c42:	0013      	movs	r3, r2
 8002c44:	43da      	mvns	r2, r3
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	68da      	ldr	r2, [r3, #12]
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	409a      	lsls	r2, r3
 8002c56:	0013      	movs	r3, r2
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	409a      	lsls	r2, r3
 8002c70:	0013      	movs	r3, r2
 8002c72:	43da      	mvns	r2, r3
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	4013      	ands	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	091b      	lsrs	r3, r3, #4
 8002c80:	2201      	movs	r2, #1
 8002c82:	401a      	ands	r2, r3
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	409a      	lsls	r2, r3
 8002c88:	0013      	movs	r3, r2
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2b03      	cmp	r3, #3
 8002ca0:	d017      	beq.n	8002cd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	2203      	movs	r2, #3
 8002cae:	409a      	lsls	r2, r3
 8002cb0:	0013      	movs	r3, r2
 8002cb2:	43da      	mvns	r2, r3
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	409a      	lsls	r2, r3
 8002cc4:	0013      	movs	r3, r2
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2203      	movs	r2, #3
 8002cd8:	4013      	ands	r3, r2
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d123      	bne.n	8002d26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	08da      	lsrs	r2, r3, #3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3208      	adds	r2, #8
 8002ce6:	0092      	lsls	r2, r2, #2
 8002ce8:	58d3      	ldr	r3, [r2, r3]
 8002cea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	2207      	movs	r2, #7
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	220f      	movs	r2, #15
 8002cf6:	409a      	lsls	r2, r3
 8002cf8:	0013      	movs	r3, r2
 8002cfa:	43da      	mvns	r2, r3
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	691a      	ldr	r2, [r3, #16]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2107      	movs	r1, #7
 8002d0a:	400b      	ands	r3, r1
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	409a      	lsls	r2, r3
 8002d10:	0013      	movs	r3, r2
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	08da      	lsrs	r2, r3, #3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3208      	adds	r2, #8
 8002d20:	0092      	lsls	r2, r2, #2
 8002d22:	6939      	ldr	r1, [r7, #16]
 8002d24:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	2203      	movs	r2, #3
 8002d32:	409a      	lsls	r2, r3
 8002d34:	0013      	movs	r3, r2
 8002d36:	43da      	mvns	r2, r3
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2203      	movs	r2, #3
 8002d44:	401a      	ands	r2, r3
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	409a      	lsls	r2, r3
 8002d4c:	0013      	movs	r3, r2
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	23c0      	movs	r3, #192	; 0xc0
 8002d60:	029b      	lsls	r3, r3, #10
 8002d62:	4013      	ands	r3, r2
 8002d64:	d100      	bne.n	8002d68 <HAL_GPIO_Init+0x174>
 8002d66:	e092      	b.n	8002e8e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002d68:	4a50      	ldr	r2, [pc, #320]	; (8002eac <HAL_GPIO_Init+0x2b8>)
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	089b      	lsrs	r3, r3, #2
 8002d6e:	3318      	adds	r3, #24
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	589b      	ldr	r3, [r3, r2]
 8002d74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	2203      	movs	r2, #3
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	220f      	movs	r2, #15
 8002d80:	409a      	lsls	r2, r3
 8002d82:	0013      	movs	r3, r2
 8002d84:	43da      	mvns	r2, r3
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	23a0      	movs	r3, #160	; 0xa0
 8002d90:	05db      	lsls	r3, r3, #23
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d013      	beq.n	8002dbe <HAL_GPIO_Init+0x1ca>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a45      	ldr	r2, [pc, #276]	; (8002eb0 <HAL_GPIO_Init+0x2bc>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d00d      	beq.n	8002dba <HAL_GPIO_Init+0x1c6>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a44      	ldr	r2, [pc, #272]	; (8002eb4 <HAL_GPIO_Init+0x2c0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d007      	beq.n	8002db6 <HAL_GPIO_Init+0x1c2>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a43      	ldr	r2, [pc, #268]	; (8002eb8 <HAL_GPIO_Init+0x2c4>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d101      	bne.n	8002db2 <HAL_GPIO_Init+0x1be>
 8002dae:	2303      	movs	r3, #3
 8002db0:	e006      	b.n	8002dc0 <HAL_GPIO_Init+0x1cc>
 8002db2:	2305      	movs	r3, #5
 8002db4:	e004      	b.n	8002dc0 <HAL_GPIO_Init+0x1cc>
 8002db6:	2302      	movs	r3, #2
 8002db8:	e002      	b.n	8002dc0 <HAL_GPIO_Init+0x1cc>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <HAL_GPIO_Init+0x1cc>
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	2103      	movs	r1, #3
 8002dc4:	400a      	ands	r2, r1
 8002dc6:	00d2      	lsls	r2, r2, #3
 8002dc8:	4093      	lsls	r3, r2
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002dd0:	4936      	ldr	r1, [pc, #216]	; (8002eac <HAL_GPIO_Init+0x2b8>)
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	089b      	lsrs	r3, r3, #2
 8002dd6:	3318      	adds	r3, #24
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002dde:	4b33      	ldr	r3, [pc, #204]	; (8002eac <HAL_GPIO_Init+0x2b8>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	43da      	mvns	r2, r3
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	4013      	ands	r3, r2
 8002dec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	2380      	movs	r3, #128	; 0x80
 8002df4:	035b      	lsls	r3, r3, #13
 8002df6:	4013      	ands	r3, r2
 8002df8:	d003      	beq.n	8002e02 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e02:	4b2a      	ldr	r3, [pc, #168]	; (8002eac <HAL_GPIO_Init+0x2b8>)
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002e08:	4b28      	ldr	r3, [pc, #160]	; (8002eac <HAL_GPIO_Init+0x2b8>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	43da      	mvns	r2, r3
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	4013      	ands	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	2380      	movs	r3, #128	; 0x80
 8002e1e:	039b      	lsls	r3, r3, #14
 8002e20:	4013      	ands	r3, r2
 8002e22:	d003      	beq.n	8002e2c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e2c:	4b1f      	ldr	r3, [pc, #124]	; (8002eac <HAL_GPIO_Init+0x2b8>)
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e32:	4a1e      	ldr	r2, [pc, #120]	; (8002eac <HAL_GPIO_Init+0x2b8>)
 8002e34:	2384      	movs	r3, #132	; 0x84
 8002e36:	58d3      	ldr	r3, [r2, r3]
 8002e38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	43da      	mvns	r2, r3
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	4013      	ands	r3, r2
 8002e42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	2380      	movs	r3, #128	; 0x80
 8002e4a:	029b      	lsls	r3, r3, #10
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	d003      	beq.n	8002e58 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e58:	4914      	ldr	r1, [pc, #80]	; (8002eac <HAL_GPIO_Init+0x2b8>)
 8002e5a:	2284      	movs	r2, #132	; 0x84
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002e60:	4a12      	ldr	r2, [pc, #72]	; (8002eac <HAL_GPIO_Init+0x2b8>)
 8002e62:	2380      	movs	r3, #128	; 0x80
 8002e64:	58d3      	ldr	r3, [r2, r3]
 8002e66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	43da      	mvns	r2, r3
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	2380      	movs	r3, #128	; 0x80
 8002e78:	025b      	lsls	r3, r3, #9
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	d003      	beq.n	8002e86 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e86:	4909      	ldr	r1, [pc, #36]	; (8002eac <HAL_GPIO_Init+0x2b8>)
 8002e88:	2280      	movs	r2, #128	; 0x80
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	3301      	adds	r3, #1
 8002e92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	40da      	lsrs	r2, r3
 8002e9c:	1e13      	subs	r3, r2, #0
 8002e9e:	d000      	beq.n	8002ea2 <HAL_GPIO_Init+0x2ae>
 8002ea0:	e6b0      	b.n	8002c04 <HAL_GPIO_Init+0x10>
  }
}
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	46c0      	nop			; (mov r8, r8)
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	b006      	add	sp, #24
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40021800 	.word	0x40021800
 8002eb0:	50000400 	.word	0x50000400
 8002eb4:	50000800 	.word	0x50000800
 8002eb8:	50000c00 	.word	0x50000c00

08002ebc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	000a      	movs	r2, r1
 8002ec6:	1cbb      	adds	r3, r7, #2
 8002ec8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	1cba      	adds	r2, r7, #2
 8002ed0:	8812      	ldrh	r2, [r2, #0]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	d004      	beq.n	8002ee0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002ed6:	230f      	movs	r3, #15
 8002ed8:	18fb      	adds	r3, r7, r3
 8002eda:	2201      	movs	r2, #1
 8002edc:	701a      	strb	r2, [r3, #0]
 8002ede:	e003      	b.n	8002ee8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ee0:	230f      	movs	r3, #15
 8002ee2:	18fb      	adds	r3, r7, r3
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002ee8:	230f      	movs	r3, #15
 8002eea:	18fb      	adds	r3, r7, r3
 8002eec:	781b      	ldrb	r3, [r3, #0]
}
 8002eee:	0018      	movs	r0, r3
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	b004      	add	sp, #16
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
 8002efe:	0008      	movs	r0, r1
 8002f00:	0011      	movs	r1, r2
 8002f02:	1cbb      	adds	r3, r7, #2
 8002f04:	1c02      	adds	r2, r0, #0
 8002f06:	801a      	strh	r2, [r3, #0]
 8002f08:	1c7b      	adds	r3, r7, #1
 8002f0a:	1c0a      	adds	r2, r1, #0
 8002f0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f0e:	1c7b      	adds	r3, r7, #1
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d004      	beq.n	8002f20 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f16:	1cbb      	adds	r3, r7, #2
 8002f18:	881a      	ldrh	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f1e:	e003      	b.n	8002f28 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f20:	1cbb      	adds	r3, r7, #2
 8002f22:	881a      	ldrh	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f28:	46c0      	nop			; (mov r8, r8)
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	b002      	add	sp, #8
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	000a      	movs	r2, r1
 8002f3a:	1cbb      	adds	r3, r7, #2
 8002f3c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f44:	1cbb      	adds	r3, r7, #2
 8002f46:	881b      	ldrh	r3, [r3, #0]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	041a      	lsls	r2, r3, #16
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	43db      	mvns	r3, r3
 8002f52:	1cb9      	adds	r1, r7, #2
 8002f54:	8809      	ldrh	r1, [r1, #0]
 8002f56:	400b      	ands	r3, r1
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	619a      	str	r2, [r3, #24]
}
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	46bd      	mov	sp, r7
 8002f62:	b004      	add	sp, #16
 8002f64:	bd80      	pop	{r7, pc}
	...

08002f68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e08f      	b.n	800309a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2241      	movs	r2, #65	; 0x41
 8002f7e:	5c9b      	ldrb	r3, [r3, r2]
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d107      	bne.n	8002f96 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2240      	movs	r2, #64	; 0x40
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	0018      	movs	r0, r3
 8002f92:	f7fe fb23 	bl	80015dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2241      	movs	r2, #65	; 0x41
 8002f9a:	2124      	movs	r1, #36	; 0x24
 8002f9c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2101      	movs	r1, #1
 8002faa:	438a      	bics	r2, r1
 8002fac:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	493b      	ldr	r1, [pc, #236]	; (80030a4 <HAL_I2C_Init+0x13c>)
 8002fb8:	400a      	ands	r2, r1
 8002fba:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4938      	ldr	r1, [pc, #224]	; (80030a8 <HAL_I2C_Init+0x140>)
 8002fc8:	400a      	ands	r2, r1
 8002fca:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d108      	bne.n	8002fe6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2180      	movs	r1, #128	; 0x80
 8002fde:	0209      	lsls	r1, r1, #8
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	609a      	str	r2, [r3, #8]
 8002fe4:	e007      	b.n	8002ff6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2184      	movs	r1, #132	; 0x84
 8002ff0:	0209      	lsls	r1, r1, #8
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d109      	bne.n	8003012 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2180      	movs	r1, #128	; 0x80
 800300a:	0109      	lsls	r1, r1, #4
 800300c:	430a      	orrs	r2, r1
 800300e:	605a      	str	r2, [r3, #4]
 8003010:	e007      	b.n	8003022 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4923      	ldr	r1, [pc, #140]	; (80030ac <HAL_I2C_Init+0x144>)
 800301e:	400a      	ands	r2, r1
 8003020:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4920      	ldr	r1, [pc, #128]	; (80030b0 <HAL_I2C_Init+0x148>)
 800302e:	430a      	orrs	r2, r1
 8003030:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68da      	ldr	r2, [r3, #12]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	491a      	ldr	r1, [pc, #104]	; (80030a8 <HAL_I2C_Init+0x140>)
 800303e:	400a      	ands	r2, r1
 8003040:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691a      	ldr	r2, [r3, #16]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	431a      	orrs	r2, r3
 800304c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	430a      	orrs	r2, r1
 800305a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	69d9      	ldr	r1, [r3, #28]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a1a      	ldr	r2, [r3, #32]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2101      	movs	r1, #1
 8003078:	430a      	orrs	r2, r1
 800307a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2241      	movs	r2, #65	; 0x41
 8003086:	2120      	movs	r1, #32
 8003088:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2242      	movs	r2, #66	; 0x42
 8003094:	2100      	movs	r1, #0
 8003096:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	0018      	movs	r0, r3
 800309c:	46bd      	mov	sp, r7
 800309e:	b002      	add	sp, #8
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	46c0      	nop			; (mov r8, r8)
 80030a4:	f0ffffff 	.word	0xf0ffffff
 80030a8:	ffff7fff 	.word	0xffff7fff
 80030ac:	fffff7ff 	.word	0xfffff7ff
 80030b0:	02008000 	.word	0x02008000

080030b4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80030b4:	b590      	push	{r4, r7, lr}
 80030b6:	b089      	sub	sp, #36	; 0x24
 80030b8:	af02      	add	r7, sp, #8
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	0008      	movs	r0, r1
 80030be:	607a      	str	r2, [r7, #4]
 80030c0:	0019      	movs	r1, r3
 80030c2:	230a      	movs	r3, #10
 80030c4:	18fb      	adds	r3, r7, r3
 80030c6:	1c02      	adds	r2, r0, #0
 80030c8:	801a      	strh	r2, [r3, #0]
 80030ca:	2308      	movs	r3, #8
 80030cc:	18fb      	adds	r3, r7, r3
 80030ce:	1c0a      	adds	r2, r1, #0
 80030d0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2241      	movs	r2, #65	; 0x41
 80030d6:	5c9b      	ldrb	r3, [r3, r2]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b20      	cmp	r3, #32
 80030dc:	d000      	beq.n	80030e0 <HAL_I2C_Master_Transmit+0x2c>
 80030de:	e10a      	b.n	80032f6 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2240      	movs	r2, #64	; 0x40
 80030e4:	5c9b      	ldrb	r3, [r3, r2]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d101      	bne.n	80030ee <HAL_I2C_Master_Transmit+0x3a>
 80030ea:	2302      	movs	r3, #2
 80030ec:	e104      	b.n	80032f8 <HAL_I2C_Master_Transmit+0x244>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2240      	movs	r2, #64	; 0x40
 80030f2:	2101      	movs	r1, #1
 80030f4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80030f6:	f7fe fd3b 	bl	8001b70 <HAL_GetTick>
 80030fa:	0003      	movs	r3, r0
 80030fc:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030fe:	2380      	movs	r3, #128	; 0x80
 8003100:	0219      	lsls	r1, r3, #8
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	2319      	movs	r3, #25
 800310a:	2201      	movs	r2, #1
 800310c:	f000 f91e 	bl	800334c <I2C_WaitOnFlagUntilTimeout>
 8003110:	1e03      	subs	r3, r0, #0
 8003112:	d001      	beq.n	8003118 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e0ef      	b.n	80032f8 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2241      	movs	r2, #65	; 0x41
 800311c:	2121      	movs	r1, #33	; 0x21
 800311e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2242      	movs	r2, #66	; 0x42
 8003124:	2110      	movs	r1, #16
 8003126:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2208      	movs	r2, #8
 8003138:	18ba      	adds	r2, r7, r2
 800313a:	8812      	ldrh	r2, [r2, #0]
 800313c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003148:	b29b      	uxth	r3, r3
 800314a:	2bff      	cmp	r3, #255	; 0xff
 800314c:	d906      	bls.n	800315c <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	22ff      	movs	r2, #255	; 0xff
 8003152:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003154:	2380      	movs	r3, #128	; 0x80
 8003156:	045b      	lsls	r3, r3, #17
 8003158:	617b      	str	r3, [r7, #20]
 800315a:	e007      	b.n	800316c <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003160:	b29a      	uxth	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003166:	2380      	movs	r3, #128	; 0x80
 8003168:	049b      	lsls	r3, r3, #18
 800316a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003170:	2b00      	cmp	r3, #0
 8003172:	d027      	beq.n	80031c4 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	781a      	ldrb	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003184:	1c5a      	adds	r2, r3, #1
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318e:	b29b      	uxth	r3, r3
 8003190:	3b01      	subs	r3, #1
 8003192:	b29a      	uxth	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800319c:	3b01      	subs	r3, #1
 800319e:	b29a      	uxth	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	3301      	adds	r3, #1
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	697c      	ldr	r4, [r7, #20]
 80031b0:	230a      	movs	r3, #10
 80031b2:	18fb      	adds	r3, r7, r3
 80031b4:	8819      	ldrh	r1, [r3, #0]
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	4b51      	ldr	r3, [pc, #324]	; (8003300 <HAL_I2C_Master_Transmit+0x24c>)
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	0023      	movs	r3, r4
 80031be:	f000 faa7 	bl	8003710 <I2C_TransferConfig>
 80031c2:	e06f      	b.n	80032a4 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	697c      	ldr	r4, [r7, #20]
 80031cc:	230a      	movs	r3, #10
 80031ce:	18fb      	adds	r3, r7, r3
 80031d0:	8819      	ldrh	r1, [r3, #0]
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	4b4a      	ldr	r3, [pc, #296]	; (8003300 <HAL_I2C_Master_Transmit+0x24c>)
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	0023      	movs	r3, r4
 80031da:	f000 fa99 	bl	8003710 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80031de:	e061      	b.n	80032a4 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	0018      	movs	r0, r3
 80031e8:	f000 f908 	bl	80033fc <I2C_WaitOnTXISFlagUntilTimeout>
 80031ec:	1e03      	subs	r3, r0, #0
 80031ee:	d001      	beq.n	80031f4 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e081      	b.n	80032f8 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	781a      	ldrb	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	1c5a      	adds	r2, r3, #1
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320e:	b29b      	uxth	r3, r3
 8003210:	3b01      	subs	r3, #1
 8003212:	b29a      	uxth	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321c:	3b01      	subs	r3, #1
 800321e:	b29a      	uxth	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003228:	b29b      	uxth	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d03a      	beq.n	80032a4 <HAL_I2C_Master_Transmit+0x1f0>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003232:	2b00      	cmp	r3, #0
 8003234:	d136      	bne.n	80032a4 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	0013      	movs	r3, r2
 8003240:	2200      	movs	r2, #0
 8003242:	2180      	movs	r1, #128	; 0x80
 8003244:	f000 f882 	bl	800334c <I2C_WaitOnFlagUntilTimeout>
 8003248:	1e03      	subs	r3, r0, #0
 800324a:	d001      	beq.n	8003250 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e053      	b.n	80032f8 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003254:	b29b      	uxth	r3, r3
 8003256:	2bff      	cmp	r3, #255	; 0xff
 8003258:	d911      	bls.n	800327e <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	22ff      	movs	r2, #255	; 0xff
 800325e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003264:	b2da      	uxtb	r2, r3
 8003266:	2380      	movs	r3, #128	; 0x80
 8003268:	045c      	lsls	r4, r3, #17
 800326a:	230a      	movs	r3, #10
 800326c:	18fb      	adds	r3, r7, r3
 800326e:	8819      	ldrh	r1, [r3, #0]
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	2300      	movs	r3, #0
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	0023      	movs	r3, r4
 8003278:	f000 fa4a 	bl	8003710 <I2C_TransferConfig>
 800327c:	e012      	b.n	80032a4 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003282:	b29a      	uxth	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800328c:	b2da      	uxtb	r2, r3
 800328e:	2380      	movs	r3, #128	; 0x80
 8003290:	049c      	lsls	r4, r3, #18
 8003292:	230a      	movs	r3, #10
 8003294:	18fb      	adds	r3, r7, r3
 8003296:	8819      	ldrh	r1, [r3, #0]
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	2300      	movs	r3, #0
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	0023      	movs	r3, r4
 80032a0:	f000 fa36 	bl	8003710 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d198      	bne.n	80031e0 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	0018      	movs	r0, r3
 80032b6:	f000 f8e7 	bl	8003488 <I2C_WaitOnSTOPFlagUntilTimeout>
 80032ba:	1e03      	subs	r3, r0, #0
 80032bc:	d001      	beq.n	80032c2 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e01a      	b.n	80032f8 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2220      	movs	r2, #32
 80032c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	490b      	ldr	r1, [pc, #44]	; (8003304 <HAL_I2C_Master_Transmit+0x250>)
 80032d6:	400a      	ands	r2, r1
 80032d8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2241      	movs	r2, #65	; 0x41
 80032de:	2120      	movs	r1, #32
 80032e0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2242      	movs	r2, #66	; 0x42
 80032e6:	2100      	movs	r1, #0
 80032e8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2240      	movs	r2, #64	; 0x40
 80032ee:	2100      	movs	r1, #0
 80032f0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	e000      	b.n	80032f8 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80032f6:	2302      	movs	r3, #2
  }
}
 80032f8:	0018      	movs	r0, r3
 80032fa:	46bd      	mov	sp, r7
 80032fc:	b007      	add	sp, #28
 80032fe:	bd90      	pop	{r4, r7, pc}
 8003300:	80002000 	.word	0x80002000
 8003304:	fe00e800 	.word	0xfe00e800

08003308 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	2202      	movs	r2, #2
 8003318:	4013      	ands	r3, r2
 800331a:	2b02      	cmp	r3, #2
 800331c:	d103      	bne.n	8003326 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2200      	movs	r2, #0
 8003324:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	2201      	movs	r2, #1
 800332e:	4013      	ands	r3, r2
 8003330:	2b01      	cmp	r3, #1
 8003332:	d007      	beq.n	8003344 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699a      	ldr	r2, [r3, #24]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2101      	movs	r1, #1
 8003340:	430a      	orrs	r2, r1
 8003342:	619a      	str	r2, [r3, #24]
  }
}
 8003344:	46c0      	nop			; (mov r8, r8)
 8003346:	46bd      	mov	sp, r7
 8003348:	b002      	add	sp, #8
 800334a:	bd80      	pop	{r7, pc}

0800334c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	603b      	str	r3, [r7, #0]
 8003358:	1dfb      	adds	r3, r7, #7
 800335a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800335c:	e03a      	b.n	80033d4 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	6839      	ldr	r1, [r7, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	0018      	movs	r0, r3
 8003366:	f000 f8d3 	bl	8003510 <I2C_IsErrorOccurred>
 800336a:	1e03      	subs	r3, r0, #0
 800336c:	d001      	beq.n	8003372 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e040      	b.n	80033f4 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	3301      	adds	r3, #1
 8003376:	d02d      	beq.n	80033d4 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003378:	f7fe fbfa 	bl	8001b70 <HAL_GetTick>
 800337c:	0002      	movs	r2, r0
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	429a      	cmp	r2, r3
 8003386:	d302      	bcc.n	800338e <I2C_WaitOnFlagUntilTimeout+0x42>
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d122      	bne.n	80033d4 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	4013      	ands	r3, r2
 8003398:	68ba      	ldr	r2, [r7, #8]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	425a      	negs	r2, r3
 800339e:	4153      	adcs	r3, r2
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	001a      	movs	r2, r3
 80033a4:	1dfb      	adds	r3, r7, #7
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d113      	bne.n	80033d4 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b0:	2220      	movs	r2, #32
 80033b2:	431a      	orrs	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2241      	movs	r2, #65	; 0x41
 80033bc:	2120      	movs	r1, #32
 80033be:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2242      	movs	r2, #66	; 0x42
 80033c4:	2100      	movs	r1, #0
 80033c6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2240      	movs	r2, #64	; 0x40
 80033cc:	2100      	movs	r1, #0
 80033ce:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e00f      	b.n	80033f4 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	4013      	ands	r3, r2
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	425a      	negs	r2, r3
 80033e4:	4153      	adcs	r3, r2
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	001a      	movs	r2, r3
 80033ea:	1dfb      	adds	r3, r7, #7
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d0b5      	beq.n	800335e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	0018      	movs	r0, r3
 80033f6:	46bd      	mov	sp, r7
 80033f8:	b004      	add	sp, #16
 80033fa:	bd80      	pop	{r7, pc}

080033fc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003408:	e032      	b.n	8003470 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	68b9      	ldr	r1, [r7, #8]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	0018      	movs	r0, r3
 8003412:	f000 f87d 	bl	8003510 <I2C_IsErrorOccurred>
 8003416:	1e03      	subs	r3, r0, #0
 8003418:	d001      	beq.n	800341e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e030      	b.n	8003480 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	3301      	adds	r3, #1
 8003422:	d025      	beq.n	8003470 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003424:	f7fe fba4 	bl	8001b70 <HAL_GetTick>
 8003428:	0002      	movs	r2, r0
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	429a      	cmp	r2, r3
 8003432:	d302      	bcc.n	800343a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d11a      	bne.n	8003470 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	2202      	movs	r2, #2
 8003442:	4013      	ands	r3, r2
 8003444:	2b02      	cmp	r3, #2
 8003446:	d013      	beq.n	8003470 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344c:	2220      	movs	r2, #32
 800344e:	431a      	orrs	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2241      	movs	r2, #65	; 0x41
 8003458:	2120      	movs	r1, #32
 800345a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2242      	movs	r2, #66	; 0x42
 8003460:	2100      	movs	r1, #0
 8003462:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2240      	movs	r2, #64	; 0x40
 8003468:	2100      	movs	r1, #0
 800346a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e007      	b.n	8003480 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	2202      	movs	r2, #2
 8003478:	4013      	ands	r3, r2
 800347a:	2b02      	cmp	r3, #2
 800347c:	d1c5      	bne.n	800340a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	0018      	movs	r0, r3
 8003482:	46bd      	mov	sp, r7
 8003484:	b004      	add	sp, #16
 8003486:	bd80      	pop	{r7, pc}

08003488 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003494:	e02f      	b.n	80034f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	68b9      	ldr	r1, [r7, #8]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	0018      	movs	r0, r3
 800349e:	f000 f837 	bl	8003510 <I2C_IsErrorOccurred>
 80034a2:	1e03      	subs	r3, r0, #0
 80034a4:	d001      	beq.n	80034aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e02d      	b.n	8003506 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034aa:	f7fe fb61 	bl	8001b70 <HAL_GetTick>
 80034ae:	0002      	movs	r2, r0
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d302      	bcc.n	80034c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d11a      	bne.n	80034f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	2220      	movs	r2, #32
 80034c8:	4013      	ands	r3, r2
 80034ca:	2b20      	cmp	r3, #32
 80034cc:	d013      	beq.n	80034f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d2:	2220      	movs	r2, #32
 80034d4:	431a      	orrs	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2241      	movs	r2, #65	; 0x41
 80034de:	2120      	movs	r1, #32
 80034e0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2242      	movs	r2, #66	; 0x42
 80034e6:	2100      	movs	r1, #0
 80034e8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2240      	movs	r2, #64	; 0x40
 80034ee:	2100      	movs	r1, #0
 80034f0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e007      	b.n	8003506 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	2220      	movs	r2, #32
 80034fe:	4013      	ands	r3, r2
 8003500:	2b20      	cmp	r3, #32
 8003502:	d1c8      	bne.n	8003496 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	0018      	movs	r0, r3
 8003508:	46bd      	mov	sp, r7
 800350a:	b004      	add	sp, #16
 800350c:	bd80      	pop	{r7, pc}
	...

08003510 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003510:	b590      	push	{r4, r7, lr}
 8003512:	b08b      	sub	sp, #44	; 0x2c
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800351c:	2327      	movs	r3, #39	; 0x27
 800351e:	18fb      	adds	r3, r7, r3
 8003520:	2200      	movs	r2, #0
 8003522:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800352c:	2300      	movs	r3, #0
 800352e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	2210      	movs	r2, #16
 8003538:	4013      	ands	r3, r2
 800353a:	d100      	bne.n	800353e <I2C_IsErrorOccurred+0x2e>
 800353c:	e082      	b.n	8003644 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2210      	movs	r2, #16
 8003544:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003546:	e060      	b.n	800360a <I2C_IsErrorOccurred+0xfa>
 8003548:	2427      	movs	r4, #39	; 0x27
 800354a:	193b      	adds	r3, r7, r4
 800354c:	193a      	adds	r2, r7, r4
 800354e:	7812      	ldrb	r2, [r2, #0]
 8003550:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	3301      	adds	r3, #1
 8003556:	d058      	beq.n	800360a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003558:	f7fe fb0a 	bl	8001b70 <HAL_GetTick>
 800355c:	0002      	movs	r2, r0
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	429a      	cmp	r2, r3
 8003566:	d306      	bcc.n	8003576 <I2C_IsErrorOccurred+0x66>
 8003568:	193b      	adds	r3, r7, r4
 800356a:	193a      	adds	r2, r7, r4
 800356c:	7812      	ldrb	r2, [r2, #0]
 800356e:	701a      	strb	r2, [r3, #0]
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d149      	bne.n	800360a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	2380      	movs	r3, #128	; 0x80
 800357e:	01db      	lsls	r3, r3, #7
 8003580:	4013      	ands	r3, r2
 8003582:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003584:	2013      	movs	r0, #19
 8003586:	183b      	adds	r3, r7, r0
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	2142      	movs	r1, #66	; 0x42
 800358c:	5c52      	ldrb	r2, [r2, r1]
 800358e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	699a      	ldr	r2, [r3, #24]
 8003596:	2380      	movs	r3, #128	; 0x80
 8003598:	021b      	lsls	r3, r3, #8
 800359a:	401a      	ands	r2, r3
 800359c:	2380      	movs	r3, #128	; 0x80
 800359e:	021b      	lsls	r3, r3, #8
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d126      	bne.n	80035f2 <I2C_IsErrorOccurred+0xe2>
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	2380      	movs	r3, #128	; 0x80
 80035a8:	01db      	lsls	r3, r3, #7
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d021      	beq.n	80035f2 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80035ae:	183b      	adds	r3, r7, r0
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	2b20      	cmp	r3, #32
 80035b4:	d01d      	beq.n	80035f2 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2180      	movs	r1, #128	; 0x80
 80035c2:	01c9      	lsls	r1, r1, #7
 80035c4:	430a      	orrs	r2, r1
 80035c6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80035c8:	f7fe fad2 	bl	8001b70 <HAL_GetTick>
 80035cc:	0003      	movs	r3, r0
 80035ce:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035d0:	e00f      	b.n	80035f2 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80035d2:	f7fe facd 	bl	8001b70 <HAL_GetTick>
 80035d6:	0002      	movs	r2, r0
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b19      	cmp	r3, #25
 80035de:	d908      	bls.n	80035f2 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	2220      	movs	r2, #32
 80035e4:	4313      	orrs	r3, r2
 80035e6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80035e8:	2327      	movs	r3, #39	; 0x27
 80035ea:	18fb      	adds	r3, r7, r3
 80035ec:	2201      	movs	r2, #1
 80035ee:	701a      	strb	r2, [r3, #0]

              break;
 80035f0:	e00b      	b.n	800360a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	2220      	movs	r2, #32
 80035fa:	4013      	ands	r3, r2
 80035fc:	2127      	movs	r1, #39	; 0x27
 80035fe:	187a      	adds	r2, r7, r1
 8003600:	1879      	adds	r1, r7, r1
 8003602:	7809      	ldrb	r1, [r1, #0]
 8003604:	7011      	strb	r1, [r2, #0]
 8003606:	2b20      	cmp	r3, #32
 8003608:	d1e3      	bne.n	80035d2 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	2220      	movs	r2, #32
 8003612:	4013      	ands	r3, r2
 8003614:	2b20      	cmp	r3, #32
 8003616:	d004      	beq.n	8003622 <I2C_IsErrorOccurred+0x112>
 8003618:	2327      	movs	r3, #39	; 0x27
 800361a:	18fb      	adds	r3, r7, r3
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d092      	beq.n	8003548 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003622:	2327      	movs	r3, #39	; 0x27
 8003624:	18fb      	adds	r3, r7, r3
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d103      	bne.n	8003634 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2220      	movs	r2, #32
 8003632:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	2204      	movs	r2, #4
 8003638:	4313      	orrs	r3, r2
 800363a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800363c:	2327      	movs	r3, #39	; 0x27
 800363e:	18fb      	adds	r3, r7, r3
 8003640:	2201      	movs	r2, #1
 8003642:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	2380      	movs	r3, #128	; 0x80
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	4013      	ands	r3, r2
 8003654:	d00c      	beq.n	8003670 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003656:	6a3b      	ldr	r3, [r7, #32]
 8003658:	2201      	movs	r2, #1
 800365a:	4313      	orrs	r3, r2
 800365c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2280      	movs	r2, #128	; 0x80
 8003664:	0052      	lsls	r2, r2, #1
 8003666:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003668:	2327      	movs	r3, #39	; 0x27
 800366a:	18fb      	adds	r3, r7, r3
 800366c:	2201      	movs	r2, #1
 800366e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	2380      	movs	r3, #128	; 0x80
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	4013      	ands	r3, r2
 8003678:	d00c      	beq.n	8003694 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	2208      	movs	r2, #8
 800367e:	4313      	orrs	r3, r2
 8003680:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2280      	movs	r2, #128	; 0x80
 8003688:	00d2      	lsls	r2, r2, #3
 800368a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800368c:	2327      	movs	r3, #39	; 0x27
 800368e:	18fb      	adds	r3, r7, r3
 8003690:	2201      	movs	r2, #1
 8003692:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	2380      	movs	r3, #128	; 0x80
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4013      	ands	r3, r2
 800369c:	d00c      	beq.n	80036b8 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800369e:	6a3b      	ldr	r3, [r7, #32]
 80036a0:	2202      	movs	r2, #2
 80036a2:	4313      	orrs	r3, r2
 80036a4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2280      	movs	r2, #128	; 0x80
 80036ac:	0092      	lsls	r2, r2, #2
 80036ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036b0:	2327      	movs	r3, #39	; 0x27
 80036b2:	18fb      	adds	r3, r7, r3
 80036b4:	2201      	movs	r2, #1
 80036b6:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80036b8:	2327      	movs	r3, #39	; 0x27
 80036ba:	18fb      	adds	r3, r7, r3
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d01d      	beq.n	80036fe <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	0018      	movs	r0, r3
 80036c6:	f7ff fe1f 	bl	8003308 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	490d      	ldr	r1, [pc, #52]	; (800370c <I2C_IsErrorOccurred+0x1fc>)
 80036d6:	400a      	ands	r2, r1
 80036d8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	431a      	orrs	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2241      	movs	r2, #65	; 0x41
 80036ea:	2120      	movs	r1, #32
 80036ec:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2242      	movs	r2, #66	; 0x42
 80036f2:	2100      	movs	r1, #0
 80036f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2240      	movs	r2, #64	; 0x40
 80036fa:	2100      	movs	r1, #0
 80036fc:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80036fe:	2327      	movs	r3, #39	; 0x27
 8003700:	18fb      	adds	r3, r7, r3
 8003702:	781b      	ldrb	r3, [r3, #0]
}
 8003704:	0018      	movs	r0, r3
 8003706:	46bd      	mov	sp, r7
 8003708:	b00b      	add	sp, #44	; 0x2c
 800370a:	bd90      	pop	{r4, r7, pc}
 800370c:	fe00e800 	.word	0xfe00e800

08003710 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003710:	b590      	push	{r4, r7, lr}
 8003712:	b087      	sub	sp, #28
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	0008      	movs	r0, r1
 800371a:	0011      	movs	r1, r2
 800371c:	607b      	str	r3, [r7, #4]
 800371e:	240a      	movs	r4, #10
 8003720:	193b      	adds	r3, r7, r4
 8003722:	1c02      	adds	r2, r0, #0
 8003724:	801a      	strh	r2, [r3, #0]
 8003726:	2009      	movs	r0, #9
 8003728:	183b      	adds	r3, r7, r0
 800372a:	1c0a      	adds	r2, r1, #0
 800372c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800372e:	193b      	adds	r3, r7, r4
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	059b      	lsls	r3, r3, #22
 8003734:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003736:	183b      	adds	r3, r7, r0
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	0419      	lsls	r1, r3, #16
 800373c:	23ff      	movs	r3, #255	; 0xff
 800373e:	041b      	lsls	r3, r3, #16
 8003740:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003742:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374a:	4313      	orrs	r3, r2
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	085b      	lsrs	r3, r3, #1
 8003750:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800375a:	0d51      	lsrs	r1, r2, #21
 800375c:	2280      	movs	r2, #128	; 0x80
 800375e:	00d2      	lsls	r2, r2, #3
 8003760:	400a      	ands	r2, r1
 8003762:	4907      	ldr	r1, [pc, #28]	; (8003780 <I2C_TransferConfig+0x70>)
 8003764:	430a      	orrs	r2, r1
 8003766:	43d2      	mvns	r2, r2
 8003768:	401a      	ands	r2, r3
 800376a:	0011      	movs	r1, r2
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	430a      	orrs	r2, r1
 8003774:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003776:	46c0      	nop			; (mov r8, r8)
 8003778:	46bd      	mov	sp, r7
 800377a:	b007      	add	sp, #28
 800377c:	bd90      	pop	{r4, r7, pc}
 800377e:	46c0      	nop			; (mov r8, r8)
 8003780:	03ff63ff 	.word	0x03ff63ff

08003784 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2241      	movs	r2, #65	; 0x41
 8003792:	5c9b      	ldrb	r3, [r3, r2]
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b20      	cmp	r3, #32
 8003798:	d138      	bne.n	800380c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2240      	movs	r2, #64	; 0x40
 800379e:	5c9b      	ldrb	r3, [r3, r2]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d101      	bne.n	80037a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037a4:	2302      	movs	r3, #2
 80037a6:	e032      	b.n	800380e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2240      	movs	r2, #64	; 0x40
 80037ac:	2101      	movs	r1, #1
 80037ae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2241      	movs	r2, #65	; 0x41
 80037b4:	2124      	movs	r1, #36	; 0x24
 80037b6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2101      	movs	r1, #1
 80037c4:	438a      	bics	r2, r1
 80037c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4911      	ldr	r1, [pc, #68]	; (8003818 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80037d4:	400a      	ands	r2, r1
 80037d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6819      	ldr	r1, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2101      	movs	r1, #1
 80037f4:	430a      	orrs	r2, r1
 80037f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2241      	movs	r2, #65	; 0x41
 80037fc:	2120      	movs	r1, #32
 80037fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2240      	movs	r2, #64	; 0x40
 8003804:	2100      	movs	r1, #0
 8003806:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003808:	2300      	movs	r3, #0
 800380a:	e000      	b.n	800380e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800380c:	2302      	movs	r3, #2
  }
}
 800380e:	0018      	movs	r0, r3
 8003810:	46bd      	mov	sp, r7
 8003812:	b002      	add	sp, #8
 8003814:	bd80      	pop	{r7, pc}
 8003816:	46c0      	nop			; (mov r8, r8)
 8003818:	ffffefff 	.word	0xffffefff

0800381c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2241      	movs	r2, #65	; 0x41
 800382a:	5c9b      	ldrb	r3, [r3, r2]
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b20      	cmp	r3, #32
 8003830:	d139      	bne.n	80038a6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2240      	movs	r2, #64	; 0x40
 8003836:	5c9b      	ldrb	r3, [r3, r2]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d101      	bne.n	8003840 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800383c:	2302      	movs	r3, #2
 800383e:	e033      	b.n	80038a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2240      	movs	r2, #64	; 0x40
 8003844:	2101      	movs	r1, #1
 8003846:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2241      	movs	r2, #65	; 0x41
 800384c:	2124      	movs	r1, #36	; 0x24
 800384e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2101      	movs	r1, #1
 800385c:	438a      	bics	r2, r1
 800385e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	4a11      	ldr	r2, [pc, #68]	; (80038b0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800386c:	4013      	ands	r3, r2
 800386e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	021b      	lsls	r3, r3, #8
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	4313      	orrs	r3, r2
 8003878:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2101      	movs	r1, #1
 800388e:	430a      	orrs	r2, r1
 8003890:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2241      	movs	r2, #65	; 0x41
 8003896:	2120      	movs	r1, #32
 8003898:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2240      	movs	r2, #64	; 0x40
 800389e:	2100      	movs	r1, #0
 80038a0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80038a2:	2300      	movs	r3, #0
 80038a4:	e000      	b.n	80038a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038a6:	2302      	movs	r3, #2
  }
}
 80038a8:	0018      	movs	r0, r3
 80038aa:	46bd      	mov	sp, r7
 80038ac:	b004      	add	sp, #16
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	fffff0ff 	.word	0xfffff0ff

080038b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80038bc:	4b19      	ldr	r3, [pc, #100]	; (8003924 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a19      	ldr	r2, [pc, #100]	; (8003928 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80038c2:	4013      	ands	r3, r2
 80038c4:	0019      	movs	r1, r3
 80038c6:	4b17      	ldr	r3, [pc, #92]	; (8003924 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	2380      	movs	r3, #128	; 0x80
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d11f      	bne.n	8003918 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80038d8:	4b14      	ldr	r3, [pc, #80]	; (800392c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	0013      	movs	r3, r2
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	189b      	adds	r3, r3, r2
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	4912      	ldr	r1, [pc, #72]	; (8003930 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80038e6:	0018      	movs	r0, r3
 80038e8:	f7fc fc28 	bl	800013c <__udivsi3>
 80038ec:	0003      	movs	r3, r0
 80038ee:	3301      	adds	r3, #1
 80038f0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038f2:	e008      	b.n	8003906 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d003      	beq.n	8003902 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	3b01      	subs	r3, #1
 80038fe:	60fb      	str	r3, [r7, #12]
 8003900:	e001      	b.n	8003906 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e009      	b.n	800391a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003906:	4b07      	ldr	r3, [pc, #28]	; (8003924 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003908:	695a      	ldr	r2, [r3, #20]
 800390a:	2380      	movs	r3, #128	; 0x80
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	401a      	ands	r2, r3
 8003910:	2380      	movs	r3, #128	; 0x80
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	429a      	cmp	r2, r3
 8003916:	d0ed      	beq.n	80038f4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	0018      	movs	r0, r3
 800391c:	46bd      	mov	sp, r7
 800391e:	b004      	add	sp, #16
 8003920:	bd80      	pop	{r7, pc}
 8003922:	46c0      	nop			; (mov r8, r8)
 8003924:	40007000 	.word	0x40007000
 8003928:	fffff9ff 	.word	0xfffff9ff
 800392c:	2000000c 	.word	0x2000000c
 8003930:	000f4240 	.word	0x000f4240

08003934 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003938:	4b03      	ldr	r3, [pc, #12]	; (8003948 <LL_RCC_GetAPB1Prescaler+0x14>)
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	23e0      	movs	r3, #224	; 0xe0
 800393e:	01db      	lsls	r3, r3, #7
 8003940:	4013      	ands	r3, r2
}
 8003942:	0018      	movs	r0, r3
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	40021000 	.word	0x40021000

0800394c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b088      	sub	sp, #32
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e2fe      	b.n	8003f5c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2201      	movs	r2, #1
 8003964:	4013      	ands	r3, r2
 8003966:	d100      	bne.n	800396a <HAL_RCC_OscConfig+0x1e>
 8003968:	e07c      	b.n	8003a64 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800396a:	4bc3      	ldr	r3, [pc, #780]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	2238      	movs	r2, #56	; 0x38
 8003970:	4013      	ands	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003974:	4bc0      	ldr	r3, [pc, #768]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	2203      	movs	r2, #3
 800397a:	4013      	ands	r3, r2
 800397c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	2b10      	cmp	r3, #16
 8003982:	d102      	bne.n	800398a <HAL_RCC_OscConfig+0x3e>
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	2b03      	cmp	r3, #3
 8003988:	d002      	beq.n	8003990 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	2b08      	cmp	r3, #8
 800398e:	d10b      	bne.n	80039a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003990:	4bb9      	ldr	r3, [pc, #740]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	2380      	movs	r3, #128	; 0x80
 8003996:	029b      	lsls	r3, r3, #10
 8003998:	4013      	ands	r3, r2
 800399a:	d062      	beq.n	8003a62 <HAL_RCC_OscConfig+0x116>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d15e      	bne.n	8003a62 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e2d9      	b.n	8003f5c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	2380      	movs	r3, #128	; 0x80
 80039ae:	025b      	lsls	r3, r3, #9
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d107      	bne.n	80039c4 <HAL_RCC_OscConfig+0x78>
 80039b4:	4bb0      	ldr	r3, [pc, #704]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	4baf      	ldr	r3, [pc, #700]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 80039ba:	2180      	movs	r1, #128	; 0x80
 80039bc:	0249      	lsls	r1, r1, #9
 80039be:	430a      	orrs	r2, r1
 80039c0:	601a      	str	r2, [r3, #0]
 80039c2:	e020      	b.n	8003a06 <HAL_RCC_OscConfig+0xba>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	23a0      	movs	r3, #160	; 0xa0
 80039ca:	02db      	lsls	r3, r3, #11
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d10e      	bne.n	80039ee <HAL_RCC_OscConfig+0xa2>
 80039d0:	4ba9      	ldr	r3, [pc, #676]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	4ba8      	ldr	r3, [pc, #672]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 80039d6:	2180      	movs	r1, #128	; 0x80
 80039d8:	02c9      	lsls	r1, r1, #11
 80039da:	430a      	orrs	r2, r1
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	4ba6      	ldr	r3, [pc, #664]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	4ba5      	ldr	r3, [pc, #660]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 80039e4:	2180      	movs	r1, #128	; 0x80
 80039e6:	0249      	lsls	r1, r1, #9
 80039e8:	430a      	orrs	r2, r1
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	e00b      	b.n	8003a06 <HAL_RCC_OscConfig+0xba>
 80039ee:	4ba2      	ldr	r3, [pc, #648]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	4ba1      	ldr	r3, [pc, #644]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 80039f4:	49a1      	ldr	r1, [pc, #644]	; (8003c7c <HAL_RCC_OscConfig+0x330>)
 80039f6:	400a      	ands	r2, r1
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	4b9f      	ldr	r3, [pc, #636]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	4b9e      	ldr	r3, [pc, #632]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003a00:	499f      	ldr	r1, [pc, #636]	; (8003c80 <HAL_RCC_OscConfig+0x334>)
 8003a02:	400a      	ands	r2, r1
 8003a04:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d014      	beq.n	8003a38 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0e:	f7fe f8af 	bl	8001b70 <HAL_GetTick>
 8003a12:	0003      	movs	r3, r0
 8003a14:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a18:	f7fe f8aa 	bl	8001b70 <HAL_GetTick>
 8003a1c:	0002      	movs	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b64      	cmp	r3, #100	; 0x64
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e298      	b.n	8003f5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a2a:	4b93      	ldr	r3, [pc, #588]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	2380      	movs	r3, #128	; 0x80
 8003a30:	029b      	lsls	r3, r3, #10
 8003a32:	4013      	ands	r3, r2
 8003a34:	d0f0      	beq.n	8003a18 <HAL_RCC_OscConfig+0xcc>
 8003a36:	e015      	b.n	8003a64 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a38:	f7fe f89a 	bl	8001b70 <HAL_GetTick>
 8003a3c:	0003      	movs	r3, r0
 8003a3e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a42:	f7fe f895 	bl	8001b70 <HAL_GetTick>
 8003a46:	0002      	movs	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b64      	cmp	r3, #100	; 0x64
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e283      	b.n	8003f5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a54:	4b88      	ldr	r3, [pc, #544]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	2380      	movs	r3, #128	; 0x80
 8003a5a:	029b      	lsls	r3, r3, #10
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	d1f0      	bne.n	8003a42 <HAL_RCC_OscConfig+0xf6>
 8003a60:	e000      	b.n	8003a64 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a62:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2202      	movs	r2, #2
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	d100      	bne.n	8003a70 <HAL_RCC_OscConfig+0x124>
 8003a6e:	e099      	b.n	8003ba4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a70:	4b81      	ldr	r3, [pc, #516]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	2238      	movs	r2, #56	; 0x38
 8003a76:	4013      	ands	r3, r2
 8003a78:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a7a:	4b7f      	ldr	r3, [pc, #508]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	2203      	movs	r2, #3
 8003a80:	4013      	ands	r3, r2
 8003a82:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	2b10      	cmp	r3, #16
 8003a88:	d102      	bne.n	8003a90 <HAL_RCC_OscConfig+0x144>
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d002      	beq.n	8003a96 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d135      	bne.n	8003b02 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a96:	4b78      	ldr	r3, [pc, #480]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	2380      	movs	r3, #128	; 0x80
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	d005      	beq.n	8003aae <HAL_RCC_OscConfig+0x162>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e256      	b.n	8003f5c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aae:	4b72      	ldr	r3, [pc, #456]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	4a74      	ldr	r2, [pc, #464]	; (8003c84 <HAL_RCC_OscConfig+0x338>)
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	0019      	movs	r1, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	021a      	lsls	r2, r3, #8
 8003abe:	4b6e      	ldr	r3, [pc, #440]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d112      	bne.n	8003af0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003aca:	4b6b      	ldr	r3, [pc, #428]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a6e      	ldr	r2, [pc, #440]	; (8003c88 <HAL_RCC_OscConfig+0x33c>)
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	0019      	movs	r1, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	691a      	ldr	r2, [r3, #16]
 8003ad8:	4b67      	ldr	r3, [pc, #412]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003ada:	430a      	orrs	r2, r1
 8003adc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003ade:	4b66      	ldr	r3, [pc, #408]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	0adb      	lsrs	r3, r3, #11
 8003ae4:	2207      	movs	r2, #7
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	4a68      	ldr	r2, [pc, #416]	; (8003c8c <HAL_RCC_OscConfig+0x340>)
 8003aea:	40da      	lsrs	r2, r3
 8003aec:	4b68      	ldr	r3, [pc, #416]	; (8003c90 <HAL_RCC_OscConfig+0x344>)
 8003aee:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003af0:	4b68      	ldr	r3, [pc, #416]	; (8003c94 <HAL_RCC_OscConfig+0x348>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	0018      	movs	r0, r3
 8003af6:	f7fd ffdf 	bl	8001ab8 <HAL_InitTick>
 8003afa:	1e03      	subs	r3, r0, #0
 8003afc:	d051      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e22c      	b.n	8003f5c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d030      	beq.n	8003b6c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003b0a:	4b5b      	ldr	r3, [pc, #364]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a5e      	ldr	r2, [pc, #376]	; (8003c88 <HAL_RCC_OscConfig+0x33c>)
 8003b10:	4013      	ands	r3, r2
 8003b12:	0019      	movs	r1, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691a      	ldr	r2, [r3, #16]
 8003b18:	4b57      	ldr	r3, [pc, #348]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003b1e:	4b56      	ldr	r3, [pc, #344]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	4b55      	ldr	r3, [pc, #340]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003b24:	2180      	movs	r1, #128	; 0x80
 8003b26:	0049      	lsls	r1, r1, #1
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2c:	f7fe f820 	bl	8001b70 <HAL_GetTick>
 8003b30:	0003      	movs	r3, r0
 8003b32:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b36:	f7fe f81b 	bl	8001b70 <HAL_GetTick>
 8003b3a:	0002      	movs	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e209      	b.n	8003f5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b48:	4b4b      	ldr	r3, [pc, #300]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	2380      	movs	r3, #128	; 0x80
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	4013      	ands	r3, r2
 8003b52:	d0f0      	beq.n	8003b36 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b54:	4b48      	ldr	r3, [pc, #288]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	4a4a      	ldr	r2, [pc, #296]	; (8003c84 <HAL_RCC_OscConfig+0x338>)
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	0019      	movs	r1, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	021a      	lsls	r2, r3, #8
 8003b64:	4b44      	ldr	r3, [pc, #272]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003b66:	430a      	orrs	r2, r1
 8003b68:	605a      	str	r2, [r3, #4]
 8003b6a:	e01b      	b.n	8003ba4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003b6c:	4b42      	ldr	r3, [pc, #264]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	4b41      	ldr	r3, [pc, #260]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003b72:	4949      	ldr	r1, [pc, #292]	; (8003c98 <HAL_RCC_OscConfig+0x34c>)
 8003b74:	400a      	ands	r2, r1
 8003b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b78:	f7fd fffa 	bl	8001b70 <HAL_GetTick>
 8003b7c:	0003      	movs	r3, r0
 8003b7e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b82:	f7fd fff5 	bl	8001b70 <HAL_GetTick>
 8003b86:	0002      	movs	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e1e3      	b.n	8003f5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b94:	4b38      	ldr	r3, [pc, #224]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	2380      	movs	r3, #128	; 0x80
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	d1f0      	bne.n	8003b82 <HAL_RCC_OscConfig+0x236>
 8003ba0:	e000      	b.n	8003ba4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ba2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2208      	movs	r2, #8
 8003baa:	4013      	ands	r3, r2
 8003bac:	d047      	beq.n	8003c3e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003bae:	4b32      	ldr	r3, [pc, #200]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	2238      	movs	r2, #56	; 0x38
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	2b18      	cmp	r3, #24
 8003bb8:	d10a      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003bba:	4b2f      	ldr	r3, [pc, #188]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	d03c      	beq.n	8003c3e <HAL_RCC_OscConfig+0x2f2>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d138      	bne.n	8003c3e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e1c5      	b.n	8003f5c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d019      	beq.n	8003c0c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003bd8:	4b27      	ldr	r3, [pc, #156]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003bda:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003bdc:	4b26      	ldr	r3, [pc, #152]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003bde:	2101      	movs	r1, #1
 8003be0:	430a      	orrs	r2, r1
 8003be2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be4:	f7fd ffc4 	bl	8001b70 <HAL_GetTick>
 8003be8:	0003      	movs	r3, r0
 8003bea:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bec:	e008      	b.n	8003c00 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bee:	f7fd ffbf 	bl	8001b70 <HAL_GetTick>
 8003bf2:	0002      	movs	r2, r0
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e1ad      	b.n	8003f5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c00:	4b1d      	ldr	r3, [pc, #116]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c04:	2202      	movs	r2, #2
 8003c06:	4013      	ands	r3, r2
 8003c08:	d0f1      	beq.n	8003bee <HAL_RCC_OscConfig+0x2a2>
 8003c0a:	e018      	b.n	8003c3e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003c0c:	4b1a      	ldr	r3, [pc, #104]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003c0e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c10:	4b19      	ldr	r3, [pc, #100]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003c12:	2101      	movs	r1, #1
 8003c14:	438a      	bics	r2, r1
 8003c16:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c18:	f7fd ffaa 	bl	8001b70 <HAL_GetTick>
 8003c1c:	0003      	movs	r3, r0
 8003c1e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c22:	f7fd ffa5 	bl	8001b70 <HAL_GetTick>
 8003c26:	0002      	movs	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e193      	b.n	8003f5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c34:	4b10      	ldr	r3, [pc, #64]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c38:	2202      	movs	r2, #2
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	d1f1      	bne.n	8003c22 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2204      	movs	r2, #4
 8003c44:	4013      	ands	r3, r2
 8003c46:	d100      	bne.n	8003c4a <HAL_RCC_OscConfig+0x2fe>
 8003c48:	e0c6      	b.n	8003dd8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c4a:	231f      	movs	r3, #31
 8003c4c:	18fb      	adds	r3, r7, r3
 8003c4e:	2200      	movs	r2, #0
 8003c50:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003c52:	4b09      	ldr	r3, [pc, #36]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	2238      	movs	r2, #56	; 0x38
 8003c58:	4013      	ands	r3, r2
 8003c5a:	2b20      	cmp	r3, #32
 8003c5c:	d11e      	bne.n	8003c9c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003c5e:	4b06      	ldr	r3, [pc, #24]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c62:	2202      	movs	r2, #2
 8003c64:	4013      	ands	r3, r2
 8003c66:	d100      	bne.n	8003c6a <HAL_RCC_OscConfig+0x31e>
 8003c68:	e0b6      	b.n	8003dd8 <HAL_RCC_OscConfig+0x48c>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d000      	beq.n	8003c74 <HAL_RCC_OscConfig+0x328>
 8003c72:	e0b1      	b.n	8003dd8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e171      	b.n	8003f5c <HAL_RCC_OscConfig+0x610>
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	fffeffff 	.word	0xfffeffff
 8003c80:	fffbffff 	.word	0xfffbffff
 8003c84:	ffff80ff 	.word	0xffff80ff
 8003c88:	ffffc7ff 	.word	0xffffc7ff
 8003c8c:	00f42400 	.word	0x00f42400
 8003c90:	2000000c 	.word	0x2000000c
 8003c94:	20000010 	.word	0x20000010
 8003c98:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c9c:	4bb1      	ldr	r3, [pc, #708]	; (8003f64 <HAL_RCC_OscConfig+0x618>)
 8003c9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ca0:	2380      	movs	r3, #128	; 0x80
 8003ca2:	055b      	lsls	r3, r3, #21
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	d101      	bne.n	8003cac <HAL_RCC_OscConfig+0x360>
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e000      	b.n	8003cae <HAL_RCC_OscConfig+0x362>
 8003cac:	2300      	movs	r3, #0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d011      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003cb2:	4bac      	ldr	r3, [pc, #688]	; (8003f64 <HAL_RCC_OscConfig+0x618>)
 8003cb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cb6:	4bab      	ldr	r3, [pc, #684]	; (8003f64 <HAL_RCC_OscConfig+0x618>)
 8003cb8:	2180      	movs	r1, #128	; 0x80
 8003cba:	0549      	lsls	r1, r1, #21
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	63da      	str	r2, [r3, #60]	; 0x3c
 8003cc0:	4ba8      	ldr	r3, [pc, #672]	; (8003f64 <HAL_RCC_OscConfig+0x618>)
 8003cc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cc4:	2380      	movs	r3, #128	; 0x80
 8003cc6:	055b      	lsls	r3, r3, #21
 8003cc8:	4013      	ands	r3, r2
 8003cca:	60fb      	str	r3, [r7, #12]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003cce:	231f      	movs	r3, #31
 8003cd0:	18fb      	adds	r3, r7, r3
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cd6:	4ba4      	ldr	r3, [pc, #656]	; (8003f68 <HAL_RCC_OscConfig+0x61c>)
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	2380      	movs	r3, #128	; 0x80
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	4013      	ands	r3, r2
 8003ce0:	d11a      	bne.n	8003d18 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ce2:	4ba1      	ldr	r3, [pc, #644]	; (8003f68 <HAL_RCC_OscConfig+0x61c>)
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	4ba0      	ldr	r3, [pc, #640]	; (8003f68 <HAL_RCC_OscConfig+0x61c>)
 8003ce8:	2180      	movs	r1, #128	; 0x80
 8003cea:	0049      	lsls	r1, r1, #1
 8003cec:	430a      	orrs	r2, r1
 8003cee:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003cf0:	f7fd ff3e 	bl	8001b70 <HAL_GetTick>
 8003cf4:	0003      	movs	r3, r0
 8003cf6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cf8:	e008      	b.n	8003d0c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cfa:	f7fd ff39 	bl	8001b70 <HAL_GetTick>
 8003cfe:	0002      	movs	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e127      	b.n	8003f5c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d0c:	4b96      	ldr	r3, [pc, #600]	; (8003f68 <HAL_RCC_OscConfig+0x61c>)
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	2380      	movs	r3, #128	; 0x80
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	4013      	ands	r3, r2
 8003d16:	d0f0      	beq.n	8003cfa <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d106      	bne.n	8003d2e <HAL_RCC_OscConfig+0x3e2>
 8003d20:	4b90      	ldr	r3, [pc, #576]	; (8003f64 <HAL_RCC_OscConfig+0x618>)
 8003d22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d24:	4b8f      	ldr	r3, [pc, #572]	; (8003f64 <HAL_RCC_OscConfig+0x618>)
 8003d26:	2101      	movs	r1, #1
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d2c:	e01c      	b.n	8003d68 <HAL_RCC_OscConfig+0x41c>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	2b05      	cmp	r3, #5
 8003d34:	d10c      	bne.n	8003d50 <HAL_RCC_OscConfig+0x404>
 8003d36:	4b8b      	ldr	r3, [pc, #556]	; (8003f64 <HAL_RCC_OscConfig+0x618>)
 8003d38:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d3a:	4b8a      	ldr	r3, [pc, #552]	; (8003f64 <HAL_RCC_OscConfig+0x618>)
 8003d3c:	2104      	movs	r1, #4
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d42:	4b88      	ldr	r3, [pc, #544]	; (8003f64 <HAL_RCC_OscConfig+0x618>)
 8003d44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d46:	4b87      	ldr	r3, [pc, #540]	; (8003f64 <HAL_RCC_OscConfig+0x618>)
 8003d48:	2101      	movs	r1, #1
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d4e:	e00b      	b.n	8003d68 <HAL_RCC_OscConfig+0x41c>
 8003d50:	4b84      	ldr	r3, [pc, #528]	; (8003f64 <HAL_RCC_OscConfig+0x618>)
 8003d52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d54:	4b83      	ldr	r3, [pc, #524]	; (8003f64 <HAL_RCC_OscConfig+0x618>)
 8003d56:	2101      	movs	r1, #1
 8003d58:	438a      	bics	r2, r1
 8003d5a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d5c:	4b81      	ldr	r3, [pc, #516]	; (8003f64 <HAL_RCC_OscConfig+0x618>)
 8003d5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d60:	4b80      	ldr	r3, [pc, #512]	; (8003f64 <HAL_RCC_OscConfig+0x618>)
 8003d62:	2104      	movs	r1, #4
 8003d64:	438a      	bics	r2, r1
 8003d66:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d014      	beq.n	8003d9a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d70:	f7fd fefe 	bl	8001b70 <HAL_GetTick>
 8003d74:	0003      	movs	r3, r0
 8003d76:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d78:	e009      	b.n	8003d8e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d7a:	f7fd fef9 	bl	8001b70 <HAL_GetTick>
 8003d7e:	0002      	movs	r2, r0
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	4a79      	ldr	r2, [pc, #484]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e0e6      	b.n	8003f5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d8e:	4b75      	ldr	r3, [pc, #468]	; (8003f64 <HAL_RCC_OscConfig+0x618>)
 8003d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d92:	2202      	movs	r2, #2
 8003d94:	4013      	ands	r3, r2
 8003d96:	d0f0      	beq.n	8003d7a <HAL_RCC_OscConfig+0x42e>
 8003d98:	e013      	b.n	8003dc2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9a:	f7fd fee9 	bl	8001b70 <HAL_GetTick>
 8003d9e:	0003      	movs	r3, r0
 8003da0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003da2:	e009      	b.n	8003db8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da4:	f7fd fee4 	bl	8001b70 <HAL_GetTick>
 8003da8:	0002      	movs	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	4a6f      	ldr	r2, [pc, #444]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e0d1      	b.n	8003f5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003db8:	4b6a      	ldr	r3, [pc, #424]	; (8003f64 <HAL_RCC_OscConfig+0x618>)
 8003dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	d1f0      	bne.n	8003da4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003dc2:	231f      	movs	r3, #31
 8003dc4:	18fb      	adds	r3, r7, r3
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d105      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003dcc:	4b65      	ldr	r3, [pc, #404]	; (8003f64 <HAL_RCC_OscConfig+0x618>)
 8003dce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dd0:	4b64      	ldr	r3, [pc, #400]	; (8003f64 <HAL_RCC_OscConfig+0x618>)
 8003dd2:	4967      	ldr	r1, [pc, #412]	; (8003f70 <HAL_RCC_OscConfig+0x624>)
 8003dd4:	400a      	ands	r2, r1
 8003dd6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d100      	bne.n	8003de2 <HAL_RCC_OscConfig+0x496>
 8003de0:	e0bb      	b.n	8003f5a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003de2:	4b60      	ldr	r3, [pc, #384]	; (8003f64 <HAL_RCC_OscConfig+0x618>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	2238      	movs	r2, #56	; 0x38
 8003de8:	4013      	ands	r3, r2
 8003dea:	2b10      	cmp	r3, #16
 8003dec:	d100      	bne.n	8003df0 <HAL_RCC_OscConfig+0x4a4>
 8003dee:	e07b      	b.n	8003ee8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d156      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003df8:	4b5a      	ldr	r3, [pc, #360]	; (8003f64 <HAL_RCC_OscConfig+0x618>)
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	4b59      	ldr	r3, [pc, #356]	; (8003f64 <HAL_RCC_OscConfig+0x618>)
 8003dfe:	495d      	ldr	r1, [pc, #372]	; (8003f74 <HAL_RCC_OscConfig+0x628>)
 8003e00:	400a      	ands	r2, r1
 8003e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e04:	f7fd feb4 	bl	8001b70 <HAL_GetTick>
 8003e08:	0003      	movs	r3, r0
 8003e0a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e0c:	e008      	b.n	8003e20 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e0e:	f7fd feaf 	bl	8001b70 <HAL_GetTick>
 8003e12:	0002      	movs	r2, r0
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e09d      	b.n	8003f5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e20:	4b50      	ldr	r3, [pc, #320]	; (8003f64 <HAL_RCC_OscConfig+0x618>)
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	2380      	movs	r3, #128	; 0x80
 8003e26:	049b      	lsls	r3, r3, #18
 8003e28:	4013      	ands	r3, r2
 8003e2a:	d1f0      	bne.n	8003e0e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e2c:	4b4d      	ldr	r3, [pc, #308]	; (8003f64 <HAL_RCC_OscConfig+0x618>)
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	4a51      	ldr	r2, [pc, #324]	; (8003f78 <HAL_RCC_OscConfig+0x62c>)
 8003e32:	4013      	ands	r3, r2
 8003e34:	0019      	movs	r1, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1a      	ldr	r2, [r3, #32]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e44:	021b      	lsls	r3, r3, #8
 8003e46:	431a      	orrs	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e52:	431a      	orrs	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	4b42      	ldr	r3, [pc, #264]	; (8003f64 <HAL_RCC_OscConfig+0x618>)
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e60:	4b40      	ldr	r3, [pc, #256]	; (8003f64 <HAL_RCC_OscConfig+0x618>)
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	4b3f      	ldr	r3, [pc, #252]	; (8003f64 <HAL_RCC_OscConfig+0x618>)
 8003e66:	2180      	movs	r1, #128	; 0x80
 8003e68:	0449      	lsls	r1, r1, #17
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003e6e:	4b3d      	ldr	r3, [pc, #244]	; (8003f64 <HAL_RCC_OscConfig+0x618>)
 8003e70:	68da      	ldr	r2, [r3, #12]
 8003e72:	4b3c      	ldr	r3, [pc, #240]	; (8003f64 <HAL_RCC_OscConfig+0x618>)
 8003e74:	2180      	movs	r1, #128	; 0x80
 8003e76:	0549      	lsls	r1, r1, #21
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7c:	f7fd fe78 	bl	8001b70 <HAL_GetTick>
 8003e80:	0003      	movs	r3, r0
 8003e82:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e86:	f7fd fe73 	bl	8001b70 <HAL_GetTick>
 8003e8a:	0002      	movs	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e061      	b.n	8003f5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e98:	4b32      	ldr	r3, [pc, #200]	; (8003f64 <HAL_RCC_OscConfig+0x618>)
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	2380      	movs	r3, #128	; 0x80
 8003e9e:	049b      	lsls	r3, r3, #18
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	d0f0      	beq.n	8003e86 <HAL_RCC_OscConfig+0x53a>
 8003ea4:	e059      	b.n	8003f5a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ea6:	4b2f      	ldr	r3, [pc, #188]	; (8003f64 <HAL_RCC_OscConfig+0x618>)
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	4b2e      	ldr	r3, [pc, #184]	; (8003f64 <HAL_RCC_OscConfig+0x618>)
 8003eac:	4931      	ldr	r1, [pc, #196]	; (8003f74 <HAL_RCC_OscConfig+0x628>)
 8003eae:	400a      	ands	r2, r1
 8003eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb2:	f7fd fe5d 	bl	8001b70 <HAL_GetTick>
 8003eb6:	0003      	movs	r3, r0
 8003eb8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ebc:	f7fd fe58 	bl	8001b70 <HAL_GetTick>
 8003ec0:	0002      	movs	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e046      	b.n	8003f5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ece:	4b25      	ldr	r3, [pc, #148]	; (8003f64 <HAL_RCC_OscConfig+0x618>)
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	2380      	movs	r3, #128	; 0x80
 8003ed4:	049b      	lsls	r3, r3, #18
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	d1f0      	bne.n	8003ebc <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003eda:	4b22      	ldr	r3, [pc, #136]	; (8003f64 <HAL_RCC_OscConfig+0x618>)
 8003edc:	68da      	ldr	r2, [r3, #12]
 8003ede:	4b21      	ldr	r3, [pc, #132]	; (8003f64 <HAL_RCC_OscConfig+0x618>)
 8003ee0:	4926      	ldr	r1, [pc, #152]	; (8003f7c <HAL_RCC_OscConfig+0x630>)
 8003ee2:	400a      	ands	r2, r1
 8003ee4:	60da      	str	r2, [r3, #12]
 8003ee6:	e038      	b.n	8003f5a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	69db      	ldr	r3, [r3, #28]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d101      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e033      	b.n	8003f5c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003ef4:	4b1b      	ldr	r3, [pc, #108]	; (8003f64 <HAL_RCC_OscConfig+0x618>)
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	2203      	movs	r2, #3
 8003efe:	401a      	ands	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d126      	bne.n	8003f56 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	2270      	movs	r2, #112	; 0x70
 8003f0c:	401a      	ands	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d11f      	bne.n	8003f56 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	23fe      	movs	r3, #254	; 0xfe
 8003f1a:	01db      	lsls	r3, r3, #7
 8003f1c:	401a      	ands	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f22:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d116      	bne.n	8003f56 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	23f8      	movs	r3, #248	; 0xf8
 8003f2c:	039b      	lsls	r3, r3, #14
 8003f2e:	401a      	ands	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d10e      	bne.n	8003f56 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	23e0      	movs	r3, #224	; 0xe0
 8003f3c:	051b      	lsls	r3, r3, #20
 8003f3e:	401a      	ands	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d106      	bne.n	8003f56 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	0f5b      	lsrs	r3, r3, #29
 8003f4c:	075a      	lsls	r2, r3, #29
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d001      	beq.n	8003f5a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e000      	b.n	8003f5c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	b008      	add	sp, #32
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	40021000 	.word	0x40021000
 8003f68:	40007000 	.word	0x40007000
 8003f6c:	00001388 	.word	0x00001388
 8003f70:	efffffff 	.word	0xefffffff
 8003f74:	feffffff 	.word	0xfeffffff
 8003f78:	11c1808c 	.word	0x11c1808c
 8003f7c:	eefefffc 	.word	0xeefefffc

08003f80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e0e9      	b.n	8004168 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f94:	4b76      	ldr	r3, [pc, #472]	; (8004170 <HAL_RCC_ClockConfig+0x1f0>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2207      	movs	r2, #7
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d91e      	bls.n	8003fe0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa2:	4b73      	ldr	r3, [pc, #460]	; (8004170 <HAL_RCC_ClockConfig+0x1f0>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2207      	movs	r2, #7
 8003fa8:	4393      	bics	r3, r2
 8003faa:	0019      	movs	r1, r3
 8003fac:	4b70      	ldr	r3, [pc, #448]	; (8004170 <HAL_RCC_ClockConfig+0x1f0>)
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003fb4:	f7fd fddc 	bl	8001b70 <HAL_GetTick>
 8003fb8:	0003      	movs	r3, r0
 8003fba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003fbc:	e009      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fbe:	f7fd fdd7 	bl	8001b70 <HAL_GetTick>
 8003fc2:	0002      	movs	r2, r0
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	4a6a      	ldr	r2, [pc, #424]	; (8004174 <HAL_RCC_ClockConfig+0x1f4>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e0ca      	b.n	8004168 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003fd2:	4b67      	ldr	r3, [pc, #412]	; (8004170 <HAL_RCC_ClockConfig+0x1f0>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2207      	movs	r2, #7
 8003fd8:	4013      	ands	r3, r2
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d1ee      	bne.n	8003fbe <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	d015      	beq.n	8004016 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2204      	movs	r2, #4
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	d006      	beq.n	8004002 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003ff4:	4b60      	ldr	r3, [pc, #384]	; (8004178 <HAL_RCC_ClockConfig+0x1f8>)
 8003ff6:	689a      	ldr	r2, [r3, #8]
 8003ff8:	4b5f      	ldr	r3, [pc, #380]	; (8004178 <HAL_RCC_ClockConfig+0x1f8>)
 8003ffa:	21e0      	movs	r1, #224	; 0xe0
 8003ffc:	01c9      	lsls	r1, r1, #7
 8003ffe:	430a      	orrs	r2, r1
 8004000:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004002:	4b5d      	ldr	r3, [pc, #372]	; (8004178 <HAL_RCC_ClockConfig+0x1f8>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	4a5d      	ldr	r2, [pc, #372]	; (800417c <HAL_RCC_ClockConfig+0x1fc>)
 8004008:	4013      	ands	r3, r2
 800400a:	0019      	movs	r1, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689a      	ldr	r2, [r3, #8]
 8004010:	4b59      	ldr	r3, [pc, #356]	; (8004178 <HAL_RCC_ClockConfig+0x1f8>)
 8004012:	430a      	orrs	r2, r1
 8004014:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2201      	movs	r2, #1
 800401c:	4013      	ands	r3, r2
 800401e:	d057      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d107      	bne.n	8004038 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004028:	4b53      	ldr	r3, [pc, #332]	; (8004178 <HAL_RCC_ClockConfig+0x1f8>)
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	2380      	movs	r3, #128	; 0x80
 800402e:	029b      	lsls	r3, r3, #10
 8004030:	4013      	ands	r3, r2
 8004032:	d12b      	bne.n	800408c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e097      	b.n	8004168 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	2b02      	cmp	r3, #2
 800403e:	d107      	bne.n	8004050 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004040:	4b4d      	ldr	r3, [pc, #308]	; (8004178 <HAL_RCC_ClockConfig+0x1f8>)
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	2380      	movs	r3, #128	; 0x80
 8004046:	049b      	lsls	r3, r3, #18
 8004048:	4013      	ands	r3, r2
 800404a:	d11f      	bne.n	800408c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e08b      	b.n	8004168 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d107      	bne.n	8004068 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004058:	4b47      	ldr	r3, [pc, #284]	; (8004178 <HAL_RCC_ClockConfig+0x1f8>)
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	2380      	movs	r3, #128	; 0x80
 800405e:	00db      	lsls	r3, r3, #3
 8004060:	4013      	ands	r3, r2
 8004062:	d113      	bne.n	800408c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e07f      	b.n	8004168 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	2b03      	cmp	r3, #3
 800406e:	d106      	bne.n	800407e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004070:	4b41      	ldr	r3, [pc, #260]	; (8004178 <HAL_RCC_ClockConfig+0x1f8>)
 8004072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004074:	2202      	movs	r2, #2
 8004076:	4013      	ands	r3, r2
 8004078:	d108      	bne.n	800408c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e074      	b.n	8004168 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800407e:	4b3e      	ldr	r3, [pc, #248]	; (8004178 <HAL_RCC_ClockConfig+0x1f8>)
 8004080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004082:	2202      	movs	r2, #2
 8004084:	4013      	ands	r3, r2
 8004086:	d101      	bne.n	800408c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e06d      	b.n	8004168 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800408c:	4b3a      	ldr	r3, [pc, #232]	; (8004178 <HAL_RCC_ClockConfig+0x1f8>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	2207      	movs	r2, #7
 8004092:	4393      	bics	r3, r2
 8004094:	0019      	movs	r1, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	4b37      	ldr	r3, [pc, #220]	; (8004178 <HAL_RCC_ClockConfig+0x1f8>)
 800409c:	430a      	orrs	r2, r1
 800409e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040a0:	f7fd fd66 	bl	8001b70 <HAL_GetTick>
 80040a4:	0003      	movs	r3, r0
 80040a6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040a8:	e009      	b.n	80040be <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040aa:	f7fd fd61 	bl	8001b70 <HAL_GetTick>
 80040ae:	0002      	movs	r2, r0
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	4a2f      	ldr	r2, [pc, #188]	; (8004174 <HAL_RCC_ClockConfig+0x1f4>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d901      	bls.n	80040be <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e054      	b.n	8004168 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040be:	4b2e      	ldr	r3, [pc, #184]	; (8004178 <HAL_RCC_ClockConfig+0x1f8>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	2238      	movs	r2, #56	; 0x38
 80040c4:	401a      	ands	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d1ec      	bne.n	80040aa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040d0:	4b27      	ldr	r3, [pc, #156]	; (8004170 <HAL_RCC_ClockConfig+0x1f0>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2207      	movs	r2, #7
 80040d6:	4013      	ands	r3, r2
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d21e      	bcs.n	800411c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040de:	4b24      	ldr	r3, [pc, #144]	; (8004170 <HAL_RCC_ClockConfig+0x1f0>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2207      	movs	r2, #7
 80040e4:	4393      	bics	r3, r2
 80040e6:	0019      	movs	r1, r3
 80040e8:	4b21      	ldr	r3, [pc, #132]	; (8004170 <HAL_RCC_ClockConfig+0x1f0>)
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80040f0:	f7fd fd3e 	bl	8001b70 <HAL_GetTick>
 80040f4:	0003      	movs	r3, r0
 80040f6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80040f8:	e009      	b.n	800410e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040fa:	f7fd fd39 	bl	8001b70 <HAL_GetTick>
 80040fe:	0002      	movs	r2, r0
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	4a1b      	ldr	r2, [pc, #108]	; (8004174 <HAL_RCC_ClockConfig+0x1f4>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d901      	bls.n	800410e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e02c      	b.n	8004168 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800410e:	4b18      	ldr	r3, [pc, #96]	; (8004170 <HAL_RCC_ClockConfig+0x1f0>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2207      	movs	r2, #7
 8004114:	4013      	ands	r3, r2
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	429a      	cmp	r2, r3
 800411a:	d1ee      	bne.n	80040fa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2204      	movs	r2, #4
 8004122:	4013      	ands	r3, r2
 8004124:	d009      	beq.n	800413a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004126:	4b14      	ldr	r3, [pc, #80]	; (8004178 <HAL_RCC_ClockConfig+0x1f8>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	4a15      	ldr	r2, [pc, #84]	; (8004180 <HAL_RCC_ClockConfig+0x200>)
 800412c:	4013      	ands	r3, r2
 800412e:	0019      	movs	r1, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68da      	ldr	r2, [r3, #12]
 8004134:	4b10      	ldr	r3, [pc, #64]	; (8004178 <HAL_RCC_ClockConfig+0x1f8>)
 8004136:	430a      	orrs	r2, r1
 8004138:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800413a:	f000 f829 	bl	8004190 <HAL_RCC_GetSysClockFreq>
 800413e:	0001      	movs	r1, r0
 8004140:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <HAL_RCC_ClockConfig+0x1f8>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	0a1b      	lsrs	r3, r3, #8
 8004146:	220f      	movs	r2, #15
 8004148:	401a      	ands	r2, r3
 800414a:	4b0e      	ldr	r3, [pc, #56]	; (8004184 <HAL_RCC_ClockConfig+0x204>)
 800414c:	0092      	lsls	r2, r2, #2
 800414e:	58d3      	ldr	r3, [r2, r3]
 8004150:	221f      	movs	r2, #31
 8004152:	4013      	ands	r3, r2
 8004154:	000a      	movs	r2, r1
 8004156:	40da      	lsrs	r2, r3
 8004158:	4b0b      	ldr	r3, [pc, #44]	; (8004188 <HAL_RCC_ClockConfig+0x208>)
 800415a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800415c:	4b0b      	ldr	r3, [pc, #44]	; (800418c <HAL_RCC_ClockConfig+0x20c>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	0018      	movs	r0, r3
 8004162:	f7fd fca9 	bl	8001ab8 <HAL_InitTick>
 8004166:	0003      	movs	r3, r0
}
 8004168:	0018      	movs	r0, r3
 800416a:	46bd      	mov	sp, r7
 800416c:	b004      	add	sp, #16
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40022000 	.word	0x40022000
 8004174:	00001388 	.word	0x00001388
 8004178:	40021000 	.word	0x40021000
 800417c:	fffff0ff 	.word	0xfffff0ff
 8004180:	ffff8fff 	.word	0xffff8fff
 8004184:	08008bfc 	.word	0x08008bfc
 8004188:	2000000c 	.word	0x2000000c
 800418c:	20000010 	.word	0x20000010

08004190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004196:	4b3c      	ldr	r3, [pc, #240]	; (8004288 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	2238      	movs	r2, #56	; 0x38
 800419c:	4013      	ands	r3, r2
 800419e:	d10f      	bne.n	80041c0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80041a0:	4b39      	ldr	r3, [pc, #228]	; (8004288 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	0adb      	lsrs	r3, r3, #11
 80041a6:	2207      	movs	r2, #7
 80041a8:	4013      	ands	r3, r2
 80041aa:	2201      	movs	r2, #1
 80041ac:	409a      	lsls	r2, r3
 80041ae:	0013      	movs	r3, r2
 80041b0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80041b2:	6839      	ldr	r1, [r7, #0]
 80041b4:	4835      	ldr	r0, [pc, #212]	; (800428c <HAL_RCC_GetSysClockFreq+0xfc>)
 80041b6:	f7fb ffc1 	bl	800013c <__udivsi3>
 80041ba:	0003      	movs	r3, r0
 80041bc:	613b      	str	r3, [r7, #16]
 80041be:	e05d      	b.n	800427c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041c0:	4b31      	ldr	r3, [pc, #196]	; (8004288 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	2238      	movs	r2, #56	; 0x38
 80041c6:	4013      	ands	r3, r2
 80041c8:	2b08      	cmp	r3, #8
 80041ca:	d102      	bne.n	80041d2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041cc:	4b30      	ldr	r3, [pc, #192]	; (8004290 <HAL_RCC_GetSysClockFreq+0x100>)
 80041ce:	613b      	str	r3, [r7, #16]
 80041d0:	e054      	b.n	800427c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041d2:	4b2d      	ldr	r3, [pc, #180]	; (8004288 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	2238      	movs	r2, #56	; 0x38
 80041d8:	4013      	ands	r3, r2
 80041da:	2b10      	cmp	r3, #16
 80041dc:	d138      	bne.n	8004250 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80041de:	4b2a      	ldr	r3, [pc, #168]	; (8004288 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	2203      	movs	r2, #3
 80041e4:	4013      	ands	r3, r2
 80041e6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041e8:	4b27      	ldr	r3, [pc, #156]	; (8004288 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	091b      	lsrs	r3, r3, #4
 80041ee:	2207      	movs	r2, #7
 80041f0:	4013      	ands	r3, r2
 80041f2:	3301      	adds	r3, #1
 80041f4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2b03      	cmp	r3, #3
 80041fa:	d10d      	bne.n	8004218 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041fc:	68b9      	ldr	r1, [r7, #8]
 80041fe:	4824      	ldr	r0, [pc, #144]	; (8004290 <HAL_RCC_GetSysClockFreq+0x100>)
 8004200:	f7fb ff9c 	bl	800013c <__udivsi3>
 8004204:	0003      	movs	r3, r0
 8004206:	0019      	movs	r1, r3
 8004208:	4b1f      	ldr	r3, [pc, #124]	; (8004288 <HAL_RCC_GetSysClockFreq+0xf8>)
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	0a1b      	lsrs	r3, r3, #8
 800420e:	227f      	movs	r2, #127	; 0x7f
 8004210:	4013      	ands	r3, r2
 8004212:	434b      	muls	r3, r1
 8004214:	617b      	str	r3, [r7, #20]
        break;
 8004216:	e00d      	b.n	8004234 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004218:	68b9      	ldr	r1, [r7, #8]
 800421a:	481c      	ldr	r0, [pc, #112]	; (800428c <HAL_RCC_GetSysClockFreq+0xfc>)
 800421c:	f7fb ff8e 	bl	800013c <__udivsi3>
 8004220:	0003      	movs	r3, r0
 8004222:	0019      	movs	r1, r3
 8004224:	4b18      	ldr	r3, [pc, #96]	; (8004288 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	0a1b      	lsrs	r3, r3, #8
 800422a:	227f      	movs	r2, #127	; 0x7f
 800422c:	4013      	ands	r3, r2
 800422e:	434b      	muls	r3, r1
 8004230:	617b      	str	r3, [r7, #20]
        break;
 8004232:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004234:	4b14      	ldr	r3, [pc, #80]	; (8004288 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	0f5b      	lsrs	r3, r3, #29
 800423a:	2207      	movs	r2, #7
 800423c:	4013      	ands	r3, r2
 800423e:	3301      	adds	r3, #1
 8004240:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004242:	6879      	ldr	r1, [r7, #4]
 8004244:	6978      	ldr	r0, [r7, #20]
 8004246:	f7fb ff79 	bl	800013c <__udivsi3>
 800424a:	0003      	movs	r3, r0
 800424c:	613b      	str	r3, [r7, #16]
 800424e:	e015      	b.n	800427c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004250:	4b0d      	ldr	r3, [pc, #52]	; (8004288 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	2238      	movs	r2, #56	; 0x38
 8004256:	4013      	ands	r3, r2
 8004258:	2b20      	cmp	r3, #32
 800425a:	d103      	bne.n	8004264 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800425c:	2380      	movs	r3, #128	; 0x80
 800425e:	021b      	lsls	r3, r3, #8
 8004260:	613b      	str	r3, [r7, #16]
 8004262:	e00b      	b.n	800427c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004264:	4b08      	ldr	r3, [pc, #32]	; (8004288 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	2238      	movs	r2, #56	; 0x38
 800426a:	4013      	ands	r3, r2
 800426c:	2b18      	cmp	r3, #24
 800426e:	d103      	bne.n	8004278 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004270:	23fa      	movs	r3, #250	; 0xfa
 8004272:	01db      	lsls	r3, r3, #7
 8004274:	613b      	str	r3, [r7, #16]
 8004276:	e001      	b.n	800427c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004278:	2300      	movs	r3, #0
 800427a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800427c:	693b      	ldr	r3, [r7, #16]
}
 800427e:	0018      	movs	r0, r3
 8004280:	46bd      	mov	sp, r7
 8004282:	b006      	add	sp, #24
 8004284:	bd80      	pop	{r7, pc}
 8004286:	46c0      	nop			; (mov r8, r8)
 8004288:	40021000 	.word	0x40021000
 800428c:	00f42400 	.word	0x00f42400
 8004290:	007a1200 	.word	0x007a1200

08004294 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004298:	4b02      	ldr	r3, [pc, #8]	; (80042a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800429a:	681b      	ldr	r3, [r3, #0]
}
 800429c:	0018      	movs	r0, r3
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	46c0      	nop			; (mov r8, r8)
 80042a4:	2000000c 	.word	0x2000000c

080042a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042a8:	b5b0      	push	{r4, r5, r7, lr}
 80042aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80042ac:	f7ff fff2 	bl	8004294 <HAL_RCC_GetHCLKFreq>
 80042b0:	0004      	movs	r4, r0
 80042b2:	f7ff fb3f 	bl	8003934 <LL_RCC_GetAPB1Prescaler>
 80042b6:	0003      	movs	r3, r0
 80042b8:	0b1a      	lsrs	r2, r3, #12
 80042ba:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80042bc:	0092      	lsls	r2, r2, #2
 80042be:	58d3      	ldr	r3, [r2, r3]
 80042c0:	221f      	movs	r2, #31
 80042c2:	4013      	ands	r3, r2
 80042c4:	40dc      	lsrs	r4, r3
 80042c6:	0023      	movs	r3, r4
}
 80042c8:	0018      	movs	r0, r3
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bdb0      	pop	{r4, r5, r7, pc}
 80042ce:	46c0      	nop			; (mov r8, r8)
 80042d0:	08008c3c 	.word	0x08008c3c

080042d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80042dc:	2313      	movs	r3, #19
 80042de:	18fb      	adds	r3, r7, r3
 80042e0:	2200      	movs	r2, #0
 80042e2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042e4:	2312      	movs	r3, #18
 80042e6:	18fb      	adds	r3, r7, r3
 80042e8:	2200      	movs	r2, #0
 80042ea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	2380      	movs	r3, #128	; 0x80
 80042f2:	029b      	lsls	r3, r3, #10
 80042f4:	4013      	ands	r3, r2
 80042f6:	d100      	bne.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x26>
 80042f8:	e0a3      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042fa:	2011      	movs	r0, #17
 80042fc:	183b      	adds	r3, r7, r0
 80042fe:	2200      	movs	r2, #0
 8004300:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004302:	4bc3      	ldr	r3, [pc, #780]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004304:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004306:	2380      	movs	r3, #128	; 0x80
 8004308:	055b      	lsls	r3, r3, #21
 800430a:	4013      	ands	r3, r2
 800430c:	d110      	bne.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800430e:	4bc0      	ldr	r3, [pc, #768]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004310:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004312:	4bbf      	ldr	r3, [pc, #764]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004314:	2180      	movs	r1, #128	; 0x80
 8004316:	0549      	lsls	r1, r1, #21
 8004318:	430a      	orrs	r2, r1
 800431a:	63da      	str	r2, [r3, #60]	; 0x3c
 800431c:	4bbc      	ldr	r3, [pc, #752]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800431e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004320:	2380      	movs	r3, #128	; 0x80
 8004322:	055b      	lsls	r3, r3, #21
 8004324:	4013      	ands	r3, r2
 8004326:	60bb      	str	r3, [r7, #8]
 8004328:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800432a:	183b      	adds	r3, r7, r0
 800432c:	2201      	movs	r2, #1
 800432e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004330:	4bb8      	ldr	r3, [pc, #736]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	4bb7      	ldr	r3, [pc, #732]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004336:	2180      	movs	r1, #128	; 0x80
 8004338:	0049      	lsls	r1, r1, #1
 800433a:	430a      	orrs	r2, r1
 800433c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800433e:	f7fd fc17 	bl	8001b70 <HAL_GetTick>
 8004342:	0003      	movs	r3, r0
 8004344:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004346:	e00b      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004348:	f7fd fc12 	bl	8001b70 <HAL_GetTick>
 800434c:	0002      	movs	r2, r0
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b02      	cmp	r3, #2
 8004354:	d904      	bls.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004356:	2313      	movs	r3, #19
 8004358:	18fb      	adds	r3, r7, r3
 800435a:	2203      	movs	r2, #3
 800435c:	701a      	strb	r2, [r3, #0]
        break;
 800435e:	e005      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004360:	4bac      	ldr	r3, [pc, #688]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	2380      	movs	r3, #128	; 0x80
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	4013      	ands	r3, r2
 800436a:	d0ed      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800436c:	2313      	movs	r3, #19
 800436e:	18fb      	adds	r3, r7, r3
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d154      	bne.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004376:	4ba6      	ldr	r3, [pc, #664]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004378:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800437a:	23c0      	movs	r3, #192	; 0xc0
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4013      	ands	r3, r2
 8004380:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d019      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	429a      	cmp	r2, r3
 8004390:	d014      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004392:	4b9f      	ldr	r3, [pc, #636]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004396:	4aa0      	ldr	r2, [pc, #640]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004398:	4013      	ands	r3, r2
 800439a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800439c:	4b9c      	ldr	r3, [pc, #624]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800439e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80043a0:	4b9b      	ldr	r3, [pc, #620]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80043a2:	2180      	movs	r1, #128	; 0x80
 80043a4:	0249      	lsls	r1, r1, #9
 80043a6:	430a      	orrs	r2, r1
 80043a8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043aa:	4b99      	ldr	r3, [pc, #612]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80043ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80043ae:	4b98      	ldr	r3, [pc, #608]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80043b0:	499a      	ldr	r1, [pc, #616]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80043b2:	400a      	ands	r2, r1
 80043b4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043b6:	4b96      	ldr	r3, [pc, #600]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	2201      	movs	r2, #1
 80043c0:	4013      	ands	r3, r2
 80043c2:	d016      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c4:	f7fd fbd4 	bl	8001b70 <HAL_GetTick>
 80043c8:	0003      	movs	r3, r0
 80043ca:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043cc:	e00c      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ce:	f7fd fbcf 	bl	8001b70 <HAL_GetTick>
 80043d2:	0002      	movs	r2, r0
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	4a91      	ldr	r2, [pc, #580]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d904      	bls.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80043de:	2313      	movs	r3, #19
 80043e0:	18fb      	adds	r3, r7, r3
 80043e2:	2203      	movs	r2, #3
 80043e4:	701a      	strb	r2, [r3, #0]
            break;
 80043e6:	e004      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043e8:	4b89      	ldr	r3, [pc, #548]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80043ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ec:	2202      	movs	r2, #2
 80043ee:	4013      	ands	r3, r2
 80043f0:	d0ed      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80043f2:	2313      	movs	r3, #19
 80043f4:	18fb      	adds	r3, r7, r3
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10a      	bne.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043fc:	4b84      	ldr	r3, [pc, #528]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80043fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004400:	4a85      	ldr	r2, [pc, #532]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004402:	4013      	ands	r3, r2
 8004404:	0019      	movs	r1, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800440a:	4b81      	ldr	r3, [pc, #516]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800440c:	430a      	orrs	r2, r1
 800440e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004410:	e00c      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004412:	2312      	movs	r3, #18
 8004414:	18fb      	adds	r3, r7, r3
 8004416:	2213      	movs	r2, #19
 8004418:	18ba      	adds	r2, r7, r2
 800441a:	7812      	ldrb	r2, [r2, #0]
 800441c:	701a      	strb	r2, [r3, #0]
 800441e:	e005      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004420:	2312      	movs	r3, #18
 8004422:	18fb      	adds	r3, r7, r3
 8004424:	2213      	movs	r2, #19
 8004426:	18ba      	adds	r2, r7, r2
 8004428:	7812      	ldrb	r2, [r2, #0]
 800442a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800442c:	2311      	movs	r3, #17
 800442e:	18fb      	adds	r3, r7, r3
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d105      	bne.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004436:	4b76      	ldr	r3, [pc, #472]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004438:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800443a:	4b75      	ldr	r3, [pc, #468]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800443c:	4979      	ldr	r1, [pc, #484]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800443e:	400a      	ands	r2, r1
 8004440:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2201      	movs	r2, #1
 8004448:	4013      	ands	r3, r2
 800444a:	d009      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800444c:	4b70      	ldr	r3, [pc, #448]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800444e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004450:	2203      	movs	r2, #3
 8004452:	4393      	bics	r3, r2
 8004454:	0019      	movs	r1, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	4b6d      	ldr	r3, [pc, #436]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800445c:	430a      	orrs	r2, r1
 800445e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2202      	movs	r2, #2
 8004466:	4013      	ands	r3, r2
 8004468:	d009      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800446a:	4b69      	ldr	r3, [pc, #420]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800446c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446e:	220c      	movs	r2, #12
 8004470:	4393      	bics	r3, r2
 8004472:	0019      	movs	r1, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	4b65      	ldr	r3, [pc, #404]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800447a:	430a      	orrs	r2, r1
 800447c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2210      	movs	r2, #16
 8004484:	4013      	ands	r3, r2
 8004486:	d009      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004488:	4b61      	ldr	r3, [pc, #388]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800448a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448c:	4a66      	ldr	r2, [pc, #408]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800448e:	4013      	ands	r3, r2
 8004490:	0019      	movs	r1, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68da      	ldr	r2, [r3, #12]
 8004496:	4b5e      	ldr	r3, [pc, #376]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004498:	430a      	orrs	r2, r1
 800449a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	2380      	movs	r3, #128	; 0x80
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	4013      	ands	r3, r2
 80044a6:	d009      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044a8:	4b59      	ldr	r3, [pc, #356]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80044aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ac:	4a5f      	ldr	r2, [pc, #380]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80044ae:	4013      	ands	r3, r2
 80044b0:	0019      	movs	r1, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	699a      	ldr	r2, [r3, #24]
 80044b6:	4b56      	ldr	r3, [pc, #344]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80044b8:	430a      	orrs	r2, r1
 80044ba:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	2380      	movs	r3, #128	; 0x80
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	4013      	ands	r3, r2
 80044c6:	d009      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044c8:	4b51      	ldr	r3, [pc, #324]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80044ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044cc:	4a58      	ldr	r2, [pc, #352]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044ce:	4013      	ands	r3, r2
 80044d0:	0019      	movs	r1, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	69da      	ldr	r2, [r3, #28]
 80044d6:	4b4e      	ldr	r3, [pc, #312]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80044d8:	430a      	orrs	r2, r1
 80044da:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2220      	movs	r2, #32
 80044e2:	4013      	ands	r3, r2
 80044e4:	d009      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044e6:	4b4a      	ldr	r3, [pc, #296]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80044e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ea:	4a52      	ldr	r2, [pc, #328]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80044ec:	4013      	ands	r3, r2
 80044ee:	0019      	movs	r1, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	691a      	ldr	r2, [r3, #16]
 80044f4:	4b46      	ldr	r3, [pc, #280]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80044f6:	430a      	orrs	r2, r1
 80044f8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	2380      	movs	r3, #128	; 0x80
 8004500:	01db      	lsls	r3, r3, #7
 8004502:	4013      	ands	r3, r2
 8004504:	d015      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004506:	4b42      	ldr	r3, [pc, #264]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	0899      	lsrs	r1, r3, #2
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a1a      	ldr	r2, [r3, #32]
 8004512:	4b3f      	ldr	r3, [pc, #252]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004514:	430a      	orrs	r2, r1
 8004516:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a1a      	ldr	r2, [r3, #32]
 800451c:	2380      	movs	r3, #128	; 0x80
 800451e:	05db      	lsls	r3, r3, #23
 8004520:	429a      	cmp	r2, r3
 8004522:	d106      	bne.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004524:	4b3a      	ldr	r3, [pc, #232]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004526:	68da      	ldr	r2, [r3, #12]
 8004528:	4b39      	ldr	r3, [pc, #228]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800452a:	2180      	movs	r1, #128	; 0x80
 800452c:	0249      	lsls	r1, r1, #9
 800452e:	430a      	orrs	r2, r1
 8004530:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	2380      	movs	r3, #128	; 0x80
 8004538:	031b      	lsls	r3, r3, #12
 800453a:	4013      	ands	r3, r2
 800453c:	d009      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800453e:	4b34      	ldr	r3, [pc, #208]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004542:	2240      	movs	r2, #64	; 0x40
 8004544:	4393      	bics	r3, r2
 8004546:	0019      	movs	r1, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800454c:	4b30      	ldr	r3, [pc, #192]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800454e:	430a      	orrs	r2, r1
 8004550:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	2380      	movs	r3, #128	; 0x80
 8004558:	039b      	lsls	r3, r3, #14
 800455a:	4013      	ands	r3, r2
 800455c:	d016      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800455e:	4b2c      	ldr	r3, [pc, #176]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004562:	4a35      	ldr	r2, [pc, #212]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004564:	4013      	ands	r3, r2
 8004566:	0019      	movs	r1, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800456c:	4b28      	ldr	r3, [pc, #160]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800456e:	430a      	orrs	r2, r1
 8004570:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004576:	2380      	movs	r3, #128	; 0x80
 8004578:	03db      	lsls	r3, r3, #15
 800457a:	429a      	cmp	r2, r3
 800457c:	d106      	bne.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800457e:	4b24      	ldr	r3, [pc, #144]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004580:	68da      	ldr	r2, [r3, #12]
 8004582:	4b23      	ldr	r3, [pc, #140]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004584:	2180      	movs	r1, #128	; 0x80
 8004586:	0449      	lsls	r1, r1, #17
 8004588:	430a      	orrs	r2, r1
 800458a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	2380      	movs	r3, #128	; 0x80
 8004592:	03db      	lsls	r3, r3, #15
 8004594:	4013      	ands	r3, r2
 8004596:	d016      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004598:	4b1d      	ldr	r3, [pc, #116]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800459a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459c:	4a27      	ldr	r2, [pc, #156]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800459e:	4013      	ands	r3, r2
 80045a0:	0019      	movs	r1, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a6:	4b1a      	ldr	r3, [pc, #104]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045a8:	430a      	orrs	r2, r1
 80045aa:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b0:	2380      	movs	r3, #128	; 0x80
 80045b2:	045b      	lsls	r3, r3, #17
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d106      	bne.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80045b8:	4b15      	ldr	r3, [pc, #84]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045ba:	68da      	ldr	r2, [r3, #12]
 80045bc:	4b14      	ldr	r3, [pc, #80]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045be:	2180      	movs	r1, #128	; 0x80
 80045c0:	0449      	lsls	r1, r1, #17
 80045c2:	430a      	orrs	r2, r1
 80045c4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	2380      	movs	r3, #128	; 0x80
 80045cc:	011b      	lsls	r3, r3, #4
 80045ce:	4013      	ands	r3, r2
 80045d0:	d016      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80045d2:	4b0f      	ldr	r3, [pc, #60]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d6:	4a1a      	ldr	r2, [pc, #104]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80045d8:	4013      	ands	r3, r2
 80045da:	0019      	movs	r1, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	695a      	ldr	r2, [r3, #20]
 80045e0:	4b0b      	ldr	r3, [pc, #44]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045e2:	430a      	orrs	r2, r1
 80045e4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	695a      	ldr	r2, [r3, #20]
 80045ea:	2380      	movs	r3, #128	; 0x80
 80045ec:	01db      	lsls	r3, r3, #7
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d106      	bne.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80045f2:	4b07      	ldr	r3, [pc, #28]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045f4:	68da      	ldr	r2, [r3, #12]
 80045f6:	4b06      	ldr	r3, [pc, #24]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045f8:	2180      	movs	r1, #128	; 0x80
 80045fa:	0249      	lsls	r1, r1, #9
 80045fc:	430a      	orrs	r2, r1
 80045fe:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004600:	2312      	movs	r3, #18
 8004602:	18fb      	adds	r3, r7, r3
 8004604:	781b      	ldrb	r3, [r3, #0]
}
 8004606:	0018      	movs	r0, r3
 8004608:	46bd      	mov	sp, r7
 800460a:	b006      	add	sp, #24
 800460c:	bd80      	pop	{r7, pc}
 800460e:	46c0      	nop			; (mov r8, r8)
 8004610:	40021000 	.word	0x40021000
 8004614:	40007000 	.word	0x40007000
 8004618:	fffffcff 	.word	0xfffffcff
 800461c:	fffeffff 	.word	0xfffeffff
 8004620:	00001388 	.word	0x00001388
 8004624:	efffffff 	.word	0xefffffff
 8004628:	fffff3ff 	.word	0xfffff3ff
 800462c:	fff3ffff 	.word	0xfff3ffff
 8004630:	ffcfffff 	.word	0xffcfffff
 8004634:	ffffcfff 	.word	0xffffcfff
 8004638:	ffbfffff 	.word	0xffbfffff
 800463c:	feffffff 	.word	0xfeffffff
 8004640:	ffff3fff 	.word	0xffff3fff

08004644 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e04a      	b.n	80046ec <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	223d      	movs	r2, #61	; 0x3d
 800465a:	5c9b      	ldrb	r3, [r3, r2]
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d107      	bne.n	8004672 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	223c      	movs	r2, #60	; 0x3c
 8004666:	2100      	movs	r1, #0
 8004668:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	0018      	movs	r0, r3
 800466e:	f7fd f817 	bl	80016a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	223d      	movs	r2, #61	; 0x3d
 8004676:	2102      	movs	r1, #2
 8004678:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	3304      	adds	r3, #4
 8004682:	0019      	movs	r1, r3
 8004684:	0010      	movs	r0, r2
 8004686:	f000 fcd9 	bl	800503c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2248      	movs	r2, #72	; 0x48
 800468e:	2101      	movs	r1, #1
 8004690:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	223e      	movs	r2, #62	; 0x3e
 8004696:	2101      	movs	r1, #1
 8004698:	5499      	strb	r1, [r3, r2]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	223f      	movs	r2, #63	; 0x3f
 800469e:	2101      	movs	r1, #1
 80046a0:	5499      	strb	r1, [r3, r2]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2240      	movs	r2, #64	; 0x40
 80046a6:	2101      	movs	r1, #1
 80046a8:	5499      	strb	r1, [r3, r2]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2241      	movs	r2, #65	; 0x41
 80046ae:	2101      	movs	r1, #1
 80046b0:	5499      	strb	r1, [r3, r2]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2242      	movs	r2, #66	; 0x42
 80046b6:	2101      	movs	r1, #1
 80046b8:	5499      	strb	r1, [r3, r2]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2243      	movs	r2, #67	; 0x43
 80046be:	2101      	movs	r1, #1
 80046c0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2244      	movs	r2, #68	; 0x44
 80046c6:	2101      	movs	r1, #1
 80046c8:	5499      	strb	r1, [r3, r2]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2245      	movs	r2, #69	; 0x45
 80046ce:	2101      	movs	r1, #1
 80046d0:	5499      	strb	r1, [r3, r2]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2246      	movs	r2, #70	; 0x46
 80046d6:	2101      	movs	r1, #1
 80046d8:	5499      	strb	r1, [r3, r2]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2247      	movs	r2, #71	; 0x47
 80046de:	2101      	movs	r1, #1
 80046e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	223d      	movs	r2, #61	; 0x3d
 80046e6:	2101      	movs	r1, #1
 80046e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	0018      	movs	r0, r3
 80046ee:	46bd      	mov	sp, r7
 80046f0:	b002      	add	sp, #8
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	223d      	movs	r2, #61	; 0x3d
 8004700:	5c9b      	ldrb	r3, [r3, r2]
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b01      	cmp	r3, #1
 8004706:	d001      	beq.n	800470c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e042      	b.n	8004792 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	223d      	movs	r2, #61	; 0x3d
 8004710:	2102      	movs	r1, #2
 8004712:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2101      	movs	r1, #1
 8004720:	430a      	orrs	r2, r1
 8004722:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a1c      	ldr	r2, [pc, #112]	; (800479c <HAL_TIM_Base_Start_IT+0xa8>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d00f      	beq.n	800474e <HAL_TIM_Base_Start_IT+0x5a>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	2380      	movs	r3, #128	; 0x80
 8004734:	05db      	lsls	r3, r3, #23
 8004736:	429a      	cmp	r2, r3
 8004738:	d009      	beq.n	800474e <HAL_TIM_Base_Start_IT+0x5a>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a18      	ldr	r2, [pc, #96]	; (80047a0 <HAL_TIM_Base_Start_IT+0xac>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d004      	beq.n	800474e <HAL_TIM_Base_Start_IT+0x5a>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a16      	ldr	r2, [pc, #88]	; (80047a4 <HAL_TIM_Base_Start_IT+0xb0>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d116      	bne.n	800477c <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	4a14      	ldr	r2, [pc, #80]	; (80047a8 <HAL_TIM_Base_Start_IT+0xb4>)
 8004756:	4013      	ands	r3, r2
 8004758:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2b06      	cmp	r3, #6
 800475e:	d016      	beq.n	800478e <HAL_TIM_Base_Start_IT+0x9a>
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	2380      	movs	r3, #128	; 0x80
 8004764:	025b      	lsls	r3, r3, #9
 8004766:	429a      	cmp	r2, r3
 8004768:	d011      	beq.n	800478e <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2101      	movs	r1, #1
 8004776:	430a      	orrs	r2, r1
 8004778:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800477a:	e008      	b.n	800478e <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2101      	movs	r1, #1
 8004788:	430a      	orrs	r2, r1
 800478a:	601a      	str	r2, [r3, #0]
 800478c:	e000      	b.n	8004790 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800478e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	0018      	movs	r0, r3
 8004794:	46bd      	mov	sp, r7
 8004796:	b004      	add	sp, #16
 8004798:	bd80      	pop	{r7, pc}
 800479a:	46c0      	nop			; (mov r8, r8)
 800479c:	40012c00 	.word	0x40012c00
 80047a0:	40000400 	.word	0x40000400
 80047a4:	40014000 	.word	0x40014000
 80047a8:	00010007 	.word	0x00010007

080047ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e04a      	b.n	8004854 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	223d      	movs	r2, #61	; 0x3d
 80047c2:	5c9b      	ldrb	r3, [r3, r2]
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d107      	bne.n	80047da <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	223c      	movs	r2, #60	; 0x3c
 80047ce:	2100      	movs	r1, #0
 80047d0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	0018      	movs	r0, r3
 80047d6:	f000 f841 	bl	800485c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	223d      	movs	r2, #61	; 0x3d
 80047de:	2102      	movs	r1, #2
 80047e0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	3304      	adds	r3, #4
 80047ea:	0019      	movs	r1, r3
 80047ec:	0010      	movs	r0, r2
 80047ee:	f000 fc25 	bl	800503c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2248      	movs	r2, #72	; 0x48
 80047f6:	2101      	movs	r1, #1
 80047f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	223e      	movs	r2, #62	; 0x3e
 80047fe:	2101      	movs	r1, #1
 8004800:	5499      	strb	r1, [r3, r2]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	223f      	movs	r2, #63	; 0x3f
 8004806:	2101      	movs	r1, #1
 8004808:	5499      	strb	r1, [r3, r2]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2240      	movs	r2, #64	; 0x40
 800480e:	2101      	movs	r1, #1
 8004810:	5499      	strb	r1, [r3, r2]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2241      	movs	r2, #65	; 0x41
 8004816:	2101      	movs	r1, #1
 8004818:	5499      	strb	r1, [r3, r2]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2242      	movs	r2, #66	; 0x42
 800481e:	2101      	movs	r1, #1
 8004820:	5499      	strb	r1, [r3, r2]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2243      	movs	r2, #67	; 0x43
 8004826:	2101      	movs	r1, #1
 8004828:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2244      	movs	r2, #68	; 0x44
 800482e:	2101      	movs	r1, #1
 8004830:	5499      	strb	r1, [r3, r2]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2245      	movs	r2, #69	; 0x45
 8004836:	2101      	movs	r1, #1
 8004838:	5499      	strb	r1, [r3, r2]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2246      	movs	r2, #70	; 0x46
 800483e:	2101      	movs	r1, #1
 8004840:	5499      	strb	r1, [r3, r2]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2247      	movs	r2, #71	; 0x47
 8004846:	2101      	movs	r1, #1
 8004848:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	223d      	movs	r2, #61	; 0x3d
 800484e:	2101      	movs	r1, #1
 8004850:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	0018      	movs	r0, r3
 8004856:	46bd      	mov	sp, r7
 8004858:	b002      	add	sp, #8
 800485a:	bd80      	pop	{r7, pc}

0800485c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004864:	46c0      	nop			; (mov r8, r8)
 8004866:	46bd      	mov	sp, r7
 8004868:	b002      	add	sp, #8
 800486a:	bd80      	pop	{r7, pc}

0800486c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d108      	bne.n	800488e <HAL_TIM_PWM_Start+0x22>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	223e      	movs	r2, #62	; 0x3e
 8004880:	5c9b      	ldrb	r3, [r3, r2]
 8004882:	b2db      	uxtb	r3, r3
 8004884:	3b01      	subs	r3, #1
 8004886:	1e5a      	subs	r2, r3, #1
 8004888:	4193      	sbcs	r3, r2
 800488a:	b2db      	uxtb	r3, r3
 800488c:	e037      	b.n	80048fe <HAL_TIM_PWM_Start+0x92>
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b04      	cmp	r3, #4
 8004892:	d108      	bne.n	80048a6 <HAL_TIM_PWM_Start+0x3a>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	223f      	movs	r2, #63	; 0x3f
 8004898:	5c9b      	ldrb	r3, [r3, r2]
 800489a:	b2db      	uxtb	r3, r3
 800489c:	3b01      	subs	r3, #1
 800489e:	1e5a      	subs	r2, r3, #1
 80048a0:	4193      	sbcs	r3, r2
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	e02b      	b.n	80048fe <HAL_TIM_PWM_Start+0x92>
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	d108      	bne.n	80048be <HAL_TIM_PWM_Start+0x52>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2240      	movs	r2, #64	; 0x40
 80048b0:	5c9b      	ldrb	r3, [r3, r2]
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	3b01      	subs	r3, #1
 80048b6:	1e5a      	subs	r2, r3, #1
 80048b8:	4193      	sbcs	r3, r2
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	e01f      	b.n	80048fe <HAL_TIM_PWM_Start+0x92>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b0c      	cmp	r3, #12
 80048c2:	d108      	bne.n	80048d6 <HAL_TIM_PWM_Start+0x6a>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2241      	movs	r2, #65	; 0x41
 80048c8:	5c9b      	ldrb	r3, [r3, r2]
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	3b01      	subs	r3, #1
 80048ce:	1e5a      	subs	r2, r3, #1
 80048d0:	4193      	sbcs	r3, r2
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	e013      	b.n	80048fe <HAL_TIM_PWM_Start+0x92>
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b10      	cmp	r3, #16
 80048da:	d108      	bne.n	80048ee <HAL_TIM_PWM_Start+0x82>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2242      	movs	r2, #66	; 0x42
 80048e0:	5c9b      	ldrb	r3, [r3, r2]
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	3b01      	subs	r3, #1
 80048e6:	1e5a      	subs	r2, r3, #1
 80048e8:	4193      	sbcs	r3, r2
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	e007      	b.n	80048fe <HAL_TIM_PWM_Start+0x92>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2243      	movs	r2, #67	; 0x43
 80048f2:	5c9b      	ldrb	r3, [r3, r2]
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	3b01      	subs	r3, #1
 80048f8:	1e5a      	subs	r2, r3, #1
 80048fa:	4193      	sbcs	r3, r2
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e08b      	b.n	8004a1e <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d104      	bne.n	8004916 <HAL_TIM_PWM_Start+0xaa>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	223e      	movs	r2, #62	; 0x3e
 8004910:	2102      	movs	r1, #2
 8004912:	5499      	strb	r1, [r3, r2]
 8004914:	e023      	b.n	800495e <HAL_TIM_PWM_Start+0xf2>
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	2b04      	cmp	r3, #4
 800491a:	d104      	bne.n	8004926 <HAL_TIM_PWM_Start+0xba>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	223f      	movs	r2, #63	; 0x3f
 8004920:	2102      	movs	r1, #2
 8004922:	5499      	strb	r1, [r3, r2]
 8004924:	e01b      	b.n	800495e <HAL_TIM_PWM_Start+0xf2>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2b08      	cmp	r3, #8
 800492a:	d104      	bne.n	8004936 <HAL_TIM_PWM_Start+0xca>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2240      	movs	r2, #64	; 0x40
 8004930:	2102      	movs	r1, #2
 8004932:	5499      	strb	r1, [r3, r2]
 8004934:	e013      	b.n	800495e <HAL_TIM_PWM_Start+0xf2>
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b0c      	cmp	r3, #12
 800493a:	d104      	bne.n	8004946 <HAL_TIM_PWM_Start+0xda>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2241      	movs	r2, #65	; 0x41
 8004940:	2102      	movs	r1, #2
 8004942:	5499      	strb	r1, [r3, r2]
 8004944:	e00b      	b.n	800495e <HAL_TIM_PWM_Start+0xf2>
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2b10      	cmp	r3, #16
 800494a:	d104      	bne.n	8004956 <HAL_TIM_PWM_Start+0xea>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2242      	movs	r2, #66	; 0x42
 8004950:	2102      	movs	r1, #2
 8004952:	5499      	strb	r1, [r3, r2]
 8004954:	e003      	b.n	800495e <HAL_TIM_PWM_Start+0xf2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2243      	movs	r2, #67	; 0x43
 800495a:	2102      	movs	r1, #2
 800495c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	6839      	ldr	r1, [r7, #0]
 8004964:	2201      	movs	r2, #1
 8004966:	0018      	movs	r0, r3
 8004968:	f000 ff56 	bl	8005818 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a2d      	ldr	r2, [pc, #180]	; (8004a28 <HAL_TIM_PWM_Start+0x1bc>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d00e      	beq.n	8004994 <HAL_TIM_PWM_Start+0x128>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a2c      	ldr	r2, [pc, #176]	; (8004a2c <HAL_TIM_PWM_Start+0x1c0>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d009      	beq.n	8004994 <HAL_TIM_PWM_Start+0x128>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a2a      	ldr	r2, [pc, #168]	; (8004a30 <HAL_TIM_PWM_Start+0x1c4>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d004      	beq.n	8004994 <HAL_TIM_PWM_Start+0x128>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a29      	ldr	r2, [pc, #164]	; (8004a34 <HAL_TIM_PWM_Start+0x1c8>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d101      	bne.n	8004998 <HAL_TIM_PWM_Start+0x12c>
 8004994:	2301      	movs	r3, #1
 8004996:	e000      	b.n	800499a <HAL_TIM_PWM_Start+0x12e>
 8004998:	2300      	movs	r3, #0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d008      	beq.n	80049b0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2180      	movs	r1, #128	; 0x80
 80049aa:	0209      	lsls	r1, r1, #8
 80049ac:	430a      	orrs	r2, r1
 80049ae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a1c      	ldr	r2, [pc, #112]	; (8004a28 <HAL_TIM_PWM_Start+0x1bc>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d00f      	beq.n	80049da <HAL_TIM_PWM_Start+0x16e>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	2380      	movs	r3, #128	; 0x80
 80049c0:	05db      	lsls	r3, r3, #23
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d009      	beq.n	80049da <HAL_TIM_PWM_Start+0x16e>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a1b      	ldr	r2, [pc, #108]	; (8004a38 <HAL_TIM_PWM_Start+0x1cc>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d004      	beq.n	80049da <HAL_TIM_PWM_Start+0x16e>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a15      	ldr	r2, [pc, #84]	; (8004a2c <HAL_TIM_PWM_Start+0x1c0>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d116      	bne.n	8004a08 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	4a16      	ldr	r2, [pc, #88]	; (8004a3c <HAL_TIM_PWM_Start+0x1d0>)
 80049e2:	4013      	ands	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2b06      	cmp	r3, #6
 80049ea:	d016      	beq.n	8004a1a <HAL_TIM_PWM_Start+0x1ae>
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	2380      	movs	r3, #128	; 0x80
 80049f0:	025b      	lsls	r3, r3, #9
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d011      	beq.n	8004a1a <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2101      	movs	r1, #1
 8004a02:	430a      	orrs	r2, r1
 8004a04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a06:	e008      	b.n	8004a1a <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2101      	movs	r1, #1
 8004a14:	430a      	orrs	r2, r1
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	e000      	b.n	8004a1c <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a1a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	0018      	movs	r0, r3
 8004a20:	46bd      	mov	sp, r7
 8004a22:	b004      	add	sp, #16
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	46c0      	nop			; (mov r8, r8)
 8004a28:	40012c00 	.word	0x40012c00
 8004a2c:	40014000 	.word	0x40014000
 8004a30:	40014400 	.word	0x40014400
 8004a34:	40014800 	.word	0x40014800
 8004a38:	40000400 	.word	0x40000400
 8004a3c:	00010007 	.word	0x00010007

08004a40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	d021      	beq.n	8004aa4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2202      	movs	r2, #2
 8004a64:	4013      	ands	r3, r2
 8004a66:	d01d      	beq.n	8004aa4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2203      	movs	r2, #3
 8004a6e:	4252      	negs	r2, r2
 8004a70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	2203      	movs	r2, #3
 8004a80:	4013      	ands	r3, r2
 8004a82:	d004      	beq.n	8004a8e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	0018      	movs	r0, r3
 8004a88:	f000 fac0 	bl	800500c <HAL_TIM_IC_CaptureCallback>
 8004a8c:	e007      	b.n	8004a9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	0018      	movs	r0, r3
 8004a92:	f000 fab3 	bl	8004ffc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	0018      	movs	r0, r3
 8004a9a:	f000 fabf 	bl	800501c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2204      	movs	r2, #4
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	d022      	beq.n	8004af2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2204      	movs	r2, #4
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	d01e      	beq.n	8004af2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2205      	movs	r2, #5
 8004aba:	4252      	negs	r2, r2
 8004abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2202      	movs	r2, #2
 8004ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	699a      	ldr	r2, [r3, #24]
 8004aca:	23c0      	movs	r3, #192	; 0xc0
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4013      	ands	r3, r2
 8004ad0:	d004      	beq.n	8004adc <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	0018      	movs	r0, r3
 8004ad6:	f000 fa99 	bl	800500c <HAL_TIM_IC_CaptureCallback>
 8004ada:	e007      	b.n	8004aec <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	0018      	movs	r0, r3
 8004ae0:	f000 fa8c 	bl	8004ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	0018      	movs	r0, r3
 8004ae8:	f000 fa98 	bl	800501c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	2208      	movs	r2, #8
 8004af6:	4013      	ands	r3, r2
 8004af8:	d021      	beq.n	8004b3e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2208      	movs	r2, #8
 8004afe:	4013      	ands	r3, r2
 8004b00:	d01d      	beq.n	8004b3e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2209      	movs	r2, #9
 8004b08:	4252      	negs	r2, r2
 8004b0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2204      	movs	r2, #4
 8004b10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	69db      	ldr	r3, [r3, #28]
 8004b18:	2203      	movs	r2, #3
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	d004      	beq.n	8004b28 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	0018      	movs	r0, r3
 8004b22:	f000 fa73 	bl	800500c <HAL_TIM_IC_CaptureCallback>
 8004b26:	e007      	b.n	8004b38 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	f000 fa66 	bl	8004ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	0018      	movs	r0, r3
 8004b34:	f000 fa72 	bl	800501c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	2210      	movs	r2, #16
 8004b42:	4013      	ands	r3, r2
 8004b44:	d022      	beq.n	8004b8c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2210      	movs	r2, #16
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	d01e      	beq.n	8004b8c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2211      	movs	r2, #17
 8004b54:	4252      	negs	r2, r2
 8004b56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2208      	movs	r2, #8
 8004b5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	69da      	ldr	r2, [r3, #28]
 8004b64:	23c0      	movs	r3, #192	; 0xc0
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4013      	ands	r3, r2
 8004b6a:	d004      	beq.n	8004b76 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	0018      	movs	r0, r3
 8004b70:	f000 fa4c 	bl	800500c <HAL_TIM_IC_CaptureCallback>
 8004b74:	e007      	b.n	8004b86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	0018      	movs	r0, r3
 8004b7a:	f000 fa3f 	bl	8004ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	0018      	movs	r0, r3
 8004b82:	f000 fa4b 	bl	800501c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	4013      	ands	r3, r2
 8004b92:	d00c      	beq.n	8004bae <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2201      	movs	r2, #1
 8004b98:	4013      	ands	r3, r2
 8004b9a:	d008      	beq.n	8004bae <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	4252      	negs	r2, r2
 8004ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	0018      	movs	r0, r3
 8004baa:	f7fc fb9f 	bl	80012ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	2280      	movs	r2, #128	; 0x80
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	d104      	bne.n	8004bc0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	2380      	movs	r3, #128	; 0x80
 8004bba:	019b      	lsls	r3, r3, #6
 8004bbc:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004bbe:	d00b      	beq.n	8004bd8 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2280      	movs	r2, #128	; 0x80
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	d007      	beq.n	8004bd8 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a1e      	ldr	r2, [pc, #120]	; (8004c48 <HAL_TIM_IRQHandler+0x208>)
 8004bce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	0018      	movs	r0, r3
 8004bd4:	f000 feba 	bl	800594c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	2380      	movs	r3, #128	; 0x80
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	4013      	ands	r3, r2
 8004be0:	d00b      	beq.n	8004bfa <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2280      	movs	r2, #128	; 0x80
 8004be6:	4013      	ands	r3, r2
 8004be8:	d007      	beq.n	8004bfa <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a17      	ldr	r2, [pc, #92]	; (8004c4c <HAL_TIM_IRQHandler+0x20c>)
 8004bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	0018      	movs	r0, r3
 8004bf6:	f000 feb1 	bl	800595c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	2240      	movs	r2, #64	; 0x40
 8004bfe:	4013      	ands	r3, r2
 8004c00:	d00c      	beq.n	8004c1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2240      	movs	r2, #64	; 0x40
 8004c06:	4013      	ands	r3, r2
 8004c08:	d008      	beq.n	8004c1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2241      	movs	r2, #65	; 0x41
 8004c10:	4252      	negs	r2, r2
 8004c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	0018      	movs	r0, r3
 8004c18:	f000 fa08 	bl	800502c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	4013      	ands	r3, r2
 8004c22:	d00c      	beq.n	8004c3e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2220      	movs	r2, #32
 8004c28:	4013      	ands	r3, r2
 8004c2a:	d008      	beq.n	8004c3e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2221      	movs	r2, #33	; 0x21
 8004c32:	4252      	negs	r2, r2
 8004c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	0018      	movs	r0, r3
 8004c3a:	f000 fe7f 	bl	800593c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c3e:	46c0      	nop			; (mov r8, r8)
 8004c40:	46bd      	mov	sp, r7
 8004c42:	b004      	add	sp, #16
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	46c0      	nop			; (mov r8, r8)
 8004c48:	ffffdf7f 	.word	0xffffdf7f
 8004c4c:	fffffeff 	.word	0xfffffeff

08004c50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c5c:	2317      	movs	r3, #23
 8004c5e:	18fb      	adds	r3, r7, r3
 8004c60:	2200      	movs	r2, #0
 8004c62:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	223c      	movs	r2, #60	; 0x3c
 8004c68:	5c9b      	ldrb	r3, [r3, r2]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d101      	bne.n	8004c72 <HAL_TIM_PWM_ConfigChannel+0x22>
 8004c6e:	2302      	movs	r3, #2
 8004c70:	e0e5      	b.n	8004e3e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	223c      	movs	r2, #60	; 0x3c
 8004c76:	2101      	movs	r1, #1
 8004c78:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b14      	cmp	r3, #20
 8004c7e:	d900      	bls.n	8004c82 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004c80:	e0d1      	b.n	8004e26 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	009a      	lsls	r2, r3, #2
 8004c86:	4b70      	ldr	r3, [pc, #448]	; (8004e48 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004c88:	18d3      	adds	r3, r2, r3
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	0011      	movs	r1, r2
 8004c96:	0018      	movs	r0, r3
 8004c98:	f000 fa5e 	bl	8005158 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	699a      	ldr	r2, [r3, #24]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2108      	movs	r1, #8
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	699a      	ldr	r2, [r3, #24]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2104      	movs	r1, #4
 8004cb8:	438a      	bics	r2, r1
 8004cba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6999      	ldr	r1, [r3, #24]
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	691a      	ldr	r2, [r3, #16]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	619a      	str	r2, [r3, #24]
      break;
 8004cce:	e0af      	b.n	8004e30 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	0011      	movs	r1, r2
 8004cd8:	0018      	movs	r0, r3
 8004cda:	f000 fac7 	bl	800526c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	699a      	ldr	r2, [r3, #24]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2180      	movs	r1, #128	; 0x80
 8004cea:	0109      	lsls	r1, r1, #4
 8004cec:	430a      	orrs	r2, r1
 8004cee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	699a      	ldr	r2, [r3, #24]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4954      	ldr	r1, [pc, #336]	; (8004e4c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004cfc:	400a      	ands	r2, r1
 8004cfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6999      	ldr	r1, [r3, #24]
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	021a      	lsls	r2, r3, #8
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	619a      	str	r2, [r3, #24]
      break;
 8004d14:	e08c      	b.n	8004e30 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	0011      	movs	r1, r2
 8004d1e:	0018      	movs	r0, r3
 8004d20:	f000 fb28 	bl	8005374 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	69da      	ldr	r2, [r3, #28]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2108      	movs	r1, #8
 8004d30:	430a      	orrs	r2, r1
 8004d32:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	69da      	ldr	r2, [r3, #28]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2104      	movs	r1, #4
 8004d40:	438a      	bics	r2, r1
 8004d42:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	69d9      	ldr	r1, [r3, #28]
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	691a      	ldr	r2, [r3, #16]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	430a      	orrs	r2, r1
 8004d54:	61da      	str	r2, [r3, #28]
      break;
 8004d56:	e06b      	b.n	8004e30 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	0011      	movs	r1, r2
 8004d60:	0018      	movs	r0, r3
 8004d62:	f000 fb8f 	bl	8005484 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	69da      	ldr	r2, [r3, #28]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2180      	movs	r1, #128	; 0x80
 8004d72:	0109      	lsls	r1, r1, #4
 8004d74:	430a      	orrs	r2, r1
 8004d76:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	69da      	ldr	r2, [r3, #28]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4932      	ldr	r1, [pc, #200]	; (8004e4c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004d84:	400a      	ands	r2, r1
 8004d86:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	69d9      	ldr	r1, [r3, #28]
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	021a      	lsls	r2, r3, #8
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	61da      	str	r2, [r3, #28]
      break;
 8004d9c:	e048      	b.n	8004e30 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	0011      	movs	r1, r2
 8004da6:	0018      	movs	r0, r3
 8004da8:	f000 fbd6 	bl	8005558 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2108      	movs	r1, #8
 8004db8:	430a      	orrs	r2, r1
 8004dba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2104      	movs	r1, #4
 8004dc8:	438a      	bics	r2, r1
 8004dca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	691a      	ldr	r2, [r3, #16]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004dde:	e027      	b.n	8004e30 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	0011      	movs	r1, r2
 8004de8:	0018      	movs	r0, r3
 8004dea:	f000 fc15 	bl	8005618 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2180      	movs	r1, #128	; 0x80
 8004dfa:	0109      	lsls	r1, r1, #4
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4910      	ldr	r1, [pc, #64]	; (8004e4c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004e0c:	400a      	ands	r2, r1
 8004e0e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	021a      	lsls	r2, r3, #8
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	430a      	orrs	r2, r1
 8004e22:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004e24:	e004      	b.n	8004e30 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004e26:	2317      	movs	r3, #23
 8004e28:	18fb      	adds	r3, r7, r3
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	701a      	strb	r2, [r3, #0]
      break;
 8004e2e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	223c      	movs	r2, #60	; 0x3c
 8004e34:	2100      	movs	r1, #0
 8004e36:	5499      	strb	r1, [r3, r2]

  return status;
 8004e38:	2317      	movs	r3, #23
 8004e3a:	18fb      	adds	r3, r7, r3
 8004e3c:	781b      	ldrb	r3, [r3, #0]
}
 8004e3e:	0018      	movs	r0, r3
 8004e40:	46bd      	mov	sp, r7
 8004e42:	b006      	add	sp, #24
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	46c0      	nop			; (mov r8, r8)
 8004e48:	08008c5c 	.word	0x08008c5c
 8004e4c:	fffffbff 	.word	0xfffffbff

08004e50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e5a:	230f      	movs	r3, #15
 8004e5c:	18fb      	adds	r3, r7, r3
 8004e5e:	2200      	movs	r2, #0
 8004e60:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	223c      	movs	r2, #60	; 0x3c
 8004e66:	5c9b      	ldrb	r3, [r3, r2]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d101      	bne.n	8004e70 <HAL_TIM_ConfigClockSource+0x20>
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	e0bc      	b.n	8004fea <HAL_TIM_ConfigClockSource+0x19a>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	223c      	movs	r2, #60	; 0x3c
 8004e74:	2101      	movs	r1, #1
 8004e76:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	223d      	movs	r2, #61	; 0x3d
 8004e7c:	2102      	movs	r1, #2
 8004e7e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	4a5a      	ldr	r2, [pc, #360]	; (8004ff4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	4a59      	ldr	r2, [pc, #356]	; (8004ff8 <HAL_TIM_ConfigClockSource+0x1a8>)
 8004e94:	4013      	ands	r3, r2
 8004e96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2280      	movs	r2, #128	; 0x80
 8004ea6:	0192      	lsls	r2, r2, #6
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d040      	beq.n	8004f2e <HAL_TIM_ConfigClockSource+0xde>
 8004eac:	2280      	movs	r2, #128	; 0x80
 8004eae:	0192      	lsls	r2, r2, #6
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d900      	bls.n	8004eb6 <HAL_TIM_ConfigClockSource+0x66>
 8004eb4:	e088      	b.n	8004fc8 <HAL_TIM_ConfigClockSource+0x178>
 8004eb6:	2280      	movs	r2, #128	; 0x80
 8004eb8:	0152      	lsls	r2, r2, #5
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d100      	bne.n	8004ec0 <HAL_TIM_ConfigClockSource+0x70>
 8004ebe:	e088      	b.n	8004fd2 <HAL_TIM_ConfigClockSource+0x182>
 8004ec0:	2280      	movs	r2, #128	; 0x80
 8004ec2:	0152      	lsls	r2, r2, #5
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d900      	bls.n	8004eca <HAL_TIM_ConfigClockSource+0x7a>
 8004ec8:	e07e      	b.n	8004fc8 <HAL_TIM_ConfigClockSource+0x178>
 8004eca:	2b70      	cmp	r3, #112	; 0x70
 8004ecc:	d018      	beq.n	8004f00 <HAL_TIM_ConfigClockSource+0xb0>
 8004ece:	d900      	bls.n	8004ed2 <HAL_TIM_ConfigClockSource+0x82>
 8004ed0:	e07a      	b.n	8004fc8 <HAL_TIM_ConfigClockSource+0x178>
 8004ed2:	2b60      	cmp	r3, #96	; 0x60
 8004ed4:	d04f      	beq.n	8004f76 <HAL_TIM_ConfigClockSource+0x126>
 8004ed6:	d900      	bls.n	8004eda <HAL_TIM_ConfigClockSource+0x8a>
 8004ed8:	e076      	b.n	8004fc8 <HAL_TIM_ConfigClockSource+0x178>
 8004eda:	2b50      	cmp	r3, #80	; 0x50
 8004edc:	d03b      	beq.n	8004f56 <HAL_TIM_ConfigClockSource+0x106>
 8004ede:	d900      	bls.n	8004ee2 <HAL_TIM_ConfigClockSource+0x92>
 8004ee0:	e072      	b.n	8004fc8 <HAL_TIM_ConfigClockSource+0x178>
 8004ee2:	2b40      	cmp	r3, #64	; 0x40
 8004ee4:	d057      	beq.n	8004f96 <HAL_TIM_ConfigClockSource+0x146>
 8004ee6:	d900      	bls.n	8004eea <HAL_TIM_ConfigClockSource+0x9a>
 8004ee8:	e06e      	b.n	8004fc8 <HAL_TIM_ConfigClockSource+0x178>
 8004eea:	2b30      	cmp	r3, #48	; 0x30
 8004eec:	d063      	beq.n	8004fb6 <HAL_TIM_ConfigClockSource+0x166>
 8004eee:	d86b      	bhi.n	8004fc8 <HAL_TIM_ConfigClockSource+0x178>
 8004ef0:	2b20      	cmp	r3, #32
 8004ef2:	d060      	beq.n	8004fb6 <HAL_TIM_ConfigClockSource+0x166>
 8004ef4:	d868      	bhi.n	8004fc8 <HAL_TIM_ConfigClockSource+0x178>
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d05d      	beq.n	8004fb6 <HAL_TIM_ConfigClockSource+0x166>
 8004efa:	2b10      	cmp	r3, #16
 8004efc:	d05b      	beq.n	8004fb6 <HAL_TIM_ConfigClockSource+0x166>
 8004efe:	e063      	b.n	8004fc8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f10:	f000 fc62 	bl	80057d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2277      	movs	r2, #119	; 0x77
 8004f20:	4313      	orrs	r3, r2
 8004f22:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	609a      	str	r2, [r3, #8]
      break;
 8004f2c:	e052      	b.n	8004fd4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f3e:	f000 fc4b 	bl	80057d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	689a      	ldr	r2, [r3, #8]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2180      	movs	r1, #128	; 0x80
 8004f4e:	01c9      	lsls	r1, r1, #7
 8004f50:	430a      	orrs	r2, r1
 8004f52:	609a      	str	r2, [r3, #8]
      break;
 8004f54:	e03e      	b.n	8004fd4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f62:	001a      	movs	r2, r3
 8004f64:	f000 fbbc 	bl	80056e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2150      	movs	r1, #80	; 0x50
 8004f6e:	0018      	movs	r0, r3
 8004f70:	f000 fc16 	bl	80057a0 <TIM_ITRx_SetConfig>
      break;
 8004f74:	e02e      	b.n	8004fd4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f82:	001a      	movs	r2, r3
 8004f84:	f000 fbda 	bl	800573c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2160      	movs	r1, #96	; 0x60
 8004f8e:	0018      	movs	r0, r3
 8004f90:	f000 fc06 	bl	80057a0 <TIM_ITRx_SetConfig>
      break;
 8004f94:	e01e      	b.n	8004fd4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fa2:	001a      	movs	r2, r3
 8004fa4:	f000 fb9c 	bl	80056e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2140      	movs	r1, #64	; 0x40
 8004fae:	0018      	movs	r0, r3
 8004fb0:	f000 fbf6 	bl	80057a0 <TIM_ITRx_SetConfig>
      break;
 8004fb4:	e00e      	b.n	8004fd4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	0019      	movs	r1, r3
 8004fc0:	0010      	movs	r0, r2
 8004fc2:	f000 fbed 	bl	80057a0 <TIM_ITRx_SetConfig>
      break;
 8004fc6:	e005      	b.n	8004fd4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004fc8:	230f      	movs	r3, #15
 8004fca:	18fb      	adds	r3, r7, r3
 8004fcc:	2201      	movs	r2, #1
 8004fce:	701a      	strb	r2, [r3, #0]
      break;
 8004fd0:	e000      	b.n	8004fd4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004fd2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	223d      	movs	r2, #61	; 0x3d
 8004fd8:	2101      	movs	r1, #1
 8004fda:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	223c      	movs	r2, #60	; 0x3c
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	5499      	strb	r1, [r3, r2]

  return status;
 8004fe4:	230f      	movs	r3, #15
 8004fe6:	18fb      	adds	r3, r7, r3
 8004fe8:	781b      	ldrb	r3, [r3, #0]
}
 8004fea:	0018      	movs	r0, r3
 8004fec:	46bd      	mov	sp, r7
 8004fee:	b004      	add	sp, #16
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	46c0      	nop			; (mov r8, r8)
 8004ff4:	ffceff88 	.word	0xffceff88
 8004ff8:	ffff00ff 	.word	0xffff00ff

08004ffc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005004:	46c0      	nop			; (mov r8, r8)
 8005006:	46bd      	mov	sp, r7
 8005008:	b002      	add	sp, #8
 800500a:	bd80      	pop	{r7, pc}

0800500c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005014:	46c0      	nop			; (mov r8, r8)
 8005016:	46bd      	mov	sp, r7
 8005018:	b002      	add	sp, #8
 800501a:	bd80      	pop	{r7, pc}

0800501c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005024:	46c0      	nop			; (mov r8, r8)
 8005026:	46bd      	mov	sp, r7
 8005028:	b002      	add	sp, #8
 800502a:	bd80      	pop	{r7, pc}

0800502c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005034:	46c0      	nop			; (mov r8, r8)
 8005036:	46bd      	mov	sp, r7
 8005038:	b002      	add	sp, #8
 800503a:	bd80      	pop	{r7, pc}

0800503c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a3b      	ldr	r2, [pc, #236]	; (800513c <TIM_Base_SetConfig+0x100>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d008      	beq.n	8005066 <TIM_Base_SetConfig+0x2a>
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	2380      	movs	r3, #128	; 0x80
 8005058:	05db      	lsls	r3, r3, #23
 800505a:	429a      	cmp	r2, r3
 800505c:	d003      	beq.n	8005066 <TIM_Base_SetConfig+0x2a>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a37      	ldr	r2, [pc, #220]	; (8005140 <TIM_Base_SetConfig+0x104>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d108      	bne.n	8005078 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2270      	movs	r2, #112	; 0x70
 800506a:	4393      	bics	r3, r2
 800506c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	4313      	orrs	r3, r2
 8005076:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a30      	ldr	r2, [pc, #192]	; (800513c <TIM_Base_SetConfig+0x100>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d018      	beq.n	80050b2 <TIM_Base_SetConfig+0x76>
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	2380      	movs	r3, #128	; 0x80
 8005084:	05db      	lsls	r3, r3, #23
 8005086:	429a      	cmp	r2, r3
 8005088:	d013      	beq.n	80050b2 <TIM_Base_SetConfig+0x76>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a2c      	ldr	r2, [pc, #176]	; (8005140 <TIM_Base_SetConfig+0x104>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d00f      	beq.n	80050b2 <TIM_Base_SetConfig+0x76>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a2b      	ldr	r2, [pc, #172]	; (8005144 <TIM_Base_SetConfig+0x108>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d00b      	beq.n	80050b2 <TIM_Base_SetConfig+0x76>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a2a      	ldr	r2, [pc, #168]	; (8005148 <TIM_Base_SetConfig+0x10c>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d007      	beq.n	80050b2 <TIM_Base_SetConfig+0x76>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a29      	ldr	r2, [pc, #164]	; (800514c <TIM_Base_SetConfig+0x110>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d003      	beq.n	80050b2 <TIM_Base_SetConfig+0x76>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a28      	ldr	r2, [pc, #160]	; (8005150 <TIM_Base_SetConfig+0x114>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d108      	bne.n	80050c4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	4a27      	ldr	r2, [pc, #156]	; (8005154 <TIM_Base_SetConfig+0x118>)
 80050b6:	4013      	ands	r3, r2
 80050b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2280      	movs	r2, #128	; 0x80
 80050c8:	4393      	bics	r3, r2
 80050ca:	001a      	movs	r2, r3
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	689a      	ldr	r2, [r3, #8]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a13      	ldr	r2, [pc, #76]	; (800513c <TIM_Base_SetConfig+0x100>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d00b      	beq.n	800510a <TIM_Base_SetConfig+0xce>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a14      	ldr	r2, [pc, #80]	; (8005148 <TIM_Base_SetConfig+0x10c>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d007      	beq.n	800510a <TIM_Base_SetConfig+0xce>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a13      	ldr	r2, [pc, #76]	; (800514c <TIM_Base_SetConfig+0x110>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d003      	beq.n	800510a <TIM_Base_SetConfig+0xce>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a12      	ldr	r2, [pc, #72]	; (8005150 <TIM_Base_SetConfig+0x114>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d103      	bne.n	8005112 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	691a      	ldr	r2, [r3, #16]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	2201      	movs	r2, #1
 800511e:	4013      	ands	r3, r2
 8005120:	2b01      	cmp	r3, #1
 8005122:	d106      	bne.n	8005132 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	2201      	movs	r2, #1
 800512a:	4393      	bics	r3, r2
 800512c:	001a      	movs	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	611a      	str	r2, [r3, #16]
  }
}
 8005132:	46c0      	nop			; (mov r8, r8)
 8005134:	46bd      	mov	sp, r7
 8005136:	b004      	add	sp, #16
 8005138:	bd80      	pop	{r7, pc}
 800513a:	46c0      	nop			; (mov r8, r8)
 800513c:	40012c00 	.word	0x40012c00
 8005140:	40000400 	.word	0x40000400
 8005144:	40002000 	.word	0x40002000
 8005148:	40014000 	.word	0x40014000
 800514c:	40014400 	.word	0x40014400
 8005150:	40014800 	.word	0x40014800
 8005154:	fffffcff 	.word	0xfffffcff

08005158 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b086      	sub	sp, #24
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a1b      	ldr	r3, [r3, #32]
 800516c:	2201      	movs	r2, #1
 800516e:	4393      	bics	r3, r2
 8005170:	001a      	movs	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	4a32      	ldr	r2, [pc, #200]	; (8005250 <TIM_OC1_SetConfig+0xf8>)
 8005186:	4013      	ands	r3, r2
 8005188:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2203      	movs	r2, #3
 800518e:	4393      	bics	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	4313      	orrs	r3, r2
 800519a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	2202      	movs	r2, #2
 80051a0:	4393      	bics	r3, r2
 80051a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a28      	ldr	r2, [pc, #160]	; (8005254 <TIM_OC1_SetConfig+0xfc>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d00b      	beq.n	80051ce <TIM_OC1_SetConfig+0x76>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a27      	ldr	r2, [pc, #156]	; (8005258 <TIM_OC1_SetConfig+0x100>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d007      	beq.n	80051ce <TIM_OC1_SetConfig+0x76>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a26      	ldr	r2, [pc, #152]	; (800525c <TIM_OC1_SetConfig+0x104>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d003      	beq.n	80051ce <TIM_OC1_SetConfig+0x76>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a25      	ldr	r2, [pc, #148]	; (8005260 <TIM_OC1_SetConfig+0x108>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d10c      	bne.n	80051e8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	2208      	movs	r2, #8
 80051d2:	4393      	bics	r3, r2
 80051d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	4313      	orrs	r3, r2
 80051de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	2204      	movs	r2, #4
 80051e4:	4393      	bics	r3, r2
 80051e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a1a      	ldr	r2, [pc, #104]	; (8005254 <TIM_OC1_SetConfig+0xfc>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d00b      	beq.n	8005208 <TIM_OC1_SetConfig+0xb0>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a19      	ldr	r2, [pc, #100]	; (8005258 <TIM_OC1_SetConfig+0x100>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d007      	beq.n	8005208 <TIM_OC1_SetConfig+0xb0>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a18      	ldr	r2, [pc, #96]	; (800525c <TIM_OC1_SetConfig+0x104>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d003      	beq.n	8005208 <TIM_OC1_SetConfig+0xb0>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a17      	ldr	r2, [pc, #92]	; (8005260 <TIM_OC1_SetConfig+0x108>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d111      	bne.n	800522c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	4a16      	ldr	r2, [pc, #88]	; (8005264 <TIM_OC1_SetConfig+0x10c>)
 800520c:	4013      	ands	r3, r2
 800520e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	4a15      	ldr	r2, [pc, #84]	; (8005268 <TIM_OC1_SetConfig+0x110>)
 8005214:	4013      	ands	r3, r2
 8005216:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	695b      	ldr	r3, [r3, #20]
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	4313      	orrs	r3, r2
 8005220:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	4313      	orrs	r3, r2
 800522a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685a      	ldr	r2, [r3, #4]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	621a      	str	r2, [r3, #32]
}
 8005246:	46c0      	nop			; (mov r8, r8)
 8005248:	46bd      	mov	sp, r7
 800524a:	b006      	add	sp, #24
 800524c:	bd80      	pop	{r7, pc}
 800524e:	46c0      	nop			; (mov r8, r8)
 8005250:	fffeff8f 	.word	0xfffeff8f
 8005254:	40012c00 	.word	0x40012c00
 8005258:	40014000 	.word	0x40014000
 800525c:	40014400 	.word	0x40014400
 8005260:	40014800 	.word	0x40014800
 8005264:	fffffeff 	.word	0xfffffeff
 8005268:	fffffdff 	.word	0xfffffdff

0800526c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	2210      	movs	r2, #16
 8005282:	4393      	bics	r3, r2
 8005284:	001a      	movs	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	4a2e      	ldr	r2, [pc, #184]	; (8005354 <TIM_OC2_SetConfig+0xe8>)
 800529a:	4013      	ands	r3, r2
 800529c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	4a2d      	ldr	r2, [pc, #180]	; (8005358 <TIM_OC2_SetConfig+0xec>)
 80052a2:	4013      	ands	r3, r2
 80052a4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	021b      	lsls	r3, r3, #8
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2220      	movs	r2, #32
 80052b6:	4393      	bics	r3, r2
 80052b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	011b      	lsls	r3, r3, #4
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a24      	ldr	r2, [pc, #144]	; (800535c <TIM_OC2_SetConfig+0xf0>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d10d      	bne.n	80052ea <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	2280      	movs	r2, #128	; 0x80
 80052d2:	4393      	bics	r3, r2
 80052d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	011b      	lsls	r3, r3, #4
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	4313      	orrs	r3, r2
 80052e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	2240      	movs	r2, #64	; 0x40
 80052e6:	4393      	bics	r3, r2
 80052e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a1b      	ldr	r2, [pc, #108]	; (800535c <TIM_OC2_SetConfig+0xf0>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d00b      	beq.n	800530a <TIM_OC2_SetConfig+0x9e>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a1a      	ldr	r2, [pc, #104]	; (8005360 <TIM_OC2_SetConfig+0xf4>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d007      	beq.n	800530a <TIM_OC2_SetConfig+0x9e>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a19      	ldr	r2, [pc, #100]	; (8005364 <TIM_OC2_SetConfig+0xf8>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d003      	beq.n	800530a <TIM_OC2_SetConfig+0x9e>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a18      	ldr	r2, [pc, #96]	; (8005368 <TIM_OC2_SetConfig+0xfc>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d113      	bne.n	8005332 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	4a17      	ldr	r2, [pc, #92]	; (800536c <TIM_OC2_SetConfig+0x100>)
 800530e:	4013      	ands	r3, r2
 8005310:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	4a16      	ldr	r2, [pc, #88]	; (8005370 <TIM_OC2_SetConfig+0x104>)
 8005316:	4013      	ands	r3, r2
 8005318:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	4313      	orrs	r3, r2
 8005324:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	4313      	orrs	r3, r2
 8005330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	621a      	str	r2, [r3, #32]
}
 800534c:	46c0      	nop			; (mov r8, r8)
 800534e:	46bd      	mov	sp, r7
 8005350:	b006      	add	sp, #24
 8005352:	bd80      	pop	{r7, pc}
 8005354:	feff8fff 	.word	0xfeff8fff
 8005358:	fffffcff 	.word	0xfffffcff
 800535c:	40012c00 	.word	0x40012c00
 8005360:	40014000 	.word	0x40014000
 8005364:	40014400 	.word	0x40014400
 8005368:	40014800 	.word	0x40014800
 800536c:	fffffbff 	.word	0xfffffbff
 8005370:	fffff7ff 	.word	0xfffff7ff

08005374 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a1b      	ldr	r3, [r3, #32]
 8005388:	4a33      	ldr	r2, [pc, #204]	; (8005458 <TIM_OC3_SetConfig+0xe4>)
 800538a:	401a      	ands	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	4a2f      	ldr	r2, [pc, #188]	; (800545c <TIM_OC3_SetConfig+0xe8>)
 80053a0:	4013      	ands	r3, r2
 80053a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2203      	movs	r2, #3
 80053a8:	4393      	bics	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	4a29      	ldr	r2, [pc, #164]	; (8005460 <TIM_OC3_SetConfig+0xec>)
 80053ba:	4013      	ands	r3, r2
 80053bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	021b      	lsls	r3, r3, #8
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a25      	ldr	r2, [pc, #148]	; (8005464 <TIM_OC3_SetConfig+0xf0>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d10d      	bne.n	80053ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	4a24      	ldr	r2, [pc, #144]	; (8005468 <TIM_OC3_SetConfig+0xf4>)
 80053d6:	4013      	ands	r3, r2
 80053d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	021b      	lsls	r3, r3, #8
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	4a20      	ldr	r2, [pc, #128]	; (800546c <TIM_OC3_SetConfig+0xf8>)
 80053ea:	4013      	ands	r3, r2
 80053ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a1c      	ldr	r2, [pc, #112]	; (8005464 <TIM_OC3_SetConfig+0xf0>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d00b      	beq.n	800540e <TIM_OC3_SetConfig+0x9a>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a1d      	ldr	r2, [pc, #116]	; (8005470 <TIM_OC3_SetConfig+0xfc>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d007      	beq.n	800540e <TIM_OC3_SetConfig+0x9a>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a1c      	ldr	r2, [pc, #112]	; (8005474 <TIM_OC3_SetConfig+0x100>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d003      	beq.n	800540e <TIM_OC3_SetConfig+0x9a>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a1b      	ldr	r2, [pc, #108]	; (8005478 <TIM_OC3_SetConfig+0x104>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d113      	bne.n	8005436 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	4a1a      	ldr	r2, [pc, #104]	; (800547c <TIM_OC3_SetConfig+0x108>)
 8005412:	4013      	ands	r3, r2
 8005414:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	4a19      	ldr	r2, [pc, #100]	; (8005480 <TIM_OC3_SetConfig+0x10c>)
 800541a:	4013      	ands	r3, r2
 800541c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	011b      	lsls	r3, r3, #4
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	4313      	orrs	r3, r2
 8005428:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	011b      	lsls	r3, r3, #4
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	4313      	orrs	r3, r2
 8005434:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	621a      	str	r2, [r3, #32]
}
 8005450:	46c0      	nop			; (mov r8, r8)
 8005452:	46bd      	mov	sp, r7
 8005454:	b006      	add	sp, #24
 8005456:	bd80      	pop	{r7, pc}
 8005458:	fffffeff 	.word	0xfffffeff
 800545c:	fffeff8f 	.word	0xfffeff8f
 8005460:	fffffdff 	.word	0xfffffdff
 8005464:	40012c00 	.word	0x40012c00
 8005468:	fffff7ff 	.word	0xfffff7ff
 800546c:	fffffbff 	.word	0xfffffbff
 8005470:	40014000 	.word	0x40014000
 8005474:	40014400 	.word	0x40014400
 8005478:	40014800 	.word	0x40014800
 800547c:	ffffefff 	.word	0xffffefff
 8005480:	ffffdfff 	.word	0xffffdfff

08005484 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a1b      	ldr	r3, [r3, #32]
 8005498:	4a26      	ldr	r2, [pc, #152]	; (8005534 <TIM_OC4_SetConfig+0xb0>)
 800549a:	401a      	ands	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	69db      	ldr	r3, [r3, #28]
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	4a22      	ldr	r2, [pc, #136]	; (8005538 <TIM_OC4_SetConfig+0xb4>)
 80054b0:	4013      	ands	r3, r2
 80054b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	4a21      	ldr	r2, [pc, #132]	; (800553c <TIM_OC4_SetConfig+0xb8>)
 80054b8:	4013      	ands	r3, r2
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	021b      	lsls	r3, r3, #8
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	4a1d      	ldr	r2, [pc, #116]	; (8005540 <TIM_OC4_SetConfig+0xbc>)
 80054cc:	4013      	ands	r3, r2
 80054ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	031b      	lsls	r3, r3, #12
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	4313      	orrs	r3, r2
 80054da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a19      	ldr	r2, [pc, #100]	; (8005544 <TIM_OC4_SetConfig+0xc0>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d00b      	beq.n	80054fc <TIM_OC4_SetConfig+0x78>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a18      	ldr	r2, [pc, #96]	; (8005548 <TIM_OC4_SetConfig+0xc4>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d007      	beq.n	80054fc <TIM_OC4_SetConfig+0x78>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a17      	ldr	r2, [pc, #92]	; (800554c <TIM_OC4_SetConfig+0xc8>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d003      	beq.n	80054fc <TIM_OC4_SetConfig+0x78>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a16      	ldr	r2, [pc, #88]	; (8005550 <TIM_OC4_SetConfig+0xcc>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d109      	bne.n	8005510 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	4a15      	ldr	r2, [pc, #84]	; (8005554 <TIM_OC4_SetConfig+0xd0>)
 8005500:	4013      	ands	r3, r2
 8005502:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	019b      	lsls	r3, r3, #6
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	4313      	orrs	r3, r2
 800550e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	621a      	str	r2, [r3, #32]
}
 800552a:	46c0      	nop			; (mov r8, r8)
 800552c:	46bd      	mov	sp, r7
 800552e:	b006      	add	sp, #24
 8005530:	bd80      	pop	{r7, pc}
 8005532:	46c0      	nop			; (mov r8, r8)
 8005534:	ffffefff 	.word	0xffffefff
 8005538:	feff8fff 	.word	0xfeff8fff
 800553c:	fffffcff 	.word	0xfffffcff
 8005540:	ffffdfff 	.word	0xffffdfff
 8005544:	40012c00 	.word	0x40012c00
 8005548:	40014000 	.word	0x40014000
 800554c:	40014400 	.word	0x40014400
 8005550:	40014800 	.word	0x40014800
 8005554:	ffffbfff 	.word	0xffffbfff

08005558 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	4a23      	ldr	r2, [pc, #140]	; (80055fc <TIM_OC5_SetConfig+0xa4>)
 800556e:	401a      	ands	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800557e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4a1f      	ldr	r2, [pc, #124]	; (8005600 <TIM_OC5_SetConfig+0xa8>)
 8005584:	4013      	ands	r3, r2
 8005586:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	4313      	orrs	r3, r2
 8005590:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	4a1b      	ldr	r2, [pc, #108]	; (8005604 <TIM_OC5_SetConfig+0xac>)
 8005596:	4013      	ands	r3, r2
 8005598:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	041b      	lsls	r3, r3, #16
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a17      	ldr	r2, [pc, #92]	; (8005608 <TIM_OC5_SetConfig+0xb0>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00b      	beq.n	80055c6 <TIM_OC5_SetConfig+0x6e>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a16      	ldr	r2, [pc, #88]	; (800560c <TIM_OC5_SetConfig+0xb4>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d007      	beq.n	80055c6 <TIM_OC5_SetConfig+0x6e>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a15      	ldr	r2, [pc, #84]	; (8005610 <TIM_OC5_SetConfig+0xb8>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d003      	beq.n	80055c6 <TIM_OC5_SetConfig+0x6e>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a14      	ldr	r2, [pc, #80]	; (8005614 <TIM_OC5_SetConfig+0xbc>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d109      	bne.n	80055da <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	4a0c      	ldr	r2, [pc, #48]	; (80055fc <TIM_OC5_SetConfig+0xa4>)
 80055ca:	4013      	ands	r3, r2
 80055cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	021b      	lsls	r3, r3, #8
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	685a      	ldr	r2, [r3, #4]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	621a      	str	r2, [r3, #32]
}
 80055f4:	46c0      	nop			; (mov r8, r8)
 80055f6:	46bd      	mov	sp, r7
 80055f8:	b006      	add	sp, #24
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	fffeffff 	.word	0xfffeffff
 8005600:	fffeff8f 	.word	0xfffeff8f
 8005604:	fffdffff 	.word	0xfffdffff
 8005608:	40012c00 	.word	0x40012c00
 800560c:	40014000 	.word	0x40014000
 8005610:	40014400 	.word	0x40014400
 8005614:	40014800 	.word	0x40014800

08005618 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a1b      	ldr	r3, [r3, #32]
 800562c:	4a24      	ldr	r2, [pc, #144]	; (80056c0 <TIM_OC6_SetConfig+0xa8>)
 800562e:	401a      	ands	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800563e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4a20      	ldr	r2, [pc, #128]	; (80056c4 <TIM_OC6_SetConfig+0xac>)
 8005644:	4013      	ands	r3, r2
 8005646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	021b      	lsls	r3, r3, #8
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	4313      	orrs	r3, r2
 8005652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	4a1c      	ldr	r2, [pc, #112]	; (80056c8 <TIM_OC6_SetConfig+0xb0>)
 8005658:	4013      	ands	r3, r2
 800565a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	051b      	lsls	r3, r3, #20
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	4313      	orrs	r3, r2
 8005666:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a18      	ldr	r2, [pc, #96]	; (80056cc <TIM_OC6_SetConfig+0xb4>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d00b      	beq.n	8005688 <TIM_OC6_SetConfig+0x70>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a17      	ldr	r2, [pc, #92]	; (80056d0 <TIM_OC6_SetConfig+0xb8>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d007      	beq.n	8005688 <TIM_OC6_SetConfig+0x70>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a16      	ldr	r2, [pc, #88]	; (80056d4 <TIM_OC6_SetConfig+0xbc>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d003      	beq.n	8005688 <TIM_OC6_SetConfig+0x70>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a15      	ldr	r2, [pc, #84]	; (80056d8 <TIM_OC6_SetConfig+0xc0>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d109      	bne.n	800569c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	4a14      	ldr	r2, [pc, #80]	; (80056dc <TIM_OC6_SetConfig+0xc4>)
 800568c:	4013      	ands	r3, r2
 800568e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	029b      	lsls	r3, r3, #10
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	4313      	orrs	r3, r2
 800569a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	621a      	str	r2, [r3, #32]
}
 80056b6:	46c0      	nop			; (mov r8, r8)
 80056b8:	46bd      	mov	sp, r7
 80056ba:	b006      	add	sp, #24
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	46c0      	nop			; (mov r8, r8)
 80056c0:	ffefffff 	.word	0xffefffff
 80056c4:	feff8fff 	.word	0xfeff8fff
 80056c8:	ffdfffff 	.word	0xffdfffff
 80056cc:	40012c00 	.word	0x40012c00
 80056d0:	40014000 	.word	0x40014000
 80056d4:	40014400 	.word	0x40014400
 80056d8:	40014800 	.word	0x40014800
 80056dc:	fffbffff 	.word	0xfffbffff

080056e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	2201      	movs	r2, #1
 80056f8:	4393      	bics	r3, r2
 80056fa:	001a      	movs	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	22f0      	movs	r2, #240	; 0xf0
 800570a:	4393      	bics	r3, r2
 800570c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	011b      	lsls	r3, r3, #4
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	4313      	orrs	r3, r2
 8005716:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	220a      	movs	r2, #10
 800571c:	4393      	bics	r3, r2
 800571e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	4313      	orrs	r3, r2
 8005726:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	621a      	str	r2, [r3, #32]
}
 8005734:	46c0      	nop			; (mov r8, r8)
 8005736:	46bd      	mov	sp, r7
 8005738:	b006      	add	sp, #24
 800573a:	bd80      	pop	{r7, pc}

0800573c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6a1b      	ldr	r3, [r3, #32]
 800574c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	2210      	movs	r2, #16
 8005754:	4393      	bics	r3, r2
 8005756:	001a      	movs	r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	4a0d      	ldr	r2, [pc, #52]	; (800579c <TIM_TI2_ConfigInputStage+0x60>)
 8005766:	4013      	ands	r3, r2
 8005768:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	031b      	lsls	r3, r3, #12
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	4313      	orrs	r3, r2
 8005772:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	22a0      	movs	r2, #160	; 0xa0
 8005778:	4393      	bics	r3, r2
 800577a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	011b      	lsls	r3, r3, #4
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	4313      	orrs	r3, r2
 8005784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	621a      	str	r2, [r3, #32]
}
 8005792:	46c0      	nop			; (mov r8, r8)
 8005794:	46bd      	mov	sp, r7
 8005796:	b006      	add	sp, #24
 8005798:	bd80      	pop	{r7, pc}
 800579a:	46c0      	nop			; (mov r8, r8)
 800579c:	ffff0fff 	.word	0xffff0fff

080057a0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	4a08      	ldr	r2, [pc, #32]	; (80057d4 <TIM_ITRx_SetConfig+0x34>)
 80057b4:	4013      	ands	r3, r2
 80057b6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	4313      	orrs	r3, r2
 80057be:	2207      	movs	r2, #7
 80057c0:	4313      	orrs	r3, r2
 80057c2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	609a      	str	r2, [r3, #8]
}
 80057ca:	46c0      	nop			; (mov r8, r8)
 80057cc:	46bd      	mov	sp, r7
 80057ce:	b004      	add	sp, #16
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	46c0      	nop			; (mov r8, r8)
 80057d4:	ffcfff8f 	.word	0xffcfff8f

080057d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b086      	sub	sp, #24
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
 80057e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	4a09      	ldr	r2, [pc, #36]	; (8005814 <TIM_ETR_SetConfig+0x3c>)
 80057f0:	4013      	ands	r3, r2
 80057f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	021a      	lsls	r2, r3, #8
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	431a      	orrs	r2, r3
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	4313      	orrs	r3, r2
 8005800:	697a      	ldr	r2, [r7, #20]
 8005802:	4313      	orrs	r3, r2
 8005804:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	609a      	str	r2, [r3, #8]
}
 800580c:	46c0      	nop			; (mov r8, r8)
 800580e:	46bd      	mov	sp, r7
 8005810:	b006      	add	sp, #24
 8005812:	bd80      	pop	{r7, pc}
 8005814:	ffff00ff 	.word	0xffff00ff

08005818 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b086      	sub	sp, #24
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	221f      	movs	r2, #31
 8005828:	4013      	ands	r3, r2
 800582a:	2201      	movs	r2, #1
 800582c:	409a      	lsls	r2, r3
 800582e:	0013      	movs	r3, r2
 8005830:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	43d2      	mvns	r2, r2
 800583a:	401a      	ands	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6a1a      	ldr	r2, [r3, #32]
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	211f      	movs	r1, #31
 8005848:	400b      	ands	r3, r1
 800584a:	6879      	ldr	r1, [r7, #4]
 800584c:	4099      	lsls	r1, r3
 800584e:	000b      	movs	r3, r1
 8005850:	431a      	orrs	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	621a      	str	r2, [r3, #32]
}
 8005856:	46c0      	nop			; (mov r8, r8)
 8005858:	46bd      	mov	sp, r7
 800585a:	b006      	add	sp, #24
 800585c:	bd80      	pop	{r7, pc}
	...

08005860 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	223c      	movs	r2, #60	; 0x3c
 800586e:	5c9b      	ldrb	r3, [r3, r2]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d101      	bne.n	8005878 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005874:	2302      	movs	r3, #2
 8005876:	e055      	b.n	8005924 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	223c      	movs	r2, #60	; 0x3c
 800587c:	2101      	movs	r1, #1
 800587e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	223d      	movs	r2, #61	; 0x3d
 8005884:	2102      	movs	r1, #2
 8005886:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a23      	ldr	r2, [pc, #140]	; (800592c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d108      	bne.n	80058b4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	4a22      	ldr	r2, [pc, #136]	; (8005930 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80058a6:	4013      	ands	r3, r2
 80058a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2270      	movs	r2, #112	; 0x70
 80058b8:	4393      	bics	r3, r2
 80058ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a16      	ldr	r2, [pc, #88]	; (800592c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d00f      	beq.n	80058f8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	2380      	movs	r3, #128	; 0x80
 80058de:	05db      	lsls	r3, r3, #23
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d009      	beq.n	80058f8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a12      	ldr	r2, [pc, #72]	; (8005934 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d004      	beq.n	80058f8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a11      	ldr	r2, [pc, #68]	; (8005938 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d10c      	bne.n	8005912 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	2280      	movs	r2, #128	; 0x80
 80058fc:	4393      	bics	r3, r2
 80058fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	4313      	orrs	r3, r2
 8005908:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	223d      	movs	r2, #61	; 0x3d
 8005916:	2101      	movs	r1, #1
 8005918:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	223c      	movs	r2, #60	; 0x3c
 800591e:	2100      	movs	r1, #0
 8005920:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	0018      	movs	r0, r3
 8005926:	46bd      	mov	sp, r7
 8005928:	b004      	add	sp, #16
 800592a:	bd80      	pop	{r7, pc}
 800592c:	40012c00 	.word	0x40012c00
 8005930:	ff0fffff 	.word	0xff0fffff
 8005934:	40000400 	.word	0x40000400
 8005938:	40014000 	.word	0x40014000

0800593c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005944:	46c0      	nop			; (mov r8, r8)
 8005946:	46bd      	mov	sp, r7
 8005948:	b002      	add	sp, #8
 800594a:	bd80      	pop	{r7, pc}

0800594c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005954:	46c0      	nop			; (mov r8, r8)
 8005956:	46bd      	mov	sp, r7
 8005958:	b002      	add	sp, #8
 800595a:	bd80      	pop	{r7, pc}

0800595c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005964:	46c0      	nop			; (mov r8, r8)
 8005966:	46bd      	mov	sp, r7
 8005968:	b002      	add	sp, #8
 800596a:	bd80      	pop	{r7, pc}

0800596c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d101      	bne.n	800597e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e046      	b.n	8005a0c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2288      	movs	r2, #136	; 0x88
 8005982:	589b      	ldr	r3, [r3, r2]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d107      	bne.n	8005998 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2284      	movs	r2, #132	; 0x84
 800598c:	2100      	movs	r1, #0
 800598e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	0018      	movs	r0, r3
 8005994:	f7fb ff4e 	bl	8001834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2288      	movs	r2, #136	; 0x88
 800599c:	2124      	movs	r1, #36	; 0x24
 800599e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2101      	movs	r1, #1
 80059ac:	438a      	bics	r2, r1
 80059ae:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d003      	beq.n	80059c0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	0018      	movs	r0, r3
 80059bc:	f000 ff2e 	bl	800681c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	0018      	movs	r0, r3
 80059c4:	f000 fc6c 	bl	80062a0 <UART_SetConfig>
 80059c8:	0003      	movs	r3, r0
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d101      	bne.n	80059d2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e01c      	b.n	8005a0c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	490d      	ldr	r1, [pc, #52]	; (8005a14 <HAL_UART_Init+0xa8>)
 80059de:	400a      	ands	r2, r1
 80059e0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	689a      	ldr	r2, [r3, #8]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	212a      	movs	r1, #42	; 0x2a
 80059ee:	438a      	bics	r2, r1
 80059f0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2101      	movs	r1, #1
 80059fe:	430a      	orrs	r2, r1
 8005a00:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	0018      	movs	r0, r3
 8005a06:	f000 ffbd 	bl	8006984 <UART_CheckIdleState>
 8005a0a:	0003      	movs	r3, r0
}
 8005a0c:	0018      	movs	r0, r3
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	b002      	add	sp, #8
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	ffffb7ff 	.word	0xffffb7ff

08005a18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b08a      	sub	sp, #40	; 0x28
 8005a1c:	af02      	add	r7, sp, #8
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	603b      	str	r3, [r7, #0]
 8005a24:	1dbb      	adds	r3, r7, #6
 8005a26:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2288      	movs	r2, #136	; 0x88
 8005a2c:	589b      	ldr	r3, [r3, r2]
 8005a2e:	2b20      	cmp	r3, #32
 8005a30:	d000      	beq.n	8005a34 <HAL_UART_Transmit+0x1c>
 8005a32:	e090      	b.n	8005b56 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <HAL_UART_Transmit+0x2a>
 8005a3a:	1dbb      	adds	r3, r7, #6
 8005a3c:	881b      	ldrh	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e088      	b.n	8005b58 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	689a      	ldr	r2, [r3, #8]
 8005a4a:	2380      	movs	r3, #128	; 0x80
 8005a4c:	015b      	lsls	r3, r3, #5
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d109      	bne.n	8005a66 <HAL_UART_Transmit+0x4e>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d105      	bne.n	8005a66 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	4013      	ands	r3, r2
 8005a60:	d001      	beq.n	8005a66 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e078      	b.n	8005b58 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2290      	movs	r2, #144	; 0x90
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2288      	movs	r2, #136	; 0x88
 8005a72:	2121      	movs	r1, #33	; 0x21
 8005a74:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a76:	f7fc f87b 	bl	8001b70 <HAL_GetTick>
 8005a7a:	0003      	movs	r3, r0
 8005a7c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	1dba      	adds	r2, r7, #6
 8005a82:	2154      	movs	r1, #84	; 0x54
 8005a84:	8812      	ldrh	r2, [r2, #0]
 8005a86:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	1dba      	adds	r2, r7, #6
 8005a8c:	2156      	movs	r1, #86	; 0x56
 8005a8e:	8812      	ldrh	r2, [r2, #0]
 8005a90:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	689a      	ldr	r2, [r3, #8]
 8005a96:	2380      	movs	r3, #128	; 0x80
 8005a98:	015b      	lsls	r3, r3, #5
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d108      	bne.n	8005ab0 <HAL_UART_Transmit+0x98>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d104      	bne.n	8005ab0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	61bb      	str	r3, [r7, #24]
 8005aae:	e003      	b.n	8005ab8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ab8:	e030      	b.n	8005b1c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	9300      	str	r3, [sp, #0]
 8005ac2:	0013      	movs	r3, r2
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	2180      	movs	r1, #128	; 0x80
 8005ac8:	f001 f806 	bl	8006ad8 <UART_WaitOnFlagUntilTimeout>
 8005acc:	1e03      	subs	r3, r0, #0
 8005ace:	d005      	beq.n	8005adc <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2288      	movs	r2, #136	; 0x88
 8005ad4:	2120      	movs	r1, #32
 8005ad6:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e03d      	b.n	8005b58 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10b      	bne.n	8005afa <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	881b      	ldrh	r3, [r3, #0]
 8005ae6:	001a      	movs	r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	05d2      	lsls	r2, r2, #23
 8005aee:	0dd2      	lsrs	r2, r2, #23
 8005af0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	3302      	adds	r3, #2
 8005af6:	61bb      	str	r3, [r7, #24]
 8005af8:	e007      	b.n	8005b0a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	781a      	ldrb	r2, [r3, #0]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	3301      	adds	r3, #1
 8005b08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2256      	movs	r2, #86	; 0x56
 8005b0e:	5a9b      	ldrh	r3, [r3, r2]
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	3b01      	subs	r3, #1
 8005b14:	b299      	uxth	r1, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2256      	movs	r2, #86	; 0x56
 8005b1a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2256      	movs	r2, #86	; 0x56
 8005b20:	5a9b      	ldrh	r3, [r3, r2]
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d1c8      	bne.n	8005aba <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	9300      	str	r3, [sp, #0]
 8005b30:	0013      	movs	r3, r2
 8005b32:	2200      	movs	r2, #0
 8005b34:	2140      	movs	r1, #64	; 0x40
 8005b36:	f000 ffcf 	bl	8006ad8 <UART_WaitOnFlagUntilTimeout>
 8005b3a:	1e03      	subs	r3, r0, #0
 8005b3c:	d005      	beq.n	8005b4a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2288      	movs	r2, #136	; 0x88
 8005b42:	2120      	movs	r1, #32
 8005b44:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e006      	b.n	8005b58 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2288      	movs	r2, #136	; 0x88
 8005b4e:	2120      	movs	r1, #32
 8005b50:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005b52:	2300      	movs	r3, #0
 8005b54:	e000      	b.n	8005b58 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8005b56:	2302      	movs	r3, #2
  }
}
 8005b58:	0018      	movs	r0, r3
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	b008      	add	sp, #32
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b088      	sub	sp, #32
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	1dbb      	adds	r3, r7, #6
 8005b6c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	228c      	movs	r2, #140	; 0x8c
 8005b72:	589b      	ldr	r3, [r3, r2]
 8005b74:	2b20      	cmp	r3, #32
 8005b76:	d14a      	bne.n	8005c0e <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d003      	beq.n	8005b86 <HAL_UART_Receive_IT+0x26>
 8005b7e:	1dbb      	adds	r3, r7, #6
 8005b80:	881b      	ldrh	r3, [r3, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e042      	b.n	8005c10 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	689a      	ldr	r2, [r3, #8]
 8005b8e:	2380      	movs	r3, #128	; 0x80
 8005b90:	015b      	lsls	r3, r3, #5
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d109      	bne.n	8005baa <HAL_UART_Receive_IT+0x4a>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d105      	bne.n	8005baa <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	d001      	beq.n	8005baa <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e032      	b.n	8005c10 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a18      	ldr	r2, [pc, #96]	; (8005c18 <HAL_UART_Receive_IT+0xb8>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d020      	beq.n	8005bfc <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	685a      	ldr	r2, [r3, #4]
 8005bc0:	2380      	movs	r3, #128	; 0x80
 8005bc2:	041b      	lsls	r3, r3, #16
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	d019      	beq.n	8005bfc <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bc8:	f3ef 8310 	mrs	r3, PRIMASK
 8005bcc:	613b      	str	r3, [r7, #16]
  return(result);
 8005bce:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005bd0:	61fb      	str	r3, [r7, #28]
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	f383 8810 	msr	PRIMASK, r3
}
 8005bdc:	46c0      	nop			; (mov r8, r8)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2180      	movs	r1, #128	; 0x80
 8005bea:	04c9      	lsls	r1, r1, #19
 8005bec:	430a      	orrs	r2, r1
 8005bee:	601a      	str	r2, [r3, #0]
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	f383 8810 	msr	PRIMASK, r3
}
 8005bfa:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005bfc:	1dbb      	adds	r3, r7, #6
 8005bfe:	881a      	ldrh	r2, [r3, #0]
 8005c00:	68b9      	ldr	r1, [r7, #8]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	0018      	movs	r0, r3
 8005c06:	f000 ffd7 	bl	8006bb8 <UART_Start_Receive_IT>
 8005c0a:	0003      	movs	r3, r0
 8005c0c:	e000      	b.n	8005c10 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8005c0e:	2302      	movs	r3, #2
  }
}
 8005c10:	0018      	movs	r0, r3
 8005c12:	46bd      	mov	sp, r7
 8005c14:	b008      	add	sp, #32
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	40008000 	.word	0x40008000

08005c1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c1c:	b5b0      	push	{r4, r5, r7, lr}
 8005c1e:	b0aa      	sub	sp, #168	; 0xa8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	69db      	ldr	r3, [r3, #28]
 8005c2a:	22a4      	movs	r2, #164	; 0xa4
 8005c2c:	18b9      	adds	r1, r7, r2
 8005c2e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	20a0      	movs	r0, #160	; 0xa0
 8005c38:	1839      	adds	r1, r7, r0
 8005c3a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	249c      	movs	r4, #156	; 0x9c
 8005c44:	1939      	adds	r1, r7, r4
 8005c46:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005c48:	0011      	movs	r1, r2
 8005c4a:	18bb      	adds	r3, r7, r2
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4aa2      	ldr	r2, [pc, #648]	; (8005ed8 <HAL_UART_IRQHandler+0x2bc>)
 8005c50:	4013      	ands	r3, r2
 8005c52:	2298      	movs	r2, #152	; 0x98
 8005c54:	18bd      	adds	r5, r7, r2
 8005c56:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8005c58:	18bb      	adds	r3, r7, r2
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d11a      	bne.n	8005c96 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005c60:	187b      	adds	r3, r7, r1
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2220      	movs	r2, #32
 8005c66:	4013      	ands	r3, r2
 8005c68:	d015      	beq.n	8005c96 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005c6a:	183b      	adds	r3, r7, r0
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2220      	movs	r2, #32
 8005c70:	4013      	ands	r3, r2
 8005c72:	d105      	bne.n	8005c80 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005c74:	193b      	adds	r3, r7, r4
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	2380      	movs	r3, #128	; 0x80
 8005c7a:	055b      	lsls	r3, r3, #21
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	d00a      	beq.n	8005c96 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d100      	bne.n	8005c8a <HAL_UART_IRQHandler+0x6e>
 8005c88:	e2dc      	b.n	8006244 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	0010      	movs	r0, r2
 8005c92:	4798      	blx	r3
      }
      return;
 8005c94:	e2d6      	b.n	8006244 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005c96:	2398      	movs	r3, #152	; 0x98
 8005c98:	18fb      	adds	r3, r7, r3
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d100      	bne.n	8005ca2 <HAL_UART_IRQHandler+0x86>
 8005ca0:	e122      	b.n	8005ee8 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005ca2:	239c      	movs	r3, #156	; 0x9c
 8005ca4:	18fb      	adds	r3, r7, r3
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a8c      	ldr	r2, [pc, #560]	; (8005edc <HAL_UART_IRQHandler+0x2c0>)
 8005caa:	4013      	ands	r3, r2
 8005cac:	d106      	bne.n	8005cbc <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005cae:	23a0      	movs	r3, #160	; 0xa0
 8005cb0:	18fb      	adds	r3, r7, r3
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a8a      	ldr	r2, [pc, #552]	; (8005ee0 <HAL_UART_IRQHandler+0x2c4>)
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	d100      	bne.n	8005cbc <HAL_UART_IRQHandler+0xa0>
 8005cba:	e115      	b.n	8005ee8 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005cbc:	23a4      	movs	r3, #164	; 0xa4
 8005cbe:	18fb      	adds	r3, r7, r3
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	d012      	beq.n	8005cee <HAL_UART_IRQHandler+0xd2>
 8005cc8:	23a0      	movs	r3, #160	; 0xa0
 8005cca:	18fb      	adds	r3, r7, r3
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	2380      	movs	r3, #128	; 0x80
 8005cd0:	005b      	lsls	r3, r3, #1
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	d00b      	beq.n	8005cee <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2290      	movs	r2, #144	; 0x90
 8005ce2:	589b      	ldr	r3, [r3, r2]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2190      	movs	r1, #144	; 0x90
 8005cec:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005cee:	23a4      	movs	r3, #164	; 0xa4
 8005cf0:	18fb      	adds	r3, r7, r3
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2202      	movs	r2, #2
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	d011      	beq.n	8005d1e <HAL_UART_IRQHandler+0x102>
 8005cfa:	239c      	movs	r3, #156	; 0x9c
 8005cfc:	18fb      	adds	r3, r7, r3
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2201      	movs	r2, #1
 8005d02:	4013      	ands	r3, r2
 8005d04:	d00b      	beq.n	8005d1e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2290      	movs	r2, #144	; 0x90
 8005d12:	589b      	ldr	r3, [r3, r2]
 8005d14:	2204      	movs	r2, #4
 8005d16:	431a      	orrs	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2190      	movs	r1, #144	; 0x90
 8005d1c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d1e:	23a4      	movs	r3, #164	; 0xa4
 8005d20:	18fb      	adds	r3, r7, r3
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2204      	movs	r2, #4
 8005d26:	4013      	ands	r3, r2
 8005d28:	d011      	beq.n	8005d4e <HAL_UART_IRQHandler+0x132>
 8005d2a:	239c      	movs	r3, #156	; 0x9c
 8005d2c:	18fb      	adds	r3, r7, r3
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2201      	movs	r2, #1
 8005d32:	4013      	ands	r3, r2
 8005d34:	d00b      	beq.n	8005d4e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2204      	movs	r2, #4
 8005d3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2290      	movs	r2, #144	; 0x90
 8005d42:	589b      	ldr	r3, [r3, r2]
 8005d44:	2202      	movs	r2, #2
 8005d46:	431a      	orrs	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2190      	movs	r1, #144	; 0x90
 8005d4c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005d4e:	23a4      	movs	r3, #164	; 0xa4
 8005d50:	18fb      	adds	r3, r7, r3
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2208      	movs	r2, #8
 8005d56:	4013      	ands	r3, r2
 8005d58:	d017      	beq.n	8005d8a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005d5a:	23a0      	movs	r3, #160	; 0xa0
 8005d5c:	18fb      	adds	r3, r7, r3
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2220      	movs	r2, #32
 8005d62:	4013      	ands	r3, r2
 8005d64:	d105      	bne.n	8005d72 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005d66:	239c      	movs	r3, #156	; 0x9c
 8005d68:	18fb      	adds	r3, r7, r3
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a5b      	ldr	r2, [pc, #364]	; (8005edc <HAL_UART_IRQHandler+0x2c0>)
 8005d6e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005d70:	d00b      	beq.n	8005d8a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2208      	movs	r2, #8
 8005d78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2290      	movs	r2, #144	; 0x90
 8005d7e:	589b      	ldr	r3, [r3, r2]
 8005d80:	2208      	movs	r2, #8
 8005d82:	431a      	orrs	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2190      	movs	r1, #144	; 0x90
 8005d88:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005d8a:	23a4      	movs	r3, #164	; 0xa4
 8005d8c:	18fb      	adds	r3, r7, r3
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	2380      	movs	r3, #128	; 0x80
 8005d92:	011b      	lsls	r3, r3, #4
 8005d94:	4013      	ands	r3, r2
 8005d96:	d013      	beq.n	8005dc0 <HAL_UART_IRQHandler+0x1a4>
 8005d98:	23a0      	movs	r3, #160	; 0xa0
 8005d9a:	18fb      	adds	r3, r7, r3
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	2380      	movs	r3, #128	; 0x80
 8005da0:	04db      	lsls	r3, r3, #19
 8005da2:	4013      	ands	r3, r2
 8005da4:	d00c      	beq.n	8005dc0 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2280      	movs	r2, #128	; 0x80
 8005dac:	0112      	lsls	r2, r2, #4
 8005dae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2290      	movs	r2, #144	; 0x90
 8005db4:	589b      	ldr	r3, [r3, r2]
 8005db6:	2220      	movs	r2, #32
 8005db8:	431a      	orrs	r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2190      	movs	r1, #144	; 0x90
 8005dbe:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2290      	movs	r2, #144	; 0x90
 8005dc4:	589b      	ldr	r3, [r3, r2]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d100      	bne.n	8005dcc <HAL_UART_IRQHandler+0x1b0>
 8005dca:	e23d      	b.n	8006248 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005dcc:	23a4      	movs	r3, #164	; 0xa4
 8005dce:	18fb      	adds	r3, r7, r3
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2220      	movs	r2, #32
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	d015      	beq.n	8005e04 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005dd8:	23a0      	movs	r3, #160	; 0xa0
 8005dda:	18fb      	adds	r3, r7, r3
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2220      	movs	r2, #32
 8005de0:	4013      	ands	r3, r2
 8005de2:	d106      	bne.n	8005df2 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005de4:	239c      	movs	r3, #156	; 0x9c
 8005de6:	18fb      	adds	r3, r7, r3
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	2380      	movs	r3, #128	; 0x80
 8005dec:	055b      	lsls	r3, r3, #21
 8005dee:	4013      	ands	r3, r2
 8005df0:	d008      	beq.n	8005e04 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d004      	beq.n	8005e04 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	0010      	movs	r0, r2
 8005e02:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2290      	movs	r2, #144	; 0x90
 8005e08:	589b      	ldr	r3, [r3, r2]
 8005e0a:	2194      	movs	r1, #148	; 0x94
 8005e0c:	187a      	adds	r2, r7, r1
 8005e0e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	2240      	movs	r2, #64	; 0x40
 8005e18:	4013      	ands	r3, r2
 8005e1a:	2b40      	cmp	r3, #64	; 0x40
 8005e1c:	d004      	beq.n	8005e28 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005e1e:	187b      	adds	r3, r7, r1
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2228      	movs	r2, #40	; 0x28
 8005e24:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e26:	d04c      	beq.n	8005ec2 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	0018      	movs	r0, r3
 8005e2c:	f000 ffe8 	bl	8006e00 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	2240      	movs	r2, #64	; 0x40
 8005e38:	4013      	ands	r3, r2
 8005e3a:	2b40      	cmp	r3, #64	; 0x40
 8005e3c:	d13c      	bne.n	8005eb8 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8005e42:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005e44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e46:	2090      	movs	r0, #144	; 0x90
 8005e48:	183a      	adds	r2, r7, r0
 8005e4a:	6013      	str	r3, [r2, #0]
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e52:	f383 8810 	msr	PRIMASK, r3
}
 8005e56:	46c0      	nop			; (mov r8, r8)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	689a      	ldr	r2, [r3, #8]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2140      	movs	r1, #64	; 0x40
 8005e64:	438a      	bics	r2, r1
 8005e66:	609a      	str	r2, [r3, #8]
 8005e68:	183b      	adds	r3, r7, r0
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e70:	f383 8810 	msr	PRIMASK, r3
}
 8005e74:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2280      	movs	r2, #128	; 0x80
 8005e7a:	589b      	ldr	r3, [r3, r2]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d016      	beq.n	8005eae <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2280      	movs	r2, #128	; 0x80
 8005e84:	589b      	ldr	r3, [r3, r2]
 8005e86:	4a17      	ldr	r2, [pc, #92]	; (8005ee4 <HAL_UART_IRQHandler+0x2c8>)
 8005e88:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2280      	movs	r2, #128	; 0x80
 8005e8e:	589b      	ldr	r3, [r3, r2]
 8005e90:	0018      	movs	r0, r3
 8005e92:	f7fc fe45 	bl	8002b20 <HAL_DMA_Abort_IT>
 8005e96:	1e03      	subs	r3, r0, #0
 8005e98:	d01c      	beq.n	8005ed4 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2280      	movs	r2, #128	; 0x80
 8005e9e:	589b      	ldr	r3, [r3, r2]
 8005ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	2180      	movs	r1, #128	; 0x80
 8005ea6:	5852      	ldr	r2, [r2, r1]
 8005ea8:	0010      	movs	r0, r2
 8005eaa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eac:	e012      	b.n	8005ed4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	0018      	movs	r0, r3
 8005eb2:	f000 f9e1 	bl	8006278 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eb6:	e00d      	b.n	8005ed4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	0018      	movs	r0, r3
 8005ebc:	f000 f9dc 	bl	8006278 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec0:	e008      	b.n	8005ed4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	0018      	movs	r0, r3
 8005ec6:	f000 f9d7 	bl	8006278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2290      	movs	r2, #144	; 0x90
 8005ece:	2100      	movs	r1, #0
 8005ed0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005ed2:	e1b9      	b.n	8006248 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ed4:	46c0      	nop			; (mov r8, r8)
    return;
 8005ed6:	e1b7      	b.n	8006248 <HAL_UART_IRQHandler+0x62c>
 8005ed8:	0000080f 	.word	0x0000080f
 8005edc:	10000001 	.word	0x10000001
 8005ee0:	04000120 	.word	0x04000120
 8005ee4:	08006ecd 	.word	0x08006ecd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d000      	beq.n	8005ef2 <HAL_UART_IRQHandler+0x2d6>
 8005ef0:	e13e      	b.n	8006170 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005ef2:	23a4      	movs	r3, #164	; 0xa4
 8005ef4:	18fb      	adds	r3, r7, r3
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2210      	movs	r2, #16
 8005efa:	4013      	ands	r3, r2
 8005efc:	d100      	bne.n	8005f00 <HAL_UART_IRQHandler+0x2e4>
 8005efe:	e137      	b.n	8006170 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005f00:	23a0      	movs	r3, #160	; 0xa0
 8005f02:	18fb      	adds	r3, r7, r3
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2210      	movs	r2, #16
 8005f08:	4013      	ands	r3, r2
 8005f0a:	d100      	bne.n	8005f0e <HAL_UART_IRQHandler+0x2f2>
 8005f0c:	e130      	b.n	8006170 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2210      	movs	r2, #16
 8005f14:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	2240      	movs	r2, #64	; 0x40
 8005f1e:	4013      	ands	r3, r2
 8005f20:	2b40      	cmp	r3, #64	; 0x40
 8005f22:	d000      	beq.n	8005f26 <HAL_UART_IRQHandler+0x30a>
 8005f24:	e0a4      	b.n	8006070 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2280      	movs	r2, #128	; 0x80
 8005f2a:	589b      	ldr	r3, [r3, r2]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	217e      	movs	r1, #126	; 0x7e
 8005f32:	187b      	adds	r3, r7, r1
 8005f34:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005f36:	187b      	adds	r3, r7, r1
 8005f38:	881b      	ldrh	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d100      	bne.n	8005f40 <HAL_UART_IRQHandler+0x324>
 8005f3e:	e185      	b.n	800624c <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	225c      	movs	r2, #92	; 0x5c
 8005f44:	5a9b      	ldrh	r3, [r3, r2]
 8005f46:	187a      	adds	r2, r7, r1
 8005f48:	8812      	ldrh	r2, [r2, #0]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d300      	bcc.n	8005f50 <HAL_UART_IRQHandler+0x334>
 8005f4e:	e17d      	b.n	800624c <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	187a      	adds	r2, r7, r1
 8005f54:	215e      	movs	r1, #94	; 0x5e
 8005f56:	8812      	ldrh	r2, [r2, #0]
 8005f58:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2280      	movs	r2, #128	; 0x80
 8005f5e:	589b      	ldr	r3, [r3, r2]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2220      	movs	r2, #32
 8005f66:	4013      	ands	r3, r2
 8005f68:	d170      	bne.n	800604c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f6a:	f3ef 8310 	mrs	r3, PRIMASK
 8005f6e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f72:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f74:	2301      	movs	r3, #1
 8005f76:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f7a:	f383 8810 	msr	PRIMASK, r3
}
 8005f7e:	46c0      	nop			; (mov r8, r8)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	49b4      	ldr	r1, [pc, #720]	; (800625c <HAL_UART_IRQHandler+0x640>)
 8005f8c:	400a      	ands	r2, r1
 8005f8e:	601a      	str	r2, [r3, #0]
 8005f90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f92:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f96:	f383 8810 	msr	PRIMASK, r3
}
 8005f9a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f9c:	f3ef 8310 	mrs	r3, PRIMASK
 8005fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fa4:	677b      	str	r3, [r7, #116]	; 0x74
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005faa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fac:	f383 8810 	msr	PRIMASK, r3
}
 8005fb0:	46c0      	nop			; (mov r8, r8)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	689a      	ldr	r2, [r3, #8]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2101      	movs	r1, #1
 8005fbe:	438a      	bics	r2, r1
 8005fc0:	609a      	str	r2, [r3, #8]
 8005fc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fc4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fc8:	f383 8810 	msr	PRIMASK, r3
}
 8005fcc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fce:	f3ef 8310 	mrs	r3, PRIMASK
 8005fd2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005fd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fd6:	673b      	str	r3, [r7, #112]	; 0x70
 8005fd8:	2301      	movs	r3, #1
 8005fda:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fde:	f383 8810 	msr	PRIMASK, r3
}
 8005fe2:	46c0      	nop			; (mov r8, r8)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	689a      	ldr	r2, [r3, #8]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2140      	movs	r1, #64	; 0x40
 8005ff0:	438a      	bics	r2, r1
 8005ff2:	609a      	str	r2, [r3, #8]
 8005ff4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ff6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ffa:	f383 8810 	msr	PRIMASK, r3
}
 8005ffe:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	228c      	movs	r2, #140	; 0x8c
 8006004:	2120      	movs	r1, #32
 8006006:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800600e:	f3ef 8310 	mrs	r3, PRIMASK
 8006012:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8006014:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006016:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006018:	2301      	movs	r3, #1
 800601a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800601c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800601e:	f383 8810 	msr	PRIMASK, r3
}
 8006022:	46c0      	nop			; (mov r8, r8)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2110      	movs	r1, #16
 8006030:	438a      	bics	r2, r1
 8006032:	601a      	str	r2, [r3, #0]
 8006034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006036:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006038:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800603a:	f383 8810 	msr	PRIMASK, r3
}
 800603e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2280      	movs	r2, #128	; 0x80
 8006044:	589b      	ldr	r3, [r3, r2]
 8006046:	0018      	movs	r0, r3
 8006048:	f7fc fd08 	bl	8002a5c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2202      	movs	r2, #2
 8006050:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	225c      	movs	r2, #92	; 0x5c
 8006056:	5a9a      	ldrh	r2, [r3, r2]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	215e      	movs	r1, #94	; 0x5e
 800605c:	5a5b      	ldrh	r3, [r3, r1]
 800605e:	b29b      	uxth	r3, r3
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	b29a      	uxth	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	0011      	movs	r1, r2
 8006068:	0018      	movs	r0, r3
 800606a:	f000 f90d 	bl	8006288 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800606e:	e0ed      	b.n	800624c <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	225c      	movs	r2, #92	; 0x5c
 8006074:	5a99      	ldrh	r1, [r3, r2]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	225e      	movs	r2, #94	; 0x5e
 800607a:	5a9b      	ldrh	r3, [r3, r2]
 800607c:	b29a      	uxth	r2, r3
 800607e:	208e      	movs	r0, #142	; 0x8e
 8006080:	183b      	adds	r3, r7, r0
 8006082:	1a8a      	subs	r2, r1, r2
 8006084:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	225e      	movs	r2, #94	; 0x5e
 800608a:	5a9b      	ldrh	r3, [r3, r2]
 800608c:	b29b      	uxth	r3, r3
 800608e:	2b00      	cmp	r3, #0
 8006090:	d100      	bne.n	8006094 <HAL_UART_IRQHandler+0x478>
 8006092:	e0dd      	b.n	8006250 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8006094:	183b      	adds	r3, r7, r0
 8006096:	881b      	ldrh	r3, [r3, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d100      	bne.n	800609e <HAL_UART_IRQHandler+0x482>
 800609c:	e0d8      	b.n	8006250 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800609e:	f3ef 8310 	mrs	r3, PRIMASK
 80060a2:	60fb      	str	r3, [r7, #12]
  return(result);
 80060a4:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060a6:	2488      	movs	r4, #136	; 0x88
 80060a8:	193a      	adds	r2, r7, r4
 80060aa:	6013      	str	r3, [r2, #0]
 80060ac:	2301      	movs	r3, #1
 80060ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	f383 8810 	msr	PRIMASK, r3
}
 80060b6:	46c0      	nop			; (mov r8, r8)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4967      	ldr	r1, [pc, #412]	; (8006260 <HAL_UART_IRQHandler+0x644>)
 80060c4:	400a      	ands	r2, r1
 80060c6:	601a      	str	r2, [r3, #0]
 80060c8:	193b      	adds	r3, r7, r4
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	f383 8810 	msr	PRIMASK, r3
}
 80060d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060d6:	f3ef 8310 	mrs	r3, PRIMASK
 80060da:	61bb      	str	r3, [r7, #24]
  return(result);
 80060dc:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80060de:	2484      	movs	r4, #132	; 0x84
 80060e0:	193a      	adds	r2, r7, r4
 80060e2:	6013      	str	r3, [r2, #0]
 80060e4:	2301      	movs	r3, #1
 80060e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	f383 8810 	msr	PRIMASK, r3
}
 80060ee:	46c0      	nop			; (mov r8, r8)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	689a      	ldr	r2, [r3, #8]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	495a      	ldr	r1, [pc, #360]	; (8006264 <HAL_UART_IRQHandler+0x648>)
 80060fc:	400a      	ands	r2, r1
 80060fe:	609a      	str	r2, [r3, #8]
 8006100:	193b      	adds	r3, r7, r4
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	f383 8810 	msr	PRIMASK, r3
}
 800610c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	228c      	movs	r2, #140	; 0x8c
 8006112:	2120      	movs	r1, #32
 8006114:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006122:	f3ef 8310 	mrs	r3, PRIMASK
 8006126:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006128:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800612a:	2480      	movs	r4, #128	; 0x80
 800612c:	193a      	adds	r2, r7, r4
 800612e:	6013      	str	r3, [r2, #0]
 8006130:	2301      	movs	r3, #1
 8006132:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006136:	f383 8810 	msr	PRIMASK, r3
}
 800613a:	46c0      	nop			; (mov r8, r8)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2110      	movs	r1, #16
 8006148:	438a      	bics	r2, r1
 800614a:	601a      	str	r2, [r3, #0]
 800614c:	193b      	adds	r3, r7, r4
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006154:	f383 8810 	msr	PRIMASK, r3
}
 8006158:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2202      	movs	r2, #2
 800615e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006160:	183b      	adds	r3, r7, r0
 8006162:	881a      	ldrh	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	0011      	movs	r1, r2
 8006168:	0018      	movs	r0, r3
 800616a:	f000 f88d 	bl	8006288 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800616e:	e06f      	b.n	8006250 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006170:	23a4      	movs	r3, #164	; 0xa4
 8006172:	18fb      	adds	r3, r7, r3
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	2380      	movs	r3, #128	; 0x80
 8006178:	035b      	lsls	r3, r3, #13
 800617a:	4013      	ands	r3, r2
 800617c:	d010      	beq.n	80061a0 <HAL_UART_IRQHandler+0x584>
 800617e:	239c      	movs	r3, #156	; 0x9c
 8006180:	18fb      	adds	r3, r7, r3
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	2380      	movs	r3, #128	; 0x80
 8006186:	03db      	lsls	r3, r3, #15
 8006188:	4013      	ands	r3, r2
 800618a:	d009      	beq.n	80061a0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2280      	movs	r2, #128	; 0x80
 8006192:	0352      	lsls	r2, r2, #13
 8006194:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	0018      	movs	r0, r3
 800619a:	f001 fbeb 	bl	8007974 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800619e:	e05a      	b.n	8006256 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80061a0:	23a4      	movs	r3, #164	; 0xa4
 80061a2:	18fb      	adds	r3, r7, r3
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2280      	movs	r2, #128	; 0x80
 80061a8:	4013      	ands	r3, r2
 80061aa:	d016      	beq.n	80061da <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80061ac:	23a0      	movs	r3, #160	; 0xa0
 80061ae:	18fb      	adds	r3, r7, r3
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2280      	movs	r2, #128	; 0x80
 80061b4:	4013      	ands	r3, r2
 80061b6:	d106      	bne.n	80061c6 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80061b8:	239c      	movs	r3, #156	; 0x9c
 80061ba:	18fb      	adds	r3, r7, r3
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	2380      	movs	r3, #128	; 0x80
 80061c0:	041b      	lsls	r3, r3, #16
 80061c2:	4013      	ands	r3, r2
 80061c4:	d009      	beq.n	80061da <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d042      	beq.n	8006254 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	0010      	movs	r0, r2
 80061d6:	4798      	blx	r3
    }
    return;
 80061d8:	e03c      	b.n	8006254 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80061da:	23a4      	movs	r3, #164	; 0xa4
 80061dc:	18fb      	adds	r3, r7, r3
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2240      	movs	r2, #64	; 0x40
 80061e2:	4013      	ands	r3, r2
 80061e4:	d00a      	beq.n	80061fc <HAL_UART_IRQHandler+0x5e0>
 80061e6:	23a0      	movs	r3, #160	; 0xa0
 80061e8:	18fb      	adds	r3, r7, r3
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2240      	movs	r2, #64	; 0x40
 80061ee:	4013      	ands	r3, r2
 80061f0:	d004      	beq.n	80061fc <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	0018      	movs	r0, r3
 80061f6:	f000 fe80 	bl	8006efa <UART_EndTransmit_IT>
    return;
 80061fa:	e02c      	b.n	8006256 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80061fc:	23a4      	movs	r3, #164	; 0xa4
 80061fe:	18fb      	adds	r3, r7, r3
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	2380      	movs	r3, #128	; 0x80
 8006204:	041b      	lsls	r3, r3, #16
 8006206:	4013      	ands	r3, r2
 8006208:	d00b      	beq.n	8006222 <HAL_UART_IRQHandler+0x606>
 800620a:	23a0      	movs	r3, #160	; 0xa0
 800620c:	18fb      	adds	r3, r7, r3
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	2380      	movs	r3, #128	; 0x80
 8006212:	05db      	lsls	r3, r3, #23
 8006214:	4013      	ands	r3, r2
 8006216:	d004      	beq.n	8006222 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	0018      	movs	r0, r3
 800621c:	f001 fbba 	bl	8007994 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006220:	e019      	b.n	8006256 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006222:	23a4      	movs	r3, #164	; 0xa4
 8006224:	18fb      	adds	r3, r7, r3
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	2380      	movs	r3, #128	; 0x80
 800622a:	045b      	lsls	r3, r3, #17
 800622c:	4013      	ands	r3, r2
 800622e:	d012      	beq.n	8006256 <HAL_UART_IRQHandler+0x63a>
 8006230:	23a0      	movs	r3, #160	; 0xa0
 8006232:	18fb      	adds	r3, r7, r3
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	da0d      	bge.n	8006256 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	0018      	movs	r0, r3
 800623e:	f001 fba1 	bl	8007984 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006242:	e008      	b.n	8006256 <HAL_UART_IRQHandler+0x63a>
      return;
 8006244:	46c0      	nop			; (mov r8, r8)
 8006246:	e006      	b.n	8006256 <HAL_UART_IRQHandler+0x63a>
    return;
 8006248:	46c0      	nop			; (mov r8, r8)
 800624a:	e004      	b.n	8006256 <HAL_UART_IRQHandler+0x63a>
      return;
 800624c:	46c0      	nop			; (mov r8, r8)
 800624e:	e002      	b.n	8006256 <HAL_UART_IRQHandler+0x63a>
      return;
 8006250:	46c0      	nop			; (mov r8, r8)
 8006252:	e000      	b.n	8006256 <HAL_UART_IRQHandler+0x63a>
    return;
 8006254:	46c0      	nop			; (mov r8, r8)
  }
}
 8006256:	46bd      	mov	sp, r7
 8006258:	b02a      	add	sp, #168	; 0xa8
 800625a:	bdb0      	pop	{r4, r5, r7, pc}
 800625c:	fffffeff 	.word	0xfffffeff
 8006260:	fffffedf 	.word	0xfffffedf
 8006264:	effffffe 	.word	0xeffffffe

08006268 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006270:	46c0      	nop			; (mov r8, r8)
 8006272:	46bd      	mov	sp, r7
 8006274:	b002      	add	sp, #8
 8006276:	bd80      	pop	{r7, pc}

08006278 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006280:	46c0      	nop			; (mov r8, r8)
 8006282:	46bd      	mov	sp, r7
 8006284:	b002      	add	sp, #8
 8006286:	bd80      	pop	{r7, pc}

08006288 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	000a      	movs	r2, r1
 8006292:	1cbb      	adds	r3, r7, #2
 8006294:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006296:	46c0      	nop			; (mov r8, r8)
 8006298:	46bd      	mov	sp, r7
 800629a:	b002      	add	sp, #8
 800629c:	bd80      	pop	{r7, pc}
	...

080062a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062a0:	b5b0      	push	{r4, r5, r7, lr}
 80062a2:	b090      	sub	sp, #64	; 0x40
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062a8:	231a      	movs	r3, #26
 80062aa:	2220      	movs	r2, #32
 80062ac:	189b      	adds	r3, r3, r2
 80062ae:	19db      	adds	r3, r3, r7
 80062b0:	2200      	movs	r2, #0
 80062b2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	689a      	ldr	r2, [r3, #8]
 80062b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	431a      	orrs	r2, r3
 80062be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	431a      	orrs	r2, r3
 80062c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c6:	69db      	ldr	r3, [r3, #28]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4aaf      	ldr	r2, [pc, #700]	; (8006590 <UART_SetConfig+0x2f0>)
 80062d4:	4013      	ands	r3, r2
 80062d6:	0019      	movs	r1, r3
 80062d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062de:	430b      	orrs	r3, r1
 80062e0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	4aaa      	ldr	r2, [pc, #680]	; (8006594 <UART_SetConfig+0x2f4>)
 80062ea:	4013      	ands	r3, r2
 80062ec:	0018      	movs	r0, r3
 80062ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f0:	68d9      	ldr	r1, [r3, #12]
 80062f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	0003      	movs	r3, r0
 80062f8:	430b      	orrs	r3, r1
 80062fa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4aa4      	ldr	r2, [pc, #656]	; (8006598 <UART_SetConfig+0x2f8>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d004      	beq.n	8006316 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006312:	4313      	orrs	r3, r2
 8006314:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	4a9f      	ldr	r2, [pc, #636]	; (800659c <UART_SetConfig+0x2fc>)
 800631e:	4013      	ands	r3, r2
 8006320:	0019      	movs	r1, r3
 8006322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006328:	430b      	orrs	r3, r1
 800632a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800632c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006332:	220f      	movs	r2, #15
 8006334:	4393      	bics	r3, r2
 8006336:	0018      	movs	r0, r3
 8006338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800633c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	0003      	movs	r3, r0
 8006342:	430b      	orrs	r3, r1
 8006344:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a95      	ldr	r2, [pc, #596]	; (80065a0 <UART_SetConfig+0x300>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d131      	bne.n	80063b4 <UART_SetConfig+0x114>
 8006350:	4b94      	ldr	r3, [pc, #592]	; (80065a4 <UART_SetConfig+0x304>)
 8006352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006354:	2203      	movs	r2, #3
 8006356:	4013      	ands	r3, r2
 8006358:	2b03      	cmp	r3, #3
 800635a:	d01d      	beq.n	8006398 <UART_SetConfig+0xf8>
 800635c:	d823      	bhi.n	80063a6 <UART_SetConfig+0x106>
 800635e:	2b02      	cmp	r3, #2
 8006360:	d00c      	beq.n	800637c <UART_SetConfig+0xdc>
 8006362:	d820      	bhi.n	80063a6 <UART_SetConfig+0x106>
 8006364:	2b00      	cmp	r3, #0
 8006366:	d002      	beq.n	800636e <UART_SetConfig+0xce>
 8006368:	2b01      	cmp	r3, #1
 800636a:	d00e      	beq.n	800638a <UART_SetConfig+0xea>
 800636c:	e01b      	b.n	80063a6 <UART_SetConfig+0x106>
 800636e:	231b      	movs	r3, #27
 8006370:	2220      	movs	r2, #32
 8006372:	189b      	adds	r3, r3, r2
 8006374:	19db      	adds	r3, r3, r7
 8006376:	2200      	movs	r2, #0
 8006378:	701a      	strb	r2, [r3, #0]
 800637a:	e0b4      	b.n	80064e6 <UART_SetConfig+0x246>
 800637c:	231b      	movs	r3, #27
 800637e:	2220      	movs	r2, #32
 8006380:	189b      	adds	r3, r3, r2
 8006382:	19db      	adds	r3, r3, r7
 8006384:	2202      	movs	r2, #2
 8006386:	701a      	strb	r2, [r3, #0]
 8006388:	e0ad      	b.n	80064e6 <UART_SetConfig+0x246>
 800638a:	231b      	movs	r3, #27
 800638c:	2220      	movs	r2, #32
 800638e:	189b      	adds	r3, r3, r2
 8006390:	19db      	adds	r3, r3, r7
 8006392:	2204      	movs	r2, #4
 8006394:	701a      	strb	r2, [r3, #0]
 8006396:	e0a6      	b.n	80064e6 <UART_SetConfig+0x246>
 8006398:	231b      	movs	r3, #27
 800639a:	2220      	movs	r2, #32
 800639c:	189b      	adds	r3, r3, r2
 800639e:	19db      	adds	r3, r3, r7
 80063a0:	2208      	movs	r2, #8
 80063a2:	701a      	strb	r2, [r3, #0]
 80063a4:	e09f      	b.n	80064e6 <UART_SetConfig+0x246>
 80063a6:	231b      	movs	r3, #27
 80063a8:	2220      	movs	r2, #32
 80063aa:	189b      	adds	r3, r3, r2
 80063ac:	19db      	adds	r3, r3, r7
 80063ae:	2210      	movs	r2, #16
 80063b0:	701a      	strb	r2, [r3, #0]
 80063b2:	e098      	b.n	80064e6 <UART_SetConfig+0x246>
 80063b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a7b      	ldr	r2, [pc, #492]	; (80065a8 <UART_SetConfig+0x308>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d131      	bne.n	8006422 <UART_SetConfig+0x182>
 80063be:	4b79      	ldr	r3, [pc, #484]	; (80065a4 <UART_SetConfig+0x304>)
 80063c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063c2:	220c      	movs	r2, #12
 80063c4:	4013      	ands	r3, r2
 80063c6:	2b0c      	cmp	r3, #12
 80063c8:	d01d      	beq.n	8006406 <UART_SetConfig+0x166>
 80063ca:	d823      	bhi.n	8006414 <UART_SetConfig+0x174>
 80063cc:	2b08      	cmp	r3, #8
 80063ce:	d00c      	beq.n	80063ea <UART_SetConfig+0x14a>
 80063d0:	d820      	bhi.n	8006414 <UART_SetConfig+0x174>
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d002      	beq.n	80063dc <UART_SetConfig+0x13c>
 80063d6:	2b04      	cmp	r3, #4
 80063d8:	d00e      	beq.n	80063f8 <UART_SetConfig+0x158>
 80063da:	e01b      	b.n	8006414 <UART_SetConfig+0x174>
 80063dc:	231b      	movs	r3, #27
 80063de:	2220      	movs	r2, #32
 80063e0:	189b      	adds	r3, r3, r2
 80063e2:	19db      	adds	r3, r3, r7
 80063e4:	2200      	movs	r2, #0
 80063e6:	701a      	strb	r2, [r3, #0]
 80063e8:	e07d      	b.n	80064e6 <UART_SetConfig+0x246>
 80063ea:	231b      	movs	r3, #27
 80063ec:	2220      	movs	r2, #32
 80063ee:	189b      	adds	r3, r3, r2
 80063f0:	19db      	adds	r3, r3, r7
 80063f2:	2202      	movs	r2, #2
 80063f4:	701a      	strb	r2, [r3, #0]
 80063f6:	e076      	b.n	80064e6 <UART_SetConfig+0x246>
 80063f8:	231b      	movs	r3, #27
 80063fa:	2220      	movs	r2, #32
 80063fc:	189b      	adds	r3, r3, r2
 80063fe:	19db      	adds	r3, r3, r7
 8006400:	2204      	movs	r2, #4
 8006402:	701a      	strb	r2, [r3, #0]
 8006404:	e06f      	b.n	80064e6 <UART_SetConfig+0x246>
 8006406:	231b      	movs	r3, #27
 8006408:	2220      	movs	r2, #32
 800640a:	189b      	adds	r3, r3, r2
 800640c:	19db      	adds	r3, r3, r7
 800640e:	2208      	movs	r2, #8
 8006410:	701a      	strb	r2, [r3, #0]
 8006412:	e068      	b.n	80064e6 <UART_SetConfig+0x246>
 8006414:	231b      	movs	r3, #27
 8006416:	2220      	movs	r2, #32
 8006418:	189b      	adds	r3, r3, r2
 800641a:	19db      	adds	r3, r3, r7
 800641c:	2210      	movs	r2, #16
 800641e:	701a      	strb	r2, [r3, #0]
 8006420:	e061      	b.n	80064e6 <UART_SetConfig+0x246>
 8006422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a61      	ldr	r2, [pc, #388]	; (80065ac <UART_SetConfig+0x30c>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d106      	bne.n	800643a <UART_SetConfig+0x19a>
 800642c:	231b      	movs	r3, #27
 800642e:	2220      	movs	r2, #32
 8006430:	189b      	adds	r3, r3, r2
 8006432:	19db      	adds	r3, r3, r7
 8006434:	2200      	movs	r2, #0
 8006436:	701a      	strb	r2, [r3, #0]
 8006438:	e055      	b.n	80064e6 <UART_SetConfig+0x246>
 800643a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a5c      	ldr	r2, [pc, #368]	; (80065b0 <UART_SetConfig+0x310>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d106      	bne.n	8006452 <UART_SetConfig+0x1b2>
 8006444:	231b      	movs	r3, #27
 8006446:	2220      	movs	r2, #32
 8006448:	189b      	adds	r3, r3, r2
 800644a:	19db      	adds	r3, r3, r7
 800644c:	2200      	movs	r2, #0
 800644e:	701a      	strb	r2, [r3, #0]
 8006450:	e049      	b.n	80064e6 <UART_SetConfig+0x246>
 8006452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a50      	ldr	r2, [pc, #320]	; (8006598 <UART_SetConfig+0x2f8>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d13e      	bne.n	80064da <UART_SetConfig+0x23a>
 800645c:	4b51      	ldr	r3, [pc, #324]	; (80065a4 <UART_SetConfig+0x304>)
 800645e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006460:	23c0      	movs	r3, #192	; 0xc0
 8006462:	011b      	lsls	r3, r3, #4
 8006464:	4013      	ands	r3, r2
 8006466:	22c0      	movs	r2, #192	; 0xc0
 8006468:	0112      	lsls	r2, r2, #4
 800646a:	4293      	cmp	r3, r2
 800646c:	d027      	beq.n	80064be <UART_SetConfig+0x21e>
 800646e:	22c0      	movs	r2, #192	; 0xc0
 8006470:	0112      	lsls	r2, r2, #4
 8006472:	4293      	cmp	r3, r2
 8006474:	d82a      	bhi.n	80064cc <UART_SetConfig+0x22c>
 8006476:	2280      	movs	r2, #128	; 0x80
 8006478:	0112      	lsls	r2, r2, #4
 800647a:	4293      	cmp	r3, r2
 800647c:	d011      	beq.n	80064a2 <UART_SetConfig+0x202>
 800647e:	2280      	movs	r2, #128	; 0x80
 8006480:	0112      	lsls	r2, r2, #4
 8006482:	4293      	cmp	r3, r2
 8006484:	d822      	bhi.n	80064cc <UART_SetConfig+0x22c>
 8006486:	2b00      	cmp	r3, #0
 8006488:	d004      	beq.n	8006494 <UART_SetConfig+0x1f4>
 800648a:	2280      	movs	r2, #128	; 0x80
 800648c:	00d2      	lsls	r2, r2, #3
 800648e:	4293      	cmp	r3, r2
 8006490:	d00e      	beq.n	80064b0 <UART_SetConfig+0x210>
 8006492:	e01b      	b.n	80064cc <UART_SetConfig+0x22c>
 8006494:	231b      	movs	r3, #27
 8006496:	2220      	movs	r2, #32
 8006498:	189b      	adds	r3, r3, r2
 800649a:	19db      	adds	r3, r3, r7
 800649c:	2200      	movs	r2, #0
 800649e:	701a      	strb	r2, [r3, #0]
 80064a0:	e021      	b.n	80064e6 <UART_SetConfig+0x246>
 80064a2:	231b      	movs	r3, #27
 80064a4:	2220      	movs	r2, #32
 80064a6:	189b      	adds	r3, r3, r2
 80064a8:	19db      	adds	r3, r3, r7
 80064aa:	2202      	movs	r2, #2
 80064ac:	701a      	strb	r2, [r3, #0]
 80064ae:	e01a      	b.n	80064e6 <UART_SetConfig+0x246>
 80064b0:	231b      	movs	r3, #27
 80064b2:	2220      	movs	r2, #32
 80064b4:	189b      	adds	r3, r3, r2
 80064b6:	19db      	adds	r3, r3, r7
 80064b8:	2204      	movs	r2, #4
 80064ba:	701a      	strb	r2, [r3, #0]
 80064bc:	e013      	b.n	80064e6 <UART_SetConfig+0x246>
 80064be:	231b      	movs	r3, #27
 80064c0:	2220      	movs	r2, #32
 80064c2:	189b      	adds	r3, r3, r2
 80064c4:	19db      	adds	r3, r3, r7
 80064c6:	2208      	movs	r2, #8
 80064c8:	701a      	strb	r2, [r3, #0]
 80064ca:	e00c      	b.n	80064e6 <UART_SetConfig+0x246>
 80064cc:	231b      	movs	r3, #27
 80064ce:	2220      	movs	r2, #32
 80064d0:	189b      	adds	r3, r3, r2
 80064d2:	19db      	adds	r3, r3, r7
 80064d4:	2210      	movs	r2, #16
 80064d6:	701a      	strb	r2, [r3, #0]
 80064d8:	e005      	b.n	80064e6 <UART_SetConfig+0x246>
 80064da:	231b      	movs	r3, #27
 80064dc:	2220      	movs	r2, #32
 80064de:	189b      	adds	r3, r3, r2
 80064e0:	19db      	adds	r3, r3, r7
 80064e2:	2210      	movs	r2, #16
 80064e4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80064e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a2b      	ldr	r2, [pc, #172]	; (8006598 <UART_SetConfig+0x2f8>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d000      	beq.n	80064f2 <UART_SetConfig+0x252>
 80064f0:	e0a9      	b.n	8006646 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80064f2:	231b      	movs	r3, #27
 80064f4:	2220      	movs	r2, #32
 80064f6:	189b      	adds	r3, r3, r2
 80064f8:	19db      	adds	r3, r3, r7
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	2b08      	cmp	r3, #8
 80064fe:	d015      	beq.n	800652c <UART_SetConfig+0x28c>
 8006500:	dc18      	bgt.n	8006534 <UART_SetConfig+0x294>
 8006502:	2b04      	cmp	r3, #4
 8006504:	d00d      	beq.n	8006522 <UART_SetConfig+0x282>
 8006506:	dc15      	bgt.n	8006534 <UART_SetConfig+0x294>
 8006508:	2b00      	cmp	r3, #0
 800650a:	d002      	beq.n	8006512 <UART_SetConfig+0x272>
 800650c:	2b02      	cmp	r3, #2
 800650e:	d005      	beq.n	800651c <UART_SetConfig+0x27c>
 8006510:	e010      	b.n	8006534 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006512:	f7fd fec9 	bl	80042a8 <HAL_RCC_GetPCLK1Freq>
 8006516:	0003      	movs	r3, r0
 8006518:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800651a:	e014      	b.n	8006546 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800651c:	4b25      	ldr	r3, [pc, #148]	; (80065b4 <UART_SetConfig+0x314>)
 800651e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006520:	e011      	b.n	8006546 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006522:	f7fd fe35 	bl	8004190 <HAL_RCC_GetSysClockFreq>
 8006526:	0003      	movs	r3, r0
 8006528:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800652a:	e00c      	b.n	8006546 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800652c:	2380      	movs	r3, #128	; 0x80
 800652e:	021b      	lsls	r3, r3, #8
 8006530:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006532:	e008      	b.n	8006546 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8006534:	2300      	movs	r3, #0
 8006536:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006538:	231a      	movs	r3, #26
 800653a:	2220      	movs	r2, #32
 800653c:	189b      	adds	r3, r3, r2
 800653e:	19db      	adds	r3, r3, r7
 8006540:	2201      	movs	r2, #1
 8006542:	701a      	strb	r2, [r3, #0]
        break;
 8006544:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006548:	2b00      	cmp	r3, #0
 800654a:	d100      	bne.n	800654e <UART_SetConfig+0x2ae>
 800654c:	e14b      	b.n	80067e6 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006552:	4b19      	ldr	r3, [pc, #100]	; (80065b8 <UART_SetConfig+0x318>)
 8006554:	0052      	lsls	r2, r2, #1
 8006556:	5ad3      	ldrh	r3, [r2, r3]
 8006558:	0019      	movs	r1, r3
 800655a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800655c:	f7f9 fdee 	bl	800013c <__udivsi3>
 8006560:	0003      	movs	r3, r0
 8006562:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	0013      	movs	r3, r2
 800656a:	005b      	lsls	r3, r3, #1
 800656c:	189b      	adds	r3, r3, r2
 800656e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006570:	429a      	cmp	r2, r3
 8006572:	d305      	bcc.n	8006580 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800657a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800657c:	429a      	cmp	r2, r3
 800657e:	d91d      	bls.n	80065bc <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8006580:	231a      	movs	r3, #26
 8006582:	2220      	movs	r2, #32
 8006584:	189b      	adds	r3, r3, r2
 8006586:	19db      	adds	r3, r3, r7
 8006588:	2201      	movs	r2, #1
 800658a:	701a      	strb	r2, [r3, #0]
 800658c:	e12b      	b.n	80067e6 <UART_SetConfig+0x546>
 800658e:	46c0      	nop			; (mov r8, r8)
 8006590:	cfff69f3 	.word	0xcfff69f3
 8006594:	ffffcfff 	.word	0xffffcfff
 8006598:	40008000 	.word	0x40008000
 800659c:	11fff4ff 	.word	0x11fff4ff
 80065a0:	40013800 	.word	0x40013800
 80065a4:	40021000 	.word	0x40021000
 80065a8:	40004400 	.word	0x40004400
 80065ac:	40004800 	.word	0x40004800
 80065b0:	40004c00 	.word	0x40004c00
 80065b4:	00f42400 	.word	0x00f42400
 80065b8:	08008cb0 	.word	0x08008cb0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065be:	61bb      	str	r3, [r7, #24]
 80065c0:	2300      	movs	r3, #0
 80065c2:	61fb      	str	r3, [r7, #28]
 80065c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065c8:	4b92      	ldr	r3, [pc, #584]	; (8006814 <UART_SetConfig+0x574>)
 80065ca:	0052      	lsls	r2, r2, #1
 80065cc:	5ad3      	ldrh	r3, [r2, r3]
 80065ce:	613b      	str	r3, [r7, #16]
 80065d0:	2300      	movs	r3, #0
 80065d2:	617b      	str	r3, [r7, #20]
 80065d4:	693a      	ldr	r2, [r7, #16]
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	69b8      	ldr	r0, [r7, #24]
 80065da:	69f9      	ldr	r1, [r7, #28]
 80065dc:	f7f9 ff24 	bl	8000428 <__aeabi_uldivmod>
 80065e0:	0002      	movs	r2, r0
 80065e2:	000b      	movs	r3, r1
 80065e4:	0e11      	lsrs	r1, r2, #24
 80065e6:	021d      	lsls	r5, r3, #8
 80065e8:	430d      	orrs	r5, r1
 80065ea:	0214      	lsls	r4, r2, #8
 80065ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	085b      	lsrs	r3, r3, #1
 80065f2:	60bb      	str	r3, [r7, #8]
 80065f4:	2300      	movs	r3, #0
 80065f6:	60fb      	str	r3, [r7, #12]
 80065f8:	68b8      	ldr	r0, [r7, #8]
 80065fa:	68f9      	ldr	r1, [r7, #12]
 80065fc:	1900      	adds	r0, r0, r4
 80065fe:	4169      	adcs	r1, r5
 8006600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	603b      	str	r3, [r7, #0]
 8006606:	2300      	movs	r3, #0
 8006608:	607b      	str	r3, [r7, #4]
 800660a:	683a      	ldr	r2, [r7, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f7f9 ff0b 	bl	8000428 <__aeabi_uldivmod>
 8006612:	0002      	movs	r2, r0
 8006614:	000b      	movs	r3, r1
 8006616:	0013      	movs	r3, r2
 8006618:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800661a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800661c:	23c0      	movs	r3, #192	; 0xc0
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	429a      	cmp	r2, r3
 8006622:	d309      	bcc.n	8006638 <UART_SetConfig+0x398>
 8006624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006626:	2380      	movs	r3, #128	; 0x80
 8006628:	035b      	lsls	r3, r3, #13
 800662a:	429a      	cmp	r2, r3
 800662c:	d204      	bcs.n	8006638 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800662e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006634:	60da      	str	r2, [r3, #12]
 8006636:	e0d6      	b.n	80067e6 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8006638:	231a      	movs	r3, #26
 800663a:	2220      	movs	r2, #32
 800663c:	189b      	adds	r3, r3, r2
 800663e:	19db      	adds	r3, r3, r7
 8006640:	2201      	movs	r2, #1
 8006642:	701a      	strb	r2, [r3, #0]
 8006644:	e0cf      	b.n	80067e6 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006648:	69da      	ldr	r2, [r3, #28]
 800664a:	2380      	movs	r3, #128	; 0x80
 800664c:	021b      	lsls	r3, r3, #8
 800664e:	429a      	cmp	r2, r3
 8006650:	d000      	beq.n	8006654 <UART_SetConfig+0x3b4>
 8006652:	e070      	b.n	8006736 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8006654:	231b      	movs	r3, #27
 8006656:	2220      	movs	r2, #32
 8006658:	189b      	adds	r3, r3, r2
 800665a:	19db      	adds	r3, r3, r7
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	2b08      	cmp	r3, #8
 8006660:	d015      	beq.n	800668e <UART_SetConfig+0x3ee>
 8006662:	dc18      	bgt.n	8006696 <UART_SetConfig+0x3f6>
 8006664:	2b04      	cmp	r3, #4
 8006666:	d00d      	beq.n	8006684 <UART_SetConfig+0x3e4>
 8006668:	dc15      	bgt.n	8006696 <UART_SetConfig+0x3f6>
 800666a:	2b00      	cmp	r3, #0
 800666c:	d002      	beq.n	8006674 <UART_SetConfig+0x3d4>
 800666e:	2b02      	cmp	r3, #2
 8006670:	d005      	beq.n	800667e <UART_SetConfig+0x3de>
 8006672:	e010      	b.n	8006696 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006674:	f7fd fe18 	bl	80042a8 <HAL_RCC_GetPCLK1Freq>
 8006678:	0003      	movs	r3, r0
 800667a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800667c:	e014      	b.n	80066a8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800667e:	4b66      	ldr	r3, [pc, #408]	; (8006818 <UART_SetConfig+0x578>)
 8006680:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006682:	e011      	b.n	80066a8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006684:	f7fd fd84 	bl	8004190 <HAL_RCC_GetSysClockFreq>
 8006688:	0003      	movs	r3, r0
 800668a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800668c:	e00c      	b.n	80066a8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800668e:	2380      	movs	r3, #128	; 0x80
 8006690:	021b      	lsls	r3, r3, #8
 8006692:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006694:	e008      	b.n	80066a8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006696:	2300      	movs	r3, #0
 8006698:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800669a:	231a      	movs	r3, #26
 800669c:	2220      	movs	r2, #32
 800669e:	189b      	adds	r3, r3, r2
 80066a0:	19db      	adds	r3, r3, r7
 80066a2:	2201      	movs	r2, #1
 80066a4:	701a      	strb	r2, [r3, #0]
        break;
 80066a6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d100      	bne.n	80066b0 <UART_SetConfig+0x410>
 80066ae:	e09a      	b.n	80067e6 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066b4:	4b57      	ldr	r3, [pc, #348]	; (8006814 <UART_SetConfig+0x574>)
 80066b6:	0052      	lsls	r2, r2, #1
 80066b8:	5ad3      	ldrh	r3, [r2, r3]
 80066ba:	0019      	movs	r1, r3
 80066bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80066be:	f7f9 fd3d 	bl	800013c <__udivsi3>
 80066c2:	0003      	movs	r3, r0
 80066c4:	005a      	lsls	r2, r3, #1
 80066c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	085b      	lsrs	r3, r3, #1
 80066cc:	18d2      	adds	r2, r2, r3
 80066ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	0019      	movs	r1, r3
 80066d4:	0010      	movs	r0, r2
 80066d6:	f7f9 fd31 	bl	800013c <__udivsi3>
 80066da:	0003      	movs	r3, r0
 80066dc:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e0:	2b0f      	cmp	r3, #15
 80066e2:	d921      	bls.n	8006728 <UART_SetConfig+0x488>
 80066e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066e6:	2380      	movs	r3, #128	; 0x80
 80066e8:	025b      	lsls	r3, r3, #9
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d21c      	bcs.n	8006728 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	200e      	movs	r0, #14
 80066f4:	2420      	movs	r4, #32
 80066f6:	1903      	adds	r3, r0, r4
 80066f8:	19db      	adds	r3, r3, r7
 80066fa:	210f      	movs	r1, #15
 80066fc:	438a      	bics	r2, r1
 80066fe:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006702:	085b      	lsrs	r3, r3, #1
 8006704:	b29b      	uxth	r3, r3
 8006706:	2207      	movs	r2, #7
 8006708:	4013      	ands	r3, r2
 800670a:	b299      	uxth	r1, r3
 800670c:	1903      	adds	r3, r0, r4
 800670e:	19db      	adds	r3, r3, r7
 8006710:	1902      	adds	r2, r0, r4
 8006712:	19d2      	adds	r2, r2, r7
 8006714:	8812      	ldrh	r2, [r2, #0]
 8006716:	430a      	orrs	r2, r1
 8006718:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800671a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	1902      	adds	r2, r0, r4
 8006720:	19d2      	adds	r2, r2, r7
 8006722:	8812      	ldrh	r2, [r2, #0]
 8006724:	60da      	str	r2, [r3, #12]
 8006726:	e05e      	b.n	80067e6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8006728:	231a      	movs	r3, #26
 800672a:	2220      	movs	r2, #32
 800672c:	189b      	adds	r3, r3, r2
 800672e:	19db      	adds	r3, r3, r7
 8006730:	2201      	movs	r2, #1
 8006732:	701a      	strb	r2, [r3, #0]
 8006734:	e057      	b.n	80067e6 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006736:	231b      	movs	r3, #27
 8006738:	2220      	movs	r2, #32
 800673a:	189b      	adds	r3, r3, r2
 800673c:	19db      	adds	r3, r3, r7
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	2b08      	cmp	r3, #8
 8006742:	d015      	beq.n	8006770 <UART_SetConfig+0x4d0>
 8006744:	dc18      	bgt.n	8006778 <UART_SetConfig+0x4d8>
 8006746:	2b04      	cmp	r3, #4
 8006748:	d00d      	beq.n	8006766 <UART_SetConfig+0x4c6>
 800674a:	dc15      	bgt.n	8006778 <UART_SetConfig+0x4d8>
 800674c:	2b00      	cmp	r3, #0
 800674e:	d002      	beq.n	8006756 <UART_SetConfig+0x4b6>
 8006750:	2b02      	cmp	r3, #2
 8006752:	d005      	beq.n	8006760 <UART_SetConfig+0x4c0>
 8006754:	e010      	b.n	8006778 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006756:	f7fd fda7 	bl	80042a8 <HAL_RCC_GetPCLK1Freq>
 800675a:	0003      	movs	r3, r0
 800675c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800675e:	e014      	b.n	800678a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006760:	4b2d      	ldr	r3, [pc, #180]	; (8006818 <UART_SetConfig+0x578>)
 8006762:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006764:	e011      	b.n	800678a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006766:	f7fd fd13 	bl	8004190 <HAL_RCC_GetSysClockFreq>
 800676a:	0003      	movs	r3, r0
 800676c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800676e:	e00c      	b.n	800678a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006770:	2380      	movs	r3, #128	; 0x80
 8006772:	021b      	lsls	r3, r3, #8
 8006774:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006776:	e008      	b.n	800678a <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8006778:	2300      	movs	r3, #0
 800677a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800677c:	231a      	movs	r3, #26
 800677e:	2220      	movs	r2, #32
 8006780:	189b      	adds	r3, r3, r2
 8006782:	19db      	adds	r3, r3, r7
 8006784:	2201      	movs	r2, #1
 8006786:	701a      	strb	r2, [r3, #0]
        break;
 8006788:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800678a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800678c:	2b00      	cmp	r3, #0
 800678e:	d02a      	beq.n	80067e6 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006792:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006794:	4b1f      	ldr	r3, [pc, #124]	; (8006814 <UART_SetConfig+0x574>)
 8006796:	0052      	lsls	r2, r2, #1
 8006798:	5ad3      	ldrh	r3, [r2, r3]
 800679a:	0019      	movs	r1, r3
 800679c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800679e:	f7f9 fccd 	bl	800013c <__udivsi3>
 80067a2:	0003      	movs	r3, r0
 80067a4:	001a      	movs	r2, r3
 80067a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	085b      	lsrs	r3, r3, #1
 80067ac:	18d2      	adds	r2, r2, r3
 80067ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	0019      	movs	r1, r3
 80067b4:	0010      	movs	r0, r2
 80067b6:	f7f9 fcc1 	bl	800013c <__udivsi3>
 80067ba:	0003      	movs	r3, r0
 80067bc:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c0:	2b0f      	cmp	r3, #15
 80067c2:	d90a      	bls.n	80067da <UART_SetConfig+0x53a>
 80067c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067c6:	2380      	movs	r3, #128	; 0x80
 80067c8:	025b      	lsls	r3, r3, #9
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d205      	bcs.n	80067da <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	60da      	str	r2, [r3, #12]
 80067d8:	e005      	b.n	80067e6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80067da:	231a      	movs	r3, #26
 80067dc:	2220      	movs	r2, #32
 80067de:	189b      	adds	r3, r3, r2
 80067e0:	19db      	adds	r3, r3, r7
 80067e2:	2201      	movs	r2, #1
 80067e4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80067e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e8:	226a      	movs	r2, #106	; 0x6a
 80067ea:	2101      	movs	r1, #1
 80067ec:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80067ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f0:	2268      	movs	r2, #104	; 0x68
 80067f2:	2101      	movs	r1, #1
 80067f4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f8:	2200      	movs	r2, #0
 80067fa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80067fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fe:	2200      	movs	r2, #0
 8006800:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006802:	231a      	movs	r3, #26
 8006804:	2220      	movs	r2, #32
 8006806:	189b      	adds	r3, r3, r2
 8006808:	19db      	adds	r3, r3, r7
 800680a:	781b      	ldrb	r3, [r3, #0]
}
 800680c:	0018      	movs	r0, r3
 800680e:	46bd      	mov	sp, r7
 8006810:	b010      	add	sp, #64	; 0x40
 8006812:	bdb0      	pop	{r4, r5, r7, pc}
 8006814:	08008cb0 	.word	0x08008cb0
 8006818:	00f42400 	.word	0x00f42400

0800681c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006828:	2208      	movs	r2, #8
 800682a:	4013      	ands	r3, r2
 800682c:	d00b      	beq.n	8006846 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	4a4a      	ldr	r2, [pc, #296]	; (8006960 <UART_AdvFeatureConfig+0x144>)
 8006836:	4013      	ands	r3, r2
 8006838:	0019      	movs	r1, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	430a      	orrs	r2, r1
 8006844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800684a:	2201      	movs	r2, #1
 800684c:	4013      	ands	r3, r2
 800684e:	d00b      	beq.n	8006868 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	4a43      	ldr	r2, [pc, #268]	; (8006964 <UART_AdvFeatureConfig+0x148>)
 8006858:	4013      	ands	r3, r2
 800685a:	0019      	movs	r1, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	430a      	orrs	r2, r1
 8006866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686c:	2202      	movs	r2, #2
 800686e:	4013      	ands	r3, r2
 8006870:	d00b      	beq.n	800688a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	4a3b      	ldr	r2, [pc, #236]	; (8006968 <UART_AdvFeatureConfig+0x14c>)
 800687a:	4013      	ands	r3, r2
 800687c:	0019      	movs	r1, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	430a      	orrs	r2, r1
 8006888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688e:	2204      	movs	r2, #4
 8006890:	4013      	ands	r3, r2
 8006892:	d00b      	beq.n	80068ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	4a34      	ldr	r2, [pc, #208]	; (800696c <UART_AdvFeatureConfig+0x150>)
 800689c:	4013      	ands	r3, r2
 800689e:	0019      	movs	r1, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	430a      	orrs	r2, r1
 80068aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b0:	2210      	movs	r2, #16
 80068b2:	4013      	ands	r3, r2
 80068b4:	d00b      	beq.n	80068ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	4a2c      	ldr	r2, [pc, #176]	; (8006970 <UART_AdvFeatureConfig+0x154>)
 80068be:	4013      	ands	r3, r2
 80068c0:	0019      	movs	r1, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	430a      	orrs	r2, r1
 80068cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d2:	2220      	movs	r2, #32
 80068d4:	4013      	ands	r3, r2
 80068d6:	d00b      	beq.n	80068f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	4a25      	ldr	r2, [pc, #148]	; (8006974 <UART_AdvFeatureConfig+0x158>)
 80068e0:	4013      	ands	r3, r2
 80068e2:	0019      	movs	r1, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	430a      	orrs	r2, r1
 80068ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f4:	2240      	movs	r2, #64	; 0x40
 80068f6:	4013      	ands	r3, r2
 80068f8:	d01d      	beq.n	8006936 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	4a1d      	ldr	r2, [pc, #116]	; (8006978 <UART_AdvFeatureConfig+0x15c>)
 8006902:	4013      	ands	r3, r2
 8006904:	0019      	movs	r1, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	430a      	orrs	r2, r1
 8006910:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006916:	2380      	movs	r3, #128	; 0x80
 8006918:	035b      	lsls	r3, r3, #13
 800691a:	429a      	cmp	r2, r3
 800691c:	d10b      	bne.n	8006936 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	4a15      	ldr	r2, [pc, #84]	; (800697c <UART_AdvFeatureConfig+0x160>)
 8006926:	4013      	ands	r3, r2
 8006928:	0019      	movs	r1, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	430a      	orrs	r2, r1
 8006934:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693a:	2280      	movs	r2, #128	; 0x80
 800693c:	4013      	ands	r3, r2
 800693e:	d00b      	beq.n	8006958 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	4a0e      	ldr	r2, [pc, #56]	; (8006980 <UART_AdvFeatureConfig+0x164>)
 8006948:	4013      	ands	r3, r2
 800694a:	0019      	movs	r1, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	430a      	orrs	r2, r1
 8006956:	605a      	str	r2, [r3, #4]
  }
}
 8006958:	46c0      	nop			; (mov r8, r8)
 800695a:	46bd      	mov	sp, r7
 800695c:	b002      	add	sp, #8
 800695e:	bd80      	pop	{r7, pc}
 8006960:	ffff7fff 	.word	0xffff7fff
 8006964:	fffdffff 	.word	0xfffdffff
 8006968:	fffeffff 	.word	0xfffeffff
 800696c:	fffbffff 	.word	0xfffbffff
 8006970:	ffffefff 	.word	0xffffefff
 8006974:	ffffdfff 	.word	0xffffdfff
 8006978:	ffefffff 	.word	0xffefffff
 800697c:	ff9fffff 	.word	0xff9fffff
 8006980:	fff7ffff 	.word	0xfff7ffff

08006984 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b092      	sub	sp, #72	; 0x48
 8006988:	af02      	add	r7, sp, #8
 800698a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2290      	movs	r2, #144	; 0x90
 8006990:	2100      	movs	r1, #0
 8006992:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006994:	f7fb f8ec 	bl	8001b70 <HAL_GetTick>
 8006998:	0003      	movs	r3, r0
 800699a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2208      	movs	r2, #8
 80069a4:	4013      	ands	r3, r2
 80069a6:	2b08      	cmp	r3, #8
 80069a8:	d12d      	bne.n	8006a06 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ac:	2280      	movs	r2, #128	; 0x80
 80069ae:	0391      	lsls	r1, r2, #14
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	4a47      	ldr	r2, [pc, #284]	; (8006ad0 <UART_CheckIdleState+0x14c>)
 80069b4:	9200      	str	r2, [sp, #0]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f000 f88e 	bl	8006ad8 <UART_WaitOnFlagUntilTimeout>
 80069bc:	1e03      	subs	r3, r0, #0
 80069be:	d022      	beq.n	8006a06 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069c0:	f3ef 8310 	mrs	r3, PRIMASK
 80069c4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80069c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80069c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80069ca:	2301      	movs	r3, #1
 80069cc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d0:	f383 8810 	msr	PRIMASK, r3
}
 80069d4:	46c0      	nop			; (mov r8, r8)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2180      	movs	r1, #128	; 0x80
 80069e2:	438a      	bics	r2, r1
 80069e4:	601a      	str	r2, [r3, #0]
 80069e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ec:	f383 8810 	msr	PRIMASK, r3
}
 80069f0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2288      	movs	r2, #136	; 0x88
 80069f6:	2120      	movs	r1, #32
 80069f8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2284      	movs	r2, #132	; 0x84
 80069fe:	2100      	movs	r1, #0
 8006a00:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e060      	b.n	8006ac8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2204      	movs	r2, #4
 8006a0e:	4013      	ands	r3, r2
 8006a10:	2b04      	cmp	r3, #4
 8006a12:	d146      	bne.n	8006aa2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a16:	2280      	movs	r2, #128	; 0x80
 8006a18:	03d1      	lsls	r1, r2, #15
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	4a2c      	ldr	r2, [pc, #176]	; (8006ad0 <UART_CheckIdleState+0x14c>)
 8006a1e:	9200      	str	r2, [sp, #0]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f000 f859 	bl	8006ad8 <UART_WaitOnFlagUntilTimeout>
 8006a26:	1e03      	subs	r3, r0, #0
 8006a28:	d03b      	beq.n	8006aa2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a2a:	f3ef 8310 	mrs	r3, PRIMASK
 8006a2e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a30:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a32:	637b      	str	r3, [r7, #52]	; 0x34
 8006a34:	2301      	movs	r3, #1
 8006a36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	f383 8810 	msr	PRIMASK, r3
}
 8006a3e:	46c0      	nop			; (mov r8, r8)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4922      	ldr	r1, [pc, #136]	; (8006ad4 <UART_CheckIdleState+0x150>)
 8006a4c:	400a      	ands	r2, r1
 8006a4e:	601a      	str	r2, [r3, #0]
 8006a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	f383 8810 	msr	PRIMASK, r3
}
 8006a5a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a5c:	f3ef 8310 	mrs	r3, PRIMASK
 8006a60:	61bb      	str	r3, [r7, #24]
  return(result);
 8006a62:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a64:	633b      	str	r3, [r7, #48]	; 0x30
 8006a66:	2301      	movs	r3, #1
 8006a68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	f383 8810 	msr	PRIMASK, r3
}
 8006a70:	46c0      	nop			; (mov r8, r8)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	689a      	ldr	r2, [r3, #8]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2101      	movs	r1, #1
 8006a7e:	438a      	bics	r2, r1
 8006a80:	609a      	str	r2, [r3, #8]
 8006a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a84:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a86:	6a3b      	ldr	r3, [r7, #32]
 8006a88:	f383 8810 	msr	PRIMASK, r3
}
 8006a8c:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	228c      	movs	r2, #140	; 0x8c
 8006a92:	2120      	movs	r1, #32
 8006a94:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2284      	movs	r2, #132	; 0x84
 8006a9a:	2100      	movs	r1, #0
 8006a9c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e012      	b.n	8006ac8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2288      	movs	r2, #136	; 0x88
 8006aa6:	2120      	movs	r1, #32
 8006aa8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	228c      	movs	r2, #140	; 0x8c
 8006aae:	2120      	movs	r1, #32
 8006ab0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2284      	movs	r2, #132	; 0x84
 8006ac2:	2100      	movs	r1, #0
 8006ac4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	0018      	movs	r0, r3
 8006aca:	46bd      	mov	sp, r7
 8006acc:	b010      	add	sp, #64	; 0x40
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	01ffffff 	.word	0x01ffffff
 8006ad4:	fffffedf 	.word	0xfffffedf

08006ad8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	603b      	str	r3, [r7, #0]
 8006ae4:	1dfb      	adds	r3, r7, #7
 8006ae6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ae8:	e051      	b.n	8006b8e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	3301      	adds	r3, #1
 8006aee:	d04e      	beq.n	8006b8e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006af0:	f7fb f83e 	bl	8001b70 <HAL_GetTick>
 8006af4:	0002      	movs	r2, r0
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	69ba      	ldr	r2, [r7, #24]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d302      	bcc.n	8006b06 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d101      	bne.n	8006b0a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e051      	b.n	8006bae <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2204      	movs	r2, #4
 8006b12:	4013      	ands	r3, r2
 8006b14:	d03b      	beq.n	8006b8e <UART_WaitOnFlagUntilTimeout+0xb6>
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	2b80      	cmp	r3, #128	; 0x80
 8006b1a:	d038      	beq.n	8006b8e <UART_WaitOnFlagUntilTimeout+0xb6>
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	2b40      	cmp	r3, #64	; 0x40
 8006b20:	d035      	beq.n	8006b8e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	69db      	ldr	r3, [r3, #28]
 8006b28:	2208      	movs	r2, #8
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	2b08      	cmp	r3, #8
 8006b2e:	d111      	bne.n	8006b54 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2208      	movs	r2, #8
 8006b36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	0018      	movs	r0, r3
 8006b3c:	f000 f960 	bl	8006e00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2290      	movs	r2, #144	; 0x90
 8006b44:	2108      	movs	r1, #8
 8006b46:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2284      	movs	r2, #132	; 0x84
 8006b4c:	2100      	movs	r1, #0
 8006b4e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e02c      	b.n	8006bae <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	69da      	ldr	r2, [r3, #28]
 8006b5a:	2380      	movs	r3, #128	; 0x80
 8006b5c:	011b      	lsls	r3, r3, #4
 8006b5e:	401a      	ands	r2, r3
 8006b60:	2380      	movs	r3, #128	; 0x80
 8006b62:	011b      	lsls	r3, r3, #4
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d112      	bne.n	8006b8e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2280      	movs	r2, #128	; 0x80
 8006b6e:	0112      	lsls	r2, r2, #4
 8006b70:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	0018      	movs	r0, r3
 8006b76:	f000 f943 	bl	8006e00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2290      	movs	r2, #144	; 0x90
 8006b7e:	2120      	movs	r1, #32
 8006b80:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2284      	movs	r2, #132	; 0x84
 8006b86:	2100      	movs	r1, #0
 8006b88:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e00f      	b.n	8006bae <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	69db      	ldr	r3, [r3, #28]
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	4013      	ands	r3, r2
 8006b98:	68ba      	ldr	r2, [r7, #8]
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	425a      	negs	r2, r3
 8006b9e:	4153      	adcs	r3, r2
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	001a      	movs	r2, r3
 8006ba4:	1dfb      	adds	r3, r7, #7
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d09e      	beq.n	8006aea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	0018      	movs	r0, r3
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	b004      	add	sp, #16
 8006bb4:	bd80      	pop	{r7, pc}
	...

08006bb8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b098      	sub	sp, #96	; 0x60
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	1dbb      	adds	r3, r7, #6
 8006bc4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	68ba      	ldr	r2, [r7, #8]
 8006bca:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	1dba      	adds	r2, r7, #6
 8006bd0:	215c      	movs	r1, #92	; 0x5c
 8006bd2:	8812      	ldrh	r2, [r2, #0]
 8006bd4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	1dba      	adds	r2, r7, #6
 8006bda:	215e      	movs	r1, #94	; 0x5e
 8006bdc:	8812      	ldrh	r2, [r2, #0]
 8006bde:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	689a      	ldr	r2, [r3, #8]
 8006bea:	2380      	movs	r3, #128	; 0x80
 8006bec:	015b      	lsls	r3, r3, #5
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d10d      	bne.n	8006c0e <UART_Start_Receive_IT+0x56>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d104      	bne.n	8006c04 <UART_Start_Receive_IT+0x4c>
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2260      	movs	r2, #96	; 0x60
 8006bfe:	497b      	ldr	r1, [pc, #492]	; (8006dec <UART_Start_Receive_IT+0x234>)
 8006c00:	5299      	strh	r1, [r3, r2]
 8006c02:	e02e      	b.n	8006c62 <UART_Start_Receive_IT+0xaa>
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2260      	movs	r2, #96	; 0x60
 8006c08:	21ff      	movs	r1, #255	; 0xff
 8006c0a:	5299      	strh	r1, [r3, r2]
 8006c0c:	e029      	b.n	8006c62 <UART_Start_Receive_IT+0xaa>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d10d      	bne.n	8006c32 <UART_Start_Receive_IT+0x7a>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d104      	bne.n	8006c28 <UART_Start_Receive_IT+0x70>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2260      	movs	r2, #96	; 0x60
 8006c22:	21ff      	movs	r1, #255	; 0xff
 8006c24:	5299      	strh	r1, [r3, r2]
 8006c26:	e01c      	b.n	8006c62 <UART_Start_Receive_IT+0xaa>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2260      	movs	r2, #96	; 0x60
 8006c2c:	217f      	movs	r1, #127	; 0x7f
 8006c2e:	5299      	strh	r1, [r3, r2]
 8006c30:	e017      	b.n	8006c62 <UART_Start_Receive_IT+0xaa>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	689a      	ldr	r2, [r3, #8]
 8006c36:	2380      	movs	r3, #128	; 0x80
 8006c38:	055b      	lsls	r3, r3, #21
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d10d      	bne.n	8006c5a <UART_Start_Receive_IT+0xa2>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d104      	bne.n	8006c50 <UART_Start_Receive_IT+0x98>
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2260      	movs	r2, #96	; 0x60
 8006c4a:	217f      	movs	r1, #127	; 0x7f
 8006c4c:	5299      	strh	r1, [r3, r2]
 8006c4e:	e008      	b.n	8006c62 <UART_Start_Receive_IT+0xaa>
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2260      	movs	r2, #96	; 0x60
 8006c54:	213f      	movs	r1, #63	; 0x3f
 8006c56:	5299      	strh	r1, [r3, r2]
 8006c58:	e003      	b.n	8006c62 <UART_Start_Receive_IT+0xaa>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2260      	movs	r2, #96	; 0x60
 8006c5e:	2100      	movs	r1, #0
 8006c60:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2290      	movs	r2, #144	; 0x90
 8006c66:	2100      	movs	r1, #0
 8006c68:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	228c      	movs	r2, #140	; 0x8c
 8006c6e:	2122      	movs	r1, #34	; 0x22
 8006c70:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c72:	f3ef 8310 	mrs	r3, PRIMASK
 8006c76:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8006c78:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c82:	f383 8810 	msr	PRIMASK, r3
}
 8006c86:	46c0      	nop			; (mov r8, r8)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	689a      	ldr	r2, [r3, #8]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2101      	movs	r1, #1
 8006c94:	430a      	orrs	r2, r1
 8006c96:	609a      	str	r2, [r3, #8]
 8006c98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c9a:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c9e:	f383 8810 	msr	PRIMASK, r3
}
 8006ca2:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006ca8:	2380      	movs	r3, #128	; 0x80
 8006caa:	059b      	lsls	r3, r3, #22
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d150      	bne.n	8006d52 <UART_Start_Receive_IT+0x19a>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2268      	movs	r2, #104	; 0x68
 8006cb4:	5a9b      	ldrh	r3, [r3, r2]
 8006cb6:	1dba      	adds	r2, r7, #6
 8006cb8:	8812      	ldrh	r2, [r2, #0]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d349      	bcc.n	8006d52 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	689a      	ldr	r2, [r3, #8]
 8006cc2:	2380      	movs	r3, #128	; 0x80
 8006cc4:	015b      	lsls	r3, r3, #5
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d107      	bne.n	8006cda <UART_Start_Receive_IT+0x122>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d103      	bne.n	8006cda <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	4a46      	ldr	r2, [pc, #280]	; (8006df0 <UART_Start_Receive_IT+0x238>)
 8006cd6:	675a      	str	r2, [r3, #116]	; 0x74
 8006cd8:	e002      	b.n	8006ce0 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	4a45      	ldr	r2, [pc, #276]	; (8006df4 <UART_Start_Receive_IT+0x23c>)
 8006cde:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d019      	beq.n	8006d1c <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ce8:	f3ef 8310 	mrs	r3, PRIMASK
 8006cec:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cf0:	65bb      	str	r3, [r7, #88]	; 0x58
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf8:	f383 8810 	msr	PRIMASK, r3
}
 8006cfc:	46c0      	nop			; (mov r8, r8)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2180      	movs	r1, #128	; 0x80
 8006d0a:	0049      	lsls	r1, r1, #1
 8006d0c:	430a      	orrs	r2, r1
 8006d0e:	601a      	str	r2, [r3, #0]
 8006d10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d12:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d16:	f383 8810 	msr	PRIMASK, r3
}
 8006d1a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d1c:	f3ef 8310 	mrs	r3, PRIMASK
 8006d20:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006d24:	657b      	str	r3, [r7, #84]	; 0x54
 8006d26:	2301      	movs	r3, #1
 8006d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d2c:	f383 8810 	msr	PRIMASK, r3
}
 8006d30:	46c0      	nop			; (mov r8, r8)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	689a      	ldr	r2, [r3, #8]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2180      	movs	r1, #128	; 0x80
 8006d3e:	0549      	lsls	r1, r1, #21
 8006d40:	430a      	orrs	r2, r1
 8006d42:	609a      	str	r2, [r3, #8]
 8006d44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d46:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4a:	f383 8810 	msr	PRIMASK, r3
}
 8006d4e:	46c0      	nop			; (mov r8, r8)
 8006d50:	e047      	b.n	8006de2 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	689a      	ldr	r2, [r3, #8]
 8006d56:	2380      	movs	r3, #128	; 0x80
 8006d58:	015b      	lsls	r3, r3, #5
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d107      	bne.n	8006d6e <UART_Start_Receive_IT+0x1b6>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d103      	bne.n	8006d6e <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	4a23      	ldr	r2, [pc, #140]	; (8006df8 <UART_Start_Receive_IT+0x240>)
 8006d6a:	675a      	str	r2, [r3, #116]	; 0x74
 8006d6c:	e002      	b.n	8006d74 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	4a22      	ldr	r2, [pc, #136]	; (8006dfc <UART_Start_Receive_IT+0x244>)
 8006d72:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d019      	beq.n	8006db0 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d7c:	f3ef 8310 	mrs	r3, PRIMASK
 8006d80:	61fb      	str	r3, [r7, #28]
  return(result);
 8006d82:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006d84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d86:	2301      	movs	r3, #1
 8006d88:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	f383 8810 	msr	PRIMASK, r3
}
 8006d90:	46c0      	nop			; (mov r8, r8)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2190      	movs	r1, #144	; 0x90
 8006d9e:	0049      	lsls	r1, r1, #1
 8006da0:	430a      	orrs	r2, r1
 8006da2:	601a      	str	r2, [r3, #0]
 8006da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006da6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006daa:	f383 8810 	msr	PRIMASK, r3
}
 8006dae:	e018      	b.n	8006de2 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006db0:	f3ef 8310 	mrs	r3, PRIMASK
 8006db4:	613b      	str	r3, [r7, #16]
  return(result);
 8006db6:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006db8:	653b      	str	r3, [r7, #80]	; 0x50
 8006dba:	2301      	movs	r3, #1
 8006dbc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	f383 8810 	msr	PRIMASK, r3
}
 8006dc4:	46c0      	nop			; (mov r8, r8)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2120      	movs	r1, #32
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	601a      	str	r2, [r3, #0]
 8006dd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dd8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	f383 8810 	msr	PRIMASK, r3
}
 8006de0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	0018      	movs	r0, r3
 8006de6:	46bd      	mov	sp, r7
 8006de8:	b018      	add	sp, #96	; 0x60
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	000001ff 	.word	0x000001ff
 8006df0:	0800761d 	.word	0x0800761d
 8006df4:	080072dd 	.word	0x080072dd
 8006df8:	08007119 	.word	0x08007119
 8006dfc:	08006f55 	.word	0x08006f55

08006e00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b08e      	sub	sp, #56	; 0x38
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e08:	f3ef 8310 	mrs	r3, PRIMASK
 8006e0c:	617b      	str	r3, [r7, #20]
  return(result);
 8006e0e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e10:	637b      	str	r3, [r7, #52]	; 0x34
 8006e12:	2301      	movs	r3, #1
 8006e14:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	f383 8810 	msr	PRIMASK, r3
}
 8006e1c:	46c0      	nop			; (mov r8, r8)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4926      	ldr	r1, [pc, #152]	; (8006ec4 <UART_EndRxTransfer+0xc4>)
 8006e2a:	400a      	ands	r2, r1
 8006e2c:	601a      	str	r2, [r3, #0]
 8006e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	f383 8810 	msr	PRIMASK, r3
}
 8006e38:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e3a:	f3ef 8310 	mrs	r3, PRIMASK
 8006e3e:	623b      	str	r3, [r7, #32]
  return(result);
 8006e40:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e42:	633b      	str	r3, [r7, #48]	; 0x30
 8006e44:	2301      	movs	r3, #1
 8006e46:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4a:	f383 8810 	msr	PRIMASK, r3
}
 8006e4e:	46c0      	nop			; (mov r8, r8)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	689a      	ldr	r2, [r3, #8]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	491b      	ldr	r1, [pc, #108]	; (8006ec8 <UART_EndRxTransfer+0xc8>)
 8006e5c:	400a      	ands	r2, r1
 8006e5e:	609a      	str	r2, [r3, #8]
 8006e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e62:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e66:	f383 8810 	msr	PRIMASK, r3
}
 8006e6a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d118      	bne.n	8006ea6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e74:	f3ef 8310 	mrs	r3, PRIMASK
 8006e78:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e7a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e7e:	2301      	movs	r3, #1
 8006e80:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f383 8810 	msr	PRIMASK, r3
}
 8006e88:	46c0      	nop			; (mov r8, r8)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2110      	movs	r1, #16
 8006e96:	438a      	bics	r2, r1
 8006e98:	601a      	str	r2, [r3, #0]
 8006e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	f383 8810 	msr	PRIMASK, r3
}
 8006ea4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	228c      	movs	r2, #140	; 0x8c
 8006eaa:	2120      	movs	r1, #32
 8006eac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006eba:	46c0      	nop			; (mov r8, r8)
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	b00e      	add	sp, #56	; 0x38
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	46c0      	nop			; (mov r8, r8)
 8006ec4:	fffffedf 	.word	0xfffffedf
 8006ec8:	effffffe 	.word	0xeffffffe

08006ecc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	225e      	movs	r2, #94	; 0x5e
 8006ede:	2100      	movs	r1, #0
 8006ee0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2256      	movs	r2, #86	; 0x56
 8006ee6:	2100      	movs	r1, #0
 8006ee8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	0018      	movs	r0, r3
 8006eee:	f7ff f9c3 	bl	8006278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ef2:	46c0      	nop			; (mov r8, r8)
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	b004      	add	sp, #16
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b086      	sub	sp, #24
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f02:	f3ef 8310 	mrs	r3, PRIMASK
 8006f06:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f08:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f0a:	617b      	str	r3, [r7, #20]
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f383 8810 	msr	PRIMASK, r3
}
 8006f16:	46c0      	nop			; (mov r8, r8)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2140      	movs	r1, #64	; 0x40
 8006f24:	438a      	bics	r2, r1
 8006f26:	601a      	str	r2, [r3, #0]
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	f383 8810 	msr	PRIMASK, r3
}
 8006f32:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2288      	movs	r2, #136	; 0x88
 8006f38:	2120      	movs	r1, #32
 8006f3a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	0018      	movs	r0, r3
 8006f46:	f7ff f98f 	bl	8006268 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f4a:	46c0      	nop			; (mov r8, r8)
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	b006      	add	sp, #24
 8006f50:	bd80      	pop	{r7, pc}
	...

08006f54 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b094      	sub	sp, #80	; 0x50
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006f5c:	204e      	movs	r0, #78	; 0x4e
 8006f5e:	183b      	adds	r3, r7, r0
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	2160      	movs	r1, #96	; 0x60
 8006f64:	5a52      	ldrh	r2, [r2, r1]
 8006f66:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	228c      	movs	r2, #140	; 0x8c
 8006f6c:	589b      	ldr	r3, [r3, r2]
 8006f6e:	2b22      	cmp	r3, #34	; 0x22
 8006f70:	d000      	beq.n	8006f74 <UART_RxISR_8BIT+0x20>
 8006f72:	e0bf      	b.n	80070f4 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f7a:	214c      	movs	r1, #76	; 0x4c
 8006f7c:	187b      	adds	r3, r7, r1
 8006f7e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006f80:	187b      	adds	r3, r7, r1
 8006f82:	881b      	ldrh	r3, [r3, #0]
 8006f84:	b2da      	uxtb	r2, r3
 8006f86:	183b      	adds	r3, r7, r0
 8006f88:	881b      	ldrh	r3, [r3, #0]
 8006f8a:	b2d9      	uxtb	r1, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f90:	400a      	ands	r2, r1
 8006f92:	b2d2      	uxtb	r2, r2
 8006f94:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f9a:	1c5a      	adds	r2, r3, #1
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	225e      	movs	r2, #94	; 0x5e
 8006fa4:	5a9b      	ldrh	r3, [r3, r2]
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	b299      	uxth	r1, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	225e      	movs	r2, #94	; 0x5e
 8006fb0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	225e      	movs	r2, #94	; 0x5e
 8006fb6:	5a9b      	ldrh	r3, [r3, r2]
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d000      	beq.n	8006fc0 <UART_RxISR_8BIT+0x6c>
 8006fbe:	e0a1      	b.n	8007104 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fc0:	f3ef 8310 	mrs	r3, PRIMASK
 8006fc4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fca:	2301      	movs	r3, #1
 8006fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd0:	f383 8810 	msr	PRIMASK, r3
}
 8006fd4:	46c0      	nop			; (mov r8, r8)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	494a      	ldr	r1, [pc, #296]	; (800710c <UART_RxISR_8BIT+0x1b8>)
 8006fe2:	400a      	ands	r2, r1
 8006fe4:	601a      	str	r2, [r3, #0]
 8006fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fec:	f383 8810 	msr	PRIMASK, r3
}
 8006ff0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ff2:	f3ef 8310 	mrs	r3, PRIMASK
 8006ff6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ffa:	647b      	str	r3, [r7, #68]	; 0x44
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007002:	f383 8810 	msr	PRIMASK, r3
}
 8007006:	46c0      	nop			; (mov r8, r8)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	689a      	ldr	r2, [r3, #8]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2101      	movs	r1, #1
 8007014:	438a      	bics	r2, r1
 8007016:	609a      	str	r2, [r3, #8]
 8007018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800701a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800701c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701e:	f383 8810 	msr	PRIMASK, r3
}
 8007022:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	228c      	movs	r2, #140	; 0x8c
 8007028:	2120      	movs	r1, #32
 800702a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a34      	ldr	r2, [pc, #208]	; (8007110 <UART_RxISR_8BIT+0x1bc>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d01f      	beq.n	8007082 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	685a      	ldr	r2, [r3, #4]
 8007048:	2380      	movs	r3, #128	; 0x80
 800704a:	041b      	lsls	r3, r3, #16
 800704c:	4013      	ands	r3, r2
 800704e:	d018      	beq.n	8007082 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007050:	f3ef 8310 	mrs	r3, PRIMASK
 8007054:	61bb      	str	r3, [r7, #24]
  return(result);
 8007056:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007058:	643b      	str	r3, [r7, #64]	; 0x40
 800705a:	2301      	movs	r3, #1
 800705c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	f383 8810 	msr	PRIMASK, r3
}
 8007064:	46c0      	nop			; (mov r8, r8)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4928      	ldr	r1, [pc, #160]	; (8007114 <UART_RxISR_8BIT+0x1c0>)
 8007072:	400a      	ands	r2, r1
 8007074:	601a      	str	r2, [r3, #0]
 8007076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007078:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800707a:	6a3b      	ldr	r3, [r7, #32]
 800707c:	f383 8810 	msr	PRIMASK, r3
}
 8007080:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007086:	2b01      	cmp	r3, #1
 8007088:	d12f      	bne.n	80070ea <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007090:	f3ef 8310 	mrs	r3, PRIMASK
 8007094:	60fb      	str	r3, [r7, #12]
  return(result);
 8007096:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007098:	63fb      	str	r3, [r7, #60]	; 0x3c
 800709a:	2301      	movs	r3, #1
 800709c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	f383 8810 	msr	PRIMASK, r3
}
 80070a4:	46c0      	nop			; (mov r8, r8)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2110      	movs	r1, #16
 80070b2:	438a      	bics	r2, r1
 80070b4:	601a      	str	r2, [r3, #0]
 80070b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	f383 8810 	msr	PRIMASK, r3
}
 80070c0:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	69db      	ldr	r3, [r3, #28]
 80070c8:	2210      	movs	r2, #16
 80070ca:	4013      	ands	r3, r2
 80070cc:	2b10      	cmp	r3, #16
 80070ce:	d103      	bne.n	80070d8 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2210      	movs	r2, #16
 80070d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	225c      	movs	r2, #92	; 0x5c
 80070dc:	5a9a      	ldrh	r2, [r3, r2]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	0011      	movs	r1, r2
 80070e2:	0018      	movs	r0, r3
 80070e4:	f7ff f8d0 	bl	8006288 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80070e8:	e00c      	b.n	8007104 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	0018      	movs	r0, r3
 80070ee:	f7fa f96d 	bl	80013cc <HAL_UART_RxCpltCallback>
}
 80070f2:	e007      	b.n	8007104 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	699a      	ldr	r2, [r3, #24]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2108      	movs	r1, #8
 8007100:	430a      	orrs	r2, r1
 8007102:	619a      	str	r2, [r3, #24]
}
 8007104:	46c0      	nop			; (mov r8, r8)
 8007106:	46bd      	mov	sp, r7
 8007108:	b014      	add	sp, #80	; 0x50
 800710a:	bd80      	pop	{r7, pc}
 800710c:	fffffedf 	.word	0xfffffedf
 8007110:	40008000 	.word	0x40008000
 8007114:	fbffffff 	.word	0xfbffffff

08007118 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b094      	sub	sp, #80	; 0x50
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007120:	204e      	movs	r0, #78	; 0x4e
 8007122:	183b      	adds	r3, r7, r0
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	2160      	movs	r1, #96	; 0x60
 8007128:	5a52      	ldrh	r2, [r2, r1]
 800712a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	228c      	movs	r2, #140	; 0x8c
 8007130:	589b      	ldr	r3, [r3, r2]
 8007132:	2b22      	cmp	r3, #34	; 0x22
 8007134:	d000      	beq.n	8007138 <UART_RxISR_16BIT+0x20>
 8007136:	e0bf      	b.n	80072b8 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800713e:	214c      	movs	r1, #76	; 0x4c
 8007140:	187b      	adds	r3, r7, r1
 8007142:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007148:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800714a:	187b      	adds	r3, r7, r1
 800714c:	183a      	adds	r2, r7, r0
 800714e:	881b      	ldrh	r3, [r3, #0]
 8007150:	8812      	ldrh	r2, [r2, #0]
 8007152:	4013      	ands	r3, r2
 8007154:	b29a      	uxth	r2, r3
 8007156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007158:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800715e:	1c9a      	adds	r2, r3, #2
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	225e      	movs	r2, #94	; 0x5e
 8007168:	5a9b      	ldrh	r3, [r3, r2]
 800716a:	b29b      	uxth	r3, r3
 800716c:	3b01      	subs	r3, #1
 800716e:	b299      	uxth	r1, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	225e      	movs	r2, #94	; 0x5e
 8007174:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	225e      	movs	r2, #94	; 0x5e
 800717a:	5a9b      	ldrh	r3, [r3, r2]
 800717c:	b29b      	uxth	r3, r3
 800717e:	2b00      	cmp	r3, #0
 8007180:	d000      	beq.n	8007184 <UART_RxISR_16BIT+0x6c>
 8007182:	e0a1      	b.n	80072c8 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007184:	f3ef 8310 	mrs	r3, PRIMASK
 8007188:	623b      	str	r3, [r7, #32]
  return(result);
 800718a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800718c:	647b      	str	r3, [r7, #68]	; 0x44
 800718e:	2301      	movs	r3, #1
 8007190:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007194:	f383 8810 	msr	PRIMASK, r3
}
 8007198:	46c0      	nop			; (mov r8, r8)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	494a      	ldr	r1, [pc, #296]	; (80072d0 <UART_RxISR_16BIT+0x1b8>)
 80071a6:	400a      	ands	r2, r1
 80071a8:	601a      	str	r2, [r3, #0]
 80071aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071ac:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b0:	f383 8810 	msr	PRIMASK, r3
}
 80071b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071b6:	f3ef 8310 	mrs	r3, PRIMASK
 80071ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80071bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071be:	643b      	str	r3, [r7, #64]	; 0x40
 80071c0:	2301      	movs	r3, #1
 80071c2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c6:	f383 8810 	msr	PRIMASK, r3
}
 80071ca:	46c0      	nop			; (mov r8, r8)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	689a      	ldr	r2, [r3, #8]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2101      	movs	r1, #1
 80071d8:	438a      	bics	r2, r1
 80071da:	609a      	str	r2, [r3, #8]
 80071dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071de:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e2:	f383 8810 	msr	PRIMASK, r3
}
 80071e6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	228c      	movs	r2, #140	; 0x8c
 80071ec:	2120      	movs	r1, #32
 80071ee:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a34      	ldr	r2, [pc, #208]	; (80072d4 <UART_RxISR_16BIT+0x1bc>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d01f      	beq.n	8007246 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	685a      	ldr	r2, [r3, #4]
 800720c:	2380      	movs	r3, #128	; 0x80
 800720e:	041b      	lsls	r3, r3, #16
 8007210:	4013      	ands	r3, r2
 8007212:	d018      	beq.n	8007246 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007214:	f3ef 8310 	mrs	r3, PRIMASK
 8007218:	617b      	str	r3, [r7, #20]
  return(result);
 800721a:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800721c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800721e:	2301      	movs	r3, #1
 8007220:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	f383 8810 	msr	PRIMASK, r3
}
 8007228:	46c0      	nop			; (mov r8, r8)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4928      	ldr	r1, [pc, #160]	; (80072d8 <UART_RxISR_16BIT+0x1c0>)
 8007236:	400a      	ands	r2, r1
 8007238:	601a      	str	r2, [r3, #0]
 800723a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800723c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	f383 8810 	msr	PRIMASK, r3
}
 8007244:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800724a:	2b01      	cmp	r3, #1
 800724c:	d12f      	bne.n	80072ae <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007254:	f3ef 8310 	mrs	r3, PRIMASK
 8007258:	60bb      	str	r3, [r7, #8]
  return(result);
 800725a:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800725c:	63bb      	str	r3, [r7, #56]	; 0x38
 800725e:	2301      	movs	r3, #1
 8007260:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f383 8810 	msr	PRIMASK, r3
}
 8007268:	46c0      	nop			; (mov r8, r8)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2110      	movs	r1, #16
 8007276:	438a      	bics	r2, r1
 8007278:	601a      	str	r2, [r3, #0]
 800727a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800727c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	f383 8810 	msr	PRIMASK, r3
}
 8007284:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	69db      	ldr	r3, [r3, #28]
 800728c:	2210      	movs	r2, #16
 800728e:	4013      	ands	r3, r2
 8007290:	2b10      	cmp	r3, #16
 8007292:	d103      	bne.n	800729c <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2210      	movs	r2, #16
 800729a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	225c      	movs	r2, #92	; 0x5c
 80072a0:	5a9a      	ldrh	r2, [r3, r2]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	0011      	movs	r1, r2
 80072a6:	0018      	movs	r0, r3
 80072a8:	f7fe ffee 	bl	8006288 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80072ac:	e00c      	b.n	80072c8 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	0018      	movs	r0, r3
 80072b2:	f7fa f88b 	bl	80013cc <HAL_UART_RxCpltCallback>
}
 80072b6:	e007      	b.n	80072c8 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	699a      	ldr	r2, [r3, #24]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2108      	movs	r1, #8
 80072c4:	430a      	orrs	r2, r1
 80072c6:	619a      	str	r2, [r3, #24]
}
 80072c8:	46c0      	nop			; (mov r8, r8)
 80072ca:	46bd      	mov	sp, r7
 80072cc:	b014      	add	sp, #80	; 0x50
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	fffffedf 	.word	0xfffffedf
 80072d4:	40008000 	.word	0x40008000
 80072d8:	fbffffff 	.word	0xfbffffff

080072dc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b0a0      	sub	sp, #128	; 0x80
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80072e4:	237a      	movs	r3, #122	; 0x7a
 80072e6:	18fb      	adds	r3, r7, r3
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	2160      	movs	r1, #96	; 0x60
 80072ec:	5a52      	ldrh	r2, [r2, r1]
 80072ee:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	69db      	ldr	r3, [r3, #28]
 80072f6:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	673b      	str	r3, [r7, #112]	; 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	228c      	movs	r2, #140	; 0x8c
 800730c:	589b      	ldr	r3, [r3, r2]
 800730e:	2b22      	cmp	r3, #34	; 0x22
 8007310:	d000      	beq.n	8007314 <UART_RxISR_8BIT_FIFOEN+0x38>
 8007312:	e16a      	b.n	80075ea <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007314:	236e      	movs	r3, #110	; 0x6e
 8007316:	18fb      	adds	r3, r7, r3
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	2168      	movs	r1, #104	; 0x68
 800731c:	5a52      	ldrh	r2, [r2, r1]
 800731e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007320:	e111      	b.n	8007546 <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007328:	216c      	movs	r1, #108	; 0x6c
 800732a:	187b      	adds	r3, r7, r1
 800732c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800732e:	187b      	adds	r3, r7, r1
 8007330:	881b      	ldrh	r3, [r3, #0]
 8007332:	b2da      	uxtb	r2, r3
 8007334:	237a      	movs	r3, #122	; 0x7a
 8007336:	18fb      	adds	r3, r7, r3
 8007338:	881b      	ldrh	r3, [r3, #0]
 800733a:	b2d9      	uxtb	r1, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007340:	400a      	ands	r2, r1
 8007342:	b2d2      	uxtb	r2, r2
 8007344:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800734a:	1c5a      	adds	r2, r3, #1
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	225e      	movs	r2, #94	; 0x5e
 8007354:	5a9b      	ldrh	r3, [r3, r2]
 8007356:	b29b      	uxth	r3, r3
 8007358:	3b01      	subs	r3, #1
 800735a:	b299      	uxth	r1, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	225e      	movs	r2, #94	; 0x5e
 8007360:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	69db      	ldr	r3, [r3, #28]
 8007368:	67fb      	str	r3, [r7, #124]	; 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800736a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800736c:	2207      	movs	r2, #7
 800736e:	4013      	ands	r3, r2
 8007370:	d049      	beq.n	8007406 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007372:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007374:	2201      	movs	r2, #1
 8007376:	4013      	ands	r3, r2
 8007378:	d010      	beq.n	800739c <UART_RxISR_8BIT_FIFOEN+0xc0>
 800737a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800737c:	2380      	movs	r3, #128	; 0x80
 800737e:	005b      	lsls	r3, r3, #1
 8007380:	4013      	ands	r3, r2
 8007382:	d00b      	beq.n	800739c <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2201      	movs	r2, #1
 800738a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2290      	movs	r2, #144	; 0x90
 8007390:	589b      	ldr	r3, [r3, r2]
 8007392:	2201      	movs	r2, #1
 8007394:	431a      	orrs	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2190      	movs	r1, #144	; 0x90
 800739a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800739c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800739e:	2202      	movs	r2, #2
 80073a0:	4013      	ands	r3, r2
 80073a2:	d00f      	beq.n	80073c4 <UART_RxISR_8BIT_FIFOEN+0xe8>
 80073a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073a6:	2201      	movs	r2, #1
 80073a8:	4013      	ands	r3, r2
 80073aa:	d00b      	beq.n	80073c4 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2202      	movs	r2, #2
 80073b2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2290      	movs	r2, #144	; 0x90
 80073b8:	589b      	ldr	r3, [r3, r2]
 80073ba:	2204      	movs	r2, #4
 80073bc:	431a      	orrs	r2, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2190      	movs	r1, #144	; 0x90
 80073c2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80073c6:	2204      	movs	r2, #4
 80073c8:	4013      	ands	r3, r2
 80073ca:	d00f      	beq.n	80073ec <UART_RxISR_8BIT_FIFOEN+0x110>
 80073cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073ce:	2201      	movs	r2, #1
 80073d0:	4013      	ands	r3, r2
 80073d2:	d00b      	beq.n	80073ec <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2204      	movs	r2, #4
 80073da:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2290      	movs	r2, #144	; 0x90
 80073e0:	589b      	ldr	r3, [r3, r2]
 80073e2:	2202      	movs	r2, #2
 80073e4:	431a      	orrs	r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2190      	movs	r1, #144	; 0x90
 80073ea:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2290      	movs	r2, #144	; 0x90
 80073f0:	589b      	ldr	r3, [r3, r2]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d007      	beq.n	8007406 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	0018      	movs	r0, r3
 80073fa:	f7fe ff3d 	bl	8006278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2290      	movs	r2, #144	; 0x90
 8007402:	2100      	movs	r1, #0
 8007404:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	225e      	movs	r2, #94	; 0x5e
 800740a:	5a9b      	ldrh	r3, [r3, r2]
 800740c:	b29b      	uxth	r3, r3
 800740e:	2b00      	cmp	r3, #0
 8007410:	d000      	beq.n	8007414 <UART_RxISR_8BIT_FIFOEN+0x138>
 8007412:	e098      	b.n	8007546 <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007414:	f3ef 8310 	mrs	r3, PRIMASK
 8007418:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800741a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800741c:	66bb      	str	r3, [r7, #104]	; 0x68
 800741e:	2301      	movs	r3, #1
 8007420:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007424:	f383 8810 	msr	PRIMASK, r3
}
 8007428:	46c0      	nop			; (mov r8, r8)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4973      	ldr	r1, [pc, #460]	; (8007604 <UART_RxISR_8BIT_FIFOEN+0x328>)
 8007436:	400a      	ands	r2, r1
 8007438:	601a      	str	r2, [r3, #0]
 800743a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800743c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800743e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007440:	f383 8810 	msr	PRIMASK, r3
}
 8007444:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007446:	f3ef 8310 	mrs	r3, PRIMASK
 800744a:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 800744c:	6c7b      	ldr	r3, [r7, #68]	; 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800744e:	667b      	str	r3, [r7, #100]	; 0x64
 8007450:	2301      	movs	r3, #1
 8007452:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007456:	f383 8810 	msr	PRIMASK, r3
}
 800745a:	46c0      	nop			; (mov r8, r8)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	689a      	ldr	r2, [r3, #8]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4968      	ldr	r1, [pc, #416]	; (8007608 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8007468:	400a      	ands	r2, r1
 800746a:	609a      	str	r2, [r3, #8]
 800746c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800746e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007472:	f383 8810 	msr	PRIMASK, r3
}
 8007476:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	228c      	movs	r2, #140	; 0x8c
 800747c:	2120      	movs	r1, #32
 800747e:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a5e      	ldr	r2, [pc, #376]	; (800760c <UART_RxISR_8BIT_FIFOEN+0x330>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d01f      	beq.n	80074d6 <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	685a      	ldr	r2, [r3, #4]
 800749c:	2380      	movs	r3, #128	; 0x80
 800749e:	041b      	lsls	r3, r3, #16
 80074a0:	4013      	ands	r3, r2
 80074a2:	d018      	beq.n	80074d6 <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074a4:	f3ef 8310 	mrs	r3, PRIMASK
 80074a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80074aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80074ac:	663b      	str	r3, [r7, #96]	; 0x60
 80074ae:	2301      	movs	r3, #1
 80074b0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b4:	f383 8810 	msr	PRIMASK, r3
}
 80074b8:	46c0      	nop			; (mov r8, r8)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4952      	ldr	r1, [pc, #328]	; (8007610 <UART_RxISR_8BIT_FIFOEN+0x334>)
 80074c6:	400a      	ands	r2, r1
 80074c8:	601a      	str	r2, [r3, #0]
 80074ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074cc:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d0:	f383 8810 	msr	PRIMASK, r3
}
 80074d4:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d12f      	bne.n	800753e <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074e4:	f3ef 8310 	mrs	r3, PRIMASK
 80074e8:	623b      	str	r3, [r7, #32]
  return(result);
 80074ea:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074ee:	2301      	movs	r3, #1
 80074f0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f4:	f383 8810 	msr	PRIMASK, r3
}
 80074f8:	46c0      	nop			; (mov r8, r8)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2110      	movs	r1, #16
 8007506:	438a      	bics	r2, r1
 8007508:	601a      	str	r2, [r3, #0]
 800750a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800750c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800750e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007510:	f383 8810 	msr	PRIMASK, r3
}
 8007514:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	69db      	ldr	r3, [r3, #28]
 800751c:	2210      	movs	r2, #16
 800751e:	4013      	ands	r3, r2
 8007520:	2b10      	cmp	r3, #16
 8007522:	d103      	bne.n	800752c <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2210      	movs	r2, #16
 800752a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	225c      	movs	r2, #92	; 0x5c
 8007530:	5a9a      	ldrh	r2, [r3, r2]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	0011      	movs	r1, r2
 8007536:	0018      	movs	r0, r3
 8007538:	f7fe fea6 	bl	8006288 <HAL_UARTEx_RxEventCallback>
 800753c:	e003      	b.n	8007546 <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	0018      	movs	r0, r3
 8007542:	f7f9 ff43 	bl	80013cc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007546:	236e      	movs	r3, #110	; 0x6e
 8007548:	18fb      	adds	r3, r7, r3
 800754a:	881b      	ldrh	r3, [r3, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d004      	beq.n	800755a <UART_RxISR_8BIT_FIFOEN+0x27e>
 8007550:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007552:	2220      	movs	r2, #32
 8007554:	4013      	ands	r3, r2
 8007556:	d000      	beq.n	800755a <UART_RxISR_8BIT_FIFOEN+0x27e>
 8007558:	e6e3      	b.n	8007322 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800755a:	205a      	movs	r0, #90	; 0x5a
 800755c:	183b      	adds	r3, r7, r0
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	215e      	movs	r1, #94	; 0x5e
 8007562:	5a52      	ldrh	r2, [r2, r1]
 8007564:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007566:	0001      	movs	r1, r0
 8007568:	187b      	adds	r3, r7, r1
 800756a:	881b      	ldrh	r3, [r3, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d044      	beq.n	80075fa <UART_RxISR_8BIT_FIFOEN+0x31e>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2268      	movs	r2, #104	; 0x68
 8007574:	5a9b      	ldrh	r3, [r3, r2]
 8007576:	187a      	adds	r2, r7, r1
 8007578:	8812      	ldrh	r2, [r2, #0]
 800757a:	429a      	cmp	r2, r3
 800757c:	d23d      	bcs.n	80075fa <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800757e:	f3ef 8310 	mrs	r3, PRIMASK
 8007582:	60bb      	str	r3, [r7, #8]
  return(result);
 8007584:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007586:	657b      	str	r3, [r7, #84]	; 0x54
 8007588:	2301      	movs	r3, #1
 800758a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f383 8810 	msr	PRIMASK, r3
}
 8007592:	46c0      	nop			; (mov r8, r8)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	689a      	ldr	r2, [r3, #8]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	491d      	ldr	r1, [pc, #116]	; (8007614 <UART_RxISR_8BIT_FIFOEN+0x338>)
 80075a0:	400a      	ands	r2, r1
 80075a2:	609a      	str	r2, [r3, #8]
 80075a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	f383 8810 	msr	PRIMASK, r3
}
 80075ae:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a19      	ldr	r2, [pc, #100]	; (8007618 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 80075b4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075b6:	f3ef 8310 	mrs	r3, PRIMASK
 80075ba:	617b      	str	r3, [r7, #20]
  return(result);
 80075bc:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80075be:	653b      	str	r3, [r7, #80]	; 0x50
 80075c0:	2301      	movs	r3, #1
 80075c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	f383 8810 	msr	PRIMASK, r3
}
 80075ca:	46c0      	nop			; (mov r8, r8)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2120      	movs	r1, #32
 80075d8:	430a      	orrs	r2, r1
 80075da:	601a      	str	r2, [r3, #0]
 80075dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	f383 8810 	msr	PRIMASK, r3
}
 80075e6:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80075e8:	e007      	b.n	80075fa <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	699a      	ldr	r2, [r3, #24]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2108      	movs	r1, #8
 80075f6:	430a      	orrs	r2, r1
 80075f8:	619a      	str	r2, [r3, #24]
}
 80075fa:	46c0      	nop			; (mov r8, r8)
 80075fc:	46bd      	mov	sp, r7
 80075fe:	b020      	add	sp, #128	; 0x80
 8007600:	bd80      	pop	{r7, pc}
 8007602:	46c0      	nop			; (mov r8, r8)
 8007604:	fffffeff 	.word	0xfffffeff
 8007608:	effffffe 	.word	0xeffffffe
 800760c:	40008000 	.word	0x40008000
 8007610:	fbffffff 	.word	0xfbffffff
 8007614:	efffffff 	.word	0xefffffff
 8007618:	08006f55 	.word	0x08006f55

0800761c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b0a2      	sub	sp, #136	; 0x88
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007624:	2382      	movs	r3, #130	; 0x82
 8007626:	18fb      	adds	r3, r7, r3
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	2160      	movs	r1, #96	; 0x60
 800762c:	5a52      	ldrh	r2, [r2, r1]
 800762e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	69db      	ldr	r3, [r3, #28]
 8007636:	2284      	movs	r2, #132	; 0x84
 8007638:	18ba      	adds	r2, r7, r2
 800763a:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	228c      	movs	r2, #140	; 0x8c
 8007650:	589b      	ldr	r3, [r3, r2]
 8007652:	2b22      	cmp	r3, #34	; 0x22
 8007654:	d000      	beq.n	8007658 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8007656:	e174      	b.n	8007942 <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007658:	2376      	movs	r3, #118	; 0x76
 800765a:	18fb      	adds	r3, r7, r3
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	2168      	movs	r1, #104	; 0x68
 8007660:	5a52      	ldrh	r2, [r2, r1]
 8007662:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007664:	e119      	b.n	800789a <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800766c:	2174      	movs	r1, #116	; 0x74
 800766e:	187b      	adds	r3, r7, r1
 8007670:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007676:	673b      	str	r3, [r7, #112]	; 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8007678:	187b      	adds	r3, r7, r1
 800767a:	2282      	movs	r2, #130	; 0x82
 800767c:	18ba      	adds	r2, r7, r2
 800767e:	881b      	ldrh	r3, [r3, #0]
 8007680:	8812      	ldrh	r2, [r2, #0]
 8007682:	4013      	ands	r3, r2
 8007684:	b29a      	uxth	r2, r3
 8007686:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007688:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800768e:	1c9a      	adds	r2, r3, #2
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	225e      	movs	r2, #94	; 0x5e
 8007698:	5a9b      	ldrh	r3, [r3, r2]
 800769a:	b29b      	uxth	r3, r3
 800769c:	3b01      	subs	r3, #1
 800769e:	b299      	uxth	r1, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	225e      	movs	r2, #94	; 0x5e
 80076a4:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	69db      	ldr	r3, [r3, #28]
 80076ac:	2184      	movs	r1, #132	; 0x84
 80076ae:	187a      	adds	r2, r7, r1
 80076b0:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80076b2:	187b      	adds	r3, r7, r1
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2207      	movs	r2, #7
 80076b8:	4013      	ands	r3, r2
 80076ba:	d04e      	beq.n	800775a <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80076bc:	187b      	adds	r3, r7, r1
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2201      	movs	r2, #1
 80076c2:	4013      	ands	r3, r2
 80076c4:	d010      	beq.n	80076e8 <UART_RxISR_16BIT_FIFOEN+0xcc>
 80076c6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80076c8:	2380      	movs	r3, #128	; 0x80
 80076ca:	005b      	lsls	r3, r3, #1
 80076cc:	4013      	ands	r3, r2
 80076ce:	d00b      	beq.n	80076e8 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2201      	movs	r2, #1
 80076d6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2290      	movs	r2, #144	; 0x90
 80076dc:	589b      	ldr	r3, [r3, r2]
 80076de:	2201      	movs	r2, #1
 80076e0:	431a      	orrs	r2, r3
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2190      	movs	r1, #144	; 0x90
 80076e6:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076e8:	2384      	movs	r3, #132	; 0x84
 80076ea:	18fb      	adds	r3, r7, r3
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2202      	movs	r2, #2
 80076f0:	4013      	ands	r3, r2
 80076f2:	d00f      	beq.n	8007714 <UART_RxISR_16BIT_FIFOEN+0xf8>
 80076f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076f6:	2201      	movs	r2, #1
 80076f8:	4013      	ands	r3, r2
 80076fa:	d00b      	beq.n	8007714 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2202      	movs	r2, #2
 8007702:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2290      	movs	r2, #144	; 0x90
 8007708:	589b      	ldr	r3, [r3, r2]
 800770a:	2204      	movs	r2, #4
 800770c:	431a      	orrs	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2190      	movs	r1, #144	; 0x90
 8007712:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007714:	2384      	movs	r3, #132	; 0x84
 8007716:	18fb      	adds	r3, r7, r3
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2204      	movs	r2, #4
 800771c:	4013      	ands	r3, r2
 800771e:	d00f      	beq.n	8007740 <UART_RxISR_16BIT_FIFOEN+0x124>
 8007720:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007722:	2201      	movs	r2, #1
 8007724:	4013      	ands	r3, r2
 8007726:	d00b      	beq.n	8007740 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2204      	movs	r2, #4
 800772e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2290      	movs	r2, #144	; 0x90
 8007734:	589b      	ldr	r3, [r3, r2]
 8007736:	2202      	movs	r2, #2
 8007738:	431a      	orrs	r2, r3
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2190      	movs	r1, #144	; 0x90
 800773e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2290      	movs	r2, #144	; 0x90
 8007744:	589b      	ldr	r3, [r3, r2]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d007      	beq.n	800775a <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	0018      	movs	r0, r3
 800774e:	f7fe fd93 	bl	8006278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2290      	movs	r2, #144	; 0x90
 8007756:	2100      	movs	r1, #0
 8007758:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	225e      	movs	r2, #94	; 0x5e
 800775e:	5a9b      	ldrh	r3, [r3, r2]
 8007760:	b29b      	uxth	r3, r3
 8007762:	2b00      	cmp	r3, #0
 8007764:	d000      	beq.n	8007768 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8007766:	e098      	b.n	800789a <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007768:	f3ef 8310 	mrs	r3, PRIMASK
 800776c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800776e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007770:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007772:	2301      	movs	r3, #1
 8007774:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007778:	f383 8810 	msr	PRIMASK, r3
}
 800777c:	46c0      	nop			; (mov r8, r8)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4974      	ldr	r1, [pc, #464]	; (800795c <UART_RxISR_16BIT_FIFOEN+0x340>)
 800778a:	400a      	ands	r2, r1
 800778c:	601a      	str	r2, [r3, #0]
 800778e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007790:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007794:	f383 8810 	msr	PRIMASK, r3
}
 8007798:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800779a:	f3ef 8310 	mrs	r3, PRIMASK
 800779e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80077a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80077a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80077a4:	2301      	movs	r3, #1
 80077a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077aa:	f383 8810 	msr	PRIMASK, r3
}
 80077ae:	46c0      	nop			; (mov r8, r8)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	689a      	ldr	r2, [r3, #8]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4969      	ldr	r1, [pc, #420]	; (8007960 <UART_RxISR_16BIT_FIFOEN+0x344>)
 80077bc:	400a      	ands	r2, r1
 80077be:	609a      	str	r2, [r3, #8]
 80077c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077c2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077c6:	f383 8810 	msr	PRIMASK, r3
}
 80077ca:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	228c      	movs	r2, #140	; 0x8c
 80077d0:	2120      	movs	r1, #32
 80077d2:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a5f      	ldr	r2, [pc, #380]	; (8007964 <UART_RxISR_16BIT_FIFOEN+0x348>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d01f      	beq.n	800782a <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	685a      	ldr	r2, [r3, #4]
 80077f0:	2380      	movs	r3, #128	; 0x80
 80077f2:	041b      	lsls	r3, r3, #16
 80077f4:	4013      	ands	r3, r2
 80077f6:	d018      	beq.n	800782a <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077f8:	f3ef 8310 	mrs	r3, PRIMASK
 80077fc:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80077fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007800:	667b      	str	r3, [r7, #100]	; 0x64
 8007802:	2301      	movs	r3, #1
 8007804:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007808:	f383 8810 	msr	PRIMASK, r3
}
 800780c:	46c0      	nop			; (mov r8, r8)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4953      	ldr	r1, [pc, #332]	; (8007968 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 800781a:	400a      	ands	r2, r1
 800781c:	601a      	str	r2, [r3, #0]
 800781e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007820:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007824:	f383 8810 	msr	PRIMASK, r3
}
 8007828:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800782e:	2b01      	cmp	r3, #1
 8007830:	d12f      	bne.n	8007892 <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007838:	f3ef 8310 	mrs	r3, PRIMASK
 800783c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800783e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007840:	663b      	str	r3, [r7, #96]	; 0x60
 8007842:	2301      	movs	r3, #1
 8007844:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007848:	f383 8810 	msr	PRIMASK, r3
}
 800784c:	46c0      	nop			; (mov r8, r8)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2110      	movs	r1, #16
 800785a:	438a      	bics	r2, r1
 800785c:	601a      	str	r2, [r3, #0]
 800785e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007860:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007864:	f383 8810 	msr	PRIMASK, r3
}
 8007868:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	69db      	ldr	r3, [r3, #28]
 8007870:	2210      	movs	r2, #16
 8007872:	4013      	ands	r3, r2
 8007874:	2b10      	cmp	r3, #16
 8007876:	d103      	bne.n	8007880 <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2210      	movs	r2, #16
 800787e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	225c      	movs	r2, #92	; 0x5c
 8007884:	5a9a      	ldrh	r2, [r3, r2]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	0011      	movs	r1, r2
 800788a:	0018      	movs	r0, r3
 800788c:	f7fe fcfc 	bl	8006288 <HAL_UARTEx_RxEventCallback>
 8007890:	e003      	b.n	800789a <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	0018      	movs	r0, r3
 8007896:	f7f9 fd99 	bl	80013cc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800789a:	2376      	movs	r3, #118	; 0x76
 800789c:	18fb      	adds	r3, r7, r3
 800789e:	881b      	ldrh	r3, [r3, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d006      	beq.n	80078b2 <UART_RxISR_16BIT_FIFOEN+0x296>
 80078a4:	2384      	movs	r3, #132	; 0x84
 80078a6:	18fb      	adds	r3, r7, r3
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2220      	movs	r2, #32
 80078ac:	4013      	ands	r3, r2
 80078ae:	d000      	beq.n	80078b2 <UART_RxISR_16BIT_FIFOEN+0x296>
 80078b0:	e6d9      	b.n	8007666 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80078b2:	205e      	movs	r0, #94	; 0x5e
 80078b4:	183b      	adds	r3, r7, r0
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	215e      	movs	r1, #94	; 0x5e
 80078ba:	5a52      	ldrh	r2, [r2, r1]
 80078bc:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80078be:	0001      	movs	r1, r0
 80078c0:	187b      	adds	r3, r7, r1
 80078c2:	881b      	ldrh	r3, [r3, #0]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d044      	beq.n	8007952 <UART_RxISR_16BIT_FIFOEN+0x336>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2268      	movs	r2, #104	; 0x68
 80078cc:	5a9b      	ldrh	r3, [r3, r2]
 80078ce:	187a      	adds	r2, r7, r1
 80078d0:	8812      	ldrh	r2, [r2, #0]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d23d      	bcs.n	8007952 <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078d6:	f3ef 8310 	mrs	r3, PRIMASK
 80078da:	60fb      	str	r3, [r7, #12]
  return(result);
 80078dc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80078de:	65bb      	str	r3, [r7, #88]	; 0x58
 80078e0:	2301      	movs	r3, #1
 80078e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	f383 8810 	msr	PRIMASK, r3
}
 80078ea:	46c0      	nop			; (mov r8, r8)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	689a      	ldr	r2, [r3, #8]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	491d      	ldr	r1, [pc, #116]	; (800796c <UART_RxISR_16BIT_FIFOEN+0x350>)
 80078f8:	400a      	ands	r2, r1
 80078fa:	609a      	str	r2, [r3, #8]
 80078fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	f383 8810 	msr	PRIMASK, r3
}
 8007906:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4a19      	ldr	r2, [pc, #100]	; (8007970 <UART_RxISR_16BIT_FIFOEN+0x354>)
 800790c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800790e:	f3ef 8310 	mrs	r3, PRIMASK
 8007912:	61bb      	str	r3, [r7, #24]
  return(result);
 8007914:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007916:	657b      	str	r3, [r7, #84]	; 0x54
 8007918:	2301      	movs	r3, #1
 800791a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	f383 8810 	msr	PRIMASK, r3
}
 8007922:	46c0      	nop			; (mov r8, r8)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2120      	movs	r1, #32
 8007930:	430a      	orrs	r2, r1
 8007932:	601a      	str	r2, [r3, #0]
 8007934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007936:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007938:	6a3b      	ldr	r3, [r7, #32]
 800793a:	f383 8810 	msr	PRIMASK, r3
}
 800793e:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007940:	e007      	b.n	8007952 <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	699a      	ldr	r2, [r3, #24]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2108      	movs	r1, #8
 800794e:	430a      	orrs	r2, r1
 8007950:	619a      	str	r2, [r3, #24]
}
 8007952:	46c0      	nop			; (mov r8, r8)
 8007954:	46bd      	mov	sp, r7
 8007956:	b022      	add	sp, #136	; 0x88
 8007958:	bd80      	pop	{r7, pc}
 800795a:	46c0      	nop			; (mov r8, r8)
 800795c:	fffffeff 	.word	0xfffffeff
 8007960:	effffffe 	.word	0xeffffffe
 8007964:	40008000 	.word	0x40008000
 8007968:	fbffffff 	.word	0xfbffffff
 800796c:	efffffff 	.word	0xefffffff
 8007970:	08007119 	.word	0x08007119

08007974 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800797c:	46c0      	nop			; (mov r8, r8)
 800797e:	46bd      	mov	sp, r7
 8007980:	b002      	add	sp, #8
 8007982:	bd80      	pop	{r7, pc}

08007984 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800798c:	46c0      	nop			; (mov r8, r8)
 800798e:	46bd      	mov	sp, r7
 8007990:	b002      	add	sp, #8
 8007992:	bd80      	pop	{r7, pc}

08007994 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800799c:	46c0      	nop			; (mov r8, r8)
 800799e:	46bd      	mov	sp, r7
 80079a0:	b002      	add	sp, #8
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2284      	movs	r2, #132	; 0x84
 80079b0:	5c9b      	ldrb	r3, [r3, r2]
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d101      	bne.n	80079ba <HAL_UARTEx_DisableFifoMode+0x16>
 80079b6:	2302      	movs	r3, #2
 80079b8:	e027      	b.n	8007a0a <HAL_UARTEx_DisableFifoMode+0x66>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2284      	movs	r2, #132	; 0x84
 80079be:	2101      	movs	r1, #1
 80079c0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2288      	movs	r2, #136	; 0x88
 80079c6:	2124      	movs	r1, #36	; 0x24
 80079c8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2101      	movs	r1, #1
 80079de:	438a      	bics	r2, r1
 80079e0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	4a0b      	ldr	r2, [pc, #44]	; (8007a14 <HAL_UARTEx_DisableFifoMode+0x70>)
 80079e6:	4013      	ands	r3, r2
 80079e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2288      	movs	r2, #136	; 0x88
 80079fc:	2120      	movs	r1, #32
 80079fe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2284      	movs	r2, #132	; 0x84
 8007a04:	2100      	movs	r1, #0
 8007a06:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	0018      	movs	r0, r3
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	b004      	add	sp, #16
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	46c0      	nop			; (mov r8, r8)
 8007a14:	dfffffff 	.word	0xdfffffff

08007a18 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2284      	movs	r2, #132	; 0x84
 8007a26:	5c9b      	ldrb	r3, [r3, r2]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d101      	bne.n	8007a30 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007a2c:	2302      	movs	r3, #2
 8007a2e:	e02e      	b.n	8007a8e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2284      	movs	r2, #132	; 0x84
 8007a34:	2101      	movs	r1, #1
 8007a36:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2288      	movs	r2, #136	; 0x88
 8007a3c:	2124      	movs	r1, #36	; 0x24
 8007a3e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2101      	movs	r1, #1
 8007a54:	438a      	bics	r2, r1
 8007a56:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	00db      	lsls	r3, r3, #3
 8007a60:	08d9      	lsrs	r1, r3, #3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	683a      	ldr	r2, [r7, #0]
 8007a68:	430a      	orrs	r2, r1
 8007a6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	0018      	movs	r0, r3
 8007a70:	f000 f854 	bl	8007b1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2288      	movs	r2, #136	; 0x88
 8007a80:	2120      	movs	r1, #32
 8007a82:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2284      	movs	r2, #132	; 0x84
 8007a88:	2100      	movs	r1, #0
 8007a8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	0018      	movs	r0, r3
 8007a90:	46bd      	mov	sp, r7
 8007a92:	b004      	add	sp, #16
 8007a94:	bd80      	pop	{r7, pc}
	...

08007a98 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2284      	movs	r2, #132	; 0x84
 8007aa6:	5c9b      	ldrb	r3, [r3, r2]
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d101      	bne.n	8007ab0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007aac:	2302      	movs	r3, #2
 8007aae:	e02f      	b.n	8007b10 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2284      	movs	r2, #132	; 0x84
 8007ab4:	2101      	movs	r1, #1
 8007ab6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2288      	movs	r2, #136	; 0x88
 8007abc:	2124      	movs	r1, #36	; 0x24
 8007abe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2101      	movs	r1, #1
 8007ad4:	438a      	bics	r2, r1
 8007ad6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	4a0e      	ldr	r2, [pc, #56]	; (8007b18 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	0019      	movs	r1, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	683a      	ldr	r2, [r7, #0]
 8007aea:	430a      	orrs	r2, r1
 8007aec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	0018      	movs	r0, r3
 8007af2:	f000 f813 	bl	8007b1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2288      	movs	r2, #136	; 0x88
 8007b02:	2120      	movs	r1, #32
 8007b04:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2284      	movs	r2, #132	; 0x84
 8007b0a:	2100      	movs	r1, #0
 8007b0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	0018      	movs	r0, r3
 8007b12:	46bd      	mov	sp, r7
 8007b14:	b004      	add	sp, #16
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	f1ffffff 	.word	0xf1ffffff

08007b1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d108      	bne.n	8007b3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	226a      	movs	r2, #106	; 0x6a
 8007b30:	2101      	movs	r1, #1
 8007b32:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2268      	movs	r2, #104	; 0x68
 8007b38:	2101      	movs	r1, #1
 8007b3a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007b3c:	e043      	b.n	8007bc6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007b3e:	260f      	movs	r6, #15
 8007b40:	19bb      	adds	r3, r7, r6
 8007b42:	2208      	movs	r2, #8
 8007b44:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007b46:	200e      	movs	r0, #14
 8007b48:	183b      	adds	r3, r7, r0
 8007b4a:	2208      	movs	r2, #8
 8007b4c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	0e5b      	lsrs	r3, r3, #25
 8007b56:	b2da      	uxtb	r2, r3
 8007b58:	240d      	movs	r4, #13
 8007b5a:	193b      	adds	r3, r7, r4
 8007b5c:	2107      	movs	r1, #7
 8007b5e:	400a      	ands	r2, r1
 8007b60:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	0f5b      	lsrs	r3, r3, #29
 8007b6a:	b2da      	uxtb	r2, r3
 8007b6c:	250c      	movs	r5, #12
 8007b6e:	197b      	adds	r3, r7, r5
 8007b70:	2107      	movs	r1, #7
 8007b72:	400a      	ands	r2, r1
 8007b74:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b76:	183b      	adds	r3, r7, r0
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	197a      	adds	r2, r7, r5
 8007b7c:	7812      	ldrb	r2, [r2, #0]
 8007b7e:	4914      	ldr	r1, [pc, #80]	; (8007bd0 <UARTEx_SetNbDataToProcess+0xb4>)
 8007b80:	5c8a      	ldrb	r2, [r1, r2]
 8007b82:	435a      	muls	r2, r3
 8007b84:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007b86:	197b      	adds	r3, r7, r5
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	4a12      	ldr	r2, [pc, #72]	; (8007bd4 <UARTEx_SetNbDataToProcess+0xb8>)
 8007b8c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b8e:	0019      	movs	r1, r3
 8007b90:	f7f8 fb5e 	bl	8000250 <__divsi3>
 8007b94:	0003      	movs	r3, r0
 8007b96:	b299      	uxth	r1, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	226a      	movs	r2, #106	; 0x6a
 8007b9c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b9e:	19bb      	adds	r3, r7, r6
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	193a      	adds	r2, r7, r4
 8007ba4:	7812      	ldrb	r2, [r2, #0]
 8007ba6:	490a      	ldr	r1, [pc, #40]	; (8007bd0 <UARTEx_SetNbDataToProcess+0xb4>)
 8007ba8:	5c8a      	ldrb	r2, [r1, r2]
 8007baa:	435a      	muls	r2, r3
 8007bac:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007bae:	193b      	adds	r3, r7, r4
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	4a08      	ldr	r2, [pc, #32]	; (8007bd4 <UARTEx_SetNbDataToProcess+0xb8>)
 8007bb4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bb6:	0019      	movs	r1, r3
 8007bb8:	f7f8 fb4a 	bl	8000250 <__divsi3>
 8007bbc:	0003      	movs	r3, r0
 8007bbe:	b299      	uxth	r1, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2268      	movs	r2, #104	; 0x68
 8007bc4:	5299      	strh	r1, [r3, r2]
}
 8007bc6:	46c0      	nop			; (mov r8, r8)
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	b005      	add	sp, #20
 8007bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bce:	46c0      	nop			; (mov r8, r8)
 8007bd0:	08008cc8 	.word	0x08008cc8
 8007bd4:	08008cd0 	.word	0x08008cd0

08007bd8 <I2C_LCD_ExpanderWrite>:
static I2C_LCD_InfoParam_t I2C_LCD_InfoParam_g[I2C_LCD_MAX];

/*---------------------[STATIC INTERNAL FUNCTIONS]-----------------------*/

static void I2C_LCD_ExpanderWrite(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8007bd8:	b590      	push	{r4, r7, lr}
 8007bda:	b087      	sub	sp, #28
 8007bdc:	af02      	add	r7, sp, #8
 8007bde:	0002      	movs	r2, r0
 8007be0:	1dfb      	adds	r3, r7, #7
 8007be2:	701a      	strb	r2, [r3, #0]
 8007be4:	1dbb      	adds	r3, r7, #6
 8007be6:	1c0a      	adds	r2, r1, #0
 8007be8:	701a      	strb	r2, [r3, #0]
    uint8_t TxData = (DATA) | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal;
 8007bea:	1dfb      	adds	r3, r7, #7
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	4a16      	ldr	r2, [pc, #88]	; (8007c48 <I2C_LCD_ExpanderWrite+0x70>)
 8007bf0:	005b      	lsls	r3, r3, #1
 8007bf2:	18d3      	adds	r3, r2, r3
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	781a      	ldrb	r2, [r3, #0]
 8007bf8:	1dbb      	adds	r3, r7, #6
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	b2da      	uxtb	r2, r3
 8007c00:	240f      	movs	r4, #15
 8007c02:	193b      	adds	r3, r7, r4
 8007c04:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_Handle, (I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_Address<<1), &TxData, sizeof(TxData), 100);
 8007c06:	1dfb      	adds	r3, r7, #7
 8007c08:	781a      	ldrb	r2, [r3, #0]
 8007c0a:	4910      	ldr	r1, [pc, #64]	; (8007c4c <I2C_LCD_ExpanderWrite+0x74>)
 8007c0c:	0013      	movs	r3, r2
 8007c0e:	005b      	lsls	r3, r3, #1
 8007c10:	189b      	adds	r3, r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	18cb      	adds	r3, r1, r3
 8007c16:	3304      	adds	r3, #4
 8007c18:	6818      	ldr	r0, [r3, #0]
 8007c1a:	1dfb      	adds	r3, r7, #7
 8007c1c:	781a      	ldrb	r2, [r3, #0]
 8007c1e:	490b      	ldr	r1, [pc, #44]	; (8007c4c <I2C_LCD_ExpanderWrite+0x74>)
 8007c20:	0013      	movs	r3, r2
 8007c22:	005b      	lsls	r3, r3, #1
 8007c24:	189b      	adds	r3, r3, r2
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	18cb      	adds	r3, r1, r3
 8007c2a:	3308      	adds	r3, #8
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	18db      	adds	r3, r3, r3
 8007c32:	b299      	uxth	r1, r3
 8007c34:	193a      	adds	r2, r7, r4
 8007c36:	2364      	movs	r3, #100	; 0x64
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	f7fb fa3a 	bl	80030b4 <HAL_I2C_Master_Transmit>
}
 8007c40:	46c0      	nop			; (mov r8, r8)
 8007c42:	46bd      	mov	sp, r7
 8007c44:	b005      	add	sp, #20
 8007c46:	bd90      	pop	{r4, r7, pc}
 8007c48:	200003b4 	.word	0x200003b4
 8007c4c:	08008cd8 	.word	0x08008cd8

08007c50 <I2C_LCD_EnPulse>:

static void I2C_LCD_EnPulse(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8007c50:	b590      	push	{r4, r7, lr}
 8007c52:	b087      	sub	sp, #28
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	0002      	movs	r2, r0
 8007c58:	1dfb      	adds	r3, r7, #7
 8007c5a:	701a      	strb	r2, [r3, #0]
 8007c5c:	1dbb      	adds	r3, r7, #6
 8007c5e:	1c0a      	adds	r2, r1, #0
 8007c60:	701a      	strb	r2, [r3, #0]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA | EN)); // En high
 8007c62:	1dbb      	adds	r3, r7, #6
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	2204      	movs	r2, #4
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	b2da      	uxtb	r2, r3
 8007c6c:	1dfb      	adds	r3, r7, #7
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	0011      	movs	r1, r2
 8007c72:	0018      	movs	r0, r3
 8007c74:	f7ff ffb0 	bl	8007bd8 <I2C_LCD_ExpanderWrite>
	DELAY_US(2); // enable pulse must be >450ns
 8007c78:	4b25      	ldr	r3, [pc, #148]	; (8007d10 <I2C_LCD_EnPulse+0xc0>)
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	617b      	str	r3, [r7, #20]
 8007c7e:	4b25      	ldr	r3, [pc, #148]	; (8007d14 <I2C_LCD_EnPulse+0xc4>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4925      	ldr	r1, [pc, #148]	; (8007d18 <I2C_LCD_EnPulse+0xc8>)
 8007c84:	0018      	movs	r0, r3
 8007c86:	f7f8 fa59 	bl	800013c <__udivsi3>
 8007c8a:	0003      	movs	r3, r0
 8007c8c:	005c      	lsls	r4, r3, #1
 8007c8e:	4b21      	ldr	r3, [pc, #132]	; (8007d14 <I2C_LCD_EnPulse+0xc4>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4921      	ldr	r1, [pc, #132]	; (8007d18 <I2C_LCD_EnPulse+0xc8>)
 8007c94:	0018      	movs	r0, r3
 8007c96:	f7f8 fa51 	bl	800013c <__udivsi3>
 8007c9a:	0003      	movs	r3, r0
 8007c9c:	085b      	lsrs	r3, r3, #1
 8007c9e:	1ae3      	subs	r3, r4, r3
 8007ca0:	613b      	str	r3, [r7, #16]
 8007ca2:	4b1b      	ldr	r3, [pc, #108]	; (8007d10 <I2C_LCD_EnPulse+0xc0>)
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	1ad3      	subs	r3, r2, r3
 8007caa:	693a      	ldr	r2, [r7, #16]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d8f8      	bhi.n	8007ca2 <I2C_LCD_EnPulse+0x52>

    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA & ~EN)); // En low
 8007cb0:	1dbb      	adds	r3, r7, #6
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	2204      	movs	r2, #4
 8007cb6:	4393      	bics	r3, r2
 8007cb8:	b2da      	uxtb	r2, r3
 8007cba:	1dfb      	adds	r3, r7, #7
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	0011      	movs	r1, r2
 8007cc0:	0018      	movs	r0, r3
 8007cc2:	f7ff ff89 	bl	8007bd8 <I2C_LCD_ExpanderWrite>
    DELAY_US(50); // commands need > 37us to settle
 8007cc6:	4b12      	ldr	r3, [pc, #72]	; (8007d10 <I2C_LCD_EnPulse+0xc0>)
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	60fb      	str	r3, [r7, #12]
 8007ccc:	4b11      	ldr	r3, [pc, #68]	; (8007d14 <I2C_LCD_EnPulse+0xc4>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4911      	ldr	r1, [pc, #68]	; (8007d18 <I2C_LCD_EnPulse+0xc8>)
 8007cd2:	0018      	movs	r0, r3
 8007cd4:	f7f8 fa32 	bl	800013c <__udivsi3>
 8007cd8:	0003      	movs	r3, r0
 8007cda:	001a      	movs	r2, r3
 8007cdc:	2332      	movs	r3, #50	; 0x32
 8007cde:	4353      	muls	r3, r2
 8007ce0:	001c      	movs	r4, r3
 8007ce2:	4b0c      	ldr	r3, [pc, #48]	; (8007d14 <I2C_LCD_EnPulse+0xc4>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	490c      	ldr	r1, [pc, #48]	; (8007d18 <I2C_LCD_EnPulse+0xc8>)
 8007ce8:	0018      	movs	r0, r3
 8007cea:	f7f8 fa27 	bl	800013c <__udivsi3>
 8007cee:	0003      	movs	r3, r0
 8007cf0:	085b      	lsrs	r3, r3, #1
 8007cf2:	1ae3      	subs	r3, r4, r3
 8007cf4:	60bb      	str	r3, [r7, #8]
 8007cf6:	4b06      	ldr	r3, [pc, #24]	; (8007d10 <I2C_LCD_EnPulse+0xc0>)
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	1ad3      	subs	r3, r2, r3
 8007cfe:	68ba      	ldr	r2, [r7, #8]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d8f8      	bhi.n	8007cf6 <I2C_LCD_EnPulse+0xa6>
}
 8007d04:	46c0      	nop			; (mov r8, r8)
 8007d06:	46c0      	nop			; (mov r8, r8)
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	b007      	add	sp, #28
 8007d0c:	bd90      	pop	{r4, r7, pc}
 8007d0e:	46c0      	nop			; (mov r8, r8)
 8007d10:	e000e010 	.word	0xe000e010
 8007d14:	2000000c 	.word	0x2000000c
 8007d18:	000f4240 	.word	0x000f4240

08007d1c <I2C_LCD_Write4Bits>:

static void I2C_LCD_Write4Bits(uint8_t I2C_LCD_InstanceIndex, uint8_t Val)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	0002      	movs	r2, r0
 8007d24:	1dfb      	adds	r3, r7, #7
 8007d26:	701a      	strb	r2, [r3, #0]
 8007d28:	1dbb      	adds	r3, r7, #6
 8007d2a:	1c0a      	adds	r2, r1, #0
 8007d2c:	701a      	strb	r2, [r3, #0]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, Val);
 8007d2e:	1dbb      	adds	r3, r7, #6
 8007d30:	781a      	ldrb	r2, [r3, #0]
 8007d32:	1dfb      	adds	r3, r7, #7
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	0011      	movs	r1, r2
 8007d38:	0018      	movs	r0, r3
 8007d3a:	f7ff ff4d 	bl	8007bd8 <I2C_LCD_ExpanderWrite>
	I2C_LCD_EnPulse(I2C_LCD_InstanceIndex, Val);
 8007d3e:	1dbb      	adds	r3, r7, #6
 8007d40:	781a      	ldrb	r2, [r3, #0]
 8007d42:	1dfb      	adds	r3, r7, #7
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	0011      	movs	r1, r2
 8007d48:	0018      	movs	r0, r3
 8007d4a:	f7ff ff81 	bl	8007c50 <I2C_LCD_EnPulse>
}
 8007d4e:	46c0      	nop			; (mov r8, r8)
 8007d50:	46bd      	mov	sp, r7
 8007d52:	b002      	add	sp, #8
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <I2C_LCD_Send>:

static void I2C_LCD_Send(uint8_t I2C_LCD_InstanceIndex, uint8_t Val, uint8_t Mode)
{
 8007d56:	b590      	push	{r4, r7, lr}
 8007d58:	b085      	sub	sp, #20
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	0004      	movs	r4, r0
 8007d5e:	0008      	movs	r0, r1
 8007d60:	0011      	movs	r1, r2
 8007d62:	1dfb      	adds	r3, r7, #7
 8007d64:	1c22      	adds	r2, r4, #0
 8007d66:	701a      	strb	r2, [r3, #0]
 8007d68:	1dbb      	adds	r3, r7, #6
 8007d6a:	1c02      	adds	r2, r0, #0
 8007d6c:	701a      	strb	r2, [r3, #0]
 8007d6e:	1d7b      	adds	r3, r7, #5
 8007d70:	1c0a      	adds	r2, r1, #0
 8007d72:	701a      	strb	r2, [r3, #0]
    uint8_t HighNib = Val & 0xF0;
 8007d74:	200f      	movs	r0, #15
 8007d76:	183b      	adds	r3, r7, r0
 8007d78:	1dba      	adds	r2, r7, #6
 8007d7a:	7812      	ldrb	r2, [r2, #0]
 8007d7c:	210f      	movs	r1, #15
 8007d7e:	438a      	bics	r2, r1
 8007d80:	701a      	strb	r2, [r3, #0]
    uint8_t LowNib = (Val << 4) & 0xF0;
 8007d82:	1dbb      	adds	r3, r7, #6
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	011a      	lsls	r2, r3, #4
 8007d88:	240e      	movs	r4, #14
 8007d8a:	193b      	adds	r3, r7, r4
 8007d8c:	701a      	strb	r2, [r3, #0]
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (HighNib) | Mode);
 8007d8e:	183a      	adds	r2, r7, r0
 8007d90:	1d7b      	adds	r3, r7, #5
 8007d92:	7812      	ldrb	r2, [r2, #0]
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	4313      	orrs	r3, r2
 8007d98:	b2da      	uxtb	r2, r3
 8007d9a:	1dfb      	adds	r3, r7, #7
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	0011      	movs	r1, r2
 8007da0:	0018      	movs	r0, r3
 8007da2:	f7ff ffbb 	bl	8007d1c <I2C_LCD_Write4Bits>
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (LowNib) | Mode);
 8007da6:	193a      	adds	r2, r7, r4
 8007da8:	1d7b      	adds	r3, r7, #5
 8007daa:	7812      	ldrb	r2, [r2, #0]
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	b2da      	uxtb	r2, r3
 8007db2:	1dfb      	adds	r3, r7, #7
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	0011      	movs	r1, r2
 8007db8:	0018      	movs	r0, r3
 8007dba:	f7ff ffaf 	bl	8007d1c <I2C_LCD_Write4Bits>
}
 8007dbe:	46c0      	nop			; (mov r8, r8)
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	b005      	add	sp, #20
 8007dc4:	bd90      	pop	{r4, r7, pc}

08007dc6 <I2C_LCD_Cmd>:

static void I2C_LCD_Cmd(uint8_t I2C_LCD_InstanceIndex, uint8_t CMD)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b082      	sub	sp, #8
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	0002      	movs	r2, r0
 8007dce:	1dfb      	adds	r3, r7, #7
 8007dd0:	701a      	strb	r2, [r3, #0]
 8007dd2:	1dbb      	adds	r3, r7, #6
 8007dd4:	1c0a      	adds	r2, r1, #0
 8007dd6:	701a      	strb	r2, [r3, #0]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CMD, 0);
 8007dd8:	1dbb      	adds	r3, r7, #6
 8007dda:	7819      	ldrb	r1, [r3, #0]
 8007ddc:	1dfb      	adds	r3, r7, #7
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	2200      	movs	r2, #0
 8007de2:	0018      	movs	r0, r3
 8007de4:	f7ff ffb7 	bl	8007d56 <I2C_LCD_Send>
}
 8007de8:	46c0      	nop			; (mov r8, r8)
 8007dea:	46bd      	mov	sp, r7
 8007dec:	b002      	add	sp, #8
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <I2C_LCD_Data>:

static void I2C_LCD_Data(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	0002      	movs	r2, r0
 8007df8:	1dfb      	adds	r3, r7, #7
 8007dfa:	701a      	strb	r2, [r3, #0]
 8007dfc:	1dbb      	adds	r3, r7, #6
 8007dfe:	1c0a      	adds	r2, r1, #0
 8007e00:	701a      	strb	r2, [r3, #0]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, DATA, 1);
 8007e02:	1dbb      	adds	r3, r7, #6
 8007e04:	7819      	ldrb	r1, [r3, #0]
 8007e06:	1dfb      	adds	r3, r7, #7
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	0018      	movs	r0, r3
 8007e0e:	f7ff ffa2 	bl	8007d56 <I2C_LCD_Send>
}
 8007e12:	46c0      	nop			; (mov r8, r8)
 8007e14:	46bd      	mov	sp, r7
 8007e16:	b002      	add	sp, #8
 8007e18:	bd80      	pop	{r7, pc}
	...

08007e1c <I2C_LCD_Init>:
//=========================================================================================================================

/*-----------------------[USER EXTERNAL FUNCTIONS]-----------------------*/

void I2C_LCD_Init(uint8_t I2C_LCD_InstanceIndex)
{
 8007e1c:	b590      	push	{r4, r7, lr}
 8007e1e:	b08b      	sub	sp, #44	; 0x2c
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	0002      	movs	r2, r0
 8007e24:	1dfb      	adds	r3, r7, #7
 8007e26:	701a      	strb	r2, [r3, #0]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 8007e28:	46c0      	nop			; (mov r8, r8)
 8007e2a:	f7f9 fea1 	bl	8001b70 <HAL_GetTick>
 8007e2e:	0003      	movs	r3, r0
 8007e30:	2b31      	cmp	r3, #49	; 0x31
 8007e32:	d9fa      	bls.n	8007e2a <I2C_LCD_Init+0xe>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8007e34:	1dfb      	adds	r3, r7, #7
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	2130      	movs	r1, #48	; 0x30
 8007e3a:	0018      	movs	r0, r3
 8007e3c:	f7ff ffc3 	bl	8007dc6 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8007e40:	2300      	movs	r3, #0
 8007e42:	627b      	str	r3, [r7, #36]	; 0x24
 8007e44:	e025      	b.n	8007e92 <I2C_LCD_Init+0x76>
 8007e46:	4b57      	ldr	r3, [pc, #348]	; (8007fa4 <I2C_LCD_Init+0x188>)
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	60fb      	str	r3, [r7, #12]
 8007e4c:	4b56      	ldr	r3, [pc, #344]	; (8007fa8 <I2C_LCD_Init+0x18c>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4956      	ldr	r1, [pc, #344]	; (8007fac <I2C_LCD_Init+0x190>)
 8007e52:	0018      	movs	r0, r3
 8007e54:	f7f8 f972 	bl	800013c <__udivsi3>
 8007e58:	0003      	movs	r3, r0
 8007e5a:	001a      	movs	r2, r3
 8007e5c:	0013      	movs	r3, r2
 8007e5e:	015b      	lsls	r3, r3, #5
 8007e60:	1a9b      	subs	r3, r3, r2
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	189b      	adds	r3, r3, r2
 8007e66:	00db      	lsls	r3, r3, #3
 8007e68:	001c      	movs	r4, r3
 8007e6a:	4b4f      	ldr	r3, [pc, #316]	; (8007fa8 <I2C_LCD_Init+0x18c>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	494f      	ldr	r1, [pc, #316]	; (8007fac <I2C_LCD_Init+0x190>)
 8007e70:	0018      	movs	r0, r3
 8007e72:	f7f8 f963 	bl	800013c <__udivsi3>
 8007e76:	0003      	movs	r3, r0
 8007e78:	085b      	lsrs	r3, r3, #1
 8007e7a:	1ae3      	subs	r3, r4, r3
 8007e7c:	60bb      	str	r3, [r7, #8]
 8007e7e:	4b49      	ldr	r3, [pc, #292]	; (8007fa4 <I2C_LCD_Init+0x188>)
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	1ad3      	subs	r3, r2, r3
 8007e86:	68ba      	ldr	r2, [r7, #8]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d8f8      	bhi.n	8007e7e <I2C_LCD_Init+0x62>
 8007e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8e:	3301      	adds	r3, #1
 8007e90:	627b      	str	r3, [r7, #36]	; 0x24
 8007e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e94:	2b04      	cmp	r3, #4
 8007e96:	d9d6      	bls.n	8007e46 <I2C_LCD_Init+0x2a>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8007e98:	1dfb      	adds	r3, r7, #7
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	2130      	movs	r1, #48	; 0x30
 8007e9e:	0018      	movs	r0, r3
 8007ea0:	f7ff ff91 	bl	8007dc6 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	623b      	str	r3, [r7, #32]
 8007ea8:	e025      	b.n	8007ef6 <I2C_LCD_Init+0xda>
 8007eaa:	4b3e      	ldr	r3, [pc, #248]	; (8007fa4 <I2C_LCD_Init+0x188>)
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	617b      	str	r3, [r7, #20]
 8007eb0:	4b3d      	ldr	r3, [pc, #244]	; (8007fa8 <I2C_LCD_Init+0x18c>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	493d      	ldr	r1, [pc, #244]	; (8007fac <I2C_LCD_Init+0x190>)
 8007eb6:	0018      	movs	r0, r3
 8007eb8:	f7f8 f940 	bl	800013c <__udivsi3>
 8007ebc:	0003      	movs	r3, r0
 8007ebe:	001a      	movs	r2, r3
 8007ec0:	0013      	movs	r3, r2
 8007ec2:	015b      	lsls	r3, r3, #5
 8007ec4:	1a9b      	subs	r3, r3, r2
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	189b      	adds	r3, r3, r2
 8007eca:	00db      	lsls	r3, r3, #3
 8007ecc:	001c      	movs	r4, r3
 8007ece:	4b36      	ldr	r3, [pc, #216]	; (8007fa8 <I2C_LCD_Init+0x18c>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4936      	ldr	r1, [pc, #216]	; (8007fac <I2C_LCD_Init+0x190>)
 8007ed4:	0018      	movs	r0, r3
 8007ed6:	f7f8 f931 	bl	800013c <__udivsi3>
 8007eda:	0003      	movs	r3, r0
 8007edc:	085b      	lsrs	r3, r3, #1
 8007ede:	1ae3      	subs	r3, r4, r3
 8007ee0:	613b      	str	r3, [r7, #16]
 8007ee2:	4b30      	ldr	r3, [pc, #192]	; (8007fa4 <I2C_LCD_Init+0x188>)
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	697a      	ldr	r2, [r7, #20]
 8007ee8:	1ad3      	subs	r3, r2, r3
 8007eea:	693a      	ldr	r2, [r7, #16]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d8f8      	bhi.n	8007ee2 <I2C_LCD_Init+0xc6>
 8007ef0:	6a3b      	ldr	r3, [r7, #32]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	623b      	str	r3, [r7, #32]
 8007ef6:	6a3b      	ldr	r3, [r7, #32]
 8007ef8:	2b04      	cmp	r3, #4
 8007efa:	d9d6      	bls.n	8007eaa <I2C_LCD_Init+0x8e>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8007efc:	1dfb      	adds	r3, r7, #7
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	2130      	movs	r1, #48	; 0x30
 8007f02:	0018      	movs	r0, r3
 8007f04:	f7ff ff5f 	bl	8007dc6 <I2C_LCD_Cmd>
    DELAY_US(150);  // Delay > 100μs
 8007f08:	4b26      	ldr	r3, [pc, #152]	; (8007fa4 <I2C_LCD_Init+0x188>)
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	61fb      	str	r3, [r7, #28]
 8007f0e:	4b26      	ldr	r3, [pc, #152]	; (8007fa8 <I2C_LCD_Init+0x18c>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4926      	ldr	r1, [pc, #152]	; (8007fac <I2C_LCD_Init+0x190>)
 8007f14:	0018      	movs	r0, r3
 8007f16:	f7f8 f911 	bl	800013c <__udivsi3>
 8007f1a:	0003      	movs	r3, r0
 8007f1c:	001a      	movs	r2, r3
 8007f1e:	2396      	movs	r3, #150	; 0x96
 8007f20:	4353      	muls	r3, r2
 8007f22:	001c      	movs	r4, r3
 8007f24:	4b20      	ldr	r3, [pc, #128]	; (8007fa8 <I2C_LCD_Init+0x18c>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4920      	ldr	r1, [pc, #128]	; (8007fac <I2C_LCD_Init+0x190>)
 8007f2a:	0018      	movs	r0, r3
 8007f2c:	f7f8 f906 	bl	800013c <__udivsi3>
 8007f30:	0003      	movs	r3, r0
 8007f32:	085b      	lsrs	r3, r3, #1
 8007f34:	1ae3      	subs	r3, r4, r3
 8007f36:	61bb      	str	r3, [r7, #24]
 8007f38:	4b1a      	ldr	r3, [pc, #104]	; (8007fa4 <I2C_LCD_Init+0x188>)
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	69fa      	ldr	r2, [r7, #28]
 8007f3e:	1ad3      	subs	r3, r2, r3
 8007f40:	69ba      	ldr	r2, [r7, #24]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d8f8      	bhi.n	8007f38 <I2C_LCD_Init+0x11c>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x02);
 8007f46:	1dfb      	adds	r3, r7, #7
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	2102      	movs	r1, #2
 8007f4c:	0018      	movs	r0, r3
 8007f4e:	f7ff ff3a 	bl	8007dc6 <I2C_LCD_Cmd>
    // Configure the LCD
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 8007f52:	1dfb      	adds	r3, r7, #7
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	2128      	movs	r1, #40	; 0x28
 8007f58:	0018      	movs	r0, r3
 8007f5a:	f7ff ff34 	bl	8007dc6 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 8007f5e:	1dfb      	adds	r3, r7, #7
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	210c      	movs	r1, #12
 8007f64:	0018      	movs	r0, r3
 8007f66:	f7ff ff2e 	bl	8007dc6 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 8007f6a:	1dfb      	adds	r3, r7, #7
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	2106      	movs	r1, #6
 8007f70:	0018      	movs	r0, r3
 8007f72:	f7ff ff28 	bl	8007dc6 <I2C_LCD_Cmd>
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8007f76:	1dfb      	adds	r3, r7, #7
 8007f78:	781a      	ldrb	r2, [r3, #0]
 8007f7a:	4b0d      	ldr	r3, [pc, #52]	; (8007fb0 <I2C_LCD_Init+0x194>)
 8007f7c:	0052      	lsls	r2, r2, #1
 8007f7e:	2104      	movs	r1, #4
 8007f80:	54d1      	strb	r1, [r2, r3]
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 8007f82:	1dfb      	adds	r3, r7, #7
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	4a0a      	ldr	r2, [pc, #40]	; (8007fb0 <I2C_LCD_Init+0x194>)
 8007f88:	005b      	lsls	r3, r3, #1
 8007f8a:	18d3      	adds	r3, r2, r3
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	2208      	movs	r2, #8
 8007f90:	701a      	strb	r2, [r3, #0]
    // Clear the LCD
    I2C_LCD_Clear(I2C_LCD_InstanceIndex);
 8007f92:	1dfb      	adds	r3, r7, #7
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	0018      	movs	r0, r3
 8007f98:	f000 f80c 	bl	8007fb4 <I2C_LCD_Clear>
}
 8007f9c:	46c0      	nop			; (mov r8, r8)
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	b00b      	add	sp, #44	; 0x2c
 8007fa2:	bd90      	pop	{r4, r7, pc}
 8007fa4:	e000e010 	.word	0xe000e010
 8007fa8:	2000000c 	.word	0x2000000c
 8007fac:	000f4240 	.word	0x000f4240
 8007fb0:	200003b4 	.word	0x200003b4

08007fb4 <I2C_LCD_Clear>:

void I2C_LCD_Clear(uint8_t I2C_LCD_InstanceIndex)
{
 8007fb4:	b590      	push	{r4, r7, lr}
 8007fb6:	b087      	sub	sp, #28
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	0002      	movs	r2, r0
 8007fbc:	1dfb      	adds	r3, r7, #7
 8007fbe:	701a      	strb	r2, [r3, #0]
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CLEARDISPLAY);
 8007fc0:	1dfb      	adds	r3, r7, #7
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	2101      	movs	r1, #1
 8007fc6:	0018      	movs	r0, r3
 8007fc8:	f7ff fefd 	bl	8007dc6 <I2C_LCD_Cmd>
    DELAY_MS(2);
 8007fcc:	2300      	movs	r3, #0
 8007fce:	617b      	str	r3, [r7, #20]
 8007fd0:	e025      	b.n	800801e <I2C_LCD_Clear+0x6a>
 8007fd2:	4b17      	ldr	r3, [pc, #92]	; (8008030 <I2C_LCD_Clear+0x7c>)
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	613b      	str	r3, [r7, #16]
 8007fd8:	4b16      	ldr	r3, [pc, #88]	; (8008034 <I2C_LCD_Clear+0x80>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4916      	ldr	r1, [pc, #88]	; (8008038 <I2C_LCD_Clear+0x84>)
 8007fde:	0018      	movs	r0, r3
 8007fe0:	f7f8 f8ac 	bl	800013c <__udivsi3>
 8007fe4:	0003      	movs	r3, r0
 8007fe6:	001a      	movs	r2, r3
 8007fe8:	0013      	movs	r3, r2
 8007fea:	015b      	lsls	r3, r3, #5
 8007fec:	1a9b      	subs	r3, r3, r2
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	189b      	adds	r3, r3, r2
 8007ff2:	00db      	lsls	r3, r3, #3
 8007ff4:	001c      	movs	r4, r3
 8007ff6:	4b0f      	ldr	r3, [pc, #60]	; (8008034 <I2C_LCD_Clear+0x80>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	490f      	ldr	r1, [pc, #60]	; (8008038 <I2C_LCD_Clear+0x84>)
 8007ffc:	0018      	movs	r0, r3
 8007ffe:	f7f8 f89d 	bl	800013c <__udivsi3>
 8008002:	0003      	movs	r3, r0
 8008004:	085b      	lsrs	r3, r3, #1
 8008006:	1ae3      	subs	r3, r4, r3
 8008008:	60fb      	str	r3, [r7, #12]
 800800a:	4b09      	ldr	r3, [pc, #36]	; (8008030 <I2C_LCD_Clear+0x7c>)
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	693a      	ldr	r2, [r7, #16]
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	68fa      	ldr	r2, [r7, #12]
 8008014:	429a      	cmp	r2, r3
 8008016:	d8f8      	bhi.n	800800a <I2C_LCD_Clear+0x56>
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	3301      	adds	r3, #1
 800801c:	617b      	str	r3, [r7, #20]
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	2b01      	cmp	r3, #1
 8008022:	d9d6      	bls.n	8007fd2 <I2C_LCD_Clear+0x1e>
}
 8008024:	46c0      	nop			; (mov r8, r8)
 8008026:	46c0      	nop			; (mov r8, r8)
 8008028:	46bd      	mov	sp, r7
 800802a:	b007      	add	sp, #28
 800802c:	bd90      	pop	{r4, r7, pc}
 800802e:	46c0      	nop			; (mov r8, r8)
 8008030:	e000e010 	.word	0xe000e010
 8008034:	2000000c 	.word	0x2000000c
 8008038:	000f4240 	.word	0x000f4240

0800803c <I2C_LCD_SetCursor>:
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_RETURNHOME);
    DELAY_MS(2);
}

void I2C_LCD_SetCursor(uint8_t I2C_LCD_InstanceIndex, uint8_t Col, uint8_t Row)
{
 800803c:	b590      	push	{r4, r7, lr}
 800803e:	b087      	sub	sp, #28
 8008040:	af00      	add	r7, sp, #0
 8008042:	0004      	movs	r4, r0
 8008044:	0008      	movs	r0, r1
 8008046:	0011      	movs	r1, r2
 8008048:	1dfb      	adds	r3, r7, #7
 800804a:	1c22      	adds	r2, r4, #0
 800804c:	701a      	strb	r2, [r3, #0]
 800804e:	1dbb      	adds	r3, r7, #6
 8008050:	1c02      	adds	r2, r0, #0
 8008052:	701a      	strb	r2, [r3, #0]
 8008054:	1d7b      	adds	r3, r7, #5
 8008056:	1c0a      	adds	r2, r1, #0
 8008058:	701a      	strb	r2, [r3, #0]
    int Row_Offsets[] = {0x00, 0x40, 0x14, 0x54};
 800805a:	2308      	movs	r3, #8
 800805c:	18fb      	adds	r3, r7, r3
 800805e:	4a1d      	ldr	r2, [pc, #116]	; (80080d4 <I2C_LCD_SetCursor+0x98>)
 8008060:	ca13      	ldmia	r2!, {r0, r1, r4}
 8008062:	c313      	stmia	r3!, {r0, r1, r4}
 8008064:	6812      	ldr	r2, [r2, #0]
 8008066:	601a      	str	r2, [r3, #0]
    if (Row > I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow)
 8008068:	1dfb      	adds	r3, r7, #7
 800806a:	781a      	ldrb	r2, [r3, #0]
 800806c:	491a      	ldr	r1, [pc, #104]	; (80080d8 <I2C_LCD_SetCursor+0x9c>)
 800806e:	0013      	movs	r3, r2
 8008070:	005b      	lsls	r3, r3, #1
 8008072:	189b      	adds	r3, r3, r2
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	18cb      	adds	r3, r1, r3
 8008078:	330a      	adds	r3, #10
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	1d7a      	adds	r2, r7, #5
 800807e:	7812      	ldrb	r2, [r2, #0]
 8008080:	429a      	cmp	r2, r3
 8008082:	d90c      	bls.n	800809e <I2C_LCD_SetCursor+0x62>
    {
    	Row = I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow - 1;
 8008084:	1dfb      	adds	r3, r7, #7
 8008086:	781a      	ldrb	r2, [r3, #0]
 8008088:	4913      	ldr	r1, [pc, #76]	; (80080d8 <I2C_LCD_SetCursor+0x9c>)
 800808a:	0013      	movs	r3, r2
 800808c:	005b      	lsls	r3, r3, #1
 800808e:	189b      	adds	r3, r3, r2
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	18cb      	adds	r3, r1, r3
 8008094:	330a      	adds	r3, #10
 8008096:	781a      	ldrb	r2, [r3, #0]
 8008098:	1d7b      	adds	r3, r7, #5
 800809a:	3a01      	subs	r2, #1
 800809c:	701a      	strb	r2, [r3, #0]
    }
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_SETDDRAMADDR | (Col + Row_Offsets[Row]));
 800809e:	1d7b      	adds	r3, r7, #5
 80080a0:	781a      	ldrb	r2, [r3, #0]
 80080a2:	2308      	movs	r3, #8
 80080a4:	18fb      	adds	r3, r7, r3
 80080a6:	0092      	lsls	r2, r2, #2
 80080a8:	58d3      	ldr	r3, [r2, r3]
 80080aa:	b2da      	uxtb	r2, r3
 80080ac:	1dbb      	adds	r3, r7, #6
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	18d3      	adds	r3, r2, r3
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	b25b      	sxtb	r3, r3
 80080b6:	2280      	movs	r2, #128	; 0x80
 80080b8:	4252      	negs	r2, r2
 80080ba:	4313      	orrs	r3, r2
 80080bc:	b25b      	sxtb	r3, r3
 80080be:	b2da      	uxtb	r2, r3
 80080c0:	1dfb      	adds	r3, r7, #7
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	0011      	movs	r1, r2
 80080c6:	0018      	movs	r0, r3
 80080c8:	f7ff fe7d 	bl	8007dc6 <I2C_LCD_Cmd>
}
 80080cc:	46c0      	nop			; (mov r8, r8)
 80080ce:	46bd      	mov	sp, r7
 80080d0:	b007      	add	sp, #28
 80080d2:	bd90      	pop	{r4, r7, pc}
 80080d4:	08008bec 	.word	0x08008bec
 80080d8:	08008cd8 	.word	0x08008cd8

080080dc <I2C_LCD_WriteString>:
{
    I2C_LCD_Data(I2C_LCD_InstanceIndex, Ch);
}

void I2C_LCD_WriteString(uint8_t I2C_LCD_InstanceIndex, char *Str)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	0002      	movs	r2, r0
 80080e4:	6039      	str	r1, [r7, #0]
 80080e6:	1dfb      	adds	r3, r7, #7
 80080e8:	701a      	strb	r2, [r3, #0]
    while (*Str)
 80080ea:	e009      	b.n	8008100 <I2C_LCD_WriteString+0x24>
    {
        I2C_LCD_Data(I2C_LCD_InstanceIndex, *Str++);
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	1c5a      	adds	r2, r3, #1
 80080f0:	603a      	str	r2, [r7, #0]
 80080f2:	781a      	ldrb	r2, [r3, #0]
 80080f4:	1dfb      	adds	r3, r7, #7
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	0011      	movs	r1, r2
 80080fa:	0018      	movs	r0, r3
 80080fc:	f7ff fe78 	bl	8007df0 <I2C_LCD_Data>
    while (*Str)
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d1f1      	bne.n	80080ec <I2C_LCD_WriteString+0x10>
    }
}
 8008108:	46c0      	nop			; (mov r8, r8)
 800810a:	46c0      	nop			; (mov r8, r8)
 800810c:	46bd      	mov	sp, r7
 800810e:	b002      	add	sp, #8
 8008110:	bd80      	pop	{r7, pc}
	...

08008114 <siprintf>:
 8008114:	b40e      	push	{r1, r2, r3}
 8008116:	b500      	push	{lr}
 8008118:	490b      	ldr	r1, [pc, #44]	; (8008148 <siprintf+0x34>)
 800811a:	b09c      	sub	sp, #112	; 0x70
 800811c:	ab1d      	add	r3, sp, #116	; 0x74
 800811e:	9002      	str	r0, [sp, #8]
 8008120:	9006      	str	r0, [sp, #24]
 8008122:	9107      	str	r1, [sp, #28]
 8008124:	9104      	str	r1, [sp, #16]
 8008126:	4809      	ldr	r0, [pc, #36]	; (800814c <siprintf+0x38>)
 8008128:	4909      	ldr	r1, [pc, #36]	; (8008150 <siprintf+0x3c>)
 800812a:	cb04      	ldmia	r3!, {r2}
 800812c:	9105      	str	r1, [sp, #20]
 800812e:	6800      	ldr	r0, [r0, #0]
 8008130:	a902      	add	r1, sp, #8
 8008132:	9301      	str	r3, [sp, #4]
 8008134:	f000 f9a2 	bl	800847c <_svfiprintf_r>
 8008138:	2200      	movs	r2, #0
 800813a:	9b02      	ldr	r3, [sp, #8]
 800813c:	701a      	strb	r2, [r3, #0]
 800813e:	b01c      	add	sp, #112	; 0x70
 8008140:	bc08      	pop	{r3}
 8008142:	b003      	add	sp, #12
 8008144:	4718      	bx	r3
 8008146:	46c0      	nop			; (mov r8, r8)
 8008148:	7fffffff 	.word	0x7fffffff
 800814c:	20000064 	.word	0x20000064
 8008150:	ffff0208 	.word	0xffff0208

08008154 <memset>:
 8008154:	0003      	movs	r3, r0
 8008156:	1882      	adds	r2, r0, r2
 8008158:	4293      	cmp	r3, r2
 800815a:	d100      	bne.n	800815e <memset+0xa>
 800815c:	4770      	bx	lr
 800815e:	7019      	strb	r1, [r3, #0]
 8008160:	3301      	adds	r3, #1
 8008162:	e7f9      	b.n	8008158 <memset+0x4>

08008164 <__errno>:
 8008164:	4b01      	ldr	r3, [pc, #4]	; (800816c <__errno+0x8>)
 8008166:	6818      	ldr	r0, [r3, #0]
 8008168:	4770      	bx	lr
 800816a:	46c0      	nop			; (mov r8, r8)
 800816c:	20000064 	.word	0x20000064

08008170 <__libc_init_array>:
 8008170:	b570      	push	{r4, r5, r6, lr}
 8008172:	2600      	movs	r6, #0
 8008174:	4c0c      	ldr	r4, [pc, #48]	; (80081a8 <__libc_init_array+0x38>)
 8008176:	4d0d      	ldr	r5, [pc, #52]	; (80081ac <__libc_init_array+0x3c>)
 8008178:	1b64      	subs	r4, r4, r5
 800817a:	10a4      	asrs	r4, r4, #2
 800817c:	42a6      	cmp	r6, r4
 800817e:	d109      	bne.n	8008194 <__libc_init_array+0x24>
 8008180:	2600      	movs	r6, #0
 8008182:	f000 fc6d 	bl	8008a60 <_init>
 8008186:	4c0a      	ldr	r4, [pc, #40]	; (80081b0 <__libc_init_array+0x40>)
 8008188:	4d0a      	ldr	r5, [pc, #40]	; (80081b4 <__libc_init_array+0x44>)
 800818a:	1b64      	subs	r4, r4, r5
 800818c:	10a4      	asrs	r4, r4, #2
 800818e:	42a6      	cmp	r6, r4
 8008190:	d105      	bne.n	800819e <__libc_init_array+0x2e>
 8008192:	bd70      	pop	{r4, r5, r6, pc}
 8008194:	00b3      	lsls	r3, r6, #2
 8008196:	58eb      	ldr	r3, [r5, r3]
 8008198:	4798      	blx	r3
 800819a:	3601      	adds	r6, #1
 800819c:	e7ee      	b.n	800817c <__libc_init_array+0xc>
 800819e:	00b3      	lsls	r3, r6, #2
 80081a0:	58eb      	ldr	r3, [r5, r3]
 80081a2:	4798      	blx	r3
 80081a4:	3601      	adds	r6, #1
 80081a6:	e7f2      	b.n	800818e <__libc_init_array+0x1e>
 80081a8:	08008d20 	.word	0x08008d20
 80081ac:	08008d20 	.word	0x08008d20
 80081b0:	08008d24 	.word	0x08008d24
 80081b4:	08008d20 	.word	0x08008d20

080081b8 <__retarget_lock_acquire_recursive>:
 80081b8:	4770      	bx	lr

080081ba <__retarget_lock_release_recursive>:
 80081ba:	4770      	bx	lr

080081bc <_free_r>:
 80081bc:	b570      	push	{r4, r5, r6, lr}
 80081be:	0005      	movs	r5, r0
 80081c0:	2900      	cmp	r1, #0
 80081c2:	d010      	beq.n	80081e6 <_free_r+0x2a>
 80081c4:	1f0c      	subs	r4, r1, #4
 80081c6:	6823      	ldr	r3, [r4, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	da00      	bge.n	80081ce <_free_r+0x12>
 80081cc:	18e4      	adds	r4, r4, r3
 80081ce:	0028      	movs	r0, r5
 80081d0:	f000 f8e2 	bl	8008398 <__malloc_lock>
 80081d4:	4a1d      	ldr	r2, [pc, #116]	; (800824c <_free_r+0x90>)
 80081d6:	6813      	ldr	r3, [r2, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d105      	bne.n	80081e8 <_free_r+0x2c>
 80081dc:	6063      	str	r3, [r4, #4]
 80081de:	6014      	str	r4, [r2, #0]
 80081e0:	0028      	movs	r0, r5
 80081e2:	f000 f8e1 	bl	80083a8 <__malloc_unlock>
 80081e6:	bd70      	pop	{r4, r5, r6, pc}
 80081e8:	42a3      	cmp	r3, r4
 80081ea:	d908      	bls.n	80081fe <_free_r+0x42>
 80081ec:	6820      	ldr	r0, [r4, #0]
 80081ee:	1821      	adds	r1, r4, r0
 80081f0:	428b      	cmp	r3, r1
 80081f2:	d1f3      	bne.n	80081dc <_free_r+0x20>
 80081f4:	6819      	ldr	r1, [r3, #0]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	1809      	adds	r1, r1, r0
 80081fa:	6021      	str	r1, [r4, #0]
 80081fc:	e7ee      	b.n	80081dc <_free_r+0x20>
 80081fe:	001a      	movs	r2, r3
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d001      	beq.n	800820a <_free_r+0x4e>
 8008206:	42a3      	cmp	r3, r4
 8008208:	d9f9      	bls.n	80081fe <_free_r+0x42>
 800820a:	6811      	ldr	r1, [r2, #0]
 800820c:	1850      	adds	r0, r2, r1
 800820e:	42a0      	cmp	r0, r4
 8008210:	d10b      	bne.n	800822a <_free_r+0x6e>
 8008212:	6820      	ldr	r0, [r4, #0]
 8008214:	1809      	adds	r1, r1, r0
 8008216:	1850      	adds	r0, r2, r1
 8008218:	6011      	str	r1, [r2, #0]
 800821a:	4283      	cmp	r3, r0
 800821c:	d1e0      	bne.n	80081e0 <_free_r+0x24>
 800821e:	6818      	ldr	r0, [r3, #0]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	1841      	adds	r1, r0, r1
 8008224:	6011      	str	r1, [r2, #0]
 8008226:	6053      	str	r3, [r2, #4]
 8008228:	e7da      	b.n	80081e0 <_free_r+0x24>
 800822a:	42a0      	cmp	r0, r4
 800822c:	d902      	bls.n	8008234 <_free_r+0x78>
 800822e:	230c      	movs	r3, #12
 8008230:	602b      	str	r3, [r5, #0]
 8008232:	e7d5      	b.n	80081e0 <_free_r+0x24>
 8008234:	6820      	ldr	r0, [r4, #0]
 8008236:	1821      	adds	r1, r4, r0
 8008238:	428b      	cmp	r3, r1
 800823a:	d103      	bne.n	8008244 <_free_r+0x88>
 800823c:	6819      	ldr	r1, [r3, #0]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	1809      	adds	r1, r1, r0
 8008242:	6021      	str	r1, [r4, #0]
 8008244:	6063      	str	r3, [r4, #4]
 8008246:	6054      	str	r4, [r2, #4]
 8008248:	e7ca      	b.n	80081e0 <_free_r+0x24>
 800824a:	46c0      	nop			; (mov r8, r8)
 800824c:	200004f8 	.word	0x200004f8

08008250 <sbrk_aligned>:
 8008250:	b570      	push	{r4, r5, r6, lr}
 8008252:	4e0f      	ldr	r6, [pc, #60]	; (8008290 <sbrk_aligned+0x40>)
 8008254:	000d      	movs	r5, r1
 8008256:	6831      	ldr	r1, [r6, #0]
 8008258:	0004      	movs	r4, r0
 800825a:	2900      	cmp	r1, #0
 800825c:	d102      	bne.n	8008264 <sbrk_aligned+0x14>
 800825e:	f000 fba1 	bl	80089a4 <_sbrk_r>
 8008262:	6030      	str	r0, [r6, #0]
 8008264:	0029      	movs	r1, r5
 8008266:	0020      	movs	r0, r4
 8008268:	f000 fb9c 	bl	80089a4 <_sbrk_r>
 800826c:	1c43      	adds	r3, r0, #1
 800826e:	d00a      	beq.n	8008286 <sbrk_aligned+0x36>
 8008270:	2303      	movs	r3, #3
 8008272:	1cc5      	adds	r5, r0, #3
 8008274:	439d      	bics	r5, r3
 8008276:	42a8      	cmp	r0, r5
 8008278:	d007      	beq.n	800828a <sbrk_aligned+0x3a>
 800827a:	1a29      	subs	r1, r5, r0
 800827c:	0020      	movs	r0, r4
 800827e:	f000 fb91 	bl	80089a4 <_sbrk_r>
 8008282:	3001      	adds	r0, #1
 8008284:	d101      	bne.n	800828a <sbrk_aligned+0x3a>
 8008286:	2501      	movs	r5, #1
 8008288:	426d      	negs	r5, r5
 800828a:	0028      	movs	r0, r5
 800828c:	bd70      	pop	{r4, r5, r6, pc}
 800828e:	46c0      	nop			; (mov r8, r8)
 8008290:	200004fc 	.word	0x200004fc

08008294 <_malloc_r>:
 8008294:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008296:	2203      	movs	r2, #3
 8008298:	1ccb      	adds	r3, r1, #3
 800829a:	4393      	bics	r3, r2
 800829c:	3308      	adds	r3, #8
 800829e:	0006      	movs	r6, r0
 80082a0:	001f      	movs	r7, r3
 80082a2:	2b0c      	cmp	r3, #12
 80082a4:	d238      	bcs.n	8008318 <_malloc_r+0x84>
 80082a6:	270c      	movs	r7, #12
 80082a8:	42b9      	cmp	r1, r7
 80082aa:	d837      	bhi.n	800831c <_malloc_r+0x88>
 80082ac:	0030      	movs	r0, r6
 80082ae:	f000 f873 	bl	8008398 <__malloc_lock>
 80082b2:	4b38      	ldr	r3, [pc, #224]	; (8008394 <_malloc_r+0x100>)
 80082b4:	9300      	str	r3, [sp, #0]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	001c      	movs	r4, r3
 80082ba:	2c00      	cmp	r4, #0
 80082bc:	d133      	bne.n	8008326 <_malloc_r+0x92>
 80082be:	0039      	movs	r1, r7
 80082c0:	0030      	movs	r0, r6
 80082c2:	f7ff ffc5 	bl	8008250 <sbrk_aligned>
 80082c6:	0004      	movs	r4, r0
 80082c8:	1c43      	adds	r3, r0, #1
 80082ca:	d15e      	bne.n	800838a <_malloc_r+0xf6>
 80082cc:	9b00      	ldr	r3, [sp, #0]
 80082ce:	681c      	ldr	r4, [r3, #0]
 80082d0:	0025      	movs	r5, r4
 80082d2:	2d00      	cmp	r5, #0
 80082d4:	d14e      	bne.n	8008374 <_malloc_r+0xe0>
 80082d6:	2c00      	cmp	r4, #0
 80082d8:	d051      	beq.n	800837e <_malloc_r+0xea>
 80082da:	6823      	ldr	r3, [r4, #0]
 80082dc:	0029      	movs	r1, r5
 80082de:	18e3      	adds	r3, r4, r3
 80082e0:	0030      	movs	r0, r6
 80082e2:	9301      	str	r3, [sp, #4]
 80082e4:	f000 fb5e 	bl	80089a4 <_sbrk_r>
 80082e8:	9b01      	ldr	r3, [sp, #4]
 80082ea:	4283      	cmp	r3, r0
 80082ec:	d147      	bne.n	800837e <_malloc_r+0xea>
 80082ee:	6823      	ldr	r3, [r4, #0]
 80082f0:	0030      	movs	r0, r6
 80082f2:	1aff      	subs	r7, r7, r3
 80082f4:	0039      	movs	r1, r7
 80082f6:	f7ff ffab 	bl	8008250 <sbrk_aligned>
 80082fa:	3001      	adds	r0, #1
 80082fc:	d03f      	beq.n	800837e <_malloc_r+0xea>
 80082fe:	6823      	ldr	r3, [r4, #0]
 8008300:	19db      	adds	r3, r3, r7
 8008302:	6023      	str	r3, [r4, #0]
 8008304:	9b00      	ldr	r3, [sp, #0]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d040      	beq.n	800838e <_malloc_r+0xfa>
 800830c:	685a      	ldr	r2, [r3, #4]
 800830e:	42a2      	cmp	r2, r4
 8008310:	d133      	bne.n	800837a <_malloc_r+0xe6>
 8008312:	2200      	movs	r2, #0
 8008314:	605a      	str	r2, [r3, #4]
 8008316:	e014      	b.n	8008342 <_malloc_r+0xae>
 8008318:	2b00      	cmp	r3, #0
 800831a:	dac5      	bge.n	80082a8 <_malloc_r+0x14>
 800831c:	230c      	movs	r3, #12
 800831e:	2500      	movs	r5, #0
 8008320:	6033      	str	r3, [r6, #0]
 8008322:	0028      	movs	r0, r5
 8008324:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008326:	6821      	ldr	r1, [r4, #0]
 8008328:	1bc9      	subs	r1, r1, r7
 800832a:	d420      	bmi.n	800836e <_malloc_r+0xda>
 800832c:	290b      	cmp	r1, #11
 800832e:	d918      	bls.n	8008362 <_malloc_r+0xce>
 8008330:	19e2      	adds	r2, r4, r7
 8008332:	6027      	str	r7, [r4, #0]
 8008334:	42a3      	cmp	r3, r4
 8008336:	d112      	bne.n	800835e <_malloc_r+0xca>
 8008338:	9b00      	ldr	r3, [sp, #0]
 800833a:	601a      	str	r2, [r3, #0]
 800833c:	6863      	ldr	r3, [r4, #4]
 800833e:	6011      	str	r1, [r2, #0]
 8008340:	6053      	str	r3, [r2, #4]
 8008342:	0030      	movs	r0, r6
 8008344:	0025      	movs	r5, r4
 8008346:	f000 f82f 	bl	80083a8 <__malloc_unlock>
 800834a:	2207      	movs	r2, #7
 800834c:	350b      	adds	r5, #11
 800834e:	1d23      	adds	r3, r4, #4
 8008350:	4395      	bics	r5, r2
 8008352:	1aea      	subs	r2, r5, r3
 8008354:	429d      	cmp	r5, r3
 8008356:	d0e4      	beq.n	8008322 <_malloc_r+0x8e>
 8008358:	1b5b      	subs	r3, r3, r5
 800835a:	50a3      	str	r3, [r4, r2]
 800835c:	e7e1      	b.n	8008322 <_malloc_r+0x8e>
 800835e:	605a      	str	r2, [r3, #4]
 8008360:	e7ec      	b.n	800833c <_malloc_r+0xa8>
 8008362:	6862      	ldr	r2, [r4, #4]
 8008364:	42a3      	cmp	r3, r4
 8008366:	d1d5      	bne.n	8008314 <_malloc_r+0x80>
 8008368:	9b00      	ldr	r3, [sp, #0]
 800836a:	601a      	str	r2, [r3, #0]
 800836c:	e7e9      	b.n	8008342 <_malloc_r+0xae>
 800836e:	0023      	movs	r3, r4
 8008370:	6864      	ldr	r4, [r4, #4]
 8008372:	e7a2      	b.n	80082ba <_malloc_r+0x26>
 8008374:	002c      	movs	r4, r5
 8008376:	686d      	ldr	r5, [r5, #4]
 8008378:	e7ab      	b.n	80082d2 <_malloc_r+0x3e>
 800837a:	0013      	movs	r3, r2
 800837c:	e7c4      	b.n	8008308 <_malloc_r+0x74>
 800837e:	230c      	movs	r3, #12
 8008380:	0030      	movs	r0, r6
 8008382:	6033      	str	r3, [r6, #0]
 8008384:	f000 f810 	bl	80083a8 <__malloc_unlock>
 8008388:	e7cb      	b.n	8008322 <_malloc_r+0x8e>
 800838a:	6027      	str	r7, [r4, #0]
 800838c:	e7d9      	b.n	8008342 <_malloc_r+0xae>
 800838e:	605b      	str	r3, [r3, #4]
 8008390:	deff      	udf	#255	; 0xff
 8008392:	46c0      	nop			; (mov r8, r8)
 8008394:	200004f8 	.word	0x200004f8

08008398 <__malloc_lock>:
 8008398:	b510      	push	{r4, lr}
 800839a:	4802      	ldr	r0, [pc, #8]	; (80083a4 <__malloc_lock+0xc>)
 800839c:	f7ff ff0c 	bl	80081b8 <__retarget_lock_acquire_recursive>
 80083a0:	bd10      	pop	{r4, pc}
 80083a2:	46c0      	nop			; (mov r8, r8)
 80083a4:	200004f4 	.word	0x200004f4

080083a8 <__malloc_unlock>:
 80083a8:	b510      	push	{r4, lr}
 80083aa:	4802      	ldr	r0, [pc, #8]	; (80083b4 <__malloc_unlock+0xc>)
 80083ac:	f7ff ff05 	bl	80081ba <__retarget_lock_release_recursive>
 80083b0:	bd10      	pop	{r4, pc}
 80083b2:	46c0      	nop			; (mov r8, r8)
 80083b4:	200004f4 	.word	0x200004f4

080083b8 <__ssputs_r>:
 80083b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083ba:	b085      	sub	sp, #20
 80083bc:	9301      	str	r3, [sp, #4]
 80083be:	9203      	str	r2, [sp, #12]
 80083c0:	688e      	ldr	r6, [r1, #8]
 80083c2:	9a01      	ldr	r2, [sp, #4]
 80083c4:	0007      	movs	r7, r0
 80083c6:	000c      	movs	r4, r1
 80083c8:	680b      	ldr	r3, [r1, #0]
 80083ca:	4296      	cmp	r6, r2
 80083cc:	d831      	bhi.n	8008432 <__ssputs_r+0x7a>
 80083ce:	898a      	ldrh	r2, [r1, #12]
 80083d0:	2190      	movs	r1, #144	; 0x90
 80083d2:	00c9      	lsls	r1, r1, #3
 80083d4:	420a      	tst	r2, r1
 80083d6:	d029      	beq.n	800842c <__ssputs_r+0x74>
 80083d8:	2003      	movs	r0, #3
 80083da:	6921      	ldr	r1, [r4, #16]
 80083dc:	1a5b      	subs	r3, r3, r1
 80083de:	9302      	str	r3, [sp, #8]
 80083e0:	6963      	ldr	r3, [r4, #20]
 80083e2:	4343      	muls	r3, r0
 80083e4:	0fdd      	lsrs	r5, r3, #31
 80083e6:	18ed      	adds	r5, r5, r3
 80083e8:	9b01      	ldr	r3, [sp, #4]
 80083ea:	9802      	ldr	r0, [sp, #8]
 80083ec:	3301      	adds	r3, #1
 80083ee:	181b      	adds	r3, r3, r0
 80083f0:	106d      	asrs	r5, r5, #1
 80083f2:	42ab      	cmp	r3, r5
 80083f4:	d900      	bls.n	80083f8 <__ssputs_r+0x40>
 80083f6:	001d      	movs	r5, r3
 80083f8:	0552      	lsls	r2, r2, #21
 80083fa:	d529      	bpl.n	8008450 <__ssputs_r+0x98>
 80083fc:	0029      	movs	r1, r5
 80083fe:	0038      	movs	r0, r7
 8008400:	f7ff ff48 	bl	8008294 <_malloc_r>
 8008404:	1e06      	subs	r6, r0, #0
 8008406:	d02d      	beq.n	8008464 <__ssputs_r+0xac>
 8008408:	9a02      	ldr	r2, [sp, #8]
 800840a:	6921      	ldr	r1, [r4, #16]
 800840c:	f000 fae7 	bl	80089de <memcpy>
 8008410:	89a2      	ldrh	r2, [r4, #12]
 8008412:	4b19      	ldr	r3, [pc, #100]	; (8008478 <__ssputs_r+0xc0>)
 8008414:	401a      	ands	r2, r3
 8008416:	2380      	movs	r3, #128	; 0x80
 8008418:	4313      	orrs	r3, r2
 800841a:	81a3      	strh	r3, [r4, #12]
 800841c:	9b02      	ldr	r3, [sp, #8]
 800841e:	6126      	str	r6, [r4, #16]
 8008420:	18f6      	adds	r6, r6, r3
 8008422:	6026      	str	r6, [r4, #0]
 8008424:	6165      	str	r5, [r4, #20]
 8008426:	9e01      	ldr	r6, [sp, #4]
 8008428:	1aed      	subs	r5, r5, r3
 800842a:	60a5      	str	r5, [r4, #8]
 800842c:	9b01      	ldr	r3, [sp, #4]
 800842e:	429e      	cmp	r6, r3
 8008430:	d900      	bls.n	8008434 <__ssputs_r+0x7c>
 8008432:	9e01      	ldr	r6, [sp, #4]
 8008434:	0032      	movs	r2, r6
 8008436:	9903      	ldr	r1, [sp, #12]
 8008438:	6820      	ldr	r0, [r4, #0]
 800843a:	f000 fa9f 	bl	800897c <memmove>
 800843e:	2000      	movs	r0, #0
 8008440:	68a3      	ldr	r3, [r4, #8]
 8008442:	1b9b      	subs	r3, r3, r6
 8008444:	60a3      	str	r3, [r4, #8]
 8008446:	6823      	ldr	r3, [r4, #0]
 8008448:	199b      	adds	r3, r3, r6
 800844a:	6023      	str	r3, [r4, #0]
 800844c:	b005      	add	sp, #20
 800844e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008450:	002a      	movs	r2, r5
 8008452:	0038      	movs	r0, r7
 8008454:	f000 facc 	bl	80089f0 <_realloc_r>
 8008458:	1e06      	subs	r6, r0, #0
 800845a:	d1df      	bne.n	800841c <__ssputs_r+0x64>
 800845c:	0038      	movs	r0, r7
 800845e:	6921      	ldr	r1, [r4, #16]
 8008460:	f7ff feac 	bl	80081bc <_free_r>
 8008464:	230c      	movs	r3, #12
 8008466:	2001      	movs	r0, #1
 8008468:	603b      	str	r3, [r7, #0]
 800846a:	89a2      	ldrh	r2, [r4, #12]
 800846c:	3334      	adds	r3, #52	; 0x34
 800846e:	4313      	orrs	r3, r2
 8008470:	81a3      	strh	r3, [r4, #12]
 8008472:	4240      	negs	r0, r0
 8008474:	e7ea      	b.n	800844c <__ssputs_r+0x94>
 8008476:	46c0      	nop			; (mov r8, r8)
 8008478:	fffffb7f 	.word	0xfffffb7f

0800847c <_svfiprintf_r>:
 800847c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800847e:	b0a1      	sub	sp, #132	; 0x84
 8008480:	9003      	str	r0, [sp, #12]
 8008482:	001d      	movs	r5, r3
 8008484:	898b      	ldrh	r3, [r1, #12]
 8008486:	000f      	movs	r7, r1
 8008488:	0016      	movs	r6, r2
 800848a:	061b      	lsls	r3, r3, #24
 800848c:	d511      	bpl.n	80084b2 <_svfiprintf_r+0x36>
 800848e:	690b      	ldr	r3, [r1, #16]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d10e      	bne.n	80084b2 <_svfiprintf_r+0x36>
 8008494:	2140      	movs	r1, #64	; 0x40
 8008496:	f7ff fefd 	bl	8008294 <_malloc_r>
 800849a:	6038      	str	r0, [r7, #0]
 800849c:	6138      	str	r0, [r7, #16]
 800849e:	2800      	cmp	r0, #0
 80084a0:	d105      	bne.n	80084ae <_svfiprintf_r+0x32>
 80084a2:	230c      	movs	r3, #12
 80084a4:	9a03      	ldr	r2, [sp, #12]
 80084a6:	3801      	subs	r0, #1
 80084a8:	6013      	str	r3, [r2, #0]
 80084aa:	b021      	add	sp, #132	; 0x84
 80084ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084ae:	2340      	movs	r3, #64	; 0x40
 80084b0:	617b      	str	r3, [r7, #20]
 80084b2:	2300      	movs	r3, #0
 80084b4:	ac08      	add	r4, sp, #32
 80084b6:	6163      	str	r3, [r4, #20]
 80084b8:	3320      	adds	r3, #32
 80084ba:	7663      	strb	r3, [r4, #25]
 80084bc:	3310      	adds	r3, #16
 80084be:	76a3      	strb	r3, [r4, #26]
 80084c0:	9507      	str	r5, [sp, #28]
 80084c2:	0035      	movs	r5, r6
 80084c4:	782b      	ldrb	r3, [r5, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d001      	beq.n	80084ce <_svfiprintf_r+0x52>
 80084ca:	2b25      	cmp	r3, #37	; 0x25
 80084cc:	d148      	bne.n	8008560 <_svfiprintf_r+0xe4>
 80084ce:	1bab      	subs	r3, r5, r6
 80084d0:	9305      	str	r3, [sp, #20]
 80084d2:	42b5      	cmp	r5, r6
 80084d4:	d00b      	beq.n	80084ee <_svfiprintf_r+0x72>
 80084d6:	0032      	movs	r2, r6
 80084d8:	0039      	movs	r1, r7
 80084da:	9803      	ldr	r0, [sp, #12]
 80084dc:	f7ff ff6c 	bl	80083b8 <__ssputs_r>
 80084e0:	3001      	adds	r0, #1
 80084e2:	d100      	bne.n	80084e6 <_svfiprintf_r+0x6a>
 80084e4:	e0af      	b.n	8008646 <_svfiprintf_r+0x1ca>
 80084e6:	6963      	ldr	r3, [r4, #20]
 80084e8:	9a05      	ldr	r2, [sp, #20]
 80084ea:	189b      	adds	r3, r3, r2
 80084ec:	6163      	str	r3, [r4, #20]
 80084ee:	782b      	ldrb	r3, [r5, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d100      	bne.n	80084f6 <_svfiprintf_r+0x7a>
 80084f4:	e0a7      	b.n	8008646 <_svfiprintf_r+0x1ca>
 80084f6:	2201      	movs	r2, #1
 80084f8:	2300      	movs	r3, #0
 80084fa:	4252      	negs	r2, r2
 80084fc:	6062      	str	r2, [r4, #4]
 80084fe:	a904      	add	r1, sp, #16
 8008500:	3254      	adds	r2, #84	; 0x54
 8008502:	1852      	adds	r2, r2, r1
 8008504:	1c6e      	adds	r6, r5, #1
 8008506:	6023      	str	r3, [r4, #0]
 8008508:	60e3      	str	r3, [r4, #12]
 800850a:	60a3      	str	r3, [r4, #8]
 800850c:	7013      	strb	r3, [r2, #0]
 800850e:	65a3      	str	r3, [r4, #88]	; 0x58
 8008510:	4b55      	ldr	r3, [pc, #340]	; (8008668 <_svfiprintf_r+0x1ec>)
 8008512:	2205      	movs	r2, #5
 8008514:	0018      	movs	r0, r3
 8008516:	7831      	ldrb	r1, [r6, #0]
 8008518:	9305      	str	r3, [sp, #20]
 800851a:	f000 fa55 	bl	80089c8 <memchr>
 800851e:	1c75      	adds	r5, r6, #1
 8008520:	2800      	cmp	r0, #0
 8008522:	d11f      	bne.n	8008564 <_svfiprintf_r+0xe8>
 8008524:	6822      	ldr	r2, [r4, #0]
 8008526:	06d3      	lsls	r3, r2, #27
 8008528:	d504      	bpl.n	8008534 <_svfiprintf_r+0xb8>
 800852a:	2353      	movs	r3, #83	; 0x53
 800852c:	a904      	add	r1, sp, #16
 800852e:	185b      	adds	r3, r3, r1
 8008530:	2120      	movs	r1, #32
 8008532:	7019      	strb	r1, [r3, #0]
 8008534:	0713      	lsls	r3, r2, #28
 8008536:	d504      	bpl.n	8008542 <_svfiprintf_r+0xc6>
 8008538:	2353      	movs	r3, #83	; 0x53
 800853a:	a904      	add	r1, sp, #16
 800853c:	185b      	adds	r3, r3, r1
 800853e:	212b      	movs	r1, #43	; 0x2b
 8008540:	7019      	strb	r1, [r3, #0]
 8008542:	7833      	ldrb	r3, [r6, #0]
 8008544:	2b2a      	cmp	r3, #42	; 0x2a
 8008546:	d016      	beq.n	8008576 <_svfiprintf_r+0xfa>
 8008548:	0035      	movs	r5, r6
 800854a:	2100      	movs	r1, #0
 800854c:	200a      	movs	r0, #10
 800854e:	68e3      	ldr	r3, [r4, #12]
 8008550:	782a      	ldrb	r2, [r5, #0]
 8008552:	1c6e      	adds	r6, r5, #1
 8008554:	3a30      	subs	r2, #48	; 0x30
 8008556:	2a09      	cmp	r2, #9
 8008558:	d94e      	bls.n	80085f8 <_svfiprintf_r+0x17c>
 800855a:	2900      	cmp	r1, #0
 800855c:	d111      	bne.n	8008582 <_svfiprintf_r+0x106>
 800855e:	e017      	b.n	8008590 <_svfiprintf_r+0x114>
 8008560:	3501      	adds	r5, #1
 8008562:	e7af      	b.n	80084c4 <_svfiprintf_r+0x48>
 8008564:	9b05      	ldr	r3, [sp, #20]
 8008566:	6822      	ldr	r2, [r4, #0]
 8008568:	1ac0      	subs	r0, r0, r3
 800856a:	2301      	movs	r3, #1
 800856c:	4083      	lsls	r3, r0
 800856e:	4313      	orrs	r3, r2
 8008570:	002e      	movs	r6, r5
 8008572:	6023      	str	r3, [r4, #0]
 8008574:	e7cc      	b.n	8008510 <_svfiprintf_r+0x94>
 8008576:	9b07      	ldr	r3, [sp, #28]
 8008578:	1d19      	adds	r1, r3, #4
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	9107      	str	r1, [sp, #28]
 800857e:	2b00      	cmp	r3, #0
 8008580:	db01      	blt.n	8008586 <_svfiprintf_r+0x10a>
 8008582:	930b      	str	r3, [sp, #44]	; 0x2c
 8008584:	e004      	b.n	8008590 <_svfiprintf_r+0x114>
 8008586:	425b      	negs	r3, r3
 8008588:	60e3      	str	r3, [r4, #12]
 800858a:	2302      	movs	r3, #2
 800858c:	4313      	orrs	r3, r2
 800858e:	6023      	str	r3, [r4, #0]
 8008590:	782b      	ldrb	r3, [r5, #0]
 8008592:	2b2e      	cmp	r3, #46	; 0x2e
 8008594:	d10a      	bne.n	80085ac <_svfiprintf_r+0x130>
 8008596:	786b      	ldrb	r3, [r5, #1]
 8008598:	2b2a      	cmp	r3, #42	; 0x2a
 800859a:	d135      	bne.n	8008608 <_svfiprintf_r+0x18c>
 800859c:	9b07      	ldr	r3, [sp, #28]
 800859e:	3502      	adds	r5, #2
 80085a0:	1d1a      	adds	r2, r3, #4
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	9207      	str	r2, [sp, #28]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	db2b      	blt.n	8008602 <_svfiprintf_r+0x186>
 80085aa:	9309      	str	r3, [sp, #36]	; 0x24
 80085ac:	4e2f      	ldr	r6, [pc, #188]	; (800866c <_svfiprintf_r+0x1f0>)
 80085ae:	2203      	movs	r2, #3
 80085b0:	0030      	movs	r0, r6
 80085b2:	7829      	ldrb	r1, [r5, #0]
 80085b4:	f000 fa08 	bl	80089c8 <memchr>
 80085b8:	2800      	cmp	r0, #0
 80085ba:	d006      	beq.n	80085ca <_svfiprintf_r+0x14e>
 80085bc:	2340      	movs	r3, #64	; 0x40
 80085be:	1b80      	subs	r0, r0, r6
 80085c0:	4083      	lsls	r3, r0
 80085c2:	6822      	ldr	r2, [r4, #0]
 80085c4:	3501      	adds	r5, #1
 80085c6:	4313      	orrs	r3, r2
 80085c8:	6023      	str	r3, [r4, #0]
 80085ca:	7829      	ldrb	r1, [r5, #0]
 80085cc:	2206      	movs	r2, #6
 80085ce:	4828      	ldr	r0, [pc, #160]	; (8008670 <_svfiprintf_r+0x1f4>)
 80085d0:	1c6e      	adds	r6, r5, #1
 80085d2:	7621      	strb	r1, [r4, #24]
 80085d4:	f000 f9f8 	bl	80089c8 <memchr>
 80085d8:	2800      	cmp	r0, #0
 80085da:	d03c      	beq.n	8008656 <_svfiprintf_r+0x1da>
 80085dc:	4b25      	ldr	r3, [pc, #148]	; (8008674 <_svfiprintf_r+0x1f8>)
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d125      	bne.n	800862e <_svfiprintf_r+0x1b2>
 80085e2:	2207      	movs	r2, #7
 80085e4:	9b07      	ldr	r3, [sp, #28]
 80085e6:	3307      	adds	r3, #7
 80085e8:	4393      	bics	r3, r2
 80085ea:	3308      	adds	r3, #8
 80085ec:	9307      	str	r3, [sp, #28]
 80085ee:	6963      	ldr	r3, [r4, #20]
 80085f0:	9a04      	ldr	r2, [sp, #16]
 80085f2:	189b      	adds	r3, r3, r2
 80085f4:	6163      	str	r3, [r4, #20]
 80085f6:	e764      	b.n	80084c2 <_svfiprintf_r+0x46>
 80085f8:	4343      	muls	r3, r0
 80085fa:	0035      	movs	r5, r6
 80085fc:	2101      	movs	r1, #1
 80085fe:	189b      	adds	r3, r3, r2
 8008600:	e7a6      	b.n	8008550 <_svfiprintf_r+0xd4>
 8008602:	2301      	movs	r3, #1
 8008604:	425b      	negs	r3, r3
 8008606:	e7d0      	b.n	80085aa <_svfiprintf_r+0x12e>
 8008608:	2300      	movs	r3, #0
 800860a:	200a      	movs	r0, #10
 800860c:	001a      	movs	r2, r3
 800860e:	3501      	adds	r5, #1
 8008610:	6063      	str	r3, [r4, #4]
 8008612:	7829      	ldrb	r1, [r5, #0]
 8008614:	1c6e      	adds	r6, r5, #1
 8008616:	3930      	subs	r1, #48	; 0x30
 8008618:	2909      	cmp	r1, #9
 800861a:	d903      	bls.n	8008624 <_svfiprintf_r+0x1a8>
 800861c:	2b00      	cmp	r3, #0
 800861e:	d0c5      	beq.n	80085ac <_svfiprintf_r+0x130>
 8008620:	9209      	str	r2, [sp, #36]	; 0x24
 8008622:	e7c3      	b.n	80085ac <_svfiprintf_r+0x130>
 8008624:	4342      	muls	r2, r0
 8008626:	0035      	movs	r5, r6
 8008628:	2301      	movs	r3, #1
 800862a:	1852      	adds	r2, r2, r1
 800862c:	e7f1      	b.n	8008612 <_svfiprintf_r+0x196>
 800862e:	aa07      	add	r2, sp, #28
 8008630:	9200      	str	r2, [sp, #0]
 8008632:	0021      	movs	r1, r4
 8008634:	003a      	movs	r2, r7
 8008636:	4b10      	ldr	r3, [pc, #64]	; (8008678 <_svfiprintf_r+0x1fc>)
 8008638:	9803      	ldr	r0, [sp, #12]
 800863a:	e000      	b.n	800863e <_svfiprintf_r+0x1c2>
 800863c:	bf00      	nop
 800863e:	9004      	str	r0, [sp, #16]
 8008640:	9b04      	ldr	r3, [sp, #16]
 8008642:	3301      	adds	r3, #1
 8008644:	d1d3      	bne.n	80085ee <_svfiprintf_r+0x172>
 8008646:	89bb      	ldrh	r3, [r7, #12]
 8008648:	980d      	ldr	r0, [sp, #52]	; 0x34
 800864a:	065b      	lsls	r3, r3, #25
 800864c:	d400      	bmi.n	8008650 <_svfiprintf_r+0x1d4>
 800864e:	e72c      	b.n	80084aa <_svfiprintf_r+0x2e>
 8008650:	2001      	movs	r0, #1
 8008652:	4240      	negs	r0, r0
 8008654:	e729      	b.n	80084aa <_svfiprintf_r+0x2e>
 8008656:	aa07      	add	r2, sp, #28
 8008658:	9200      	str	r2, [sp, #0]
 800865a:	0021      	movs	r1, r4
 800865c:	003a      	movs	r2, r7
 800865e:	4b06      	ldr	r3, [pc, #24]	; (8008678 <_svfiprintf_r+0x1fc>)
 8008660:	9803      	ldr	r0, [sp, #12]
 8008662:	f000 f87b 	bl	800875c <_printf_i>
 8008666:	e7ea      	b.n	800863e <_svfiprintf_r+0x1c2>
 8008668:	08008ce4 	.word	0x08008ce4
 800866c:	08008cea 	.word	0x08008cea
 8008670:	08008cee 	.word	0x08008cee
 8008674:	00000000 	.word	0x00000000
 8008678:	080083b9 	.word	0x080083b9

0800867c <_printf_common>:
 800867c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800867e:	0016      	movs	r6, r2
 8008680:	9301      	str	r3, [sp, #4]
 8008682:	688a      	ldr	r2, [r1, #8]
 8008684:	690b      	ldr	r3, [r1, #16]
 8008686:	000c      	movs	r4, r1
 8008688:	9000      	str	r0, [sp, #0]
 800868a:	4293      	cmp	r3, r2
 800868c:	da00      	bge.n	8008690 <_printf_common+0x14>
 800868e:	0013      	movs	r3, r2
 8008690:	0022      	movs	r2, r4
 8008692:	6033      	str	r3, [r6, #0]
 8008694:	3243      	adds	r2, #67	; 0x43
 8008696:	7812      	ldrb	r2, [r2, #0]
 8008698:	2a00      	cmp	r2, #0
 800869a:	d001      	beq.n	80086a0 <_printf_common+0x24>
 800869c:	3301      	adds	r3, #1
 800869e:	6033      	str	r3, [r6, #0]
 80086a0:	6823      	ldr	r3, [r4, #0]
 80086a2:	069b      	lsls	r3, r3, #26
 80086a4:	d502      	bpl.n	80086ac <_printf_common+0x30>
 80086a6:	6833      	ldr	r3, [r6, #0]
 80086a8:	3302      	adds	r3, #2
 80086aa:	6033      	str	r3, [r6, #0]
 80086ac:	6822      	ldr	r2, [r4, #0]
 80086ae:	2306      	movs	r3, #6
 80086b0:	0015      	movs	r5, r2
 80086b2:	401d      	ands	r5, r3
 80086b4:	421a      	tst	r2, r3
 80086b6:	d027      	beq.n	8008708 <_printf_common+0x8c>
 80086b8:	0023      	movs	r3, r4
 80086ba:	3343      	adds	r3, #67	; 0x43
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	1e5a      	subs	r2, r3, #1
 80086c0:	4193      	sbcs	r3, r2
 80086c2:	6822      	ldr	r2, [r4, #0]
 80086c4:	0692      	lsls	r2, r2, #26
 80086c6:	d430      	bmi.n	800872a <_printf_common+0xae>
 80086c8:	0022      	movs	r2, r4
 80086ca:	9901      	ldr	r1, [sp, #4]
 80086cc:	9800      	ldr	r0, [sp, #0]
 80086ce:	9d08      	ldr	r5, [sp, #32]
 80086d0:	3243      	adds	r2, #67	; 0x43
 80086d2:	47a8      	blx	r5
 80086d4:	3001      	adds	r0, #1
 80086d6:	d025      	beq.n	8008724 <_printf_common+0xa8>
 80086d8:	2206      	movs	r2, #6
 80086da:	6823      	ldr	r3, [r4, #0]
 80086dc:	2500      	movs	r5, #0
 80086de:	4013      	ands	r3, r2
 80086e0:	2b04      	cmp	r3, #4
 80086e2:	d105      	bne.n	80086f0 <_printf_common+0x74>
 80086e4:	6833      	ldr	r3, [r6, #0]
 80086e6:	68e5      	ldr	r5, [r4, #12]
 80086e8:	1aed      	subs	r5, r5, r3
 80086ea:	43eb      	mvns	r3, r5
 80086ec:	17db      	asrs	r3, r3, #31
 80086ee:	401d      	ands	r5, r3
 80086f0:	68a3      	ldr	r3, [r4, #8]
 80086f2:	6922      	ldr	r2, [r4, #16]
 80086f4:	4293      	cmp	r3, r2
 80086f6:	dd01      	ble.n	80086fc <_printf_common+0x80>
 80086f8:	1a9b      	subs	r3, r3, r2
 80086fa:	18ed      	adds	r5, r5, r3
 80086fc:	2600      	movs	r6, #0
 80086fe:	42b5      	cmp	r5, r6
 8008700:	d120      	bne.n	8008744 <_printf_common+0xc8>
 8008702:	2000      	movs	r0, #0
 8008704:	e010      	b.n	8008728 <_printf_common+0xac>
 8008706:	3501      	adds	r5, #1
 8008708:	68e3      	ldr	r3, [r4, #12]
 800870a:	6832      	ldr	r2, [r6, #0]
 800870c:	1a9b      	subs	r3, r3, r2
 800870e:	42ab      	cmp	r3, r5
 8008710:	ddd2      	ble.n	80086b8 <_printf_common+0x3c>
 8008712:	0022      	movs	r2, r4
 8008714:	2301      	movs	r3, #1
 8008716:	9901      	ldr	r1, [sp, #4]
 8008718:	9800      	ldr	r0, [sp, #0]
 800871a:	9f08      	ldr	r7, [sp, #32]
 800871c:	3219      	adds	r2, #25
 800871e:	47b8      	blx	r7
 8008720:	3001      	adds	r0, #1
 8008722:	d1f0      	bne.n	8008706 <_printf_common+0x8a>
 8008724:	2001      	movs	r0, #1
 8008726:	4240      	negs	r0, r0
 8008728:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800872a:	2030      	movs	r0, #48	; 0x30
 800872c:	18e1      	adds	r1, r4, r3
 800872e:	3143      	adds	r1, #67	; 0x43
 8008730:	7008      	strb	r0, [r1, #0]
 8008732:	0021      	movs	r1, r4
 8008734:	1c5a      	adds	r2, r3, #1
 8008736:	3145      	adds	r1, #69	; 0x45
 8008738:	7809      	ldrb	r1, [r1, #0]
 800873a:	18a2      	adds	r2, r4, r2
 800873c:	3243      	adds	r2, #67	; 0x43
 800873e:	3302      	adds	r3, #2
 8008740:	7011      	strb	r1, [r2, #0]
 8008742:	e7c1      	b.n	80086c8 <_printf_common+0x4c>
 8008744:	0022      	movs	r2, r4
 8008746:	2301      	movs	r3, #1
 8008748:	9901      	ldr	r1, [sp, #4]
 800874a:	9800      	ldr	r0, [sp, #0]
 800874c:	9f08      	ldr	r7, [sp, #32]
 800874e:	321a      	adds	r2, #26
 8008750:	47b8      	blx	r7
 8008752:	3001      	adds	r0, #1
 8008754:	d0e6      	beq.n	8008724 <_printf_common+0xa8>
 8008756:	3601      	adds	r6, #1
 8008758:	e7d1      	b.n	80086fe <_printf_common+0x82>
	...

0800875c <_printf_i>:
 800875c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800875e:	b08b      	sub	sp, #44	; 0x2c
 8008760:	9206      	str	r2, [sp, #24]
 8008762:	000a      	movs	r2, r1
 8008764:	3243      	adds	r2, #67	; 0x43
 8008766:	9307      	str	r3, [sp, #28]
 8008768:	9005      	str	r0, [sp, #20]
 800876a:	9204      	str	r2, [sp, #16]
 800876c:	7e0a      	ldrb	r2, [r1, #24]
 800876e:	000c      	movs	r4, r1
 8008770:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008772:	2a78      	cmp	r2, #120	; 0x78
 8008774:	d809      	bhi.n	800878a <_printf_i+0x2e>
 8008776:	2a62      	cmp	r2, #98	; 0x62
 8008778:	d80b      	bhi.n	8008792 <_printf_i+0x36>
 800877a:	2a00      	cmp	r2, #0
 800877c:	d100      	bne.n	8008780 <_printf_i+0x24>
 800877e:	e0be      	b.n	80088fe <_printf_i+0x1a2>
 8008780:	497c      	ldr	r1, [pc, #496]	; (8008974 <_printf_i+0x218>)
 8008782:	9103      	str	r1, [sp, #12]
 8008784:	2a58      	cmp	r2, #88	; 0x58
 8008786:	d100      	bne.n	800878a <_printf_i+0x2e>
 8008788:	e093      	b.n	80088b2 <_printf_i+0x156>
 800878a:	0026      	movs	r6, r4
 800878c:	3642      	adds	r6, #66	; 0x42
 800878e:	7032      	strb	r2, [r6, #0]
 8008790:	e022      	b.n	80087d8 <_printf_i+0x7c>
 8008792:	0010      	movs	r0, r2
 8008794:	3863      	subs	r0, #99	; 0x63
 8008796:	2815      	cmp	r0, #21
 8008798:	d8f7      	bhi.n	800878a <_printf_i+0x2e>
 800879a:	f7f7 fcc5 	bl	8000128 <__gnu_thumb1_case_shi>
 800879e:	0016      	.short	0x0016
 80087a0:	fff6001f 	.word	0xfff6001f
 80087a4:	fff6fff6 	.word	0xfff6fff6
 80087a8:	001ffff6 	.word	0x001ffff6
 80087ac:	fff6fff6 	.word	0xfff6fff6
 80087b0:	fff6fff6 	.word	0xfff6fff6
 80087b4:	003600a3 	.word	0x003600a3
 80087b8:	fff60083 	.word	0xfff60083
 80087bc:	00b4fff6 	.word	0x00b4fff6
 80087c0:	0036fff6 	.word	0x0036fff6
 80087c4:	fff6fff6 	.word	0xfff6fff6
 80087c8:	0087      	.short	0x0087
 80087ca:	0026      	movs	r6, r4
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	3642      	adds	r6, #66	; 0x42
 80087d0:	1d11      	adds	r1, r2, #4
 80087d2:	6019      	str	r1, [r3, #0]
 80087d4:	6813      	ldr	r3, [r2, #0]
 80087d6:	7033      	strb	r3, [r6, #0]
 80087d8:	2301      	movs	r3, #1
 80087da:	e0a2      	b.n	8008922 <_printf_i+0x1c6>
 80087dc:	6818      	ldr	r0, [r3, #0]
 80087de:	6809      	ldr	r1, [r1, #0]
 80087e0:	1d02      	adds	r2, r0, #4
 80087e2:	060d      	lsls	r5, r1, #24
 80087e4:	d50b      	bpl.n	80087fe <_printf_i+0xa2>
 80087e6:	6805      	ldr	r5, [r0, #0]
 80087e8:	601a      	str	r2, [r3, #0]
 80087ea:	2d00      	cmp	r5, #0
 80087ec:	da03      	bge.n	80087f6 <_printf_i+0x9a>
 80087ee:	232d      	movs	r3, #45	; 0x2d
 80087f0:	9a04      	ldr	r2, [sp, #16]
 80087f2:	426d      	negs	r5, r5
 80087f4:	7013      	strb	r3, [r2, #0]
 80087f6:	4b5f      	ldr	r3, [pc, #380]	; (8008974 <_printf_i+0x218>)
 80087f8:	270a      	movs	r7, #10
 80087fa:	9303      	str	r3, [sp, #12]
 80087fc:	e01b      	b.n	8008836 <_printf_i+0xda>
 80087fe:	6805      	ldr	r5, [r0, #0]
 8008800:	601a      	str	r2, [r3, #0]
 8008802:	0649      	lsls	r1, r1, #25
 8008804:	d5f1      	bpl.n	80087ea <_printf_i+0x8e>
 8008806:	b22d      	sxth	r5, r5
 8008808:	e7ef      	b.n	80087ea <_printf_i+0x8e>
 800880a:	680d      	ldr	r5, [r1, #0]
 800880c:	6819      	ldr	r1, [r3, #0]
 800880e:	1d08      	adds	r0, r1, #4
 8008810:	6018      	str	r0, [r3, #0]
 8008812:	062e      	lsls	r6, r5, #24
 8008814:	d501      	bpl.n	800881a <_printf_i+0xbe>
 8008816:	680d      	ldr	r5, [r1, #0]
 8008818:	e003      	b.n	8008822 <_printf_i+0xc6>
 800881a:	066d      	lsls	r5, r5, #25
 800881c:	d5fb      	bpl.n	8008816 <_printf_i+0xba>
 800881e:	680d      	ldr	r5, [r1, #0]
 8008820:	b2ad      	uxth	r5, r5
 8008822:	4b54      	ldr	r3, [pc, #336]	; (8008974 <_printf_i+0x218>)
 8008824:	2708      	movs	r7, #8
 8008826:	9303      	str	r3, [sp, #12]
 8008828:	2a6f      	cmp	r2, #111	; 0x6f
 800882a:	d000      	beq.n	800882e <_printf_i+0xd2>
 800882c:	3702      	adds	r7, #2
 800882e:	0023      	movs	r3, r4
 8008830:	2200      	movs	r2, #0
 8008832:	3343      	adds	r3, #67	; 0x43
 8008834:	701a      	strb	r2, [r3, #0]
 8008836:	6863      	ldr	r3, [r4, #4]
 8008838:	60a3      	str	r3, [r4, #8]
 800883a:	2b00      	cmp	r3, #0
 800883c:	db03      	blt.n	8008846 <_printf_i+0xea>
 800883e:	2104      	movs	r1, #4
 8008840:	6822      	ldr	r2, [r4, #0]
 8008842:	438a      	bics	r2, r1
 8008844:	6022      	str	r2, [r4, #0]
 8008846:	2d00      	cmp	r5, #0
 8008848:	d102      	bne.n	8008850 <_printf_i+0xf4>
 800884a:	9e04      	ldr	r6, [sp, #16]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00c      	beq.n	800886a <_printf_i+0x10e>
 8008850:	9e04      	ldr	r6, [sp, #16]
 8008852:	0028      	movs	r0, r5
 8008854:	0039      	movs	r1, r7
 8008856:	f7f7 fcf7 	bl	8000248 <__aeabi_uidivmod>
 800885a:	9b03      	ldr	r3, [sp, #12]
 800885c:	3e01      	subs	r6, #1
 800885e:	5c5b      	ldrb	r3, [r3, r1]
 8008860:	7033      	strb	r3, [r6, #0]
 8008862:	002b      	movs	r3, r5
 8008864:	0005      	movs	r5, r0
 8008866:	429f      	cmp	r7, r3
 8008868:	d9f3      	bls.n	8008852 <_printf_i+0xf6>
 800886a:	2f08      	cmp	r7, #8
 800886c:	d109      	bne.n	8008882 <_printf_i+0x126>
 800886e:	6823      	ldr	r3, [r4, #0]
 8008870:	07db      	lsls	r3, r3, #31
 8008872:	d506      	bpl.n	8008882 <_printf_i+0x126>
 8008874:	6862      	ldr	r2, [r4, #4]
 8008876:	6923      	ldr	r3, [r4, #16]
 8008878:	429a      	cmp	r2, r3
 800887a:	dc02      	bgt.n	8008882 <_printf_i+0x126>
 800887c:	2330      	movs	r3, #48	; 0x30
 800887e:	3e01      	subs	r6, #1
 8008880:	7033      	strb	r3, [r6, #0]
 8008882:	9b04      	ldr	r3, [sp, #16]
 8008884:	1b9b      	subs	r3, r3, r6
 8008886:	6123      	str	r3, [r4, #16]
 8008888:	9b07      	ldr	r3, [sp, #28]
 800888a:	0021      	movs	r1, r4
 800888c:	9300      	str	r3, [sp, #0]
 800888e:	9805      	ldr	r0, [sp, #20]
 8008890:	9b06      	ldr	r3, [sp, #24]
 8008892:	aa09      	add	r2, sp, #36	; 0x24
 8008894:	f7ff fef2 	bl	800867c <_printf_common>
 8008898:	3001      	adds	r0, #1
 800889a:	d147      	bne.n	800892c <_printf_i+0x1d0>
 800889c:	2001      	movs	r0, #1
 800889e:	4240      	negs	r0, r0
 80088a0:	b00b      	add	sp, #44	; 0x2c
 80088a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088a4:	2220      	movs	r2, #32
 80088a6:	6809      	ldr	r1, [r1, #0]
 80088a8:	430a      	orrs	r2, r1
 80088aa:	6022      	str	r2, [r4, #0]
 80088ac:	2278      	movs	r2, #120	; 0x78
 80088ae:	4932      	ldr	r1, [pc, #200]	; (8008978 <_printf_i+0x21c>)
 80088b0:	9103      	str	r1, [sp, #12]
 80088b2:	0021      	movs	r1, r4
 80088b4:	3145      	adds	r1, #69	; 0x45
 80088b6:	700a      	strb	r2, [r1, #0]
 80088b8:	6819      	ldr	r1, [r3, #0]
 80088ba:	6822      	ldr	r2, [r4, #0]
 80088bc:	c920      	ldmia	r1!, {r5}
 80088be:	0610      	lsls	r0, r2, #24
 80088c0:	d402      	bmi.n	80088c8 <_printf_i+0x16c>
 80088c2:	0650      	lsls	r0, r2, #25
 80088c4:	d500      	bpl.n	80088c8 <_printf_i+0x16c>
 80088c6:	b2ad      	uxth	r5, r5
 80088c8:	6019      	str	r1, [r3, #0]
 80088ca:	07d3      	lsls	r3, r2, #31
 80088cc:	d502      	bpl.n	80088d4 <_printf_i+0x178>
 80088ce:	2320      	movs	r3, #32
 80088d0:	4313      	orrs	r3, r2
 80088d2:	6023      	str	r3, [r4, #0]
 80088d4:	2710      	movs	r7, #16
 80088d6:	2d00      	cmp	r5, #0
 80088d8:	d1a9      	bne.n	800882e <_printf_i+0xd2>
 80088da:	2220      	movs	r2, #32
 80088dc:	6823      	ldr	r3, [r4, #0]
 80088de:	4393      	bics	r3, r2
 80088e0:	6023      	str	r3, [r4, #0]
 80088e2:	e7a4      	b.n	800882e <_printf_i+0xd2>
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	680d      	ldr	r5, [r1, #0]
 80088e8:	1d10      	adds	r0, r2, #4
 80088ea:	6949      	ldr	r1, [r1, #20]
 80088ec:	6018      	str	r0, [r3, #0]
 80088ee:	6813      	ldr	r3, [r2, #0]
 80088f0:	062e      	lsls	r6, r5, #24
 80088f2:	d501      	bpl.n	80088f8 <_printf_i+0x19c>
 80088f4:	6019      	str	r1, [r3, #0]
 80088f6:	e002      	b.n	80088fe <_printf_i+0x1a2>
 80088f8:	066d      	lsls	r5, r5, #25
 80088fa:	d5fb      	bpl.n	80088f4 <_printf_i+0x198>
 80088fc:	8019      	strh	r1, [r3, #0]
 80088fe:	2300      	movs	r3, #0
 8008900:	9e04      	ldr	r6, [sp, #16]
 8008902:	6123      	str	r3, [r4, #16]
 8008904:	e7c0      	b.n	8008888 <_printf_i+0x12c>
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	1d11      	adds	r1, r2, #4
 800890a:	6019      	str	r1, [r3, #0]
 800890c:	6816      	ldr	r6, [r2, #0]
 800890e:	2100      	movs	r1, #0
 8008910:	0030      	movs	r0, r6
 8008912:	6862      	ldr	r2, [r4, #4]
 8008914:	f000 f858 	bl	80089c8 <memchr>
 8008918:	2800      	cmp	r0, #0
 800891a:	d001      	beq.n	8008920 <_printf_i+0x1c4>
 800891c:	1b80      	subs	r0, r0, r6
 800891e:	6060      	str	r0, [r4, #4]
 8008920:	6863      	ldr	r3, [r4, #4]
 8008922:	6123      	str	r3, [r4, #16]
 8008924:	2300      	movs	r3, #0
 8008926:	9a04      	ldr	r2, [sp, #16]
 8008928:	7013      	strb	r3, [r2, #0]
 800892a:	e7ad      	b.n	8008888 <_printf_i+0x12c>
 800892c:	0032      	movs	r2, r6
 800892e:	6923      	ldr	r3, [r4, #16]
 8008930:	9906      	ldr	r1, [sp, #24]
 8008932:	9805      	ldr	r0, [sp, #20]
 8008934:	9d07      	ldr	r5, [sp, #28]
 8008936:	47a8      	blx	r5
 8008938:	3001      	adds	r0, #1
 800893a:	d0af      	beq.n	800889c <_printf_i+0x140>
 800893c:	6823      	ldr	r3, [r4, #0]
 800893e:	079b      	lsls	r3, r3, #30
 8008940:	d415      	bmi.n	800896e <_printf_i+0x212>
 8008942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008944:	68e0      	ldr	r0, [r4, #12]
 8008946:	4298      	cmp	r0, r3
 8008948:	daaa      	bge.n	80088a0 <_printf_i+0x144>
 800894a:	0018      	movs	r0, r3
 800894c:	e7a8      	b.n	80088a0 <_printf_i+0x144>
 800894e:	0022      	movs	r2, r4
 8008950:	2301      	movs	r3, #1
 8008952:	9906      	ldr	r1, [sp, #24]
 8008954:	9805      	ldr	r0, [sp, #20]
 8008956:	9e07      	ldr	r6, [sp, #28]
 8008958:	3219      	adds	r2, #25
 800895a:	47b0      	blx	r6
 800895c:	3001      	adds	r0, #1
 800895e:	d09d      	beq.n	800889c <_printf_i+0x140>
 8008960:	3501      	adds	r5, #1
 8008962:	68e3      	ldr	r3, [r4, #12]
 8008964:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008966:	1a9b      	subs	r3, r3, r2
 8008968:	42ab      	cmp	r3, r5
 800896a:	dcf0      	bgt.n	800894e <_printf_i+0x1f2>
 800896c:	e7e9      	b.n	8008942 <_printf_i+0x1e6>
 800896e:	2500      	movs	r5, #0
 8008970:	e7f7      	b.n	8008962 <_printf_i+0x206>
 8008972:	46c0      	nop			; (mov r8, r8)
 8008974:	08008cf5 	.word	0x08008cf5
 8008978:	08008d06 	.word	0x08008d06

0800897c <memmove>:
 800897c:	b510      	push	{r4, lr}
 800897e:	4288      	cmp	r0, r1
 8008980:	d902      	bls.n	8008988 <memmove+0xc>
 8008982:	188b      	adds	r3, r1, r2
 8008984:	4298      	cmp	r0, r3
 8008986:	d303      	bcc.n	8008990 <memmove+0x14>
 8008988:	2300      	movs	r3, #0
 800898a:	e007      	b.n	800899c <memmove+0x20>
 800898c:	5c8b      	ldrb	r3, [r1, r2]
 800898e:	5483      	strb	r3, [r0, r2]
 8008990:	3a01      	subs	r2, #1
 8008992:	d2fb      	bcs.n	800898c <memmove+0x10>
 8008994:	bd10      	pop	{r4, pc}
 8008996:	5ccc      	ldrb	r4, [r1, r3]
 8008998:	54c4      	strb	r4, [r0, r3]
 800899a:	3301      	adds	r3, #1
 800899c:	429a      	cmp	r2, r3
 800899e:	d1fa      	bne.n	8008996 <memmove+0x1a>
 80089a0:	e7f8      	b.n	8008994 <memmove+0x18>
	...

080089a4 <_sbrk_r>:
 80089a4:	2300      	movs	r3, #0
 80089a6:	b570      	push	{r4, r5, r6, lr}
 80089a8:	4d06      	ldr	r5, [pc, #24]	; (80089c4 <_sbrk_r+0x20>)
 80089aa:	0004      	movs	r4, r0
 80089ac:	0008      	movs	r0, r1
 80089ae:	602b      	str	r3, [r5, #0]
 80089b0:	f7f8 fffc 	bl	80019ac <_sbrk>
 80089b4:	1c43      	adds	r3, r0, #1
 80089b6:	d103      	bne.n	80089c0 <_sbrk_r+0x1c>
 80089b8:	682b      	ldr	r3, [r5, #0]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d000      	beq.n	80089c0 <_sbrk_r+0x1c>
 80089be:	6023      	str	r3, [r4, #0]
 80089c0:	bd70      	pop	{r4, r5, r6, pc}
 80089c2:	46c0      	nop			; (mov r8, r8)
 80089c4:	200004f0 	.word	0x200004f0

080089c8 <memchr>:
 80089c8:	b2c9      	uxtb	r1, r1
 80089ca:	1882      	adds	r2, r0, r2
 80089cc:	4290      	cmp	r0, r2
 80089ce:	d101      	bne.n	80089d4 <memchr+0xc>
 80089d0:	2000      	movs	r0, #0
 80089d2:	4770      	bx	lr
 80089d4:	7803      	ldrb	r3, [r0, #0]
 80089d6:	428b      	cmp	r3, r1
 80089d8:	d0fb      	beq.n	80089d2 <memchr+0xa>
 80089da:	3001      	adds	r0, #1
 80089dc:	e7f6      	b.n	80089cc <memchr+0x4>

080089de <memcpy>:
 80089de:	2300      	movs	r3, #0
 80089e0:	b510      	push	{r4, lr}
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d100      	bne.n	80089e8 <memcpy+0xa>
 80089e6:	bd10      	pop	{r4, pc}
 80089e8:	5ccc      	ldrb	r4, [r1, r3]
 80089ea:	54c4      	strb	r4, [r0, r3]
 80089ec:	3301      	adds	r3, #1
 80089ee:	e7f8      	b.n	80089e2 <memcpy+0x4>

080089f0 <_realloc_r>:
 80089f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089f2:	0007      	movs	r7, r0
 80089f4:	000e      	movs	r6, r1
 80089f6:	0014      	movs	r4, r2
 80089f8:	2900      	cmp	r1, #0
 80089fa:	d105      	bne.n	8008a08 <_realloc_r+0x18>
 80089fc:	0011      	movs	r1, r2
 80089fe:	f7ff fc49 	bl	8008294 <_malloc_r>
 8008a02:	0005      	movs	r5, r0
 8008a04:	0028      	movs	r0, r5
 8008a06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008a08:	2a00      	cmp	r2, #0
 8008a0a:	d103      	bne.n	8008a14 <_realloc_r+0x24>
 8008a0c:	f7ff fbd6 	bl	80081bc <_free_r>
 8008a10:	0025      	movs	r5, r4
 8008a12:	e7f7      	b.n	8008a04 <_realloc_r+0x14>
 8008a14:	f000 f81b 	bl	8008a4e <_malloc_usable_size_r>
 8008a18:	9001      	str	r0, [sp, #4]
 8008a1a:	4284      	cmp	r4, r0
 8008a1c:	d803      	bhi.n	8008a26 <_realloc_r+0x36>
 8008a1e:	0035      	movs	r5, r6
 8008a20:	0843      	lsrs	r3, r0, #1
 8008a22:	42a3      	cmp	r3, r4
 8008a24:	d3ee      	bcc.n	8008a04 <_realloc_r+0x14>
 8008a26:	0021      	movs	r1, r4
 8008a28:	0038      	movs	r0, r7
 8008a2a:	f7ff fc33 	bl	8008294 <_malloc_r>
 8008a2e:	1e05      	subs	r5, r0, #0
 8008a30:	d0e8      	beq.n	8008a04 <_realloc_r+0x14>
 8008a32:	9b01      	ldr	r3, [sp, #4]
 8008a34:	0022      	movs	r2, r4
 8008a36:	429c      	cmp	r4, r3
 8008a38:	d900      	bls.n	8008a3c <_realloc_r+0x4c>
 8008a3a:	001a      	movs	r2, r3
 8008a3c:	0031      	movs	r1, r6
 8008a3e:	0028      	movs	r0, r5
 8008a40:	f7ff ffcd 	bl	80089de <memcpy>
 8008a44:	0031      	movs	r1, r6
 8008a46:	0038      	movs	r0, r7
 8008a48:	f7ff fbb8 	bl	80081bc <_free_r>
 8008a4c:	e7da      	b.n	8008a04 <_realloc_r+0x14>

08008a4e <_malloc_usable_size_r>:
 8008a4e:	1f0b      	subs	r3, r1, #4
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	1f18      	subs	r0, r3, #4
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	da01      	bge.n	8008a5c <_malloc_usable_size_r+0xe>
 8008a58:	580b      	ldr	r3, [r1, r0]
 8008a5a:	18c0      	adds	r0, r0, r3
 8008a5c:	4770      	bx	lr
	...

08008a60 <_init>:
 8008a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a62:	46c0      	nop			; (mov r8, r8)
 8008a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a66:	bc08      	pop	{r3}
 8008a68:	469e      	mov	lr, r3
 8008a6a:	4770      	bx	lr

08008a6c <_fini>:
 8008a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a6e:	46c0      	nop			; (mov r8, r8)
 8008a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a72:	bc08      	pop	{r3}
 8008a74:	469e      	mov	lr, r3
 8008a76:	4770      	bx	lr
