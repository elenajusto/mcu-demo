
mcu-demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ee8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08005fa4  08005fa4  00015fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060c8  080060c8  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080060c8  080060c8  000160c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060d0  080060d0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060d0  080060d0  000160d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060d4  080060d4  000160d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080060d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  20000068  08006140  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  08006140  00020370  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001511b  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a01  00000000  00000000  000351ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a8  00000000  00000000  00037bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f7e  00000000  00000000  00038f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b61f  00000000  00000000  00039f16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001813d  00000000  00000000  00055535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aff49  00000000  00000000  0006d672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005134  00000000  00000000  0011d5bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001226f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000068 	.word	0x20000068
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005f8c 	.word	0x08005f8c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000006c 	.word	0x2000006c
 8000100:	08005f8c 	.word	0x08005f8c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 fdb4 	bl	80011b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f81a 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f000 f9a8 	bl	80009a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000650:	f000 f958 	bl	8000904 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000654:	f000 f85c 	bl	8000710 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000658:	f000 f8c0 	bl	80007dc <MX_I2C1_Init>
  MX_TIM2_Init();
 800065c:	f000 f8fe 	bl	800085c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <main+0x3c>)
 8000662:	0018      	movs	r0, r3
 8000664:	f001 f9d6 	bl	8001a14 <HAL_ADC_Start_IT>

  i2cScanner();
 8000668:	f000 fae8 	bl	8000c3c <i2cScanner>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  hardwareTestLED();
 800066c:	f000 fa3a 	bl	8000ae4 <hardwareTestLED>
	  hardwareTestPot();
 8000670:	f000 fa7a 	bl	8000b68 <hardwareTestPot>
	  hardwareTestButton();
 8000674:	f000 faa6 	bl	8000bc4 <hardwareTestButton>
	  hardwareTestLED();
 8000678:	e7f8      	b.n	800066c <main+0x2c>
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	20000084 	.word	0x20000084

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b093      	sub	sp, #76	; 0x4c
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	2410      	movs	r4, #16
 8000688:	193b      	adds	r3, r7, r4
 800068a:	0018      	movs	r0, r3
 800068c:	2338      	movs	r3, #56	; 0x38
 800068e:	001a      	movs	r2, r3
 8000690:	2100      	movs	r1, #0
 8000692:	f004 fc7b 	bl	8004f8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000696:	003b      	movs	r3, r7
 8000698:	0018      	movs	r0, r3
 800069a:	2310      	movs	r3, #16
 800069c:	001a      	movs	r2, r3
 800069e:	2100      	movs	r1, #0
 80006a0:	f004 fc74 	bl	8004f8c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a4:	2380      	movs	r3, #128	; 0x80
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	0018      	movs	r0, r3
 80006aa:	f002 fa9b 	bl	8002be4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ae:	193b      	adds	r3, r7, r4
 80006b0:	2202      	movs	r2, #2
 80006b2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	193b      	adds	r3, r7, r4
 80006b6:	2280      	movs	r2, #128	; 0x80
 80006b8:	0052      	lsls	r2, r2, #1
 80006ba:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006bc:	193b      	adds	r3, r7, r4
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	2240      	movs	r2, #64	; 0x40
 80006c6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ce:	193b      	adds	r3, r7, r4
 80006d0:	0018      	movs	r0, r3
 80006d2:	f002 fad3 	bl	8002c7c <HAL_RCC_OscConfig>
 80006d6:	1e03      	subs	r3, r0, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006da:	f000 fb37 	bl	8000d4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006de:	003b      	movs	r3, r7
 80006e0:	2207      	movs	r2, #7
 80006e2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e4:	003b      	movs	r3, r7
 80006e6:	2200      	movs	r2, #0
 80006e8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ea:	003b      	movs	r3, r7
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f0:	003b      	movs	r3, r7
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f6:	003b      	movs	r3, r7
 80006f8:	2100      	movs	r1, #0
 80006fa:	0018      	movs	r0, r3
 80006fc:	f002 fdd8 	bl	80032b0 <HAL_RCC_ClockConfig>
 8000700:	1e03      	subs	r3, r0, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000704:	f000 fb22 	bl	8000d4c <Error_Handler>
  }
}
 8000708:	46c0      	nop			; (mov r8, r8)
 800070a:	46bd      	mov	sp, r7
 800070c:	b013      	add	sp, #76	; 0x4c
 800070e:	bd90      	pop	{r4, r7, pc}

08000710 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	0018      	movs	r0, r3
 800071a:	230c      	movs	r3, #12
 800071c:	001a      	movs	r2, r3
 800071e:	2100      	movs	r1, #0
 8000720:	f004 fc34 	bl	8004f8c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000724:	4b2b      	ldr	r3, [pc, #172]	; (80007d4 <MX_ADC1_Init+0xc4>)
 8000726:	4a2c      	ldr	r2, [pc, #176]	; (80007d8 <MX_ADC1_Init+0xc8>)
 8000728:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800072a:	4b2a      	ldr	r3, [pc, #168]	; (80007d4 <MX_ADC1_Init+0xc4>)
 800072c:	2280      	movs	r2, #128	; 0x80
 800072e:	05d2      	lsls	r2, r2, #23
 8000730:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000732:	4b28      	ldr	r3, [pc, #160]	; (80007d4 <MX_ADC1_Init+0xc4>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000738:	4b26      	ldr	r3, [pc, #152]	; (80007d4 <MX_ADC1_Init+0xc4>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800073e:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <MX_ADC1_Init+0xc4>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000744:	4b23      	ldr	r3, [pc, #140]	; (80007d4 <MX_ADC1_Init+0xc4>)
 8000746:	2204      	movs	r2, #4
 8000748:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800074a:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <MX_ADC1_Init+0xc4>)
 800074c:	2200      	movs	r2, #0
 800074e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000750:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <MX_ADC1_Init+0xc4>)
 8000752:	2200      	movs	r2, #0
 8000754:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000756:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <MX_ADC1_Init+0xc4>)
 8000758:	2201      	movs	r2, #1
 800075a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800075c:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <MX_ADC1_Init+0xc4>)
 800075e:	2201      	movs	r2, #1
 8000760:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000762:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <MX_ADC1_Init+0xc4>)
 8000764:	2200      	movs	r2, #0
 8000766:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000768:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <MX_ADC1_Init+0xc4>)
 800076a:	2200      	movs	r2, #0
 800076c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800076e:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <MX_ADC1_Init+0xc4>)
 8000770:	222c      	movs	r2, #44	; 0x2c
 8000772:	2100      	movs	r1, #0
 8000774:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000776:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <MX_ADC1_Init+0xc4>)
 8000778:	2200      	movs	r2, #0
 800077a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <MX_ADC1_Init+0xc4>)
 800077e:	2200      	movs	r2, #0
 8000780:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_ADC1_Init+0xc4>)
 8000784:	2200      	movs	r2, #0
 8000786:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_ADC1_Init+0xc4>)
 800078a:	223c      	movs	r2, #60	; 0x3c
 800078c:	2100      	movs	r1, #0
 800078e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000790:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <MX_ADC1_Init+0xc4>)
 8000792:	2200      	movs	r2, #0
 8000794:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_ADC1_Init+0xc4>)
 8000798:	0018      	movs	r0, r3
 800079a:	f000 feff 	bl	800159c <HAL_ADC_Init>
 800079e:	1e03      	subs	r3, r0, #0
 80007a0:	d001      	beq.n	80007a6 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80007a2:	f000 fad3 	bl	8000d4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	2201      	movs	r2, #1
 80007aa:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2200      	movs	r2, #0
 80007b0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	1d3a      	adds	r2, r7, #4
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_ADC1_Init+0xc4>)
 80007bc:	0011      	movs	r1, r2
 80007be:	0018      	movs	r0, r3
 80007c0:	f001 f9ac 	bl	8001b1c <HAL_ADC_ConfigChannel>
 80007c4:	1e03      	subs	r3, r0, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 80007c8:	f000 fac0 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007cc:	46c0      	nop			; (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	b004      	add	sp, #16
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000084 	.word	0x20000084
 80007d8:	40012400 	.word	0x40012400

080007dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007e0:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <MX_I2C1_Init+0x74>)
 80007e2:	4a1c      	ldr	r2, [pc, #112]	; (8000854 <MX_I2C1_Init+0x78>)
 80007e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80007e6:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <MX_I2C1_Init+0x74>)
 80007e8:	4a1b      	ldr	r2, [pc, #108]	; (8000858 <MX_I2C1_Init+0x7c>)
 80007ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007ec:	4b18      	ldr	r3, [pc, #96]	; (8000850 <MX_I2C1_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007f2:	4b17      	ldr	r3, [pc, #92]	; (8000850 <MX_I2C1_Init+0x74>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f8:	4b15      	ldr	r3, [pc, #84]	; (8000850 <MX_I2C1_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007fe:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_I2C1_Init+0x74>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <MX_I2C1_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_I2C1_Init+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_I2C1_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_I2C1_Init+0x74>)
 8000818:	0018      	movs	r0, r3
 800081a:	f001 fe2f 	bl	800247c <HAL_I2C_Init>
 800081e:	1e03      	subs	r3, r0, #0
 8000820:	d001      	beq.n	8000826 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000822:	f000 fa93 	bl	8000d4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000826:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <MX_I2C1_Init+0x74>)
 8000828:	2100      	movs	r1, #0
 800082a:	0018      	movs	r0, r3
 800082c:	f002 f942 	bl	8002ab4 <HAL_I2CEx_ConfigAnalogFilter>
 8000830:	1e03      	subs	r3, r0, #0
 8000832:	d001      	beq.n	8000838 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000834:	f000 fa8a 	bl	8000d4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <MX_I2C1_Init+0x74>)
 800083a:	2100      	movs	r1, #0
 800083c:	0018      	movs	r0, r3
 800083e:	f002 f985 	bl	8002b4c <HAL_I2CEx_ConfigDigitalFilter>
 8000842:	1e03      	subs	r3, r0, #0
 8000844:	d001      	beq.n	800084a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000846:	f000 fa81 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	200000e8 	.word	0x200000e8
 8000854:	40005400 	.word	0x40005400
 8000858:	00303d5b 	.word	0x00303d5b

0800085c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b088      	sub	sp, #32
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000862:	2310      	movs	r3, #16
 8000864:	18fb      	adds	r3, r7, r3
 8000866:	0018      	movs	r0, r3
 8000868:	2310      	movs	r3, #16
 800086a:	001a      	movs	r2, r3
 800086c:	2100      	movs	r1, #0
 800086e:	f004 fb8d 	bl	8004f8c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	0018      	movs	r0, r3
 8000876:	230c      	movs	r3, #12
 8000878:	001a      	movs	r2, r3
 800087a:	2100      	movs	r1, #0
 800087c:	f004 fb86 	bl	8004f8c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000880:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <MX_TIM2_Init+0xa4>)
 8000882:	2280      	movs	r2, #128	; 0x80
 8000884:	05d2      	lsls	r2, r2, #23
 8000886:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000888:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <MX_TIM2_Init+0xa4>)
 800088a:	2200      	movs	r2, #0
 800088c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088e:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <MX_TIM2_Init+0xa4>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000894:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <MX_TIM2_Init+0xa4>)
 8000896:	2201      	movs	r2, #1
 8000898:	4252      	negs	r2, r2
 800089a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089c:	4b18      	ldr	r3, [pc, #96]	; (8000900 <MX_TIM2_Init+0xa4>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a2:	4b17      	ldr	r3, [pc, #92]	; (8000900 <MX_TIM2_Init+0xa4>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008a8:	4b15      	ldr	r3, [pc, #84]	; (8000900 <MX_TIM2_Init+0xa4>)
 80008aa:	0018      	movs	r0, r3
 80008ac:	f003 f862 	bl	8003974 <HAL_TIM_Base_Init>
 80008b0:	1e03      	subs	r3, r0, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80008b4:	f000 fa4a 	bl	8000d4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b8:	2110      	movs	r1, #16
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	2280      	movs	r2, #128	; 0x80
 80008be:	0152      	lsls	r2, r2, #5
 80008c0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008c2:	187a      	adds	r2, r7, r1
 80008c4:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_TIM2_Init+0xa4>)
 80008c6:	0011      	movs	r1, r2
 80008c8:	0018      	movs	r0, r3
 80008ca:	f003 f8ab 	bl	8003a24 <HAL_TIM_ConfigClockSource>
 80008ce:	1e03      	subs	r3, r0, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80008d2:	f000 fa3b 	bl	8000d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008e2:	1d3a      	adds	r2, r7, #4
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_TIM2_Init+0xa4>)
 80008e6:	0011      	movs	r1, r2
 80008e8:	0018      	movs	r0, r3
 80008ea:	f003 fa9b 	bl	8003e24 <HAL_TIMEx_MasterConfigSynchronization>
 80008ee:	1e03      	subs	r3, r0, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80008f2:	f000 fa2b 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	46bd      	mov	sp, r7
 80008fa:	b008      	add	sp, #32
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	2000013c 	.word	0x2000013c

08000904 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000908:	4b23      	ldr	r3, [pc, #140]	; (8000998 <MX_USART2_UART_Init+0x94>)
 800090a:	4a24      	ldr	r2, [pc, #144]	; (800099c <MX_USART2_UART_Init+0x98>)
 800090c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800090e:	4b22      	ldr	r3, [pc, #136]	; (8000998 <MX_USART2_UART_Init+0x94>)
 8000910:	22e1      	movs	r2, #225	; 0xe1
 8000912:	0252      	lsls	r2, r2, #9
 8000914:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000916:	4b20      	ldr	r3, [pc, #128]	; (8000998 <MX_USART2_UART_Init+0x94>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800091c:	4b1e      	ldr	r3, [pc, #120]	; (8000998 <MX_USART2_UART_Init+0x94>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000922:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <MX_USART2_UART_Init+0x94>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000928:	4b1b      	ldr	r3, [pc, #108]	; (8000998 <MX_USART2_UART_Init+0x94>)
 800092a:	220c      	movs	r2, #12
 800092c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092e:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MX_USART2_UART_Init+0x94>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000934:	4b18      	ldr	r3, [pc, #96]	; (8000998 <MX_USART2_UART_Init+0x94>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <MX_USART2_UART_Init+0x94>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <MX_USART2_UART_Init+0x94>)
 8000942:	2200      	movs	r2, #0
 8000944:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000946:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_USART2_UART_Init+0x94>)
 8000948:	2200      	movs	r2, #0
 800094a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <MX_USART2_UART_Init+0x94>)
 800094e:	0018      	movs	r0, r3
 8000950:	f003 fad6 	bl	8003f00 <HAL_UART_Init>
 8000954:	1e03      	subs	r3, r0, #0
 8000956:	d001      	beq.n	800095c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000958:	f000 f9f8 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800095c:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_USART2_UART_Init+0x94>)
 800095e:	2100      	movs	r1, #0
 8000960:	0018      	movs	r0, r3
 8000962:	f004 f8f3 	bl	8004b4c <HAL_UARTEx_SetTxFifoThreshold>
 8000966:	1e03      	subs	r3, r0, #0
 8000968:	d001      	beq.n	800096e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800096a:	f000 f9ef 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800096e:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <MX_USART2_UART_Init+0x94>)
 8000970:	2100      	movs	r1, #0
 8000972:	0018      	movs	r0, r3
 8000974:	f004 f92a 	bl	8004bcc <HAL_UARTEx_SetRxFifoThreshold>
 8000978:	1e03      	subs	r3, r0, #0
 800097a:	d001      	beq.n	8000980 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800097c:	f000 f9e6 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <MX_USART2_UART_Init+0x94>)
 8000982:	0018      	movs	r0, r3
 8000984:	f004 f8a8 	bl	8004ad8 <HAL_UARTEx_DisableFifoMode>
 8000988:	1e03      	subs	r3, r0, #0
 800098a:	d001      	beq.n	8000990 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800098c:	f000 f9de 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000990:	46c0      	nop			; (mov r8, r8)
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	20000188 	.word	0x20000188
 800099c:	40004400 	.word	0x40004400

080009a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a0:	b590      	push	{r4, r7, lr}
 80009a2:	b08b      	sub	sp, #44	; 0x2c
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	2414      	movs	r4, #20
 80009a8:	193b      	adds	r3, r7, r4
 80009aa:	0018      	movs	r0, r3
 80009ac:	2314      	movs	r3, #20
 80009ae:	001a      	movs	r2, r3
 80009b0:	2100      	movs	r1, #0
 80009b2:	f004 faeb 	bl	8004f8c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b6:	4b47      	ldr	r3, [pc, #284]	; (8000ad4 <MX_GPIO_Init+0x134>)
 80009b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009ba:	4b46      	ldr	r3, [pc, #280]	; (8000ad4 <MX_GPIO_Init+0x134>)
 80009bc:	2104      	movs	r1, #4
 80009be:	430a      	orrs	r2, r1
 80009c0:	635a      	str	r2, [r3, #52]	; 0x34
 80009c2:	4b44      	ldr	r3, [pc, #272]	; (8000ad4 <MX_GPIO_Init+0x134>)
 80009c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009c6:	2204      	movs	r2, #4
 80009c8:	4013      	ands	r3, r2
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ce:	4b41      	ldr	r3, [pc, #260]	; (8000ad4 <MX_GPIO_Init+0x134>)
 80009d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009d2:	4b40      	ldr	r3, [pc, #256]	; (8000ad4 <MX_GPIO_Init+0x134>)
 80009d4:	2120      	movs	r1, #32
 80009d6:	430a      	orrs	r2, r1
 80009d8:	635a      	str	r2, [r3, #52]	; 0x34
 80009da:	4b3e      	ldr	r3, [pc, #248]	; (8000ad4 <MX_GPIO_Init+0x134>)
 80009dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009de:	2220      	movs	r2, #32
 80009e0:	4013      	ands	r3, r2
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	4b3b      	ldr	r3, [pc, #236]	; (8000ad4 <MX_GPIO_Init+0x134>)
 80009e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009ea:	4b3a      	ldr	r3, [pc, #232]	; (8000ad4 <MX_GPIO_Init+0x134>)
 80009ec:	2101      	movs	r1, #1
 80009ee:	430a      	orrs	r2, r1
 80009f0:	635a      	str	r2, [r3, #52]	; 0x34
 80009f2:	4b38      	ldr	r3, [pc, #224]	; (8000ad4 <MX_GPIO_Init+0x134>)
 80009f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009f6:	2201      	movs	r2, #1
 80009f8:	4013      	ands	r3, r2
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fe:	4b35      	ldr	r3, [pc, #212]	; (8000ad4 <MX_GPIO_Init+0x134>)
 8000a00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a02:	4b34      	ldr	r3, [pc, #208]	; (8000ad4 <MX_GPIO_Init+0x134>)
 8000a04:	2102      	movs	r1, #2
 8000a06:	430a      	orrs	r2, r1
 8000a08:	635a      	str	r2, [r3, #52]	; 0x34
 8000a0a:	4b32      	ldr	r3, [pc, #200]	; (8000ad4 <MX_GPIO_Init+0x134>)
 8000a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a0e:	2202      	movs	r2, #2
 8000a10:	4013      	ands	r3, r2
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000a16:	23a0      	movs	r3, #160	; 0xa0
 8000a18:	05db      	lsls	r3, r3, #23
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2120      	movs	r1, #32
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f001 fd0f 	bl	8002442 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8000a24:	492c      	ldr	r1, [pc, #176]	; (8000ad8 <MX_GPIO_Init+0x138>)
 8000a26:	4b2d      	ldr	r3, [pc, #180]	; (8000adc <MX_GPIO_Init+0x13c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f001 fd09 	bl	8002442 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000a30:	4b2b      	ldr	r3, [pc, #172]	; (8000ae0 <MX_GPIO_Init+0x140>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	2180      	movs	r1, #128	; 0x80
 8000a36:	0018      	movs	r0, r3
 8000a38:	f001 fd03 	bl	8002442 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000a3c:	193b      	adds	r3, r7, r4
 8000a3e:	2220      	movs	r2, #32
 8000a40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	193b      	adds	r3, r7, r4
 8000a44:	2201      	movs	r2, #1
 8000a46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	193b      	adds	r3, r7, r4
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a4e:	193b      	adds	r3, r7, r4
 8000a50:	2202      	movs	r2, #2
 8000a52:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000a54:	193a      	adds	r2, r7, r4
 8000a56:	23a0      	movs	r3, #160	; 0xa0
 8000a58:	05db      	lsls	r3, r3, #23
 8000a5a:	0011      	movs	r1, r2
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f001 fb6f 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_2_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_3_Pin;
 8000a62:	193b      	adds	r3, r7, r4
 8000a64:	4a1c      	ldr	r2, [pc, #112]	; (8000ad8 <MX_GPIO_Init+0x138>)
 8000a66:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a68:	193b      	adds	r3, r7, r4
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	193b      	adds	r3, r7, r4
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	193b      	adds	r3, r7, r4
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7a:	193b      	adds	r3, r7, r4
 8000a7c:	4a17      	ldr	r2, [pc, #92]	; (8000adc <MX_GPIO_Init+0x13c>)
 8000a7e:	0019      	movs	r1, r3
 8000a80:	0010      	movs	r0, r2
 8000a82:	f001 fb5d 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_1_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 8000a86:	193b      	adds	r3, r7, r4
 8000a88:	2280      	movs	r2, #128	; 0x80
 8000a8a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8c:	193b      	adds	r3, r7, r4
 8000a8e:	2201      	movs	r2, #1
 8000a90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	193b      	adds	r3, r7, r4
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	193b      	adds	r3, r7, r4
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	193b      	adds	r3, r7, r4
 8000aa0:	4a0f      	ldr	r2, [pc, #60]	; (8000ae0 <MX_GPIO_Init+0x140>)
 8000aa2:	0019      	movs	r1, r3
 8000aa4:	0010      	movs	r0, r2
 8000aa6:	f001 fb4b 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_INPUT_Pin */
  GPIO_InitStruct.Pin = BUTTON_INPUT_Pin;
 8000aaa:	0021      	movs	r1, r4
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	2208      	movs	r2, #8
 8000ab0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	187b      	adds	r3, r7, r1
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_INPUT_GPIO_Port, &GPIO_InitStruct);
 8000abe:	187b      	adds	r3, r7, r1
 8000ac0:	4a06      	ldr	r2, [pc, #24]	; (8000adc <MX_GPIO_Init+0x13c>)
 8000ac2:	0019      	movs	r1, r3
 8000ac4:	0010      	movs	r0, r2
 8000ac6:	f001 fb3b 	bl	8002140 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	46bd      	mov	sp, r7
 8000ace:	b00b      	add	sp, #44	; 0x2c
 8000ad0:	bd90      	pop	{r4, r7, pc}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	00004010 	.word	0x00004010
 8000adc:	50000400 	.word	0x50000400
 8000ae0:	50000800 	.word	0x50000800

08000ae4 <hardwareTestLED>:

/* USER CODE BEGIN 4 */

	/* Test LEDs are working  */
	void hardwareTestLED(void){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0

		/* Lights ON */
		HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8000ae8:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <hardwareTestLED+0x7c>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	2180      	movs	r1, #128	; 0x80
 8000aee:	0018      	movs	r0, r3
 8000af0:	f001 fca7 	bl	8002442 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000af4:	2064      	movs	r0, #100	; 0x64
 8000af6:	f000 fbe1 	bl	80012bc <HAL_Delay>
		HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000afa:	2380      	movs	r3, #128	; 0x80
 8000afc:	01db      	lsls	r3, r3, #7
 8000afe:	4819      	ldr	r0, [pc, #100]	; (8000b64 <hardwareTestLED+0x80>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	0019      	movs	r1, r3
 8000b04:	f001 fc9d 	bl	8002442 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000b08:	2064      	movs	r0, #100	; 0x64
 8000b0a:	f000 fbd7 	bl	80012bc <HAL_Delay>
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <hardwareTestLED+0x80>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	2110      	movs	r1, #16
 8000b14:	0018      	movs	r0, r3
 8000b16:	f001 fc94 	bl	8002442 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000b1a:	2064      	movs	r0, #100	; 0x64
 8000b1c:	f000 fbce 	bl	80012bc <HAL_Delay>

		/* Lights OFF */
		HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000b20:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <hardwareTestLED+0x7c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	2180      	movs	r1, #128	; 0x80
 8000b26:	0018      	movs	r0, r3
 8000b28:	f001 fc8b 	bl	8002442 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000b2c:	2064      	movs	r0, #100	; 0x64
 8000b2e:	f000 fbc5 	bl	80012bc <HAL_Delay>
		HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000b32:	2380      	movs	r3, #128	; 0x80
 8000b34:	01db      	lsls	r3, r3, #7
 8000b36:	480b      	ldr	r0, [pc, #44]	; (8000b64 <hardwareTestLED+0x80>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	0019      	movs	r1, r3
 8000b3c:	f001 fc81 	bl	8002442 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000b40:	2064      	movs	r0, #100	; 0x64
 8000b42:	f000 fbbb 	bl	80012bc <HAL_Delay>
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000b46:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <hardwareTestLED+0x80>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2110      	movs	r1, #16
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f001 fc78 	bl	8002442 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000b52:	2064      	movs	r0, #100	; 0x64
 8000b54:	f000 fbb2 	bl	80012bc <HAL_Delay>
	}
 8000b58:	46c0      	nop			; (mov r8, r8)
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	50000800 	.word	0x50000800
 8000b64:	50000400 	.word	0x50000400

08000b68 <hardwareTestPot>:

	/* Test potentiometer is working */
	void hardwareTestPot(void){
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
		/* Init variable for pot value */
		char msg[20];
		uint16_t potValue;

		/* Get pot value */
		HAL_ADC_PollForConversion(&hadc1, 5);
 8000b6e:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <hardwareTestPot+0x50>)
 8000b70:	2105      	movs	r1, #5
 8000b72:	0018      	movs	r0, r3
 8000b74:	f000 feba 	bl	80018ec <HAL_ADC_PollForConversion>
		potValue = HAL_ADC_GetValue(&hadc1);
 8000b78:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <hardwareTestPot+0x50>)
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f000 ffc2 	bl	8001b04 <HAL_ADC_GetValue>
 8000b80:	0002      	movs	r2, r0
 8000b82:	2116      	movs	r1, #22
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	801a      	strh	r2, [r3, #0]

		/* Print value */
		sprintf(msg, "potValue: %hu\r\n", potValue);
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	881a      	ldrh	r2, [r3, #0]
 8000b8c:	490b      	ldr	r1, [pc, #44]	; (8000bbc <hardwareTestPot+0x54>)
 8000b8e:	003b      	movs	r3, r7
 8000b90:	0018      	movs	r0, r3
 8000b92:	f004 f98f 	bl	8004eb4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000b96:	003b      	movs	r3, r7
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f7ff fab3 	bl	8000104 <strlen>
 8000b9e:	0003      	movs	r3, r0
 8000ba0:	b29a      	uxth	r2, r3
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	0039      	movs	r1, r7
 8000ba8:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <hardwareTestPot+0x58>)
 8000baa:	f003 f9ff 	bl	8003fac <HAL_UART_Transmit>

	}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	b006      	add	sp, #24
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	20000084 	.word	0x20000084
 8000bbc:	08005fa4 	.word	0x08005fa4
 8000bc0:	20000188 	.word	0x20000188

08000bc4 <hardwareTestButton>:

	/* Test pushbutton is working */
	void hardwareTestButton(void){
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
		char msg[23];
		if (HAL_GPIO_ReadPin(BUTTON_INPUT_GPIO_Port, BUTTON_INPUT_Pin) == 0){
 8000bca:	4b18      	ldr	r3, [pc, #96]	; (8000c2c <hardwareTestButton+0x68>)
 8000bcc:	2108      	movs	r1, #8
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f001 fc1a 	bl	8002408 <HAL_GPIO_ReadPin>
 8000bd4:	1e03      	subs	r3, r0, #0
 8000bd6:	d112      	bne.n	8000bfe <hardwareTestButton+0x3a>
			printf(msg, "BUTTON IS BEING PUSHED");
 8000bd8:	4a15      	ldr	r2, [pc, #84]	; (8000c30 <hardwareTestButton+0x6c>)
 8000bda:	003b      	movs	r3, r7
 8000bdc:	0011      	movs	r1, r2
 8000bde:	0018      	movs	r0, r3
 8000be0:	f004 f958 	bl	8004e94 <iprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000be4:	003b      	movs	r3, r7
 8000be6:	0018      	movs	r0, r3
 8000be8:	f7ff fa8c 	bl	8000104 <strlen>
 8000bec:	0003      	movs	r3, r0
 8000bee:	b29a      	uxth	r2, r3
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	425b      	negs	r3, r3
 8000bf4:	0039      	movs	r1, r7
 8000bf6:	480f      	ldr	r0, [pc, #60]	; (8000c34 <hardwareTestButton+0x70>)
 8000bf8:	f003 f9d8 	bl	8003fac <HAL_UART_Transmit>
		} else {
			printf(msg, "NO BUTTON :(");
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
	 	}
	}
 8000bfc:	e011      	b.n	8000c22 <hardwareTestButton+0x5e>
			printf(msg, "NO BUTTON :(");
 8000bfe:	4a0e      	ldr	r2, [pc, #56]	; (8000c38 <hardwareTestButton+0x74>)
 8000c00:	003b      	movs	r3, r7
 8000c02:	0011      	movs	r1, r2
 8000c04:	0018      	movs	r0, r3
 8000c06:	f004 f945 	bl	8004e94 <iprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f7ff fa79 	bl	8000104 <strlen>
 8000c12:	0003      	movs	r3, r0
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	2301      	movs	r3, #1
 8000c18:	425b      	negs	r3, r3
 8000c1a:	0039      	movs	r1, r7
 8000c1c:	4805      	ldr	r0, [pc, #20]	; (8000c34 <hardwareTestButton+0x70>)
 8000c1e:	f003 f9c5 	bl	8003fac <HAL_UART_Transmit>
	}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	46bd      	mov	sp, r7
 8000c26:	b006      	add	sp, #24
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	50000400 	.word	0x50000400
 8000c30:	08005fb4 	.word	0x08005fb4
 8000c34:	20000188 	.word	0x20000188
 8000c38:	08005fcc 	.word	0x08005fcc

08000c3c <i2cScanner>:

	/* I2C Scanner Script */
	/* Author:     Khaled Magdy */
	/* Source: 	   www.DeepBlueMbedded.com */

	void i2cScanner(void){
 8000c3c:	b5b0      	push	{r4, r5, r7, lr}
 8000c3e:	b092      	sub	sp, #72	; 0x48
 8000c40:	af00      	add	r7, sp, #0
		uint8_t Buffer[25] = {0};
 8000c42:	232c      	movs	r3, #44	; 0x2c
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	3304      	adds	r3, #4
 8000c4c:	2215      	movs	r2, #21
 8000c4e:	2100      	movs	r1, #0
 8000c50:	0018      	movs	r0, r3
 8000c52:	f004 f99b 	bl	8004f8c <memset>
		uint8_t Space[] = " - ";
 8000c56:	2328      	movs	r3, #40	; 0x28
 8000c58:	18fb      	adds	r3, r7, r3
 8000c5a:	4a35      	ldr	r2, [pc, #212]	; (8000d30 <i2cScanner+0xf4>)
 8000c5c:	601a      	str	r2, [r3, #0]
		uint8_t StartMSG[] = "Starting I2C Scanning: \r\n";
 8000c5e:	250c      	movs	r5, #12
 8000c60:	197b      	adds	r3, r7, r5
 8000c62:	4a34      	ldr	r2, [pc, #208]	; (8000d34 <i2cScanner+0xf8>)
 8000c64:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000c66:	c313      	stmia	r3!, {r0, r1, r4}
 8000c68:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000c6a:	c313      	stmia	r3!, {r0, r1, r4}
 8000c6c:	8812      	ldrh	r2, [r2, #0]
 8000c6e:	801a      	strh	r2, [r3, #0]
		uint8_t EndMSG[] = "Done! \r\n\r\n";
 8000c70:	003b      	movs	r3, r7
 8000c72:	4a31      	ldr	r2, [pc, #196]	; (8000d38 <i2cScanner+0xfc>)
 8000c74:	ca03      	ldmia	r2!, {r0, r1}
 8000c76:	c303      	stmia	r3!, {r0, r1}
 8000c78:	8811      	ldrh	r1, [r2, #0]
 8000c7a:	8019      	strh	r1, [r3, #0]
 8000c7c:	7892      	ldrb	r2, [r2, #2]
 8000c7e:	709a      	strb	r2, [r3, #2]

		uint8_t i = 0, ret;
 8000c80:	2447      	movs	r4, #71	; 0x47
 8000c82:	193b      	adds	r3, r7, r4
 8000c84:	2200      	movs	r2, #0
 8000c86:	701a      	strb	r2, [r3, #0]

		HAL_Delay(1000);
 8000c88:	23fa      	movs	r3, #250	; 0xfa
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f000 fb15 	bl	80012bc <HAL_Delay>

		/*-[ I2C Bus Scanning ]-*/
		HAL_UART_Transmit(&huart2, StartMSG, sizeof(StartMSG), 10000);
 8000c92:	4b2a      	ldr	r3, [pc, #168]	; (8000d3c <i2cScanner+0x100>)
 8000c94:	1979      	adds	r1, r7, r5
 8000c96:	482a      	ldr	r0, [pc, #168]	; (8000d40 <i2cScanner+0x104>)
 8000c98:	221a      	movs	r2, #26
 8000c9a:	f003 f987 	bl	8003fac <HAL_UART_Transmit>
		for(i=1; i<128; i++)
 8000c9e:	193b      	adds	r3, r7, r4
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	701a      	strb	r2, [r3, #0]
 8000ca4:	e034      	b.n	8000d10 <i2cScanner+0xd4>
		{
			ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
 8000ca6:	2347      	movs	r3, #71	; 0x47
 8000ca8:	18fb      	adds	r3, r7, r3
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	18db      	adds	r3, r3, r3
 8000cb0:	b299      	uxth	r1, r3
 8000cb2:	2546      	movs	r5, #70	; 0x46
 8000cb4:	197c      	adds	r4, r7, r5
 8000cb6:	4823      	ldr	r0, [pc, #140]	; (8000d44 <i2cScanner+0x108>)
 8000cb8:	2305      	movs	r3, #5
 8000cba:	2203      	movs	r2, #3
 8000cbc:	f001 fc84 	bl	80025c8 <HAL_I2C_IsDeviceReady>
 8000cc0:	0003      	movs	r3, r0
 8000cc2:	7023      	strb	r3, [r4, #0]
			if (ret != HAL_OK) /* No ACK Received At That Address */
 8000cc4:	197b      	adds	r3, r7, r5
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d007      	beq.n	8000cdc <i2cScanner+0xa0>
			{
				HAL_UART_Transmit(&huart2, Space, sizeof(Space), 10000);
 8000ccc:	4b1b      	ldr	r3, [pc, #108]	; (8000d3c <i2cScanner+0x100>)
 8000cce:	2228      	movs	r2, #40	; 0x28
 8000cd0:	18b9      	adds	r1, r7, r2
 8000cd2:	481b      	ldr	r0, [pc, #108]	; (8000d40 <i2cScanner+0x104>)
 8000cd4:	2204      	movs	r2, #4
 8000cd6:	f003 f969 	bl	8003fac <HAL_UART_Transmit>
 8000cda:	e013      	b.n	8000d04 <i2cScanner+0xc8>
			}
			else if(ret == HAL_OK)
 8000cdc:	2346      	movs	r3, #70	; 0x46
 8000cde:	18fb      	adds	r3, r7, r3
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d10e      	bne.n	8000d04 <i2cScanner+0xc8>
			{
				sprintf(Buffer, "0x%X", i);
 8000ce6:	2347      	movs	r3, #71	; 0x47
 8000ce8:	18fb      	adds	r3, r7, r3
 8000cea:	781a      	ldrb	r2, [r3, #0]
 8000cec:	4916      	ldr	r1, [pc, #88]	; (8000d48 <i2cScanner+0x10c>)
 8000cee:	242c      	movs	r4, #44	; 0x2c
 8000cf0:	193b      	adds	r3, r7, r4
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f004 f8de 	bl	8004eb4 <siprintf>
				HAL_UART_Transmit(&huart2, Buffer, sizeof(Buffer), 10000);
 8000cf8:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <i2cScanner+0x100>)
 8000cfa:	1939      	adds	r1, r7, r4
 8000cfc:	4810      	ldr	r0, [pc, #64]	; (8000d40 <i2cScanner+0x104>)
 8000cfe:	2219      	movs	r2, #25
 8000d00:	f003 f954 	bl	8003fac <HAL_UART_Transmit>
		for(i=1; i<128; i++)
 8000d04:	2147      	movs	r1, #71	; 0x47
 8000d06:	187b      	adds	r3, r7, r1
 8000d08:	781a      	ldrb	r2, [r3, #0]
 8000d0a:	187b      	adds	r3, r7, r1
 8000d0c:	3201      	adds	r2, #1
 8000d0e:	701a      	strb	r2, [r3, #0]
 8000d10:	2347      	movs	r3, #71	; 0x47
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	b25b      	sxtb	r3, r3
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	dac4      	bge.n	8000ca6 <i2cScanner+0x6a>
			}
		}
		HAL_UART_Transmit(&huart2, EndMSG, sizeof(EndMSG), 10000);
 8000d1c:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <i2cScanner+0x100>)
 8000d1e:	0039      	movs	r1, r7
 8000d20:	4807      	ldr	r0, [pc, #28]	; (8000d40 <i2cScanner+0x104>)
 8000d22:	220b      	movs	r2, #11
 8000d24:	f003 f942 	bl	8003fac <HAL_UART_Transmit>
		/*--[ Scanning Done ]--*/
	}
 8000d28:	46c0      	nop			; (mov r8, r8)
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	b012      	add	sp, #72	; 0x48
 8000d2e:	bdb0      	pop	{r4, r5, r7, pc}
 8000d30:	00202d20 	.word	0x00202d20
 8000d34:	08005fe4 	.word	0x08005fe4
 8000d38:	08006000 	.word	0x08006000
 8000d3c:	00002710 	.word	0x00002710
 8000d40:	20000188 	.word	0x20000188
 8000d44:	200000e8 	.word	0x200000e8
 8000d48:	08005fdc 	.word	0x08005fdc

08000d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d50:	b672      	cpsid	i
}
 8000d52:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <Error_Handler+0x8>
	...

08000d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d62:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d64:	2101      	movs	r1, #1
 8000d66:	430a      	orrs	r2, r1
 8000d68:	641a      	str	r2, [r3, #64]	; 0x40
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	2201      	movs	r2, #1
 8000d70:	4013      	ands	r3, r2
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d76:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d7c:	2180      	movs	r1, #128	; 0x80
 8000d7e:	0549      	lsls	r1, r1, #21
 8000d80:	430a      	orrs	r2, r1
 8000d82:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d84:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d88:	2380      	movs	r3, #128	; 0x80
 8000d8a:	055b      	lsls	r3, r3, #21
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000d92:	23c0      	movs	r3, #192	; 0xc0
 8000d94:	00db      	lsls	r3, r3, #3
 8000d96:	0018      	movs	r0, r3
 8000d98:	f000 fab4 	bl	8001304 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d9c:	46c0      	nop			; (mov r8, r8)
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	b002      	add	sp, #8
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40021000 	.word	0x40021000

08000da8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000da8:	b590      	push	{r4, r7, lr}
 8000daa:	b08b      	sub	sp, #44	; 0x2c
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	2414      	movs	r4, #20
 8000db2:	193b      	adds	r3, r7, r4
 8000db4:	0018      	movs	r0, r3
 8000db6:	2314      	movs	r3, #20
 8000db8:	001a      	movs	r2, r3
 8000dba:	2100      	movs	r1, #0
 8000dbc:	f004 f8e6 	bl	8004f8c <memset>
  if(hadc->Instance==ADC1)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a18      	ldr	r2, [pc, #96]	; (8000e28 <HAL_ADC_MspInit+0x80>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d129      	bne.n	8000e1e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000dca:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <HAL_ADC_MspInit+0x84>)
 8000dcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dce:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <HAL_ADC_MspInit+0x84>)
 8000dd0:	2180      	movs	r1, #128	; 0x80
 8000dd2:	0349      	lsls	r1, r1, #13
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	641a      	str	r2, [r3, #64]	; 0x40
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <HAL_ADC_MspInit+0x84>)
 8000dda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ddc:	2380      	movs	r3, #128	; 0x80
 8000dde:	035b      	lsls	r3, r3, #13
 8000de0:	4013      	ands	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <HAL_ADC_MspInit+0x84>)
 8000de8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dea:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <HAL_ADC_MspInit+0x84>)
 8000dec:	2101      	movs	r1, #1
 8000dee:	430a      	orrs	r2, r1
 8000df0:	635a      	str	r2, [r3, #52]	; 0x34
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <HAL_ADC_MspInit+0x84>)
 8000df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000df6:	2201      	movs	r2, #1
 8000df8:	4013      	ands	r3, r2
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = POT_INPUT_Pin;
 8000dfe:	193b      	adds	r3, r7, r4
 8000e00:	2201      	movs	r2, #1
 8000e02:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e04:	193b      	adds	r3, r7, r4
 8000e06:	2203      	movs	r2, #3
 8000e08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	193b      	adds	r3, r7, r4
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(POT_INPUT_GPIO_Port, &GPIO_InitStruct);
 8000e10:	193a      	adds	r2, r7, r4
 8000e12:	23a0      	movs	r3, #160	; 0xa0
 8000e14:	05db      	lsls	r3, r3, #23
 8000e16:	0011      	movs	r1, r2
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f001 f991 	bl	8002140 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b00b      	add	sp, #44	; 0x2c
 8000e24:	bd90      	pop	{r4, r7, pc}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	40012400 	.word	0x40012400
 8000e2c:	40021000 	.word	0x40021000

08000e30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e30:	b590      	push	{r4, r7, lr}
 8000e32:	b097      	sub	sp, #92	; 0x5c
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	2344      	movs	r3, #68	; 0x44
 8000e3a:	18fb      	adds	r3, r7, r3
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	2314      	movs	r3, #20
 8000e40:	001a      	movs	r2, r3
 8000e42:	2100      	movs	r1, #0
 8000e44:	f004 f8a2 	bl	8004f8c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e48:	2410      	movs	r4, #16
 8000e4a:	193b      	adds	r3, r7, r4
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	2334      	movs	r3, #52	; 0x34
 8000e50:	001a      	movs	r2, r3
 8000e52:	2100      	movs	r1, #0
 8000e54:	f004 f89a 	bl	8004f8c <memset>
  if(hi2c->Instance==I2C1)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a22      	ldr	r2, [pc, #136]	; (8000ee8 <HAL_I2C_MspInit+0xb8>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d13e      	bne.n	8000ee0 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e62:	193b      	adds	r3, r7, r4
 8000e64:	2220      	movs	r2, #32
 8000e66:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e68:	193b      	adds	r3, r7, r4
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e6e:	193b      	adds	r3, r7, r4
 8000e70:	0018      	movs	r0, r3
 8000e72:	f002 fbc7 	bl	8003604 <HAL_RCCEx_PeriphCLKConfig>
 8000e76:	1e03      	subs	r3, r0, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000e7a:	f7ff ff67 	bl	8000d4c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7e:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <HAL_I2C_MspInit+0xbc>)
 8000e80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e82:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <HAL_I2C_MspInit+0xbc>)
 8000e84:	2102      	movs	r1, #2
 8000e86:	430a      	orrs	r2, r1
 8000e88:	635a      	str	r2, [r3, #52]	; 0x34
 8000e8a:	4b18      	ldr	r3, [pc, #96]	; (8000eec <HAL_I2C_MspInit+0xbc>)
 8000e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e8e:	2202      	movs	r2, #2
 8000e90:	4013      	ands	r3, r2
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e96:	2144      	movs	r1, #68	; 0x44
 8000e98:	187b      	adds	r3, r7, r1
 8000e9a:	22c0      	movs	r2, #192	; 0xc0
 8000e9c:	0092      	lsls	r2, r2, #2
 8000e9e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ea0:	187b      	adds	r3, r7, r1
 8000ea2:	2212      	movs	r2, #18
 8000ea4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	187b      	adds	r3, r7, r1
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eac:	187b      	adds	r3, r7, r1
 8000eae:	2200      	movs	r2, #0
 8000eb0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000eb2:	187b      	adds	r3, r7, r1
 8000eb4:	2206      	movs	r2, #6
 8000eb6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb8:	187b      	adds	r3, r7, r1
 8000eba:	4a0d      	ldr	r2, [pc, #52]	; (8000ef0 <HAL_I2C_MspInit+0xc0>)
 8000ebc:	0019      	movs	r1, r3
 8000ebe:	0010      	movs	r0, r2
 8000ec0:	f001 f93e 	bl	8002140 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ec4:	4b09      	ldr	r3, [pc, #36]	; (8000eec <HAL_I2C_MspInit+0xbc>)
 8000ec6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <HAL_I2C_MspInit+0xbc>)
 8000eca:	2180      	movs	r1, #128	; 0x80
 8000ecc:	0389      	lsls	r1, r1, #14
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_I2C_MspInit+0xbc>)
 8000ed4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ed6:	2380      	movs	r3, #128	; 0x80
 8000ed8:	039b      	lsls	r3, r3, #14
 8000eda:	4013      	ands	r3, r2
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ee0:	46c0      	nop			; (mov r8, r8)
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	b017      	add	sp, #92	; 0x5c
 8000ee6:	bd90      	pop	{r4, r7, pc}
 8000ee8:	40005400 	.word	0x40005400
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	50000400 	.word	0x50000400

08000ef4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	2380      	movs	r3, #128	; 0x80
 8000f02:	05db      	lsls	r3, r3, #23
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d10b      	bne.n	8000f20 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f08:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <HAL_TIM_Base_MspInit+0x34>)
 8000f0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HAL_TIM_Base_MspInit+0x34>)
 8000f0e:	2101      	movs	r1, #1
 8000f10:	430a      	orrs	r2, r1
 8000f12:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f14:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <HAL_TIM_Base_MspInit+0x34>)
 8000f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f18:	2201      	movs	r2, #1
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f20:	46c0      	nop			; (mov r8, r8)
 8000f22:	46bd      	mov	sp, r7
 8000f24:	b004      	add	sp, #16
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40021000 	.word	0x40021000

08000f2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f2c:	b590      	push	{r4, r7, lr}
 8000f2e:	b097      	sub	sp, #92	; 0x5c
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	2344      	movs	r3, #68	; 0x44
 8000f36:	18fb      	adds	r3, r7, r3
 8000f38:	0018      	movs	r0, r3
 8000f3a:	2314      	movs	r3, #20
 8000f3c:	001a      	movs	r2, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	f004 f824 	bl	8004f8c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f44:	2410      	movs	r4, #16
 8000f46:	193b      	adds	r3, r7, r4
 8000f48:	0018      	movs	r0, r3
 8000f4a:	2334      	movs	r3, #52	; 0x34
 8000f4c:	001a      	movs	r2, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	f004 f81c 	bl	8004f8c <memset>
  if(huart->Instance==USART2)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a22      	ldr	r2, [pc, #136]	; (8000fe4 <HAL_UART_MspInit+0xb8>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d13e      	bne.n	8000fdc <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f5e:	193b      	adds	r3, r7, r4
 8000f60:	2202      	movs	r2, #2
 8000f62:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f64:	193b      	adds	r3, r7, r4
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f6a:	193b      	adds	r3, r7, r4
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f002 fb49 	bl	8003604 <HAL_RCCEx_PeriphCLKConfig>
 8000f72:	1e03      	subs	r3, r0, #0
 8000f74:	d001      	beq.n	8000f7a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f76:	f7ff fee9 	bl	8000d4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f7a:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <HAL_UART_MspInit+0xbc>)
 8000f7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f7e:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <HAL_UART_MspInit+0xbc>)
 8000f80:	2180      	movs	r1, #128	; 0x80
 8000f82:	0289      	lsls	r1, r1, #10
 8000f84:	430a      	orrs	r2, r1
 8000f86:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f88:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <HAL_UART_MspInit+0xbc>)
 8000f8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f8c:	2380      	movs	r3, #128	; 0x80
 8000f8e:	029b      	lsls	r3, r3, #10
 8000f90:	4013      	ands	r3, r2
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <HAL_UART_MspInit+0xbc>)
 8000f98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f9a:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <HAL_UART_MspInit+0xbc>)
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	635a      	str	r2, [r3, #52]	; 0x34
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <HAL_UART_MspInit+0xbc>)
 8000fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	4013      	ands	r3, r2
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000fae:	2144      	movs	r1, #68	; 0x44
 8000fb0:	187b      	adds	r3, r7, r1
 8000fb2:	220c      	movs	r2, #12
 8000fb4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	187b      	adds	r3, r7, r1
 8000fb8:	2202      	movs	r2, #2
 8000fba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fbc:	187b      	adds	r3, r7, r1
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	187b      	adds	r3, r7, r1
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000fc8:	187b      	adds	r3, r7, r1
 8000fca:	2201      	movs	r2, #1
 8000fcc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fce:	187a      	adds	r2, r7, r1
 8000fd0:	23a0      	movs	r3, #160	; 0xa0
 8000fd2:	05db      	lsls	r3, r3, #23
 8000fd4:	0011      	movs	r1, r2
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f001 f8b2 	bl	8002140 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fdc:	46c0      	nop			; (mov r8, r8)
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	b017      	add	sp, #92	; 0x5c
 8000fe2:	bd90      	pop	{r4, r7, pc}
 8000fe4:	40004400 	.word	0x40004400
 8000fe8:	40021000 	.word	0x40021000

08000fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <NMI_Handler+0x4>

08000ff2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff6:	e7fe      	b.n	8000ff6 <HardFault_Handler+0x4>

08000ff8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ffc:	46c0      	nop			; (mov r8, r8)
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001010:	f000 f938 	bl	8001284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001014:	46c0      	nop			; (mov r8, r8)
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b086      	sub	sp, #24
 800101e:	af00      	add	r7, sp, #0
 8001020:	60f8      	str	r0, [r7, #12]
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
 800102a:	e00a      	b.n	8001042 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800102c:	e000      	b.n	8001030 <_read+0x16>
 800102e:	bf00      	nop
 8001030:	0001      	movs	r1, r0
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	1c5a      	adds	r2, r3, #1
 8001036:	60ba      	str	r2, [r7, #8]
 8001038:	b2ca      	uxtb	r2, r1
 800103a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	3301      	adds	r3, #1
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	697a      	ldr	r2, [r7, #20]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	429a      	cmp	r2, r3
 8001048:	dbf0      	blt.n	800102c <_read+0x12>
  }

  return len;
 800104a:	687b      	ldr	r3, [r7, #4]
}
 800104c:	0018      	movs	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	b006      	add	sp, #24
 8001052:	bd80      	pop	{r7, pc}

08001054 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	e009      	b.n	800107a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	1c5a      	adds	r2, r3, #1
 800106a:	60ba      	str	r2, [r7, #8]
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	0018      	movs	r0, r3
 8001070:	e000      	b.n	8001074 <_write+0x20>
 8001072:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	3301      	adds	r3, #1
 8001078:	617b      	str	r3, [r7, #20]
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	429a      	cmp	r2, r3
 8001080:	dbf1      	blt.n	8001066 <_write+0x12>
  }
  return len;
 8001082:	687b      	ldr	r3, [r7, #4]
}
 8001084:	0018      	movs	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	b006      	add	sp, #24
 800108a:	bd80      	pop	{r7, pc}

0800108c <_close>:

int _close(int file)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001094:	2301      	movs	r3, #1
 8001096:	425b      	negs	r3, r3
}
 8001098:	0018      	movs	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	b002      	add	sp, #8
 800109e:	bd80      	pop	{r7, pc}

080010a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	2280      	movs	r2, #128	; 0x80
 80010ae:	0192      	lsls	r2, r2, #6
 80010b0:	605a      	str	r2, [r3, #4]
  return 0;
 80010b2:	2300      	movs	r3, #0
}
 80010b4:	0018      	movs	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	b002      	add	sp, #8
 80010ba:	bd80      	pop	{r7, pc}

080010bc <_isatty>:

int _isatty(int file)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010c4:	2301      	movs	r3, #1
}
 80010c6:	0018      	movs	r0, r3
 80010c8:	46bd      	mov	sp, r7
 80010ca:	b002      	add	sp, #8
 80010cc:	bd80      	pop	{r7, pc}

080010ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b084      	sub	sp, #16
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	60f8      	str	r0, [r7, #12]
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010da:	2300      	movs	r3, #0
}
 80010dc:	0018      	movs	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	b004      	add	sp, #16
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010ec:	4a14      	ldr	r2, [pc, #80]	; (8001140 <_sbrk+0x5c>)
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <_sbrk+0x60>)
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f8:	4b13      	ldr	r3, [pc, #76]	; (8001148 <_sbrk+0x64>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d102      	bne.n	8001106 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <_sbrk+0x64>)
 8001102:	4a12      	ldr	r2, [pc, #72]	; (800114c <_sbrk+0x68>)
 8001104:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <_sbrk+0x64>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	18d3      	adds	r3, r2, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	429a      	cmp	r2, r3
 8001112:	d207      	bcs.n	8001124 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001114:	f003 ff90 	bl	8005038 <__errno>
 8001118:	0003      	movs	r3, r0
 800111a:	220c      	movs	r2, #12
 800111c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800111e:	2301      	movs	r3, #1
 8001120:	425b      	negs	r3, r3
 8001122:	e009      	b.n	8001138 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <_sbrk+0x64>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800112a:	4b07      	ldr	r3, [pc, #28]	; (8001148 <_sbrk+0x64>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	18d2      	adds	r2, r2, r3
 8001132:	4b05      	ldr	r3, [pc, #20]	; (8001148 <_sbrk+0x64>)
 8001134:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001136:	68fb      	ldr	r3, [r7, #12]
}
 8001138:	0018      	movs	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	b006      	add	sp, #24
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20009000 	.word	0x20009000
 8001144:	00000400 	.word	0x00000400
 8001148:	2000021c 	.word	0x2000021c
 800114c:	20000370 	.word	0x20000370

08001150 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001154:	46c0      	nop			; (mov r8, r8)
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800115c:	480d      	ldr	r0, [pc, #52]	; (8001194 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800115e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001160:	f7ff fff6 	bl	8001150 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001164:	480c      	ldr	r0, [pc, #48]	; (8001198 <LoopForever+0x6>)
  ldr r1, =_edata
 8001166:	490d      	ldr	r1, [pc, #52]	; (800119c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001168:	4a0d      	ldr	r2, [pc, #52]	; (80011a0 <LoopForever+0xe>)
  movs r3, #0
 800116a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800116c:	e002      	b.n	8001174 <LoopCopyDataInit>

0800116e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800116e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001172:	3304      	adds	r3, #4

08001174 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001178:	d3f9      	bcc.n	800116e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800117a:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800117c:	4c0a      	ldr	r4, [pc, #40]	; (80011a8 <LoopForever+0x16>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001180:	e001      	b.n	8001186 <LoopFillZerobss>

08001182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001184:	3204      	adds	r2, #4

08001186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001188:	d3fb      	bcc.n	8001182 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800118a:	f003 ff5b 	bl	8005044 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800118e:	f7ff fa57 	bl	8000640 <main>

08001192 <LoopForever>:

LoopForever:
  b LoopForever
 8001192:	e7fe      	b.n	8001192 <LoopForever>
  ldr   r0, =_estack
 8001194:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800119c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80011a0:	080060d8 	.word	0x080060d8
  ldr r2, =_sbss
 80011a4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80011a8:	20000370 	.word	0x20000370

080011ac <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011ac:	e7fe      	b.n	80011ac <ADC1_COMP_IRQHandler>
	...

080011b0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011b6:	1dfb      	adds	r3, r7, #7
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011bc:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <HAL_Init+0x3c>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <HAL_Init+0x3c>)
 80011c2:	2180      	movs	r1, #128	; 0x80
 80011c4:	0049      	lsls	r1, r1, #1
 80011c6:	430a      	orrs	r2, r1
 80011c8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ca:	2000      	movs	r0, #0
 80011cc:	f000 f810 	bl	80011f0 <HAL_InitTick>
 80011d0:	1e03      	subs	r3, r0, #0
 80011d2:	d003      	beq.n	80011dc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80011d4:	1dfb      	adds	r3, r7, #7
 80011d6:	2201      	movs	r2, #1
 80011d8:	701a      	strb	r2, [r3, #0]
 80011da:	e001      	b.n	80011e0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80011dc:	f7ff fdbc 	bl	8000d58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011e0:	1dfb      	adds	r3, r7, #7
 80011e2:	781b      	ldrb	r3, [r3, #0]
}
 80011e4:	0018      	movs	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	b002      	add	sp, #8
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40022000 	.word	0x40022000

080011f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f0:	b590      	push	{r4, r7, lr}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011f8:	230f      	movs	r3, #15
 80011fa:	18fb      	adds	r3, r7, r3
 80011fc:	2200      	movs	r2, #0
 80011fe:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001200:	4b1d      	ldr	r3, [pc, #116]	; (8001278 <HAL_InitTick+0x88>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d02b      	beq.n	8001260 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001208:	4b1c      	ldr	r3, [pc, #112]	; (800127c <HAL_InitTick+0x8c>)
 800120a:	681c      	ldr	r4, [r3, #0]
 800120c:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <HAL_InitTick+0x88>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	0019      	movs	r1, r3
 8001212:	23fa      	movs	r3, #250	; 0xfa
 8001214:	0098      	lsls	r0, r3, #2
 8001216:	f7fe ff87 	bl	8000128 <__udivsi3>
 800121a:	0003      	movs	r3, r0
 800121c:	0019      	movs	r1, r3
 800121e:	0020      	movs	r0, r4
 8001220:	f7fe ff82 	bl	8000128 <__udivsi3>
 8001224:	0003      	movs	r3, r0
 8001226:	0018      	movs	r0, r3
 8001228:	f000 ff7d 	bl	8002126 <HAL_SYSTICK_Config>
 800122c:	1e03      	subs	r3, r0, #0
 800122e:	d112      	bne.n	8001256 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b03      	cmp	r3, #3
 8001234:	d80a      	bhi.n	800124c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	2301      	movs	r3, #1
 800123a:	425b      	negs	r3, r3
 800123c:	2200      	movs	r2, #0
 800123e:	0018      	movs	r0, r3
 8001240:	f000 ff5c 	bl	80020fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001244:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <HAL_InitTick+0x90>)
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	e00d      	b.n	8001268 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800124c:	230f      	movs	r3, #15
 800124e:	18fb      	adds	r3, r7, r3
 8001250:	2201      	movs	r2, #1
 8001252:	701a      	strb	r2, [r3, #0]
 8001254:	e008      	b.n	8001268 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001256:	230f      	movs	r3, #15
 8001258:	18fb      	adds	r3, r7, r3
 800125a:	2201      	movs	r2, #1
 800125c:	701a      	strb	r2, [r3, #0]
 800125e:	e003      	b.n	8001268 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001260:	230f      	movs	r3, #15
 8001262:	18fb      	adds	r3, r7, r3
 8001264:	2201      	movs	r2, #1
 8001266:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001268:	230f      	movs	r3, #15
 800126a:	18fb      	adds	r3, r7, r3
 800126c:	781b      	ldrb	r3, [r3, #0]
}
 800126e:	0018      	movs	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	b005      	add	sp, #20
 8001274:	bd90      	pop	{r4, r7, pc}
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	20000008 	.word	0x20000008
 800127c:	20000000 	.word	0x20000000
 8001280:	20000004 	.word	0x20000004

08001284 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <HAL_IncTick+0x1c>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	001a      	movs	r2, r3
 800128e:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <HAL_IncTick+0x20>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	18d2      	adds	r2, r2, r3
 8001294:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <HAL_IncTick+0x20>)
 8001296:	601a      	str	r2, [r3, #0]
}
 8001298:	46c0      	nop			; (mov r8, r8)
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	20000008 	.word	0x20000008
 80012a4:	20000220 	.word	0x20000220

080012a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  return uwTick;
 80012ac:	4b02      	ldr	r3, [pc, #8]	; (80012b8 <HAL_GetTick+0x10>)
 80012ae:	681b      	ldr	r3, [r3, #0]
}
 80012b0:	0018      	movs	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	20000220 	.word	0x20000220

080012bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c4:	f7ff fff0 	bl	80012a8 <HAL_GetTick>
 80012c8:	0003      	movs	r3, r0
 80012ca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	3301      	adds	r3, #1
 80012d4:	d005      	beq.n	80012e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <HAL_Delay+0x44>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	001a      	movs	r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	189b      	adds	r3, r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012e2:	46c0      	nop			; (mov r8, r8)
 80012e4:	f7ff ffe0 	bl	80012a8 <HAL_GetTick>
 80012e8:	0002      	movs	r2, r0
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d8f7      	bhi.n	80012e4 <HAL_Delay+0x28>
  {
  }
}
 80012f4:	46c0      	nop			; (mov r8, r8)
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	46bd      	mov	sp, r7
 80012fa:	b004      	add	sp, #16
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	46c0      	nop			; (mov r8, r8)
 8001300:	20000008 	.word	0x20000008

08001304 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a06      	ldr	r2, [pc, #24]	; (800132c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001312:	4013      	ands	r3, r2
 8001314:	0019      	movs	r1, r3
 8001316:	4b04      	ldr	r3, [pc, #16]	; (8001328 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	430a      	orrs	r2, r1
 800131c:	601a      	str	r2, [r3, #0]
}
 800131e:	46c0      	nop			; (mov r8, r8)
 8001320:	46bd      	mov	sp, r7
 8001322:	b002      	add	sp, #8
 8001324:	bd80      	pop	{r7, pc}
 8001326:	46c0      	nop			; (mov r8, r8)
 8001328:	40010000 	.word	0x40010000
 800132c:	fffff9ff 	.word	0xfffff9ff

08001330 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a05      	ldr	r2, [pc, #20]	; (8001354 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001340:	401a      	ands	r2, r3
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	431a      	orrs	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	601a      	str	r2, [r3, #0]
}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	46bd      	mov	sp, r7
 800134e:	b002      	add	sp, #8
 8001350:	bd80      	pop	{r7, pc}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	fe3fffff 	.word	0xfe3fffff

08001358 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	23e0      	movs	r3, #224	; 0xe0
 8001366:	045b      	lsls	r3, r3, #17
 8001368:	4013      	ands	r3, r2
}
 800136a:	0018      	movs	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	b002      	add	sp, #8
 8001370:	bd80      	pop	{r7, pc}

08001372 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b084      	sub	sp, #16
 8001376:	af00      	add	r7, sp, #0
 8001378:	60f8      	str	r0, [r7, #12]
 800137a:	60b9      	str	r1, [r7, #8]
 800137c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	68ba      	ldr	r2, [r7, #8]
 8001384:	2104      	movs	r1, #4
 8001386:	400a      	ands	r2, r1
 8001388:	2107      	movs	r1, #7
 800138a:	4091      	lsls	r1, r2
 800138c:	000a      	movs	r2, r1
 800138e:	43d2      	mvns	r2, r2
 8001390:	401a      	ands	r2, r3
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	2104      	movs	r1, #4
 8001396:	400b      	ands	r3, r1
 8001398:	6879      	ldr	r1, [r7, #4]
 800139a:	4099      	lsls	r1, r3
 800139c:	000b      	movs	r3, r1
 800139e:	431a      	orrs	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80013a4:	46c0      	nop			; (mov r8, r8)
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b004      	add	sp, #16
 80013aa:	bd80      	pop	{r7, pc}

080013ac <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	2104      	movs	r1, #4
 80013be:	400a      	ands	r2, r1
 80013c0:	2107      	movs	r1, #7
 80013c2:	4091      	lsls	r1, r2
 80013c4:	000a      	movs	r2, r1
 80013c6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	2104      	movs	r1, #4
 80013cc:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80013ce:	40da      	lsrs	r2, r3
 80013d0:	0013      	movs	r3, r2
}
 80013d2:	0018      	movs	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	b002      	add	sp, #8
 80013d8:	bd80      	pop	{r7, pc}

080013da <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	68da      	ldr	r2, [r3, #12]
 80013e6:	23c0      	movs	r3, #192	; 0xc0
 80013e8:	011b      	lsls	r3, r3, #4
 80013ea:	4013      	ands	r3, r2
 80013ec:	d101      	bne.n	80013f2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80013ee:	2301      	movs	r3, #1
 80013f0:	e000      	b.n	80013f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	0018      	movs	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	b002      	add	sp, #8
 80013fa:	bd80      	pop	{r7, pc}

080013fc <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140c:	68ba      	ldr	r2, [r7, #8]
 800140e:	211f      	movs	r1, #31
 8001410:	400a      	ands	r2, r1
 8001412:	210f      	movs	r1, #15
 8001414:	4091      	lsls	r1, r2
 8001416:	000a      	movs	r2, r1
 8001418:	43d2      	mvns	r2, r2
 800141a:	401a      	ands	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	0e9b      	lsrs	r3, r3, #26
 8001420:	210f      	movs	r1, #15
 8001422:	4019      	ands	r1, r3
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	201f      	movs	r0, #31
 8001428:	4003      	ands	r3, r0
 800142a:	4099      	lsls	r1, r3
 800142c:	000b      	movs	r3, r1
 800142e:	431a      	orrs	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001434:	46c0      	nop			; (mov r8, r8)
 8001436:	46bd      	mov	sp, r7
 8001438:	b004      	add	sp, #16
 800143a:	bd80      	pop	{r7, pc}

0800143c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	035b      	lsls	r3, r3, #13
 800144e:	0b5b      	lsrs	r3, r3, #13
 8001450:	431a      	orrs	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001456:	46c0      	nop			; (mov r8, r8)
 8001458:	46bd      	mov	sp, r7
 800145a:	b002      	add	sp, #8
 800145c:	bd80      	pop	{r7, pc}

0800145e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
 8001466:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	0352      	lsls	r2, r2, #13
 8001470:	0b52      	lsrs	r2, r2, #13
 8001472:	43d2      	mvns	r2, r2
 8001474:	401a      	ands	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	629a      	str	r2, [r3, #40]	; 0x28
}
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	46bd      	mov	sp, r7
 800147e:	b002      	add	sp, #8
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	695b      	ldr	r3, [r3, #20]
 8001494:	68ba      	ldr	r2, [r7, #8]
 8001496:	0212      	lsls	r2, r2, #8
 8001498:	43d2      	mvns	r2, r2
 800149a:	401a      	ands	r2, r3
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	021b      	lsls	r3, r3, #8
 80014a0:	6879      	ldr	r1, [r7, #4]
 80014a2:	400b      	ands	r3, r1
 80014a4:	4904      	ldr	r1, [pc, #16]	; (80014b8 <LL_ADC_SetChannelSamplingTime+0x34>)
 80014a6:	400b      	ands	r3, r1
 80014a8:	431a      	orrs	r2, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	46bd      	mov	sp, r7
 80014b2:	b004      	add	sp, #16
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	07ffff00 	.word	0x07ffff00

080014bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	4a05      	ldr	r2, [pc, #20]	; (80014e0 <LL_ADC_EnableInternalRegulator+0x24>)
 80014ca:	4013      	ands	r3, r2
 80014cc:	2280      	movs	r2, #128	; 0x80
 80014ce:	0552      	lsls	r2, r2, #21
 80014d0:	431a      	orrs	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	46bd      	mov	sp, r7
 80014da:	b002      	add	sp, #8
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	46c0      	nop			; (mov r8, r8)
 80014e0:	6fffffe8 	.word	0x6fffffe8

080014e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	2380      	movs	r3, #128	; 0x80
 80014f2:	055b      	lsls	r3, r3, #21
 80014f4:	401a      	ands	r2, r3
 80014f6:	2380      	movs	r3, #128	; 0x80
 80014f8:	055b      	lsls	r3, r3, #21
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d101      	bne.n	8001502 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001502:	2300      	movs	r3, #0
}
 8001504:	0018      	movs	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	b002      	add	sp, #8
 800150a:	bd80      	pop	{r7, pc}

0800150c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	4a04      	ldr	r2, [pc, #16]	; (800152c <LL_ADC_Enable+0x20>)
 800151a:	4013      	ands	r3, r2
 800151c:	2201      	movs	r2, #1
 800151e:	431a      	orrs	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001524:	46c0      	nop			; (mov r8, r8)
 8001526:	46bd      	mov	sp, r7
 8001528:	b002      	add	sp, #8
 800152a:	bd80      	pop	{r7, pc}
 800152c:	7fffffe8 	.word	0x7fffffe8

08001530 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	2201      	movs	r2, #1
 800153e:	4013      	ands	r3, r2
 8001540:	2b01      	cmp	r3, #1
 8001542:	d101      	bne.n	8001548 <LL_ADC_IsEnabled+0x18>
 8001544:	2301      	movs	r3, #1
 8001546:	e000      	b.n	800154a <LL_ADC_IsEnabled+0x1a>
 8001548:	2300      	movs	r3, #0
}
 800154a:	0018      	movs	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	b002      	add	sp, #8
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	4a04      	ldr	r2, [pc, #16]	; (8001574 <LL_ADC_REG_StartConversion+0x20>)
 8001562:	4013      	ands	r3, r2
 8001564:	2204      	movs	r2, #4
 8001566:	431a      	orrs	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800156c:	46c0      	nop			; (mov r8, r8)
 800156e:	46bd      	mov	sp, r7
 8001570:	b002      	add	sp, #8
 8001572:	bd80      	pop	{r7, pc}
 8001574:	7fffffe8 	.word	0x7fffffe8

08001578 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	2204      	movs	r2, #4
 8001586:	4013      	ands	r3, r2
 8001588:	2b04      	cmp	r3, #4
 800158a:	d101      	bne.n	8001590 <LL_ADC_REG_IsConversionOngoing+0x18>
 800158c:	2301      	movs	r3, #1
 800158e:	e000      	b.n	8001592 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001590:	2300      	movs	r3, #0
}
 8001592:	0018      	movs	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	b002      	add	sp, #8
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b088      	sub	sp, #32
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015a4:	231f      	movs	r3, #31
 80015a6:	18fb      	adds	r3, r7, r3
 80015a8:	2200      	movs	r2, #0
 80015aa:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e17f      	b.n	80018c2 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d10a      	bne.n	80015e0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	0018      	movs	r0, r3
 80015ce:	f7ff fbeb 	bl	8000da8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2254      	movs	r2, #84	; 0x54
 80015dc:	2100      	movs	r1, #0
 80015de:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	0018      	movs	r0, r3
 80015e6:	f7ff ff7d 	bl	80014e4 <LL_ADC_IsInternalRegulatorEnabled>
 80015ea:	1e03      	subs	r3, r0, #0
 80015ec:	d115      	bne.n	800161a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	0018      	movs	r0, r3
 80015f4:	f7ff ff62 	bl	80014bc <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015f8:	4bb4      	ldr	r3, [pc, #720]	; (80018cc <HAL_ADC_Init+0x330>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	49b4      	ldr	r1, [pc, #720]	; (80018d0 <HAL_ADC_Init+0x334>)
 80015fe:	0018      	movs	r0, r3
 8001600:	f7fe fd92 	bl	8000128 <__udivsi3>
 8001604:	0003      	movs	r3, r0
 8001606:	3301      	adds	r3, #1
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800160c:	e002      	b.n	8001614 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	3b01      	subs	r3, #1
 8001612:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f9      	bne.n	800160e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	0018      	movs	r0, r3
 8001620:	f7ff ff60 	bl	80014e4 <LL_ADC_IsInternalRegulatorEnabled>
 8001624:	1e03      	subs	r3, r0, #0
 8001626:	d10f      	bne.n	8001648 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162c:	2210      	movs	r2, #16
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001638:	2201      	movs	r2, #1
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001640:	231f      	movs	r3, #31
 8001642:	18fb      	adds	r3, r7, r3
 8001644:	2201      	movs	r2, #1
 8001646:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	0018      	movs	r0, r3
 800164e:	f7ff ff93 	bl	8001578 <LL_ADC_REG_IsConversionOngoing>
 8001652:	0003      	movs	r3, r0
 8001654:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165a:	2210      	movs	r2, #16
 800165c:	4013      	ands	r3, r2
 800165e:	d000      	beq.n	8001662 <HAL_ADC_Init+0xc6>
 8001660:	e122      	b.n	80018a8 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d000      	beq.n	800166a <HAL_ADC_Init+0xce>
 8001668:	e11e      	b.n	80018a8 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166e:	4a99      	ldr	r2, [pc, #612]	; (80018d4 <HAL_ADC_Init+0x338>)
 8001670:	4013      	ands	r3, r2
 8001672:	2202      	movs	r2, #2
 8001674:	431a      	orrs	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	0018      	movs	r0, r3
 8001680:	f7ff ff56 	bl	8001530 <LL_ADC_IsEnabled>
 8001684:	1e03      	subs	r3, r0, #0
 8001686:	d000      	beq.n	800168a <HAL_ADC_Init+0xee>
 8001688:	e0ad      	b.n	80017e6 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	7e1b      	ldrb	r3, [r3, #24]
 8001692:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001694:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	7e5b      	ldrb	r3, [r3, #25]
 800169a:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800169c:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	7e9b      	ldrb	r3, [r3, #26]
 80016a2:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80016a4:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d002      	beq.n	80016b4 <HAL_ADC_Init+0x118>
 80016ae:	2380      	movs	r3, #128	; 0x80
 80016b0:	015b      	lsls	r3, r3, #5
 80016b2:	e000      	b.n	80016b6 <HAL_ADC_Init+0x11a>
 80016b4:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80016b6:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80016bc:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	da04      	bge.n	80016d0 <HAL_ADC_Init+0x134>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	085b      	lsrs	r3, r3, #1
 80016ce:	e001      	b.n	80016d4 <HAL_ADC_Init+0x138>
 80016d0:	2380      	movs	r3, #128	; 0x80
 80016d2:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80016d4:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	212c      	movs	r1, #44	; 0x2c
 80016da:	5c5b      	ldrb	r3, [r3, r1]
 80016dc:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80016de:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2220      	movs	r2, #32
 80016ea:	5c9b      	ldrb	r3, [r3, r2]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d115      	bne.n	800171c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	7e9b      	ldrb	r3, [r3, #26]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d105      	bne.n	8001704 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	2280      	movs	r2, #128	; 0x80
 80016fc:	0252      	lsls	r2, r2, #9
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
 8001702:	e00b      	b.n	800171c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001708:	2220      	movs	r2, #32
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001714:	2201      	movs	r2, #1
 8001716:	431a      	orrs	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00a      	beq.n	800173a <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001728:	23e0      	movs	r3, #224	; 0xe0
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001732:	4313      	orrs	r3, r2
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4313      	orrs	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	4a65      	ldr	r2, [pc, #404]	; (80018d8 <HAL_ADC_Init+0x33c>)
 8001742:	4013      	ands	r3, r2
 8001744:	0019      	movs	r1, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	430a      	orrs	r2, r1
 800174e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	0f9b      	lsrs	r3, r3, #30
 8001756:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800175c:	4313      	orrs	r3, r2
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	4313      	orrs	r3, r2
 8001762:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	223c      	movs	r2, #60	; 0x3c
 8001768:	5c9b      	ldrb	r3, [r3, r2]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d111      	bne.n	8001792 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	0f9b      	lsrs	r3, r3, #30
 8001774:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800177a:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001780:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001786:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	4313      	orrs	r3, r2
 800178c:	2201      	movs	r2, #1
 800178e:	4313      	orrs	r3, r2
 8001790:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	4a50      	ldr	r2, [pc, #320]	; (80018dc <HAL_ADC_Init+0x340>)
 800179a:	4013      	ands	r3, r2
 800179c:	0019      	movs	r1, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	430a      	orrs	r2, r1
 80017a6:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685a      	ldr	r2, [r3, #4]
 80017ac:	23c0      	movs	r3, #192	; 0xc0
 80017ae:	061b      	lsls	r3, r3, #24
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d018      	beq.n	80017e6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80017b8:	2380      	movs	r3, #128	; 0x80
 80017ba:	05db      	lsls	r3, r3, #23
 80017bc:	429a      	cmp	r2, r3
 80017be:	d012      	beq.n	80017e6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	061b      	lsls	r3, r3, #24
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d00c      	beq.n	80017e6 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80017cc:	4b44      	ldr	r3, [pc, #272]	; (80018e0 <HAL_ADC_Init+0x344>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a44      	ldr	r2, [pc, #272]	; (80018e4 <HAL_ADC_Init+0x348>)
 80017d2:	4013      	ands	r3, r2
 80017d4:	0019      	movs	r1, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	23f0      	movs	r3, #240	; 0xf0
 80017dc:	039b      	lsls	r3, r3, #14
 80017de:	401a      	ands	r2, r3
 80017e0:	4b3f      	ldr	r3, [pc, #252]	; (80018e0 <HAL_ADC_Init+0x344>)
 80017e2:	430a      	orrs	r2, r1
 80017e4:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6818      	ldr	r0, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ee:	001a      	movs	r2, r3
 80017f0:	2100      	movs	r1, #0
 80017f2:	f7ff fdbe 	bl	8001372 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6818      	ldr	r0, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017fe:	493a      	ldr	r1, [pc, #232]	; (80018e8 <HAL_ADC_Init+0x34c>)
 8001800:	001a      	movs	r2, r3
 8001802:	f7ff fdb6 	bl	8001372 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d109      	bne.n	8001822 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2110      	movs	r1, #16
 800181a:	4249      	negs	r1, r1
 800181c:	430a      	orrs	r2, r1
 800181e:	629a      	str	r2, [r3, #40]	; 0x28
 8001820:	e018      	b.n	8001854 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691a      	ldr	r2, [r3, #16]
 8001826:	2380      	movs	r3, #128	; 0x80
 8001828:	039b      	lsls	r3, r3, #14
 800182a:	429a      	cmp	r2, r3
 800182c:	d112      	bne.n	8001854 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69db      	ldr	r3, [r3, #28]
 8001838:	3b01      	subs	r3, #1
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	221c      	movs	r2, #28
 800183e:	4013      	ands	r3, r2
 8001840:	2210      	movs	r2, #16
 8001842:	4252      	negs	r2, r2
 8001844:	409a      	lsls	r2, r3
 8001846:	0011      	movs	r1, r2
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	430a      	orrs	r2, r1
 8001852:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2100      	movs	r1, #0
 800185a:	0018      	movs	r0, r3
 800185c:	f7ff fda6 	bl	80013ac <LL_ADC_GetSamplingTimeCommonChannels>
 8001860:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001866:	429a      	cmp	r2, r3
 8001868:	d10b      	bne.n	8001882 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001874:	2203      	movs	r2, #3
 8001876:	4393      	bics	r3, r2
 8001878:	2201      	movs	r2, #1
 800187a:	431a      	orrs	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001880:	e01c      	b.n	80018bc <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001886:	2212      	movs	r2, #18
 8001888:	4393      	bics	r3, r2
 800188a:	2210      	movs	r2, #16
 800188c:	431a      	orrs	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001896:	2201      	movs	r2, #1
 8001898:	431a      	orrs	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800189e:	231f      	movs	r3, #31
 80018a0:	18fb      	adds	r3, r7, r3
 80018a2:	2201      	movs	r2, #1
 80018a4:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80018a6:	e009      	b.n	80018bc <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ac:	2210      	movs	r2, #16
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80018b4:	231f      	movs	r3, #31
 80018b6:	18fb      	adds	r3, r7, r3
 80018b8:	2201      	movs	r2, #1
 80018ba:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80018bc:	231f      	movs	r3, #31
 80018be:	18fb      	adds	r3, r7, r3
 80018c0:	781b      	ldrb	r3, [r3, #0]
}
 80018c2:	0018      	movs	r0, r3
 80018c4:	46bd      	mov	sp, r7
 80018c6:	b008      	add	sp, #32
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	46c0      	nop			; (mov r8, r8)
 80018cc:	20000000 	.word	0x20000000
 80018d0:	00030d40 	.word	0x00030d40
 80018d4:	fffffefd 	.word	0xfffffefd
 80018d8:	ffde0201 	.word	0xffde0201
 80018dc:	1ffffc02 	.word	0x1ffffc02
 80018e0:	40012708 	.word	0x40012708
 80018e4:	ffc3ffff 	.word	0xffc3ffff
 80018e8:	07ffff04 	.word	0x07ffff04

080018ec <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	2b08      	cmp	r3, #8
 80018fc:	d102      	bne.n	8001904 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80018fe:	2308      	movs	r3, #8
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	e00f      	b.n	8001924 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	2201      	movs	r2, #1
 800190c:	4013      	ands	r3, r2
 800190e:	d007      	beq.n	8001920 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001914:	2220      	movs	r2, #32
 8001916:	431a      	orrs	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e072      	b.n	8001a06 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8001920:	2304      	movs	r3, #4
 8001922:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001924:	f7ff fcc0 	bl	80012a8 <HAL_GetTick>
 8001928:	0003      	movs	r3, r0
 800192a:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800192c:	e01f      	b.n	800196e <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	3301      	adds	r3, #1
 8001932:	d01c      	beq.n	800196e <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001934:	f7ff fcb8 	bl	80012a8 <HAL_GetTick>
 8001938:	0002      	movs	r2, r0
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d302      	bcc.n	800194a <HAL_ADC_PollForConversion+0x5e>
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d111      	bne.n	800196e <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	4013      	ands	r3, r2
 8001954:	d10b      	bne.n	800196e <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195a:	2204      	movs	r2, #4
 800195c:	431a      	orrs	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2254      	movs	r2, #84	; 0x54
 8001966:	2100      	movs	r1, #0
 8001968:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e04b      	b.n	8001a06 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	4013      	ands	r3, r2
 8001978:	d0d9      	beq.n	800192e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197e:	2280      	movs	r2, #128	; 0x80
 8001980:	0092      	lsls	r2, r2, #2
 8001982:	431a      	orrs	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	0018      	movs	r0, r3
 800198e:	f7ff fd24 	bl	80013da <LL_ADC_REG_IsTriggerSourceSWStart>
 8001992:	1e03      	subs	r3, r0, #0
 8001994:	d02e      	beq.n	80019f4 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	7e9b      	ldrb	r3, [r3, #26]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d12a      	bne.n	80019f4 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2208      	movs	r2, #8
 80019a6:	4013      	ands	r3, r2
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	d123      	bne.n	80019f4 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	0018      	movs	r0, r3
 80019b2:	f7ff fde1 	bl	8001578 <LL_ADC_REG_IsConversionOngoing>
 80019b6:	1e03      	subs	r3, r0, #0
 80019b8:	d110      	bne.n	80019dc <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	685a      	ldr	r2, [r3, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	210c      	movs	r1, #12
 80019c6:	438a      	bics	r2, r1
 80019c8:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ce:	4a10      	ldr	r2, [pc, #64]	; (8001a10 <HAL_ADC_PollForConversion+0x124>)
 80019d0:	4013      	ands	r3, r2
 80019d2:	2201      	movs	r2, #1
 80019d4:	431a      	orrs	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	659a      	str	r2, [r3, #88]	; 0x58
 80019da:	e00b      	b.n	80019f4 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e0:	2220      	movs	r2, #32
 80019e2:	431a      	orrs	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ec:	2201      	movs	r2, #1
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	7e1b      	ldrb	r3, [r3, #24]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d103      	bne.n	8001a04 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	220c      	movs	r2, #12
 8001a02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	0018      	movs	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	b004      	add	sp, #16
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	fffffefe 	.word	0xfffffefe

08001a14 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001a14:	b5b0      	push	{r4, r5, r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	0018      	movs	r0, r3
 8001a22:	f7ff fda9 	bl	8001578 <LL_ADC_REG_IsConversionOngoing>
 8001a26:	1e03      	subs	r3, r0, #0
 8001a28:	d15f      	bne.n	8001aea <HAL_ADC_Start_IT+0xd6>
  {
    __HAL_LOCK(hadc);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2254      	movs	r2, #84	; 0x54
 8001a2e:	5c9b      	ldrb	r3, [r3, r2]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d101      	bne.n	8001a38 <HAL_ADC_Start_IT+0x24>
 8001a34:	2302      	movs	r3, #2
 8001a36:	e05f      	b.n	8001af8 <HAL_ADC_Start_IT+0xe4>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2254      	movs	r2, #84	; 0x54
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001a40:	250f      	movs	r5, #15
 8001a42:	197c      	adds	r4, r7, r5
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	0018      	movs	r0, r3
 8001a48:	f000 fa40 	bl	8001ecc <ADC_Enable>
 8001a4c:	0003      	movs	r3, r0
 8001a4e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a50:	197b      	adds	r3, r7, r5
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d143      	bne.n	8001ae0 <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5c:	4a28      	ldr	r2, [pc, #160]	; (8001b00 <HAL_ADC_Start_IT+0xec>)
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2280      	movs	r2, #128	; 0x80
 8001a62:	0052      	lsls	r2, r2, #1
 8001a64:	431a      	orrs	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	221c      	movs	r2, #28
 8001a76:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2254      	movs	r2, #84	; 0x54
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	211c      	movs	r1, #28
 8001a8c:	438a      	bics	r2, r1
 8001a8e:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	695b      	ldr	r3, [r3, #20]
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	d108      	bne.n	8001aaa <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2108      	movs	r1, #8
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	605a      	str	r2, [r3, #4]
          break;
 8001aa8:	e008      	b.n	8001abc <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2104      	movs	r1, #4
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	605a      	str	r2, [r3, #4]
          break;
 8001aba:	46c0      	nop			; (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d107      	bne.n	8001ad4 <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2110      	movs	r1, #16
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f7ff fd3b 	bl	8001554 <LL_ADC_REG_StartConversion>
 8001ade:	e008      	b.n	8001af2 <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2254      	movs	r2, #84	; 0x54
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	5499      	strb	r1, [r3, r2]
 8001ae8:	e003      	b.n	8001af2 <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001aea:	230f      	movs	r3, #15
 8001aec:	18fb      	adds	r3, r7, r3
 8001aee:	2202      	movs	r2, #2
 8001af0:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001af2:	230f      	movs	r3, #15
 8001af4:	18fb      	adds	r3, r7, r3
 8001af6:	781b      	ldrb	r3, [r3, #0]
}
 8001af8:	0018      	movs	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	b004      	add	sp, #16
 8001afe:	bdb0      	pop	{r4, r5, r7, pc}
 8001b00:	fffff0fe 	.word	0xfffff0fe

08001b04 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001b12:	0018      	movs	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	b002      	add	sp, #8
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b26:	2317      	movs	r3, #23
 8001b28:	18fb      	adds	r3, r7, r3
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2254      	movs	r2, #84	; 0x54
 8001b36:	5c9b      	ldrb	r3, [r3, r2]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d101      	bne.n	8001b40 <HAL_ADC_ConfigChannel+0x24>
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	e1c0      	b.n	8001ec2 <HAL_ADC_ConfigChannel+0x3a6>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2254      	movs	r2, #84	; 0x54
 8001b44:	2101      	movs	r1, #1
 8001b46:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	f7ff fd13 	bl	8001578 <LL_ADC_REG_IsConversionOngoing>
 8001b52:	1e03      	subs	r3, r0, #0
 8001b54:	d000      	beq.n	8001b58 <HAL_ADC_ConfigChannel+0x3c>
 8001b56:	e1a3      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d100      	bne.n	8001b62 <HAL_ADC_ConfigChannel+0x46>
 8001b60:	e143      	b.n	8001dea <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691a      	ldr	r2, [r3, #16]
 8001b66:	2380      	movs	r3, #128	; 0x80
 8001b68:	061b      	lsls	r3, r3, #24
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d004      	beq.n	8001b78 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001b72:	4ac1      	ldr	r2, [pc, #772]	; (8001e78 <HAL_ADC_ConfigChannel+0x35c>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d108      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	0019      	movs	r1, r3
 8001b82:	0010      	movs	r0, r2
 8001b84:	f7ff fc5a 	bl	800143c <LL_ADC_REG_SetSequencerChAdd>
 8001b88:	e0c9      	b.n	8001d1e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	211f      	movs	r1, #31
 8001b94:	400b      	ands	r3, r1
 8001b96:	210f      	movs	r1, #15
 8001b98:	4099      	lsls	r1, r3
 8001b9a:	000b      	movs	r3, r1
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	0019      	movs	r1, r3
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	035b      	lsls	r3, r3, #13
 8001ba8:	0b5b      	lsrs	r3, r3, #13
 8001baa:	d105      	bne.n	8001bb8 <HAL_ADC_ConfigChannel+0x9c>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	0e9b      	lsrs	r3, r3, #26
 8001bb2:	221f      	movs	r2, #31
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	e098      	b.n	8001cea <HAL_ADC_ConfigChannel+0x1ce>
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d000      	beq.n	8001bc4 <HAL_ADC_ConfigChannel+0xa8>
 8001bc2:	e091      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x1cc>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2202      	movs	r2, #2
 8001bca:	4013      	ands	r3, r2
 8001bcc:	d000      	beq.n	8001bd0 <HAL_ADC_ConfigChannel+0xb4>
 8001bce:	e089      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x1c8>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2204      	movs	r2, #4
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d000      	beq.n	8001bdc <HAL_ADC_ConfigChannel+0xc0>
 8001bda:	e081      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x1c4>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2208      	movs	r2, #8
 8001be2:	4013      	ands	r3, r2
 8001be4:	d000      	beq.n	8001be8 <HAL_ADC_ConfigChannel+0xcc>
 8001be6:	e079      	b.n	8001cdc <HAL_ADC_ConfigChannel+0x1c0>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2210      	movs	r2, #16
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d000      	beq.n	8001bf4 <HAL_ADC_ConfigChannel+0xd8>
 8001bf2:	e071      	b.n	8001cd8 <HAL_ADC_ConfigChannel+0x1bc>
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2220      	movs	r2, #32
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d000      	beq.n	8001c00 <HAL_ADC_ConfigChannel+0xe4>
 8001bfe:	e069      	b.n	8001cd4 <HAL_ADC_ConfigChannel+0x1b8>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2240      	movs	r2, #64	; 0x40
 8001c06:	4013      	ands	r3, r2
 8001c08:	d000      	beq.n	8001c0c <HAL_ADC_ConfigChannel+0xf0>
 8001c0a:	e061      	b.n	8001cd0 <HAL_ADC_ConfigChannel+0x1b4>
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2280      	movs	r2, #128	; 0x80
 8001c12:	4013      	ands	r3, r2
 8001c14:	d000      	beq.n	8001c18 <HAL_ADC_ConfigChannel+0xfc>
 8001c16:	e059      	b.n	8001ccc <HAL_ADC_ConfigChannel+0x1b0>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	2380      	movs	r3, #128	; 0x80
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	4013      	ands	r3, r2
 8001c22:	d151      	bne.n	8001cc8 <HAL_ADC_ConfigChannel+0x1ac>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d149      	bne.n	8001cc4 <HAL_ADC_ConfigChannel+0x1a8>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	2380      	movs	r3, #128	; 0x80
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d141      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x1a4>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	2380      	movs	r3, #128	; 0x80
 8001c42:	011b      	lsls	r3, r3, #4
 8001c44:	4013      	ands	r3, r2
 8001c46:	d139      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x1a0>
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	2380      	movs	r3, #128	; 0x80
 8001c4e:	015b      	lsls	r3, r3, #5
 8001c50:	4013      	ands	r3, r2
 8001c52:	d131      	bne.n	8001cb8 <HAL_ADC_ConfigChannel+0x19c>
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	2380      	movs	r3, #128	; 0x80
 8001c5a:	019b      	lsls	r3, r3, #6
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d129      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x198>
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	2380      	movs	r3, #128	; 0x80
 8001c66:	01db      	lsls	r3, r3, #7
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d121      	bne.n	8001cb0 <HAL_ADC_ConfigChannel+0x194>
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	2380      	movs	r3, #128	; 0x80
 8001c72:	021b      	lsls	r3, r3, #8
 8001c74:	4013      	ands	r3, r2
 8001c76:	d119      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x190>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	2380      	movs	r3, #128	; 0x80
 8001c7e:	025b      	lsls	r3, r3, #9
 8001c80:	4013      	ands	r3, r2
 8001c82:	d111      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x18c>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	029b      	lsls	r3, r3, #10
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d109      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x188>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	2380      	movs	r3, #128	; 0x80
 8001c96:	02db      	lsls	r3, r3, #11
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d001      	beq.n	8001ca0 <HAL_ADC_ConfigChannel+0x184>
 8001c9c:	2312      	movs	r3, #18
 8001c9e:	e024      	b.n	8001cea <HAL_ADC_ConfigChannel+0x1ce>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	e022      	b.n	8001cea <HAL_ADC_ConfigChannel+0x1ce>
 8001ca4:	2311      	movs	r3, #17
 8001ca6:	e020      	b.n	8001cea <HAL_ADC_ConfigChannel+0x1ce>
 8001ca8:	2310      	movs	r3, #16
 8001caa:	e01e      	b.n	8001cea <HAL_ADC_ConfigChannel+0x1ce>
 8001cac:	230f      	movs	r3, #15
 8001cae:	e01c      	b.n	8001cea <HAL_ADC_ConfigChannel+0x1ce>
 8001cb0:	230e      	movs	r3, #14
 8001cb2:	e01a      	b.n	8001cea <HAL_ADC_ConfigChannel+0x1ce>
 8001cb4:	230d      	movs	r3, #13
 8001cb6:	e018      	b.n	8001cea <HAL_ADC_ConfigChannel+0x1ce>
 8001cb8:	230c      	movs	r3, #12
 8001cba:	e016      	b.n	8001cea <HAL_ADC_ConfigChannel+0x1ce>
 8001cbc:	230b      	movs	r3, #11
 8001cbe:	e014      	b.n	8001cea <HAL_ADC_ConfigChannel+0x1ce>
 8001cc0:	230a      	movs	r3, #10
 8001cc2:	e012      	b.n	8001cea <HAL_ADC_ConfigChannel+0x1ce>
 8001cc4:	2309      	movs	r3, #9
 8001cc6:	e010      	b.n	8001cea <HAL_ADC_ConfigChannel+0x1ce>
 8001cc8:	2308      	movs	r3, #8
 8001cca:	e00e      	b.n	8001cea <HAL_ADC_ConfigChannel+0x1ce>
 8001ccc:	2307      	movs	r3, #7
 8001cce:	e00c      	b.n	8001cea <HAL_ADC_ConfigChannel+0x1ce>
 8001cd0:	2306      	movs	r3, #6
 8001cd2:	e00a      	b.n	8001cea <HAL_ADC_ConfigChannel+0x1ce>
 8001cd4:	2305      	movs	r3, #5
 8001cd6:	e008      	b.n	8001cea <HAL_ADC_ConfigChannel+0x1ce>
 8001cd8:	2304      	movs	r3, #4
 8001cda:	e006      	b.n	8001cea <HAL_ADC_ConfigChannel+0x1ce>
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e004      	b.n	8001cea <HAL_ADC_ConfigChannel+0x1ce>
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	e002      	b.n	8001cea <HAL_ADC_ConfigChannel+0x1ce>
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e000      	b.n	8001cea <HAL_ADC_ConfigChannel+0x1ce>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	6852      	ldr	r2, [r2, #4]
 8001cee:	201f      	movs	r0, #31
 8001cf0:	4002      	ands	r2, r0
 8001cf2:	4093      	lsls	r3, r2
 8001cf4:	000a      	movs	r2, r1
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	089b      	lsrs	r3, r3, #2
 8001d02:	1c5a      	adds	r2, r3, #1
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	69db      	ldr	r3, [r3, #28]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d808      	bhi.n	8001d1e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6818      	ldr	r0, [r3, #0]
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	6859      	ldr	r1, [r3, #4]
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	001a      	movs	r2, r3
 8001d1a:	f7ff fb6f 	bl	80013fc <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6818      	ldr	r0, [r3, #0]
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	6819      	ldr	r1, [r3, #0]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	001a      	movs	r2, r3
 8001d2c:	f7ff fbaa 	bl	8001484 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	db00      	blt.n	8001d3a <HAL_ADC_ConfigChannel+0x21e>
 8001d38:	e0bc      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d3a:	4b50      	ldr	r3, [pc, #320]	; (8001e7c <HAL_ADC_ConfigChannel+0x360>)
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	f7ff fb0b 	bl	8001358 <LL_ADC_GetCommonPathInternalCh>
 8001d42:	0003      	movs	r3, r0
 8001d44:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a4d      	ldr	r2, [pc, #308]	; (8001e80 <HAL_ADC_ConfigChannel+0x364>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d122      	bne.n	8001d96 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	041b      	lsls	r3, r3, #16
 8001d56:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d58:	d11d      	bne.n	8001d96 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	2280      	movs	r2, #128	; 0x80
 8001d5e:	0412      	lsls	r2, r2, #16
 8001d60:	4313      	orrs	r3, r2
 8001d62:	4a46      	ldr	r2, [pc, #280]	; (8001e7c <HAL_ADC_ConfigChannel+0x360>)
 8001d64:	0019      	movs	r1, r3
 8001d66:	0010      	movs	r0, r2
 8001d68:	f7ff fae2 	bl	8001330 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d6c:	4b45      	ldr	r3, [pc, #276]	; (8001e84 <HAL_ADC_ConfigChannel+0x368>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4945      	ldr	r1, [pc, #276]	; (8001e88 <HAL_ADC_ConfigChannel+0x36c>)
 8001d72:	0018      	movs	r0, r3
 8001d74:	f7fe f9d8 	bl	8000128 <__udivsi3>
 8001d78:	0003      	movs	r3, r0
 8001d7a:	1c5a      	adds	r2, r3, #1
 8001d7c:	0013      	movs	r3, r2
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	189b      	adds	r3, r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d86:	e002      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1f9      	bne.n	8001d88 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d94:	e08e      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a3c      	ldr	r2, [pc, #240]	; (8001e8c <HAL_ADC_ConfigChannel+0x370>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d10e      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	2380      	movs	r3, #128	; 0x80
 8001da4:	045b      	lsls	r3, r3, #17
 8001da6:	4013      	ands	r3, r2
 8001da8:	d109      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	2280      	movs	r2, #128	; 0x80
 8001dae:	0452      	lsls	r2, r2, #17
 8001db0:	4313      	orrs	r3, r2
 8001db2:	4a32      	ldr	r2, [pc, #200]	; (8001e7c <HAL_ADC_ConfigChannel+0x360>)
 8001db4:	0019      	movs	r1, r3
 8001db6:	0010      	movs	r0, r2
 8001db8:	f7ff faba 	bl	8001330 <LL_ADC_SetCommonPathInternalCh>
 8001dbc:	e07a      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a33      	ldr	r2, [pc, #204]	; (8001e90 <HAL_ADC_ConfigChannel+0x374>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d000      	beq.n	8001dca <HAL_ADC_ConfigChannel+0x2ae>
 8001dc8:	e074      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	03db      	lsls	r3, r3, #15
 8001dd0:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001dd2:	d000      	beq.n	8001dd6 <HAL_ADC_ConfigChannel+0x2ba>
 8001dd4:	e06e      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	2280      	movs	r2, #128	; 0x80
 8001dda:	03d2      	lsls	r2, r2, #15
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	4a27      	ldr	r2, [pc, #156]	; (8001e7c <HAL_ADC_ConfigChannel+0x360>)
 8001de0:	0019      	movs	r1, r3
 8001de2:	0010      	movs	r0, r2
 8001de4:	f7ff faa4 	bl	8001330 <LL_ADC_SetCommonPathInternalCh>
 8001de8:	e064      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	691a      	ldr	r2, [r3, #16]
 8001dee:	2380      	movs	r3, #128	; 0x80
 8001df0:	061b      	lsls	r3, r3, #24
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d004      	beq.n	8001e00 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001dfa:	4a1f      	ldr	r2, [pc, #124]	; (8001e78 <HAL_ADC_ConfigChannel+0x35c>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d107      	bne.n	8001e10 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	0019      	movs	r1, r3
 8001e0a:	0010      	movs	r0, r2
 8001e0c:	f7ff fb27 	bl	800145e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	da4d      	bge.n	8001eb4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e18:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <HAL_ADC_ConfigChannel+0x360>)
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	f7ff fa9c 	bl	8001358 <LL_ADC_GetCommonPathInternalCh>
 8001e20:	0003      	movs	r3, r0
 8001e22:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a15      	ldr	r2, [pc, #84]	; (8001e80 <HAL_ADC_ConfigChannel+0x364>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d108      	bne.n	8001e40 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	4a18      	ldr	r2, [pc, #96]	; (8001e94 <HAL_ADC_ConfigChannel+0x378>)
 8001e32:	4013      	ands	r3, r2
 8001e34:	4a11      	ldr	r2, [pc, #68]	; (8001e7c <HAL_ADC_ConfigChannel+0x360>)
 8001e36:	0019      	movs	r1, r3
 8001e38:	0010      	movs	r0, r2
 8001e3a:	f7ff fa79 	bl	8001330 <LL_ADC_SetCommonPathInternalCh>
 8001e3e:	e039      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a11      	ldr	r2, [pc, #68]	; (8001e8c <HAL_ADC_ConfigChannel+0x370>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d108      	bne.n	8001e5c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	4a12      	ldr	r2, [pc, #72]	; (8001e98 <HAL_ADC_ConfigChannel+0x37c>)
 8001e4e:	4013      	ands	r3, r2
 8001e50:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <HAL_ADC_ConfigChannel+0x360>)
 8001e52:	0019      	movs	r1, r3
 8001e54:	0010      	movs	r0, r2
 8001e56:	f7ff fa6b 	bl	8001330 <LL_ADC_SetCommonPathInternalCh>
 8001e5a:	e02b      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a0b      	ldr	r2, [pc, #44]	; (8001e90 <HAL_ADC_ConfigChannel+0x374>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d126      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	4a0c      	ldr	r2, [pc, #48]	; (8001e9c <HAL_ADC_ConfigChannel+0x380>)
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	4a03      	ldr	r2, [pc, #12]	; (8001e7c <HAL_ADC_ConfigChannel+0x360>)
 8001e6e:	0019      	movs	r1, r3
 8001e70:	0010      	movs	r0, r2
 8001e72:	f7ff fa5d 	bl	8001330 <LL_ADC_SetCommonPathInternalCh>
 8001e76:	e01d      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x398>
 8001e78:	80000004 	.word	0x80000004
 8001e7c:	40012708 	.word	0x40012708
 8001e80:	b0001000 	.word	0xb0001000
 8001e84:	20000000 	.word	0x20000000
 8001e88:	00030d40 	.word	0x00030d40
 8001e8c:	b8004000 	.word	0xb8004000
 8001e90:	b4002000 	.word	0xb4002000
 8001e94:	ff7fffff 	.word	0xff7fffff
 8001e98:	feffffff 	.word	0xfeffffff
 8001e9c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001eac:	2317      	movs	r3, #23
 8001eae:	18fb      	adds	r3, r7, r3
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2254      	movs	r2, #84	; 0x54
 8001eb8:	2100      	movs	r1, #0
 8001eba:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001ebc:	2317      	movs	r3, #23
 8001ebe:	18fb      	adds	r3, r7, r3
 8001ec0:	781b      	ldrb	r3, [r3, #0]
}
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	b006      	add	sp, #24
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	46c0      	nop			; (mov r8, r8)

08001ecc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	0018      	movs	r0, r3
 8001ede:	f7ff fb27 	bl	8001530 <LL_ADC_IsEnabled>
 8001ee2:	1e03      	subs	r3, r0, #0
 8001ee4:	d000      	beq.n	8001ee8 <ADC_Enable+0x1c>
 8001ee6:	e069      	b.n	8001fbc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	4a36      	ldr	r2, [pc, #216]	; (8001fc8 <ADC_Enable+0xfc>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d00d      	beq.n	8001f10 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef8:	2210      	movs	r2, #16
 8001efa:	431a      	orrs	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f04:	2201      	movs	r2, #1
 8001f06:	431a      	orrs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e056      	b.n	8001fbe <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	0018      	movs	r0, r3
 8001f16:	f7ff faf9 	bl	800150c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001f1a:	4b2c      	ldr	r3, [pc, #176]	; (8001fcc <ADC_Enable+0x100>)
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	f7ff fa1b 	bl	8001358 <LL_ADC_GetCommonPathInternalCh>
 8001f22:	0002      	movs	r2, r0
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	041b      	lsls	r3, r3, #16
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d00f      	beq.n	8001f4c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f2c:	4b28      	ldr	r3, [pc, #160]	; (8001fd0 <ADC_Enable+0x104>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4928      	ldr	r1, [pc, #160]	; (8001fd4 <ADC_Enable+0x108>)
 8001f32:	0018      	movs	r0, r3
 8001f34:	f7fe f8f8 	bl	8000128 <__udivsi3>
 8001f38:	0003      	movs	r3, r0
 8001f3a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001f3c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f3e:	e002      	b.n	8001f46 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1f9      	bne.n	8001f40 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	7e5b      	ldrb	r3, [r3, #25]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d033      	beq.n	8001fbc <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001f54:	f7ff f9a8 	bl	80012a8 <HAL_GetTick>
 8001f58:	0003      	movs	r3, r0
 8001f5a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f5c:	e027      	b.n	8001fae <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	0018      	movs	r0, r3
 8001f64:	f7ff fae4 	bl	8001530 <LL_ADC_IsEnabled>
 8001f68:	1e03      	subs	r3, r0, #0
 8001f6a:	d104      	bne.n	8001f76 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	0018      	movs	r0, r3
 8001f72:	f7ff facb 	bl	800150c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f76:	f7ff f997 	bl	80012a8 <HAL_GetTick>
 8001f7a:	0002      	movs	r2, r0
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d914      	bls.n	8001fae <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d00d      	beq.n	8001fae <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f96:	2210      	movs	r2, #16
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e007      	b.n	8001fbe <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d1d0      	bne.n	8001f5e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	b004      	add	sp, #16
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	80000017 	.word	0x80000017
 8001fcc:	40012708 	.word	0x40012708
 8001fd0:	20000000 	.word	0x20000000
 8001fd4:	00030d40 	.word	0x00030d40

08001fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd8:	b590      	push	{r4, r7, lr}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	0002      	movs	r2, r0
 8001fe0:	6039      	str	r1, [r7, #0]
 8001fe2:	1dfb      	adds	r3, r7, #7
 8001fe4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001fe6:	1dfb      	adds	r3, r7, #7
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b7f      	cmp	r3, #127	; 0x7f
 8001fec:	d828      	bhi.n	8002040 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fee:	4a2f      	ldr	r2, [pc, #188]	; (80020ac <__NVIC_SetPriority+0xd4>)
 8001ff0:	1dfb      	adds	r3, r7, #7
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	b25b      	sxtb	r3, r3
 8001ff6:	089b      	lsrs	r3, r3, #2
 8001ff8:	33c0      	adds	r3, #192	; 0xc0
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	589b      	ldr	r3, [r3, r2]
 8001ffe:	1dfa      	adds	r2, r7, #7
 8002000:	7812      	ldrb	r2, [r2, #0]
 8002002:	0011      	movs	r1, r2
 8002004:	2203      	movs	r2, #3
 8002006:	400a      	ands	r2, r1
 8002008:	00d2      	lsls	r2, r2, #3
 800200a:	21ff      	movs	r1, #255	; 0xff
 800200c:	4091      	lsls	r1, r2
 800200e:	000a      	movs	r2, r1
 8002010:	43d2      	mvns	r2, r2
 8002012:	401a      	ands	r2, r3
 8002014:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	019b      	lsls	r3, r3, #6
 800201a:	22ff      	movs	r2, #255	; 0xff
 800201c:	401a      	ands	r2, r3
 800201e:	1dfb      	adds	r3, r7, #7
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	0018      	movs	r0, r3
 8002024:	2303      	movs	r3, #3
 8002026:	4003      	ands	r3, r0
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800202c:	481f      	ldr	r0, [pc, #124]	; (80020ac <__NVIC_SetPriority+0xd4>)
 800202e:	1dfb      	adds	r3, r7, #7
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	b25b      	sxtb	r3, r3
 8002034:	089b      	lsrs	r3, r3, #2
 8002036:	430a      	orrs	r2, r1
 8002038:	33c0      	adds	r3, #192	; 0xc0
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800203e:	e031      	b.n	80020a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002040:	4a1b      	ldr	r2, [pc, #108]	; (80020b0 <__NVIC_SetPriority+0xd8>)
 8002042:	1dfb      	adds	r3, r7, #7
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	0019      	movs	r1, r3
 8002048:	230f      	movs	r3, #15
 800204a:	400b      	ands	r3, r1
 800204c:	3b08      	subs	r3, #8
 800204e:	089b      	lsrs	r3, r3, #2
 8002050:	3306      	adds	r3, #6
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	18d3      	adds	r3, r2, r3
 8002056:	3304      	adds	r3, #4
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	1dfa      	adds	r2, r7, #7
 800205c:	7812      	ldrb	r2, [r2, #0]
 800205e:	0011      	movs	r1, r2
 8002060:	2203      	movs	r2, #3
 8002062:	400a      	ands	r2, r1
 8002064:	00d2      	lsls	r2, r2, #3
 8002066:	21ff      	movs	r1, #255	; 0xff
 8002068:	4091      	lsls	r1, r2
 800206a:	000a      	movs	r2, r1
 800206c:	43d2      	mvns	r2, r2
 800206e:	401a      	ands	r2, r3
 8002070:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	019b      	lsls	r3, r3, #6
 8002076:	22ff      	movs	r2, #255	; 0xff
 8002078:	401a      	ands	r2, r3
 800207a:	1dfb      	adds	r3, r7, #7
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	0018      	movs	r0, r3
 8002080:	2303      	movs	r3, #3
 8002082:	4003      	ands	r3, r0
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002088:	4809      	ldr	r0, [pc, #36]	; (80020b0 <__NVIC_SetPriority+0xd8>)
 800208a:	1dfb      	adds	r3, r7, #7
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	001c      	movs	r4, r3
 8002090:	230f      	movs	r3, #15
 8002092:	4023      	ands	r3, r4
 8002094:	3b08      	subs	r3, #8
 8002096:	089b      	lsrs	r3, r3, #2
 8002098:	430a      	orrs	r2, r1
 800209a:	3306      	adds	r3, #6
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	18c3      	adds	r3, r0, r3
 80020a0:	3304      	adds	r3, #4
 80020a2:	601a      	str	r2, [r3, #0]
}
 80020a4:	46c0      	nop			; (mov r8, r8)
 80020a6:	46bd      	mov	sp, r7
 80020a8:	b003      	add	sp, #12
 80020aa:	bd90      	pop	{r4, r7, pc}
 80020ac:	e000e100 	.word	0xe000e100
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	1e5a      	subs	r2, r3, #1
 80020c0:	2380      	movs	r3, #128	; 0x80
 80020c2:	045b      	lsls	r3, r3, #17
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d301      	bcc.n	80020cc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020c8:	2301      	movs	r3, #1
 80020ca:	e010      	b.n	80020ee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020cc:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <SysTick_Config+0x44>)
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	3a01      	subs	r2, #1
 80020d2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020d4:	2301      	movs	r3, #1
 80020d6:	425b      	negs	r3, r3
 80020d8:	2103      	movs	r1, #3
 80020da:	0018      	movs	r0, r3
 80020dc:	f7ff ff7c 	bl	8001fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020e0:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <SysTick_Config+0x44>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020e6:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <SysTick_Config+0x44>)
 80020e8:	2207      	movs	r2, #7
 80020ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	0018      	movs	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	b002      	add	sp, #8
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	e000e010 	.word	0xe000e010

080020fc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]
 8002106:	210f      	movs	r1, #15
 8002108:	187b      	adds	r3, r7, r1
 800210a:	1c02      	adds	r2, r0, #0
 800210c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	187b      	adds	r3, r7, r1
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	b25b      	sxtb	r3, r3
 8002116:	0011      	movs	r1, r2
 8002118:	0018      	movs	r0, r3
 800211a:	f7ff ff5d 	bl	8001fd8 <__NVIC_SetPriority>
}
 800211e:	46c0      	nop			; (mov r8, r8)
 8002120:	46bd      	mov	sp, r7
 8002122:	b004      	add	sp, #16
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	0018      	movs	r0, r3
 8002132:	f7ff ffbf 	bl	80020b4 <SysTick_Config>
 8002136:	0003      	movs	r3, r0
}
 8002138:	0018      	movs	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	b002      	add	sp, #8
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800214e:	e147      	b.n	80023e0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2101      	movs	r1, #1
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	4091      	lsls	r1, r2
 800215a:	000a      	movs	r2, r1
 800215c:	4013      	ands	r3, r2
 800215e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d100      	bne.n	8002168 <HAL_GPIO_Init+0x28>
 8002166:	e138      	b.n	80023da <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2203      	movs	r2, #3
 800216e:	4013      	ands	r3, r2
 8002170:	2b01      	cmp	r3, #1
 8002172:	d005      	beq.n	8002180 <HAL_GPIO_Init+0x40>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2203      	movs	r2, #3
 800217a:	4013      	ands	r3, r2
 800217c:	2b02      	cmp	r3, #2
 800217e:	d130      	bne.n	80021e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	2203      	movs	r2, #3
 800218c:	409a      	lsls	r2, r3
 800218e:	0013      	movs	r3, r2
 8002190:	43da      	mvns	r2, r3
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4013      	ands	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	68da      	ldr	r2, [r3, #12]
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	409a      	lsls	r2, r3
 80021a2:	0013      	movs	r3, r2
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021b6:	2201      	movs	r2, #1
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	409a      	lsls	r2, r3
 80021bc:	0013      	movs	r3, r2
 80021be:	43da      	mvns	r2, r3
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	4013      	ands	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	091b      	lsrs	r3, r3, #4
 80021cc:	2201      	movs	r2, #1
 80021ce:	401a      	ands	r2, r3
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	409a      	lsls	r2, r3
 80021d4:	0013      	movs	r3, r2
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	4313      	orrs	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2203      	movs	r2, #3
 80021e8:	4013      	ands	r3, r2
 80021ea:	2b03      	cmp	r3, #3
 80021ec:	d017      	beq.n	800221e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	2203      	movs	r2, #3
 80021fa:	409a      	lsls	r2, r3
 80021fc:	0013      	movs	r3, r2
 80021fe:	43da      	mvns	r2, r3
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	4013      	ands	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	409a      	lsls	r2, r3
 8002210:	0013      	movs	r3, r2
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2203      	movs	r2, #3
 8002224:	4013      	ands	r3, r2
 8002226:	2b02      	cmp	r3, #2
 8002228:	d123      	bne.n	8002272 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	08da      	lsrs	r2, r3, #3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3208      	adds	r2, #8
 8002232:	0092      	lsls	r2, r2, #2
 8002234:	58d3      	ldr	r3, [r2, r3]
 8002236:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	2207      	movs	r2, #7
 800223c:	4013      	ands	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	220f      	movs	r2, #15
 8002242:	409a      	lsls	r2, r3
 8002244:	0013      	movs	r3, r2
 8002246:	43da      	mvns	r2, r3
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4013      	ands	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	691a      	ldr	r2, [r3, #16]
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	2107      	movs	r1, #7
 8002256:	400b      	ands	r3, r1
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	409a      	lsls	r2, r3
 800225c:	0013      	movs	r3, r2
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	4313      	orrs	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	08da      	lsrs	r2, r3, #3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3208      	adds	r2, #8
 800226c:	0092      	lsls	r2, r2, #2
 800226e:	6939      	ldr	r1, [r7, #16]
 8002270:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	2203      	movs	r2, #3
 800227e:	409a      	lsls	r2, r3
 8002280:	0013      	movs	r3, r2
 8002282:	43da      	mvns	r2, r3
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	4013      	ands	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2203      	movs	r2, #3
 8002290:	401a      	ands	r2, r3
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	409a      	lsls	r2, r3
 8002298:	0013      	movs	r3, r2
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	4313      	orrs	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	23c0      	movs	r3, #192	; 0xc0
 80022ac:	029b      	lsls	r3, r3, #10
 80022ae:	4013      	ands	r3, r2
 80022b0:	d100      	bne.n	80022b4 <HAL_GPIO_Init+0x174>
 80022b2:	e092      	b.n	80023da <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80022b4:	4a50      	ldr	r2, [pc, #320]	; (80023f8 <HAL_GPIO_Init+0x2b8>)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	089b      	lsrs	r3, r3, #2
 80022ba:	3318      	adds	r3, #24
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	589b      	ldr	r3, [r3, r2]
 80022c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	2203      	movs	r2, #3
 80022c6:	4013      	ands	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	220f      	movs	r2, #15
 80022cc:	409a      	lsls	r2, r3
 80022ce:	0013      	movs	r3, r2
 80022d0:	43da      	mvns	r2, r3
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4013      	ands	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	23a0      	movs	r3, #160	; 0xa0
 80022dc:	05db      	lsls	r3, r3, #23
 80022de:	429a      	cmp	r2, r3
 80022e0:	d013      	beq.n	800230a <HAL_GPIO_Init+0x1ca>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a45      	ldr	r2, [pc, #276]	; (80023fc <HAL_GPIO_Init+0x2bc>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d00d      	beq.n	8002306 <HAL_GPIO_Init+0x1c6>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a44      	ldr	r2, [pc, #272]	; (8002400 <HAL_GPIO_Init+0x2c0>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d007      	beq.n	8002302 <HAL_GPIO_Init+0x1c2>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a43      	ldr	r2, [pc, #268]	; (8002404 <HAL_GPIO_Init+0x2c4>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d101      	bne.n	80022fe <HAL_GPIO_Init+0x1be>
 80022fa:	2303      	movs	r3, #3
 80022fc:	e006      	b.n	800230c <HAL_GPIO_Init+0x1cc>
 80022fe:	2305      	movs	r3, #5
 8002300:	e004      	b.n	800230c <HAL_GPIO_Init+0x1cc>
 8002302:	2302      	movs	r3, #2
 8002304:	e002      	b.n	800230c <HAL_GPIO_Init+0x1cc>
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <HAL_GPIO_Init+0x1cc>
 800230a:	2300      	movs	r3, #0
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	2103      	movs	r1, #3
 8002310:	400a      	ands	r2, r1
 8002312:	00d2      	lsls	r2, r2, #3
 8002314:	4093      	lsls	r3, r2
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4313      	orrs	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800231c:	4936      	ldr	r1, [pc, #216]	; (80023f8 <HAL_GPIO_Init+0x2b8>)
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	089b      	lsrs	r3, r3, #2
 8002322:	3318      	adds	r3, #24
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800232a:	4b33      	ldr	r3, [pc, #204]	; (80023f8 <HAL_GPIO_Init+0x2b8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	43da      	mvns	r2, r3
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	4013      	ands	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	2380      	movs	r3, #128	; 0x80
 8002340:	035b      	lsls	r3, r3, #13
 8002342:	4013      	ands	r3, r2
 8002344:	d003      	beq.n	800234e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4313      	orrs	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800234e:	4b2a      	ldr	r3, [pc, #168]	; (80023f8 <HAL_GPIO_Init+0x2b8>)
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002354:	4b28      	ldr	r3, [pc, #160]	; (80023f8 <HAL_GPIO_Init+0x2b8>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	43da      	mvns	r2, r3
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	4013      	ands	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	2380      	movs	r3, #128	; 0x80
 800236a:	039b      	lsls	r3, r3, #14
 800236c:	4013      	ands	r3, r2
 800236e:	d003      	beq.n	8002378 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	4313      	orrs	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002378:	4b1f      	ldr	r3, [pc, #124]	; (80023f8 <HAL_GPIO_Init+0x2b8>)
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800237e:	4a1e      	ldr	r2, [pc, #120]	; (80023f8 <HAL_GPIO_Init+0x2b8>)
 8002380:	2384      	movs	r3, #132	; 0x84
 8002382:	58d3      	ldr	r3, [r2, r3]
 8002384:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	43da      	mvns	r2, r3
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4013      	ands	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	2380      	movs	r3, #128	; 0x80
 8002396:	029b      	lsls	r3, r3, #10
 8002398:	4013      	ands	r3, r2
 800239a:	d003      	beq.n	80023a4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023a4:	4914      	ldr	r1, [pc, #80]	; (80023f8 <HAL_GPIO_Init+0x2b8>)
 80023a6:	2284      	movs	r2, #132	; 0x84
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80023ac:	4a12      	ldr	r2, [pc, #72]	; (80023f8 <HAL_GPIO_Init+0x2b8>)
 80023ae:	2380      	movs	r3, #128	; 0x80
 80023b0:	58d3      	ldr	r3, [r2, r3]
 80023b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	43da      	mvns	r2, r3
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4013      	ands	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	2380      	movs	r3, #128	; 0x80
 80023c4:	025b      	lsls	r3, r3, #9
 80023c6:	4013      	ands	r3, r2
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023d2:	4909      	ldr	r1, [pc, #36]	; (80023f8 <HAL_GPIO_Init+0x2b8>)
 80023d4:	2280      	movs	r2, #128	; 0x80
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	3301      	adds	r3, #1
 80023de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	40da      	lsrs	r2, r3
 80023e8:	1e13      	subs	r3, r2, #0
 80023ea:	d000      	beq.n	80023ee <HAL_GPIO_Init+0x2ae>
 80023ec:	e6b0      	b.n	8002150 <HAL_GPIO_Init+0x10>
  }
}
 80023ee:	46c0      	nop			; (mov r8, r8)
 80023f0:	46c0      	nop			; (mov r8, r8)
 80023f2:	46bd      	mov	sp, r7
 80023f4:	b006      	add	sp, #24
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40021800 	.word	0x40021800
 80023fc:	50000400 	.word	0x50000400
 8002400:	50000800 	.word	0x50000800
 8002404:	50000c00 	.word	0x50000c00

08002408 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	000a      	movs	r2, r1
 8002412:	1cbb      	adds	r3, r7, #2
 8002414:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	1cba      	adds	r2, r7, #2
 800241c:	8812      	ldrh	r2, [r2, #0]
 800241e:	4013      	ands	r3, r2
 8002420:	d004      	beq.n	800242c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002422:	230f      	movs	r3, #15
 8002424:	18fb      	adds	r3, r7, r3
 8002426:	2201      	movs	r2, #1
 8002428:	701a      	strb	r2, [r3, #0]
 800242a:	e003      	b.n	8002434 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800242c:	230f      	movs	r3, #15
 800242e:	18fb      	adds	r3, r7, r3
 8002430:	2200      	movs	r2, #0
 8002432:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002434:	230f      	movs	r3, #15
 8002436:	18fb      	adds	r3, r7, r3
 8002438:	781b      	ldrb	r3, [r3, #0]
}
 800243a:	0018      	movs	r0, r3
 800243c:	46bd      	mov	sp, r7
 800243e:	b004      	add	sp, #16
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
 800244a:	0008      	movs	r0, r1
 800244c:	0011      	movs	r1, r2
 800244e:	1cbb      	adds	r3, r7, #2
 8002450:	1c02      	adds	r2, r0, #0
 8002452:	801a      	strh	r2, [r3, #0]
 8002454:	1c7b      	adds	r3, r7, #1
 8002456:	1c0a      	adds	r2, r1, #0
 8002458:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800245a:	1c7b      	adds	r3, r7, #1
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d004      	beq.n	800246c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002462:	1cbb      	adds	r3, r7, #2
 8002464:	881a      	ldrh	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800246a:	e003      	b.n	8002474 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800246c:	1cbb      	adds	r3, r7, #2
 800246e:	881a      	ldrh	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002474:	46c0      	nop			; (mov r8, r8)
 8002476:	46bd      	mov	sp, r7
 8002478:	b002      	add	sp, #8
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e08f      	b.n	80025ae <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2241      	movs	r2, #65	; 0x41
 8002492:	5c9b      	ldrb	r3, [r3, r2]
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d107      	bne.n	80024aa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2240      	movs	r2, #64	; 0x40
 800249e:	2100      	movs	r1, #0
 80024a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	0018      	movs	r0, r3
 80024a6:	f7fe fcc3 	bl	8000e30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2241      	movs	r2, #65	; 0x41
 80024ae:	2124      	movs	r1, #36	; 0x24
 80024b0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2101      	movs	r1, #1
 80024be:	438a      	bics	r2, r1
 80024c0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	493b      	ldr	r1, [pc, #236]	; (80025b8 <HAL_I2C_Init+0x13c>)
 80024cc:	400a      	ands	r2, r1
 80024ce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689a      	ldr	r2, [r3, #8]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4938      	ldr	r1, [pc, #224]	; (80025bc <HAL_I2C_Init+0x140>)
 80024dc:	400a      	ands	r2, r1
 80024de:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d108      	bne.n	80024fa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2180      	movs	r1, #128	; 0x80
 80024f2:	0209      	lsls	r1, r1, #8
 80024f4:	430a      	orrs	r2, r1
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	e007      	b.n	800250a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2184      	movs	r1, #132	; 0x84
 8002504:	0209      	lsls	r1, r1, #8
 8002506:	430a      	orrs	r2, r1
 8002508:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d109      	bne.n	8002526 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2180      	movs	r1, #128	; 0x80
 800251e:	0109      	lsls	r1, r1, #4
 8002520:	430a      	orrs	r2, r1
 8002522:	605a      	str	r2, [r3, #4]
 8002524:	e007      	b.n	8002536 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4923      	ldr	r1, [pc, #140]	; (80025c0 <HAL_I2C_Init+0x144>)
 8002532:	400a      	ands	r2, r1
 8002534:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4920      	ldr	r1, [pc, #128]	; (80025c4 <HAL_I2C_Init+0x148>)
 8002542:	430a      	orrs	r2, r1
 8002544:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68da      	ldr	r2, [r3, #12]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	491a      	ldr	r1, [pc, #104]	; (80025bc <HAL_I2C_Init+0x140>)
 8002552:	400a      	ands	r2, r1
 8002554:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691a      	ldr	r2, [r3, #16]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	431a      	orrs	r2, r3
 8002560:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69d9      	ldr	r1, [r3, #28]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a1a      	ldr	r2, [r3, #32]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	430a      	orrs	r2, r1
 800257e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2101      	movs	r1, #1
 800258c:	430a      	orrs	r2, r1
 800258e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2241      	movs	r2, #65	; 0x41
 800259a:	2120      	movs	r1, #32
 800259c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2242      	movs	r2, #66	; 0x42
 80025a8:	2100      	movs	r1, #0
 80025aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	0018      	movs	r0, r3
 80025b0:	46bd      	mov	sp, r7
 80025b2:	b002      	add	sp, #8
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	46c0      	nop			; (mov r8, r8)
 80025b8:	f0ffffff 	.word	0xf0ffffff
 80025bc:	ffff7fff 	.word	0xffff7fff
 80025c0:	fffff7ff 	.word	0xfffff7ff
 80025c4:	02008000 	.word	0x02008000

080025c8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b08a      	sub	sp, #40	; 0x28
 80025cc:	af02      	add	r7, sp, #8
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	607a      	str	r2, [r7, #4]
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	230a      	movs	r3, #10
 80025d6:	18fb      	adds	r3, r7, r3
 80025d8:	1c0a      	adds	r2, r1, #0
 80025da:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80025dc:	2300      	movs	r3, #0
 80025de:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2241      	movs	r2, #65	; 0x41
 80025e4:	5c9b      	ldrb	r3, [r3, r2]
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b20      	cmp	r3, #32
 80025ea:	d000      	beq.n	80025ee <HAL_I2C_IsDeviceReady+0x26>
 80025ec:	e0df      	b.n	80027ae <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	699a      	ldr	r2, [r3, #24]
 80025f4:	2380      	movs	r3, #128	; 0x80
 80025f6:	021b      	lsls	r3, r3, #8
 80025f8:	401a      	ands	r2, r3
 80025fa:	2380      	movs	r3, #128	; 0x80
 80025fc:	021b      	lsls	r3, r3, #8
 80025fe:	429a      	cmp	r2, r3
 8002600:	d101      	bne.n	8002606 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8002602:	2302      	movs	r3, #2
 8002604:	e0d4      	b.n	80027b0 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2240      	movs	r2, #64	; 0x40
 800260a:	5c9b      	ldrb	r3, [r3, r2]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d101      	bne.n	8002614 <HAL_I2C_IsDeviceReady+0x4c>
 8002610:	2302      	movs	r3, #2
 8002612:	e0cd      	b.n	80027b0 <HAL_I2C_IsDeviceReady+0x1e8>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2240      	movs	r2, #64	; 0x40
 8002618:	2101      	movs	r1, #1
 800261a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2241      	movs	r2, #65	; 0x41
 8002620:	2124      	movs	r1, #36	; 0x24
 8002622:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d107      	bne.n	8002642 <HAL_I2C_IsDeviceReady+0x7a>
 8002632:	230a      	movs	r3, #10
 8002634:	18fb      	adds	r3, r7, r3
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	059b      	lsls	r3, r3, #22
 800263a:	0d9b      	lsrs	r3, r3, #22
 800263c:	4a5e      	ldr	r2, [pc, #376]	; (80027b8 <HAL_I2C_IsDeviceReady+0x1f0>)
 800263e:	431a      	orrs	r2, r3
 8002640:	e006      	b.n	8002650 <HAL_I2C_IsDeviceReady+0x88>
 8002642:	230a      	movs	r3, #10
 8002644:	18fb      	adds	r3, r7, r3
 8002646:	881b      	ldrh	r3, [r3, #0]
 8002648:	059b      	lsls	r3, r3, #22
 800264a:	0d9b      	lsrs	r3, r3, #22
 800264c:	4a5b      	ldr	r2, [pc, #364]	; (80027bc <HAL_I2C_IsDeviceReady+0x1f4>)
 800264e:	431a      	orrs	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002656:	f7fe fe27 	bl	80012a8 <HAL_GetTick>
 800265a:	0003      	movs	r3, r0
 800265c:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	2220      	movs	r2, #32
 8002666:	4013      	ands	r3, r2
 8002668:	3b20      	subs	r3, #32
 800266a:	425a      	negs	r2, r3
 800266c:	4153      	adcs	r3, r2
 800266e:	b2da      	uxtb	r2, r3
 8002670:	231f      	movs	r3, #31
 8002672:	18fb      	adds	r3, r7, r3
 8002674:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	2210      	movs	r2, #16
 800267e:	4013      	ands	r3, r2
 8002680:	3b10      	subs	r3, #16
 8002682:	425a      	negs	r2, r3
 8002684:	4153      	adcs	r3, r2
 8002686:	b2da      	uxtb	r2, r3
 8002688:	231e      	movs	r3, #30
 800268a:	18fb      	adds	r3, r7, r3
 800268c:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800268e:	e035      	b.n	80026fc <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	3301      	adds	r3, #1
 8002694:	d01a      	beq.n	80026cc <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002696:	f7fe fe07 	bl	80012a8 <HAL_GetTick>
 800269a:	0002      	movs	r2, r0
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d302      	bcc.n	80026ac <HAL_I2C_IsDeviceReady+0xe4>
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10f      	bne.n	80026cc <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2241      	movs	r2, #65	; 0x41
 80026b0:	2120      	movs	r1, #32
 80026b2:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b8:	2220      	movs	r2, #32
 80026ba:	431a      	orrs	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2240      	movs	r2, #64	; 0x40
 80026c4:	2100      	movs	r1, #0
 80026c6:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e071      	b.n	80027b0 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	2220      	movs	r2, #32
 80026d4:	4013      	ands	r3, r2
 80026d6:	3b20      	subs	r3, #32
 80026d8:	425a      	negs	r2, r3
 80026da:	4153      	adcs	r3, r2
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	231f      	movs	r3, #31
 80026e0:	18fb      	adds	r3, r7, r3
 80026e2:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	2210      	movs	r2, #16
 80026ec:	4013      	ands	r3, r2
 80026ee:	3b10      	subs	r3, #16
 80026f0:	425a      	negs	r2, r3
 80026f2:	4153      	adcs	r3, r2
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	231e      	movs	r3, #30
 80026f8:	18fb      	adds	r3, r7, r3
 80026fa:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80026fc:	231f      	movs	r3, #31
 80026fe:	18fb      	adds	r3, r7, r3
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d104      	bne.n	8002710 <HAL_I2C_IsDeviceReady+0x148>
 8002706:	231e      	movs	r3, #30
 8002708:	18fb      	adds	r3, r7, r3
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0bf      	beq.n	8002690 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	2210      	movs	r2, #16
 8002718:	4013      	ands	r3, r2
 800271a:	2b10      	cmp	r3, #16
 800271c:	d01a      	beq.n	8002754 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	0013      	movs	r3, r2
 8002728:	2200      	movs	r2, #0
 800272a:	2120      	movs	r1, #32
 800272c:	f000 f86a 	bl	8002804 <I2C_WaitOnFlagUntilTimeout>
 8002730:	1e03      	subs	r3, r0, #0
 8002732:	d001      	beq.n	8002738 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e03b      	b.n	80027b0 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2220      	movs	r2, #32
 800273e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2241      	movs	r2, #65	; 0x41
 8002744:	2120      	movs	r1, #32
 8002746:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2240      	movs	r2, #64	; 0x40
 800274c:	2100      	movs	r1, #0
 800274e:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8002750:	2300      	movs	r3, #0
 8002752:	e02d      	b.n	80027b0 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	0013      	movs	r3, r2
 800275e:	2200      	movs	r2, #0
 8002760:	2120      	movs	r1, #32
 8002762:	f000 f84f 	bl	8002804 <I2C_WaitOnFlagUntilTimeout>
 8002766:	1e03      	subs	r3, r0, #0
 8002768:	d001      	beq.n	800276e <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e020      	b.n	80027b0 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2210      	movs	r2, #16
 8002774:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2220      	movs	r2, #32
 800277c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	3301      	adds	r3, #1
 8002782:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	429a      	cmp	r2, r3
 800278a:	d900      	bls.n	800278e <HAL_I2C_IsDeviceReady+0x1c6>
 800278c:	e74d      	b.n	800262a <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2241      	movs	r2, #65	; 0x41
 8002792:	2120      	movs	r1, #32
 8002794:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279a:	2220      	movs	r2, #32
 800279c:	431a      	orrs	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2240      	movs	r2, #64	; 0x40
 80027a6:	2100      	movs	r1, #0
 80027a8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e000      	b.n	80027b0 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 80027ae:	2302      	movs	r3, #2
  }
}
 80027b0:	0018      	movs	r0, r3
 80027b2:	46bd      	mov	sp, r7
 80027b4:	b008      	add	sp, #32
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	02002000 	.word	0x02002000
 80027bc:	02002800 	.word	0x02002800

080027c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	2202      	movs	r2, #2
 80027d0:	4013      	ands	r3, r2
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d103      	bne.n	80027de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2200      	movs	r2, #0
 80027dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	2201      	movs	r2, #1
 80027e6:	4013      	ands	r3, r2
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d007      	beq.n	80027fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	699a      	ldr	r2, [r3, #24]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2101      	movs	r1, #1
 80027f8:	430a      	orrs	r2, r1
 80027fa:	619a      	str	r2, [r3, #24]
  }
}
 80027fc:	46c0      	nop			; (mov r8, r8)
 80027fe:	46bd      	mov	sp, r7
 8002800:	b002      	add	sp, #8
 8002802:	bd80      	pop	{r7, pc}

08002804 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	603b      	str	r3, [r7, #0]
 8002810:	1dfb      	adds	r3, r7, #7
 8002812:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002814:	e03a      	b.n	800288c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	6839      	ldr	r1, [r7, #0]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	0018      	movs	r0, r3
 800281e:	f000 f849 	bl	80028b4 <I2C_IsErrorOccurred>
 8002822:	1e03      	subs	r3, r0, #0
 8002824:	d001      	beq.n	800282a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e040      	b.n	80028ac <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	3301      	adds	r3, #1
 800282e:	d02d      	beq.n	800288c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002830:	f7fe fd3a 	bl	80012a8 <HAL_GetTick>
 8002834:	0002      	movs	r2, r0
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	429a      	cmp	r2, r3
 800283e:	d302      	bcc.n	8002846 <I2C_WaitOnFlagUntilTimeout+0x42>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d122      	bne.n	800288c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	68ba      	ldr	r2, [r7, #8]
 800284e:	4013      	ands	r3, r2
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	425a      	negs	r2, r3
 8002856:	4153      	adcs	r3, r2
 8002858:	b2db      	uxtb	r3, r3
 800285a:	001a      	movs	r2, r3
 800285c:	1dfb      	adds	r3, r7, #7
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	429a      	cmp	r2, r3
 8002862:	d113      	bne.n	800288c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002868:	2220      	movs	r2, #32
 800286a:	431a      	orrs	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2241      	movs	r2, #65	; 0x41
 8002874:	2120      	movs	r1, #32
 8002876:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2242      	movs	r2, #66	; 0x42
 800287c:	2100      	movs	r1, #0
 800287e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2240      	movs	r2, #64	; 0x40
 8002884:	2100      	movs	r1, #0
 8002886:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e00f      	b.n	80028ac <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	4013      	ands	r3, r2
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	425a      	negs	r2, r3
 800289c:	4153      	adcs	r3, r2
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	001a      	movs	r2, r3
 80028a2:	1dfb      	adds	r3, r7, #7
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d0b5      	beq.n	8002816 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	0018      	movs	r0, r3
 80028ae:	46bd      	mov	sp, r7
 80028b0:	b004      	add	sp, #16
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028b4:	b590      	push	{r4, r7, lr}
 80028b6:	b08b      	sub	sp, #44	; 0x2c
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028c0:	2327      	movs	r3, #39	; 0x27
 80028c2:	18fb      	adds	r3, r7, r3
 80028c4:	2200      	movs	r2, #0
 80028c6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80028d0:	2300      	movs	r3, #0
 80028d2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	2210      	movs	r2, #16
 80028dc:	4013      	ands	r3, r2
 80028de:	d100      	bne.n	80028e2 <I2C_IsErrorOccurred+0x2e>
 80028e0:	e082      	b.n	80029e8 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2210      	movs	r2, #16
 80028e8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028ea:	e060      	b.n	80029ae <I2C_IsErrorOccurred+0xfa>
 80028ec:	2427      	movs	r4, #39	; 0x27
 80028ee:	193b      	adds	r3, r7, r4
 80028f0:	193a      	adds	r2, r7, r4
 80028f2:	7812      	ldrb	r2, [r2, #0]
 80028f4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	3301      	adds	r3, #1
 80028fa:	d058      	beq.n	80029ae <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028fc:	f7fe fcd4 	bl	80012a8 <HAL_GetTick>
 8002900:	0002      	movs	r2, r0
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	429a      	cmp	r2, r3
 800290a:	d306      	bcc.n	800291a <I2C_IsErrorOccurred+0x66>
 800290c:	193b      	adds	r3, r7, r4
 800290e:	193a      	adds	r2, r7, r4
 8002910:	7812      	ldrb	r2, [r2, #0]
 8002912:	701a      	strb	r2, [r3, #0]
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d149      	bne.n	80029ae <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	2380      	movs	r3, #128	; 0x80
 8002922:	01db      	lsls	r3, r3, #7
 8002924:	4013      	ands	r3, r2
 8002926:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002928:	2013      	movs	r0, #19
 800292a:	183b      	adds	r3, r7, r0
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	2142      	movs	r1, #66	; 0x42
 8002930:	5c52      	ldrb	r2, [r2, r1]
 8002932:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	699a      	ldr	r2, [r3, #24]
 800293a:	2380      	movs	r3, #128	; 0x80
 800293c:	021b      	lsls	r3, r3, #8
 800293e:	401a      	ands	r2, r3
 8002940:	2380      	movs	r3, #128	; 0x80
 8002942:	021b      	lsls	r3, r3, #8
 8002944:	429a      	cmp	r2, r3
 8002946:	d126      	bne.n	8002996 <I2C_IsErrorOccurred+0xe2>
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	2380      	movs	r3, #128	; 0x80
 800294c:	01db      	lsls	r3, r3, #7
 800294e:	429a      	cmp	r2, r3
 8002950:	d021      	beq.n	8002996 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8002952:	183b      	adds	r3, r7, r0
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2b20      	cmp	r3, #32
 8002958:	d01d      	beq.n	8002996 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2180      	movs	r1, #128	; 0x80
 8002966:	01c9      	lsls	r1, r1, #7
 8002968:	430a      	orrs	r2, r1
 800296a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800296c:	f7fe fc9c 	bl	80012a8 <HAL_GetTick>
 8002970:	0003      	movs	r3, r0
 8002972:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002974:	e00f      	b.n	8002996 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002976:	f7fe fc97 	bl	80012a8 <HAL_GetTick>
 800297a:	0002      	movs	r2, r0
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b19      	cmp	r3, #25
 8002982:	d908      	bls.n	8002996 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	2220      	movs	r2, #32
 8002988:	4313      	orrs	r3, r2
 800298a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800298c:	2327      	movs	r3, #39	; 0x27
 800298e:	18fb      	adds	r3, r7, r3
 8002990:	2201      	movs	r2, #1
 8002992:	701a      	strb	r2, [r3, #0]

              break;
 8002994:	e00b      	b.n	80029ae <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	2220      	movs	r2, #32
 800299e:	4013      	ands	r3, r2
 80029a0:	2127      	movs	r1, #39	; 0x27
 80029a2:	187a      	adds	r2, r7, r1
 80029a4:	1879      	adds	r1, r7, r1
 80029a6:	7809      	ldrb	r1, [r1, #0]
 80029a8:	7011      	strb	r1, [r2, #0]
 80029aa:	2b20      	cmp	r3, #32
 80029ac:	d1e3      	bne.n	8002976 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	2220      	movs	r2, #32
 80029b6:	4013      	ands	r3, r2
 80029b8:	2b20      	cmp	r3, #32
 80029ba:	d004      	beq.n	80029c6 <I2C_IsErrorOccurred+0x112>
 80029bc:	2327      	movs	r3, #39	; 0x27
 80029be:	18fb      	adds	r3, r7, r3
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d092      	beq.n	80028ec <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80029c6:	2327      	movs	r3, #39	; 0x27
 80029c8:	18fb      	adds	r3, r7, r3
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d103      	bne.n	80029d8 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2220      	movs	r2, #32
 80029d6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80029d8:	6a3b      	ldr	r3, [r7, #32]
 80029da:	2204      	movs	r2, #4
 80029dc:	4313      	orrs	r3, r2
 80029de:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80029e0:	2327      	movs	r3, #39	; 0x27
 80029e2:	18fb      	adds	r3, r7, r3
 80029e4:	2201      	movs	r2, #1
 80029e6:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	2380      	movs	r3, #128	; 0x80
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	4013      	ands	r3, r2
 80029f8:	d00c      	beq.n	8002a14 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	2201      	movs	r2, #1
 80029fe:	4313      	orrs	r3, r2
 8002a00:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2280      	movs	r2, #128	; 0x80
 8002a08:	0052      	lsls	r2, r2, #1
 8002a0a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a0c:	2327      	movs	r3, #39	; 0x27
 8002a0e:	18fb      	adds	r3, r7, r3
 8002a10:	2201      	movs	r2, #1
 8002a12:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	2380      	movs	r3, #128	; 0x80
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	d00c      	beq.n	8002a38 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
 8002a20:	2208      	movs	r2, #8
 8002a22:	4313      	orrs	r3, r2
 8002a24:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2280      	movs	r2, #128	; 0x80
 8002a2c:	00d2      	lsls	r2, r2, #3
 8002a2e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a30:	2327      	movs	r3, #39	; 0x27
 8002a32:	18fb      	adds	r3, r7, r3
 8002a34:	2201      	movs	r2, #1
 8002a36:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	2380      	movs	r3, #128	; 0x80
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4013      	ands	r3, r2
 8002a40:	d00c      	beq.n	8002a5c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a42:	6a3b      	ldr	r3, [r7, #32]
 8002a44:	2202      	movs	r2, #2
 8002a46:	4313      	orrs	r3, r2
 8002a48:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2280      	movs	r2, #128	; 0x80
 8002a50:	0092      	lsls	r2, r2, #2
 8002a52:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a54:	2327      	movs	r3, #39	; 0x27
 8002a56:	18fb      	adds	r3, r7, r3
 8002a58:	2201      	movs	r2, #1
 8002a5a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002a5c:	2327      	movs	r3, #39	; 0x27
 8002a5e:	18fb      	adds	r3, r7, r3
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d01d      	beq.n	8002aa2 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f7ff fea9 	bl	80027c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	490d      	ldr	r1, [pc, #52]	; (8002ab0 <I2C_IsErrorOccurred+0x1fc>)
 8002a7a:	400a      	ands	r2, r1
 8002a7c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a82:	6a3b      	ldr	r3, [r7, #32]
 8002a84:	431a      	orrs	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2241      	movs	r2, #65	; 0x41
 8002a8e:	2120      	movs	r1, #32
 8002a90:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2242      	movs	r2, #66	; 0x42
 8002a96:	2100      	movs	r1, #0
 8002a98:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2240      	movs	r2, #64	; 0x40
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002aa2:	2327      	movs	r3, #39	; 0x27
 8002aa4:	18fb      	adds	r3, r7, r3
 8002aa6:	781b      	ldrb	r3, [r3, #0]
}
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	b00b      	add	sp, #44	; 0x2c
 8002aae:	bd90      	pop	{r4, r7, pc}
 8002ab0:	fe00e800 	.word	0xfe00e800

08002ab4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2241      	movs	r2, #65	; 0x41
 8002ac2:	5c9b      	ldrb	r3, [r3, r2]
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b20      	cmp	r3, #32
 8002ac8:	d138      	bne.n	8002b3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2240      	movs	r2, #64	; 0x40
 8002ace:	5c9b      	ldrb	r3, [r3, r2]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d101      	bne.n	8002ad8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	e032      	b.n	8002b3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2240      	movs	r2, #64	; 0x40
 8002adc:	2101      	movs	r1, #1
 8002ade:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2241      	movs	r2, #65	; 0x41
 8002ae4:	2124      	movs	r1, #36	; 0x24
 8002ae6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2101      	movs	r1, #1
 8002af4:	438a      	bics	r2, r1
 8002af6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4911      	ldr	r1, [pc, #68]	; (8002b48 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002b04:	400a      	ands	r2, r1
 8002b06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6819      	ldr	r1, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2101      	movs	r1, #1
 8002b24:	430a      	orrs	r2, r1
 8002b26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2241      	movs	r2, #65	; 0x41
 8002b2c:	2120      	movs	r1, #32
 8002b2e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2240      	movs	r2, #64	; 0x40
 8002b34:	2100      	movs	r1, #0
 8002b36:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	e000      	b.n	8002b3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b3c:	2302      	movs	r3, #2
  }
}
 8002b3e:	0018      	movs	r0, r3
 8002b40:	46bd      	mov	sp, r7
 8002b42:	b002      	add	sp, #8
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	ffffefff 	.word	0xffffefff

08002b4c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2241      	movs	r2, #65	; 0x41
 8002b5a:	5c9b      	ldrb	r3, [r3, r2]
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b20      	cmp	r3, #32
 8002b60:	d139      	bne.n	8002bd6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2240      	movs	r2, #64	; 0x40
 8002b66:	5c9b      	ldrb	r3, [r3, r2]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d101      	bne.n	8002b70 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	e033      	b.n	8002bd8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2240      	movs	r2, #64	; 0x40
 8002b74:	2101      	movs	r1, #1
 8002b76:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2241      	movs	r2, #65	; 0x41
 8002b7c:	2124      	movs	r1, #36	; 0x24
 8002b7e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	438a      	bics	r2, r1
 8002b8e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4a11      	ldr	r2, [pc, #68]	; (8002be0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	021b      	lsls	r3, r3, #8
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2241      	movs	r2, #65	; 0x41
 8002bc6:	2120      	movs	r1, #32
 8002bc8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2240      	movs	r2, #64	; 0x40
 8002bce:	2100      	movs	r1, #0
 8002bd0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	e000      	b.n	8002bd8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002bd6:	2302      	movs	r3, #2
  }
}
 8002bd8:	0018      	movs	r0, r3
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	b004      	add	sp, #16
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	fffff0ff 	.word	0xfffff0ff

08002be4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002bec:	4b19      	ldr	r3, [pc, #100]	; (8002c54 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a19      	ldr	r2, [pc, #100]	; (8002c58 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	0019      	movs	r1, r3
 8002bf6:	4b17      	ldr	r3, [pc, #92]	; (8002c54 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	2380      	movs	r3, #128	; 0x80
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d11f      	bne.n	8002c48 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002c08:	4b14      	ldr	r3, [pc, #80]	; (8002c5c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	0013      	movs	r3, r2
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	189b      	adds	r3, r3, r2
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	4912      	ldr	r1, [pc, #72]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002c16:	0018      	movs	r0, r3
 8002c18:	f7fd fa86 	bl	8000128 <__udivsi3>
 8002c1c:	0003      	movs	r3, r0
 8002c1e:	3301      	adds	r3, #1
 8002c20:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c22:	e008      	b.n	8002c36 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	e001      	b.n	8002c36 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e009      	b.n	8002c4a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c36:	4b07      	ldr	r3, [pc, #28]	; (8002c54 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002c38:	695a      	ldr	r2, [r3, #20]
 8002c3a:	2380      	movs	r3, #128	; 0x80
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	401a      	ands	r2, r3
 8002c40:	2380      	movs	r3, #128	; 0x80
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d0ed      	beq.n	8002c24 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	b004      	add	sp, #16
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	40007000 	.word	0x40007000
 8002c58:	fffff9ff 	.word	0xfffff9ff
 8002c5c:	20000000 	.word	0x20000000
 8002c60:	000f4240 	.word	0x000f4240

08002c64 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002c68:	4b03      	ldr	r3, [pc, #12]	; (8002c78 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	23e0      	movs	r3, #224	; 0xe0
 8002c6e:	01db      	lsls	r3, r3, #7
 8002c70:	4013      	ands	r3, r2
}
 8002c72:	0018      	movs	r0, r3
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40021000 	.word	0x40021000

08002c7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b088      	sub	sp, #32
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e2fe      	b.n	800328c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2201      	movs	r2, #1
 8002c94:	4013      	ands	r3, r2
 8002c96:	d100      	bne.n	8002c9a <HAL_RCC_OscConfig+0x1e>
 8002c98:	e07c      	b.n	8002d94 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c9a:	4bc3      	ldr	r3, [pc, #780]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	2238      	movs	r2, #56	; 0x38
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ca4:	4bc0      	ldr	r3, [pc, #768]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	2203      	movs	r2, #3
 8002caa:	4013      	ands	r3, r2
 8002cac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	2b10      	cmp	r3, #16
 8002cb2:	d102      	bne.n	8002cba <HAL_RCC_OscConfig+0x3e>
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	2b03      	cmp	r3, #3
 8002cb8:	d002      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	d10b      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc0:	4bb9      	ldr	r3, [pc, #740]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	2380      	movs	r3, #128	; 0x80
 8002cc6:	029b      	lsls	r3, r3, #10
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d062      	beq.n	8002d92 <HAL_RCC_OscConfig+0x116>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d15e      	bne.n	8002d92 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e2d9      	b.n	800328c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	2380      	movs	r3, #128	; 0x80
 8002cde:	025b      	lsls	r3, r3, #9
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d107      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x78>
 8002ce4:	4bb0      	ldr	r3, [pc, #704]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	4baf      	ldr	r3, [pc, #700]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002cea:	2180      	movs	r1, #128	; 0x80
 8002cec:	0249      	lsls	r1, r1, #9
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	e020      	b.n	8002d36 <HAL_RCC_OscConfig+0xba>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685a      	ldr	r2, [r3, #4]
 8002cf8:	23a0      	movs	r3, #160	; 0xa0
 8002cfa:	02db      	lsls	r3, r3, #11
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d10e      	bne.n	8002d1e <HAL_RCC_OscConfig+0xa2>
 8002d00:	4ba9      	ldr	r3, [pc, #676]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	4ba8      	ldr	r3, [pc, #672]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002d06:	2180      	movs	r1, #128	; 0x80
 8002d08:	02c9      	lsls	r1, r1, #11
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	4ba6      	ldr	r3, [pc, #664]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	4ba5      	ldr	r3, [pc, #660]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002d14:	2180      	movs	r1, #128	; 0x80
 8002d16:	0249      	lsls	r1, r1, #9
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	e00b      	b.n	8002d36 <HAL_RCC_OscConfig+0xba>
 8002d1e:	4ba2      	ldr	r3, [pc, #648]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	4ba1      	ldr	r3, [pc, #644]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002d24:	49a1      	ldr	r1, [pc, #644]	; (8002fac <HAL_RCC_OscConfig+0x330>)
 8002d26:	400a      	ands	r2, r1
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	4b9f      	ldr	r3, [pc, #636]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	4b9e      	ldr	r3, [pc, #632]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002d30:	499f      	ldr	r1, [pc, #636]	; (8002fb0 <HAL_RCC_OscConfig+0x334>)
 8002d32:	400a      	ands	r2, r1
 8002d34:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d014      	beq.n	8002d68 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3e:	f7fe fab3 	bl	80012a8 <HAL_GetTick>
 8002d42:	0003      	movs	r3, r0
 8002d44:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d48:	f7fe faae 	bl	80012a8 <HAL_GetTick>
 8002d4c:	0002      	movs	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b64      	cmp	r3, #100	; 0x64
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e298      	b.n	800328c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d5a:	4b93      	ldr	r3, [pc, #588]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	2380      	movs	r3, #128	; 0x80
 8002d60:	029b      	lsls	r3, r3, #10
 8002d62:	4013      	ands	r3, r2
 8002d64:	d0f0      	beq.n	8002d48 <HAL_RCC_OscConfig+0xcc>
 8002d66:	e015      	b.n	8002d94 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d68:	f7fe fa9e 	bl	80012a8 <HAL_GetTick>
 8002d6c:	0003      	movs	r3, r0
 8002d6e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d72:	f7fe fa99 	bl	80012a8 <HAL_GetTick>
 8002d76:	0002      	movs	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b64      	cmp	r3, #100	; 0x64
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e283      	b.n	800328c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d84:	4b88      	ldr	r3, [pc, #544]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	2380      	movs	r3, #128	; 0x80
 8002d8a:	029b      	lsls	r3, r3, #10
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	d1f0      	bne.n	8002d72 <HAL_RCC_OscConfig+0xf6>
 8002d90:	e000      	b.n	8002d94 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d92:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2202      	movs	r2, #2
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	d100      	bne.n	8002da0 <HAL_RCC_OscConfig+0x124>
 8002d9e:	e099      	b.n	8002ed4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002da0:	4b81      	ldr	r3, [pc, #516]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	2238      	movs	r2, #56	; 0x38
 8002da6:	4013      	ands	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002daa:	4b7f      	ldr	r3, [pc, #508]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	2203      	movs	r2, #3
 8002db0:	4013      	ands	r3, r2
 8002db2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	2b10      	cmp	r3, #16
 8002db8:	d102      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x144>
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d002      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d135      	bne.n	8002e32 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dc6:	4b78      	ldr	r3, [pc, #480]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	2380      	movs	r3, #128	; 0x80
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	4013      	ands	r3, r2
 8002dd0:	d005      	beq.n	8002dde <HAL_RCC_OscConfig+0x162>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e256      	b.n	800328c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dde:	4b72      	ldr	r3, [pc, #456]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	4a74      	ldr	r2, [pc, #464]	; (8002fb4 <HAL_RCC_OscConfig+0x338>)
 8002de4:	4013      	ands	r3, r2
 8002de6:	0019      	movs	r1, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	021a      	lsls	r2, r3, #8
 8002dee:	4b6e      	ldr	r3, [pc, #440]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002df0:	430a      	orrs	r2, r1
 8002df2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d112      	bne.n	8002e20 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002dfa:	4b6b      	ldr	r3, [pc, #428]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a6e      	ldr	r2, [pc, #440]	; (8002fb8 <HAL_RCC_OscConfig+0x33c>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	0019      	movs	r1, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	4b67      	ldr	r3, [pc, #412]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002e0e:	4b66      	ldr	r3, [pc, #408]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	0adb      	lsrs	r3, r3, #11
 8002e14:	2207      	movs	r2, #7
 8002e16:	4013      	ands	r3, r2
 8002e18:	4a68      	ldr	r2, [pc, #416]	; (8002fbc <HAL_RCC_OscConfig+0x340>)
 8002e1a:	40da      	lsrs	r2, r3
 8002e1c:	4b68      	ldr	r3, [pc, #416]	; (8002fc0 <HAL_RCC_OscConfig+0x344>)
 8002e1e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e20:	4b68      	ldr	r3, [pc, #416]	; (8002fc4 <HAL_RCC_OscConfig+0x348>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	0018      	movs	r0, r3
 8002e26:	f7fe f9e3 	bl	80011f0 <HAL_InitTick>
 8002e2a:	1e03      	subs	r3, r0, #0
 8002e2c:	d051      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e22c      	b.n	800328c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d030      	beq.n	8002e9c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002e3a:	4b5b      	ldr	r3, [pc, #364]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a5e      	ldr	r2, [pc, #376]	; (8002fb8 <HAL_RCC_OscConfig+0x33c>)
 8002e40:	4013      	ands	r3, r2
 8002e42:	0019      	movs	r1, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	691a      	ldr	r2, [r3, #16]
 8002e48:	4b57      	ldr	r3, [pc, #348]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002e4e:	4b56      	ldr	r3, [pc, #344]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	4b55      	ldr	r3, [pc, #340]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002e54:	2180      	movs	r1, #128	; 0x80
 8002e56:	0049      	lsls	r1, r1, #1
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5c:	f7fe fa24 	bl	80012a8 <HAL_GetTick>
 8002e60:	0003      	movs	r3, r0
 8002e62:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e66:	f7fe fa1f 	bl	80012a8 <HAL_GetTick>
 8002e6a:	0002      	movs	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e209      	b.n	800328c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e78:	4b4b      	ldr	r3, [pc, #300]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	2380      	movs	r3, #128	; 0x80
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4013      	ands	r3, r2
 8002e82:	d0f0      	beq.n	8002e66 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e84:	4b48      	ldr	r3, [pc, #288]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	4a4a      	ldr	r2, [pc, #296]	; (8002fb4 <HAL_RCC_OscConfig+0x338>)
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	0019      	movs	r1, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	021a      	lsls	r2, r3, #8
 8002e94:	4b44      	ldr	r3, [pc, #272]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002e96:	430a      	orrs	r2, r1
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	e01b      	b.n	8002ed4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002e9c:	4b42      	ldr	r3, [pc, #264]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	4b41      	ldr	r3, [pc, #260]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002ea2:	4949      	ldr	r1, [pc, #292]	; (8002fc8 <HAL_RCC_OscConfig+0x34c>)
 8002ea4:	400a      	ands	r2, r1
 8002ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea8:	f7fe f9fe 	bl	80012a8 <HAL_GetTick>
 8002eac:	0003      	movs	r3, r0
 8002eae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eb2:	f7fe f9f9 	bl	80012a8 <HAL_GetTick>
 8002eb6:	0002      	movs	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e1e3      	b.n	800328c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ec4:	4b38      	ldr	r3, [pc, #224]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	2380      	movs	r3, #128	; 0x80
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d1f0      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x236>
 8002ed0:	e000      	b.n	8002ed4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ed2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2208      	movs	r2, #8
 8002eda:	4013      	ands	r3, r2
 8002edc:	d047      	beq.n	8002f6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002ede:	4b32      	ldr	r3, [pc, #200]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	2238      	movs	r2, #56	; 0x38
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	2b18      	cmp	r3, #24
 8002ee8:	d10a      	bne.n	8002f00 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002eea:	4b2f      	ldr	r3, [pc, #188]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eee:	2202      	movs	r2, #2
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	d03c      	beq.n	8002f6e <HAL_RCC_OscConfig+0x2f2>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d138      	bne.n	8002f6e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e1c5      	b.n	800328c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d019      	beq.n	8002f3c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002f08:	4b27      	ldr	r3, [pc, #156]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002f0a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f0c:	4b26      	ldr	r3, [pc, #152]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002f0e:	2101      	movs	r1, #1
 8002f10:	430a      	orrs	r2, r1
 8002f12:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f14:	f7fe f9c8 	bl	80012a8 <HAL_GetTick>
 8002f18:	0003      	movs	r3, r0
 8002f1a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f1c:	e008      	b.n	8002f30 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f1e:	f7fe f9c3 	bl	80012a8 <HAL_GetTick>
 8002f22:	0002      	movs	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e1ad      	b.n	800328c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f30:	4b1d      	ldr	r3, [pc, #116]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f34:	2202      	movs	r2, #2
 8002f36:	4013      	ands	r3, r2
 8002f38:	d0f1      	beq.n	8002f1e <HAL_RCC_OscConfig+0x2a2>
 8002f3a:	e018      	b.n	8002f6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002f3c:	4b1a      	ldr	r3, [pc, #104]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002f3e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f40:	4b19      	ldr	r3, [pc, #100]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002f42:	2101      	movs	r1, #1
 8002f44:	438a      	bics	r2, r1
 8002f46:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f48:	f7fe f9ae 	bl	80012a8 <HAL_GetTick>
 8002f4c:	0003      	movs	r3, r0
 8002f4e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f52:	f7fe f9a9 	bl	80012a8 <HAL_GetTick>
 8002f56:	0002      	movs	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e193      	b.n	800328c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f64:	4b10      	ldr	r3, [pc, #64]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f68:	2202      	movs	r2, #2
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	d1f1      	bne.n	8002f52 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2204      	movs	r2, #4
 8002f74:	4013      	ands	r3, r2
 8002f76:	d100      	bne.n	8002f7a <HAL_RCC_OscConfig+0x2fe>
 8002f78:	e0c6      	b.n	8003108 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f7a:	231f      	movs	r3, #31
 8002f7c:	18fb      	adds	r3, r7, r3
 8002f7e:	2200      	movs	r2, #0
 8002f80:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002f82:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2238      	movs	r2, #56	; 0x38
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2b20      	cmp	r3, #32
 8002f8c:	d11e      	bne.n	8002fcc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002f8e:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <HAL_RCC_OscConfig+0x32c>)
 8002f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f92:	2202      	movs	r2, #2
 8002f94:	4013      	ands	r3, r2
 8002f96:	d100      	bne.n	8002f9a <HAL_RCC_OscConfig+0x31e>
 8002f98:	e0b6      	b.n	8003108 <HAL_RCC_OscConfig+0x48c>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d000      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x328>
 8002fa2:	e0b1      	b.n	8003108 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e171      	b.n	800328c <HAL_RCC_OscConfig+0x610>
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	fffeffff 	.word	0xfffeffff
 8002fb0:	fffbffff 	.word	0xfffbffff
 8002fb4:	ffff80ff 	.word	0xffff80ff
 8002fb8:	ffffc7ff 	.word	0xffffc7ff
 8002fbc:	00f42400 	.word	0x00f42400
 8002fc0:	20000000 	.word	0x20000000
 8002fc4:	20000004 	.word	0x20000004
 8002fc8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fcc:	4bb1      	ldr	r3, [pc, #708]	; (8003294 <HAL_RCC_OscConfig+0x618>)
 8002fce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fd0:	2380      	movs	r3, #128	; 0x80
 8002fd2:	055b      	lsls	r3, r3, #21
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	d101      	bne.n	8002fdc <HAL_RCC_OscConfig+0x360>
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e000      	b.n	8002fde <HAL_RCC_OscConfig+0x362>
 8002fdc:	2300      	movs	r3, #0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d011      	beq.n	8003006 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002fe2:	4bac      	ldr	r3, [pc, #688]	; (8003294 <HAL_RCC_OscConfig+0x618>)
 8002fe4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fe6:	4bab      	ldr	r3, [pc, #684]	; (8003294 <HAL_RCC_OscConfig+0x618>)
 8002fe8:	2180      	movs	r1, #128	; 0x80
 8002fea:	0549      	lsls	r1, r1, #21
 8002fec:	430a      	orrs	r2, r1
 8002fee:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ff0:	4ba8      	ldr	r3, [pc, #672]	; (8003294 <HAL_RCC_OscConfig+0x618>)
 8002ff2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ff4:	2380      	movs	r3, #128	; 0x80
 8002ff6:	055b      	lsls	r3, r3, #21
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	60fb      	str	r3, [r7, #12]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002ffe:	231f      	movs	r3, #31
 8003000:	18fb      	adds	r3, r7, r3
 8003002:	2201      	movs	r2, #1
 8003004:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003006:	4ba4      	ldr	r3, [pc, #656]	; (8003298 <HAL_RCC_OscConfig+0x61c>)
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	2380      	movs	r3, #128	; 0x80
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	4013      	ands	r3, r2
 8003010:	d11a      	bne.n	8003048 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003012:	4ba1      	ldr	r3, [pc, #644]	; (8003298 <HAL_RCC_OscConfig+0x61c>)
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	4ba0      	ldr	r3, [pc, #640]	; (8003298 <HAL_RCC_OscConfig+0x61c>)
 8003018:	2180      	movs	r1, #128	; 0x80
 800301a:	0049      	lsls	r1, r1, #1
 800301c:	430a      	orrs	r2, r1
 800301e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003020:	f7fe f942 	bl	80012a8 <HAL_GetTick>
 8003024:	0003      	movs	r3, r0
 8003026:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800302a:	f7fe f93d 	bl	80012a8 <HAL_GetTick>
 800302e:	0002      	movs	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e127      	b.n	800328c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800303c:	4b96      	ldr	r3, [pc, #600]	; (8003298 <HAL_RCC_OscConfig+0x61c>)
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	2380      	movs	r3, #128	; 0x80
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	4013      	ands	r3, r2
 8003046:	d0f0      	beq.n	800302a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d106      	bne.n	800305e <HAL_RCC_OscConfig+0x3e2>
 8003050:	4b90      	ldr	r3, [pc, #576]	; (8003294 <HAL_RCC_OscConfig+0x618>)
 8003052:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003054:	4b8f      	ldr	r3, [pc, #572]	; (8003294 <HAL_RCC_OscConfig+0x618>)
 8003056:	2101      	movs	r1, #1
 8003058:	430a      	orrs	r2, r1
 800305a:	65da      	str	r2, [r3, #92]	; 0x5c
 800305c:	e01c      	b.n	8003098 <HAL_RCC_OscConfig+0x41c>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	2b05      	cmp	r3, #5
 8003064:	d10c      	bne.n	8003080 <HAL_RCC_OscConfig+0x404>
 8003066:	4b8b      	ldr	r3, [pc, #556]	; (8003294 <HAL_RCC_OscConfig+0x618>)
 8003068:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800306a:	4b8a      	ldr	r3, [pc, #552]	; (8003294 <HAL_RCC_OscConfig+0x618>)
 800306c:	2104      	movs	r1, #4
 800306e:	430a      	orrs	r2, r1
 8003070:	65da      	str	r2, [r3, #92]	; 0x5c
 8003072:	4b88      	ldr	r3, [pc, #544]	; (8003294 <HAL_RCC_OscConfig+0x618>)
 8003074:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003076:	4b87      	ldr	r3, [pc, #540]	; (8003294 <HAL_RCC_OscConfig+0x618>)
 8003078:	2101      	movs	r1, #1
 800307a:	430a      	orrs	r2, r1
 800307c:	65da      	str	r2, [r3, #92]	; 0x5c
 800307e:	e00b      	b.n	8003098 <HAL_RCC_OscConfig+0x41c>
 8003080:	4b84      	ldr	r3, [pc, #528]	; (8003294 <HAL_RCC_OscConfig+0x618>)
 8003082:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003084:	4b83      	ldr	r3, [pc, #524]	; (8003294 <HAL_RCC_OscConfig+0x618>)
 8003086:	2101      	movs	r1, #1
 8003088:	438a      	bics	r2, r1
 800308a:	65da      	str	r2, [r3, #92]	; 0x5c
 800308c:	4b81      	ldr	r3, [pc, #516]	; (8003294 <HAL_RCC_OscConfig+0x618>)
 800308e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003090:	4b80      	ldr	r3, [pc, #512]	; (8003294 <HAL_RCC_OscConfig+0x618>)
 8003092:	2104      	movs	r1, #4
 8003094:	438a      	bics	r2, r1
 8003096:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d014      	beq.n	80030ca <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a0:	f7fe f902 	bl	80012a8 <HAL_GetTick>
 80030a4:	0003      	movs	r3, r0
 80030a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030a8:	e009      	b.n	80030be <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030aa:	f7fe f8fd 	bl	80012a8 <HAL_GetTick>
 80030ae:	0002      	movs	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	4a79      	ldr	r2, [pc, #484]	; (800329c <HAL_RCC_OscConfig+0x620>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e0e6      	b.n	800328c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030be:	4b75      	ldr	r3, [pc, #468]	; (8003294 <HAL_RCC_OscConfig+0x618>)
 80030c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c2:	2202      	movs	r2, #2
 80030c4:	4013      	ands	r3, r2
 80030c6:	d0f0      	beq.n	80030aa <HAL_RCC_OscConfig+0x42e>
 80030c8:	e013      	b.n	80030f2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ca:	f7fe f8ed 	bl	80012a8 <HAL_GetTick>
 80030ce:	0003      	movs	r3, r0
 80030d0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030d2:	e009      	b.n	80030e8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030d4:	f7fe f8e8 	bl	80012a8 <HAL_GetTick>
 80030d8:	0002      	movs	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	4a6f      	ldr	r2, [pc, #444]	; (800329c <HAL_RCC_OscConfig+0x620>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e0d1      	b.n	800328c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030e8:	4b6a      	ldr	r3, [pc, #424]	; (8003294 <HAL_RCC_OscConfig+0x618>)
 80030ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ec:	2202      	movs	r2, #2
 80030ee:	4013      	ands	r3, r2
 80030f0:	d1f0      	bne.n	80030d4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80030f2:	231f      	movs	r3, #31
 80030f4:	18fb      	adds	r3, r7, r3
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d105      	bne.n	8003108 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80030fc:	4b65      	ldr	r3, [pc, #404]	; (8003294 <HAL_RCC_OscConfig+0x618>)
 80030fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003100:	4b64      	ldr	r3, [pc, #400]	; (8003294 <HAL_RCC_OscConfig+0x618>)
 8003102:	4967      	ldr	r1, [pc, #412]	; (80032a0 <HAL_RCC_OscConfig+0x624>)
 8003104:	400a      	ands	r2, r1
 8003106:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d100      	bne.n	8003112 <HAL_RCC_OscConfig+0x496>
 8003110:	e0bb      	b.n	800328a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003112:	4b60      	ldr	r3, [pc, #384]	; (8003294 <HAL_RCC_OscConfig+0x618>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	2238      	movs	r2, #56	; 0x38
 8003118:	4013      	ands	r3, r2
 800311a:	2b10      	cmp	r3, #16
 800311c:	d100      	bne.n	8003120 <HAL_RCC_OscConfig+0x4a4>
 800311e:	e07b      	b.n	8003218 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	2b02      	cmp	r3, #2
 8003126:	d156      	bne.n	80031d6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003128:	4b5a      	ldr	r3, [pc, #360]	; (8003294 <HAL_RCC_OscConfig+0x618>)
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	4b59      	ldr	r3, [pc, #356]	; (8003294 <HAL_RCC_OscConfig+0x618>)
 800312e:	495d      	ldr	r1, [pc, #372]	; (80032a4 <HAL_RCC_OscConfig+0x628>)
 8003130:	400a      	ands	r2, r1
 8003132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003134:	f7fe f8b8 	bl	80012a8 <HAL_GetTick>
 8003138:	0003      	movs	r3, r0
 800313a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800313e:	f7fe f8b3 	bl	80012a8 <HAL_GetTick>
 8003142:	0002      	movs	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e09d      	b.n	800328c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003150:	4b50      	ldr	r3, [pc, #320]	; (8003294 <HAL_RCC_OscConfig+0x618>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	2380      	movs	r3, #128	; 0x80
 8003156:	049b      	lsls	r3, r3, #18
 8003158:	4013      	ands	r3, r2
 800315a:	d1f0      	bne.n	800313e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800315c:	4b4d      	ldr	r3, [pc, #308]	; (8003294 <HAL_RCC_OscConfig+0x618>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	4a51      	ldr	r2, [pc, #324]	; (80032a8 <HAL_RCC_OscConfig+0x62c>)
 8003162:	4013      	ands	r3, r2
 8003164:	0019      	movs	r1, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1a      	ldr	r2, [r3, #32]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003174:	021b      	lsls	r3, r3, #8
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317c:	431a      	orrs	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003188:	431a      	orrs	r2, r3
 800318a:	4b42      	ldr	r3, [pc, #264]	; (8003294 <HAL_RCC_OscConfig+0x618>)
 800318c:	430a      	orrs	r2, r1
 800318e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003190:	4b40      	ldr	r3, [pc, #256]	; (8003294 <HAL_RCC_OscConfig+0x618>)
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	4b3f      	ldr	r3, [pc, #252]	; (8003294 <HAL_RCC_OscConfig+0x618>)
 8003196:	2180      	movs	r1, #128	; 0x80
 8003198:	0449      	lsls	r1, r1, #17
 800319a:	430a      	orrs	r2, r1
 800319c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800319e:	4b3d      	ldr	r3, [pc, #244]	; (8003294 <HAL_RCC_OscConfig+0x618>)
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	4b3c      	ldr	r3, [pc, #240]	; (8003294 <HAL_RCC_OscConfig+0x618>)
 80031a4:	2180      	movs	r1, #128	; 0x80
 80031a6:	0549      	lsls	r1, r1, #21
 80031a8:	430a      	orrs	r2, r1
 80031aa:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ac:	f7fe f87c 	bl	80012a8 <HAL_GetTick>
 80031b0:	0003      	movs	r3, r0
 80031b2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b6:	f7fe f877 	bl	80012a8 <HAL_GetTick>
 80031ba:	0002      	movs	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e061      	b.n	800328c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031c8:	4b32      	ldr	r3, [pc, #200]	; (8003294 <HAL_RCC_OscConfig+0x618>)
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	2380      	movs	r3, #128	; 0x80
 80031ce:	049b      	lsls	r3, r3, #18
 80031d0:	4013      	ands	r3, r2
 80031d2:	d0f0      	beq.n	80031b6 <HAL_RCC_OscConfig+0x53a>
 80031d4:	e059      	b.n	800328a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d6:	4b2f      	ldr	r3, [pc, #188]	; (8003294 <HAL_RCC_OscConfig+0x618>)
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	4b2e      	ldr	r3, [pc, #184]	; (8003294 <HAL_RCC_OscConfig+0x618>)
 80031dc:	4931      	ldr	r1, [pc, #196]	; (80032a4 <HAL_RCC_OscConfig+0x628>)
 80031de:	400a      	ands	r2, r1
 80031e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e2:	f7fe f861 	bl	80012a8 <HAL_GetTick>
 80031e6:	0003      	movs	r3, r0
 80031e8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ec:	f7fe f85c 	bl	80012a8 <HAL_GetTick>
 80031f0:	0002      	movs	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e046      	b.n	800328c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031fe:	4b25      	ldr	r3, [pc, #148]	; (8003294 <HAL_RCC_OscConfig+0x618>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	2380      	movs	r3, #128	; 0x80
 8003204:	049b      	lsls	r3, r3, #18
 8003206:	4013      	ands	r3, r2
 8003208:	d1f0      	bne.n	80031ec <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800320a:	4b22      	ldr	r3, [pc, #136]	; (8003294 <HAL_RCC_OscConfig+0x618>)
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	4b21      	ldr	r3, [pc, #132]	; (8003294 <HAL_RCC_OscConfig+0x618>)
 8003210:	4926      	ldr	r1, [pc, #152]	; (80032ac <HAL_RCC_OscConfig+0x630>)
 8003212:	400a      	ands	r2, r1
 8003214:	60da      	str	r2, [r3, #12]
 8003216:	e038      	b.n	800328a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d101      	bne.n	8003224 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e033      	b.n	800328c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003224:	4b1b      	ldr	r3, [pc, #108]	; (8003294 <HAL_RCC_OscConfig+0x618>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	2203      	movs	r2, #3
 800322e:	401a      	ands	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	429a      	cmp	r2, r3
 8003236:	d126      	bne.n	8003286 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	2270      	movs	r2, #112	; 0x70
 800323c:	401a      	ands	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003242:	429a      	cmp	r2, r3
 8003244:	d11f      	bne.n	8003286 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	23fe      	movs	r3, #254	; 0xfe
 800324a:	01db      	lsls	r3, r3, #7
 800324c:	401a      	ands	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003252:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003254:	429a      	cmp	r2, r3
 8003256:	d116      	bne.n	8003286 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	23f8      	movs	r3, #248	; 0xf8
 800325c:	039b      	lsls	r3, r3, #14
 800325e:	401a      	ands	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003264:	429a      	cmp	r2, r3
 8003266:	d10e      	bne.n	8003286 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	23e0      	movs	r3, #224	; 0xe0
 800326c:	051b      	lsls	r3, r3, #20
 800326e:	401a      	ands	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003274:	429a      	cmp	r2, r3
 8003276:	d106      	bne.n	8003286 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	0f5b      	lsrs	r3, r3, #29
 800327c:	075a      	lsls	r2, r3, #29
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003282:	429a      	cmp	r2, r3
 8003284:	d001      	beq.n	800328a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e000      	b.n	800328c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	0018      	movs	r0, r3
 800328e:	46bd      	mov	sp, r7
 8003290:	b008      	add	sp, #32
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40021000 	.word	0x40021000
 8003298:	40007000 	.word	0x40007000
 800329c:	00001388 	.word	0x00001388
 80032a0:	efffffff 	.word	0xefffffff
 80032a4:	feffffff 	.word	0xfeffffff
 80032a8:	11c1808c 	.word	0x11c1808c
 80032ac:	eefefffc 	.word	0xeefefffc

080032b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e0e9      	b.n	8003498 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032c4:	4b76      	ldr	r3, [pc, #472]	; (80034a0 <HAL_RCC_ClockConfig+0x1f0>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2207      	movs	r2, #7
 80032ca:	4013      	ands	r3, r2
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d91e      	bls.n	8003310 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d2:	4b73      	ldr	r3, [pc, #460]	; (80034a0 <HAL_RCC_ClockConfig+0x1f0>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2207      	movs	r2, #7
 80032d8:	4393      	bics	r3, r2
 80032da:	0019      	movs	r1, r3
 80032dc:	4b70      	ldr	r3, [pc, #448]	; (80034a0 <HAL_RCC_ClockConfig+0x1f0>)
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80032e4:	f7fd ffe0 	bl	80012a8 <HAL_GetTick>
 80032e8:	0003      	movs	r3, r0
 80032ea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80032ec:	e009      	b.n	8003302 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ee:	f7fd ffdb 	bl	80012a8 <HAL_GetTick>
 80032f2:	0002      	movs	r2, r0
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	4a6a      	ldr	r2, [pc, #424]	; (80034a4 <HAL_RCC_ClockConfig+0x1f4>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e0ca      	b.n	8003498 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003302:	4b67      	ldr	r3, [pc, #412]	; (80034a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2207      	movs	r2, #7
 8003308:	4013      	ands	r3, r2
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	429a      	cmp	r2, r3
 800330e:	d1ee      	bne.n	80032ee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2202      	movs	r2, #2
 8003316:	4013      	ands	r3, r2
 8003318:	d015      	beq.n	8003346 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2204      	movs	r2, #4
 8003320:	4013      	ands	r3, r2
 8003322:	d006      	beq.n	8003332 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003324:	4b60      	ldr	r3, [pc, #384]	; (80034a8 <HAL_RCC_ClockConfig+0x1f8>)
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	4b5f      	ldr	r3, [pc, #380]	; (80034a8 <HAL_RCC_ClockConfig+0x1f8>)
 800332a:	21e0      	movs	r1, #224	; 0xe0
 800332c:	01c9      	lsls	r1, r1, #7
 800332e:	430a      	orrs	r2, r1
 8003330:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003332:	4b5d      	ldr	r3, [pc, #372]	; (80034a8 <HAL_RCC_ClockConfig+0x1f8>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	4a5d      	ldr	r2, [pc, #372]	; (80034ac <HAL_RCC_ClockConfig+0x1fc>)
 8003338:	4013      	ands	r3, r2
 800333a:	0019      	movs	r1, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	4b59      	ldr	r3, [pc, #356]	; (80034a8 <HAL_RCC_ClockConfig+0x1f8>)
 8003342:	430a      	orrs	r2, r1
 8003344:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2201      	movs	r2, #1
 800334c:	4013      	ands	r3, r2
 800334e:	d057      	beq.n	8003400 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d107      	bne.n	8003368 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003358:	4b53      	ldr	r3, [pc, #332]	; (80034a8 <HAL_RCC_ClockConfig+0x1f8>)
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	2380      	movs	r3, #128	; 0x80
 800335e:	029b      	lsls	r3, r3, #10
 8003360:	4013      	ands	r3, r2
 8003362:	d12b      	bne.n	80033bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e097      	b.n	8003498 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2b02      	cmp	r3, #2
 800336e:	d107      	bne.n	8003380 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003370:	4b4d      	ldr	r3, [pc, #308]	; (80034a8 <HAL_RCC_ClockConfig+0x1f8>)
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	2380      	movs	r3, #128	; 0x80
 8003376:	049b      	lsls	r3, r3, #18
 8003378:	4013      	ands	r3, r2
 800337a:	d11f      	bne.n	80033bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e08b      	b.n	8003498 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d107      	bne.n	8003398 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003388:	4b47      	ldr	r3, [pc, #284]	; (80034a8 <HAL_RCC_ClockConfig+0x1f8>)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	2380      	movs	r3, #128	; 0x80
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	4013      	ands	r3, r2
 8003392:	d113      	bne.n	80033bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e07f      	b.n	8003498 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	2b03      	cmp	r3, #3
 800339e:	d106      	bne.n	80033ae <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033a0:	4b41      	ldr	r3, [pc, #260]	; (80034a8 <HAL_RCC_ClockConfig+0x1f8>)
 80033a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033a4:	2202      	movs	r2, #2
 80033a6:	4013      	ands	r3, r2
 80033a8:	d108      	bne.n	80033bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e074      	b.n	8003498 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033ae:	4b3e      	ldr	r3, [pc, #248]	; (80034a8 <HAL_RCC_ClockConfig+0x1f8>)
 80033b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b2:	2202      	movs	r2, #2
 80033b4:	4013      	ands	r3, r2
 80033b6:	d101      	bne.n	80033bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e06d      	b.n	8003498 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033bc:	4b3a      	ldr	r3, [pc, #232]	; (80034a8 <HAL_RCC_ClockConfig+0x1f8>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	2207      	movs	r2, #7
 80033c2:	4393      	bics	r3, r2
 80033c4:	0019      	movs	r1, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	4b37      	ldr	r3, [pc, #220]	; (80034a8 <HAL_RCC_ClockConfig+0x1f8>)
 80033cc:	430a      	orrs	r2, r1
 80033ce:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033d0:	f7fd ff6a 	bl	80012a8 <HAL_GetTick>
 80033d4:	0003      	movs	r3, r0
 80033d6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d8:	e009      	b.n	80033ee <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033da:	f7fd ff65 	bl	80012a8 <HAL_GetTick>
 80033de:	0002      	movs	r2, r0
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	4a2f      	ldr	r2, [pc, #188]	; (80034a4 <HAL_RCC_ClockConfig+0x1f4>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e054      	b.n	8003498 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ee:	4b2e      	ldr	r3, [pc, #184]	; (80034a8 <HAL_RCC_ClockConfig+0x1f8>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2238      	movs	r2, #56	; 0x38
 80033f4:	401a      	ands	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d1ec      	bne.n	80033da <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003400:	4b27      	ldr	r3, [pc, #156]	; (80034a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2207      	movs	r2, #7
 8003406:	4013      	ands	r3, r2
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	429a      	cmp	r2, r3
 800340c:	d21e      	bcs.n	800344c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800340e:	4b24      	ldr	r3, [pc, #144]	; (80034a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2207      	movs	r2, #7
 8003414:	4393      	bics	r3, r2
 8003416:	0019      	movs	r1, r3
 8003418:	4b21      	ldr	r3, [pc, #132]	; (80034a0 <HAL_RCC_ClockConfig+0x1f0>)
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003420:	f7fd ff42 	bl	80012a8 <HAL_GetTick>
 8003424:	0003      	movs	r3, r0
 8003426:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003428:	e009      	b.n	800343e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800342a:	f7fd ff3d 	bl	80012a8 <HAL_GetTick>
 800342e:	0002      	movs	r2, r0
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	4a1b      	ldr	r2, [pc, #108]	; (80034a4 <HAL_RCC_ClockConfig+0x1f4>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d901      	bls.n	800343e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e02c      	b.n	8003498 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800343e:	4b18      	ldr	r3, [pc, #96]	; (80034a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2207      	movs	r2, #7
 8003444:	4013      	ands	r3, r2
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	429a      	cmp	r2, r3
 800344a:	d1ee      	bne.n	800342a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2204      	movs	r2, #4
 8003452:	4013      	ands	r3, r2
 8003454:	d009      	beq.n	800346a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003456:	4b14      	ldr	r3, [pc, #80]	; (80034a8 <HAL_RCC_ClockConfig+0x1f8>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	4a15      	ldr	r2, [pc, #84]	; (80034b0 <HAL_RCC_ClockConfig+0x200>)
 800345c:	4013      	ands	r3, r2
 800345e:	0019      	movs	r1, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68da      	ldr	r2, [r3, #12]
 8003464:	4b10      	ldr	r3, [pc, #64]	; (80034a8 <HAL_RCC_ClockConfig+0x1f8>)
 8003466:	430a      	orrs	r2, r1
 8003468:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800346a:	f000 f829 	bl	80034c0 <HAL_RCC_GetSysClockFreq>
 800346e:	0001      	movs	r1, r0
 8003470:	4b0d      	ldr	r3, [pc, #52]	; (80034a8 <HAL_RCC_ClockConfig+0x1f8>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	0a1b      	lsrs	r3, r3, #8
 8003476:	220f      	movs	r2, #15
 8003478:	401a      	ands	r2, r3
 800347a:	4b0e      	ldr	r3, [pc, #56]	; (80034b4 <HAL_RCC_ClockConfig+0x204>)
 800347c:	0092      	lsls	r2, r2, #2
 800347e:	58d3      	ldr	r3, [r2, r3]
 8003480:	221f      	movs	r2, #31
 8003482:	4013      	ands	r3, r2
 8003484:	000a      	movs	r2, r1
 8003486:	40da      	lsrs	r2, r3
 8003488:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <HAL_RCC_ClockConfig+0x208>)
 800348a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800348c:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <HAL_RCC_ClockConfig+0x20c>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	0018      	movs	r0, r3
 8003492:	f7fd fead 	bl	80011f0 <HAL_InitTick>
 8003496:	0003      	movs	r3, r0
}
 8003498:	0018      	movs	r0, r3
 800349a:	46bd      	mov	sp, r7
 800349c:	b004      	add	sp, #16
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40022000 	.word	0x40022000
 80034a4:	00001388 	.word	0x00001388
 80034a8:	40021000 	.word	0x40021000
 80034ac:	fffff0ff 	.word	0xfffff0ff
 80034b0:	ffff8fff 	.word	0xffff8fff
 80034b4:	0800600c 	.word	0x0800600c
 80034b8:	20000000 	.word	0x20000000
 80034bc:	20000004 	.word	0x20000004

080034c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034c6:	4b3c      	ldr	r3, [pc, #240]	; (80035b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	2238      	movs	r2, #56	; 0x38
 80034cc:	4013      	ands	r3, r2
 80034ce:	d10f      	bne.n	80034f0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80034d0:	4b39      	ldr	r3, [pc, #228]	; (80035b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	0adb      	lsrs	r3, r3, #11
 80034d6:	2207      	movs	r2, #7
 80034d8:	4013      	ands	r3, r2
 80034da:	2201      	movs	r2, #1
 80034dc:	409a      	lsls	r2, r3
 80034de:	0013      	movs	r3, r2
 80034e0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80034e2:	6839      	ldr	r1, [r7, #0]
 80034e4:	4835      	ldr	r0, [pc, #212]	; (80035bc <HAL_RCC_GetSysClockFreq+0xfc>)
 80034e6:	f7fc fe1f 	bl	8000128 <__udivsi3>
 80034ea:	0003      	movs	r3, r0
 80034ec:	613b      	str	r3, [r7, #16]
 80034ee:	e05d      	b.n	80035ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034f0:	4b31      	ldr	r3, [pc, #196]	; (80035b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	2238      	movs	r2, #56	; 0x38
 80034f6:	4013      	ands	r3, r2
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d102      	bne.n	8003502 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034fc:	4b30      	ldr	r3, [pc, #192]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x100>)
 80034fe:	613b      	str	r3, [r7, #16]
 8003500:	e054      	b.n	80035ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003502:	4b2d      	ldr	r3, [pc, #180]	; (80035b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	2238      	movs	r2, #56	; 0x38
 8003508:	4013      	ands	r3, r2
 800350a:	2b10      	cmp	r3, #16
 800350c:	d138      	bne.n	8003580 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800350e:	4b2a      	ldr	r3, [pc, #168]	; (80035b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	2203      	movs	r2, #3
 8003514:	4013      	ands	r3, r2
 8003516:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003518:	4b27      	ldr	r3, [pc, #156]	; (80035b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	091b      	lsrs	r3, r3, #4
 800351e:	2207      	movs	r2, #7
 8003520:	4013      	ands	r3, r2
 8003522:	3301      	adds	r3, #1
 8003524:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2b03      	cmp	r3, #3
 800352a:	d10d      	bne.n	8003548 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800352c:	68b9      	ldr	r1, [r7, #8]
 800352e:	4824      	ldr	r0, [pc, #144]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x100>)
 8003530:	f7fc fdfa 	bl	8000128 <__udivsi3>
 8003534:	0003      	movs	r3, r0
 8003536:	0019      	movs	r1, r3
 8003538:	4b1f      	ldr	r3, [pc, #124]	; (80035b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	0a1b      	lsrs	r3, r3, #8
 800353e:	227f      	movs	r2, #127	; 0x7f
 8003540:	4013      	ands	r3, r2
 8003542:	434b      	muls	r3, r1
 8003544:	617b      	str	r3, [r7, #20]
        break;
 8003546:	e00d      	b.n	8003564 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003548:	68b9      	ldr	r1, [r7, #8]
 800354a:	481c      	ldr	r0, [pc, #112]	; (80035bc <HAL_RCC_GetSysClockFreq+0xfc>)
 800354c:	f7fc fdec 	bl	8000128 <__udivsi3>
 8003550:	0003      	movs	r3, r0
 8003552:	0019      	movs	r1, r3
 8003554:	4b18      	ldr	r3, [pc, #96]	; (80035b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	0a1b      	lsrs	r3, r3, #8
 800355a:	227f      	movs	r2, #127	; 0x7f
 800355c:	4013      	ands	r3, r2
 800355e:	434b      	muls	r3, r1
 8003560:	617b      	str	r3, [r7, #20]
        break;
 8003562:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003564:	4b14      	ldr	r3, [pc, #80]	; (80035b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	0f5b      	lsrs	r3, r3, #29
 800356a:	2207      	movs	r2, #7
 800356c:	4013      	ands	r3, r2
 800356e:	3301      	adds	r3, #1
 8003570:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	6978      	ldr	r0, [r7, #20]
 8003576:	f7fc fdd7 	bl	8000128 <__udivsi3>
 800357a:	0003      	movs	r3, r0
 800357c:	613b      	str	r3, [r7, #16]
 800357e:	e015      	b.n	80035ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003580:	4b0d      	ldr	r3, [pc, #52]	; (80035b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	2238      	movs	r2, #56	; 0x38
 8003586:	4013      	ands	r3, r2
 8003588:	2b20      	cmp	r3, #32
 800358a:	d103      	bne.n	8003594 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800358c:	2380      	movs	r3, #128	; 0x80
 800358e:	021b      	lsls	r3, r3, #8
 8003590:	613b      	str	r3, [r7, #16]
 8003592:	e00b      	b.n	80035ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003594:	4b08      	ldr	r3, [pc, #32]	; (80035b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	2238      	movs	r2, #56	; 0x38
 800359a:	4013      	ands	r3, r2
 800359c:	2b18      	cmp	r3, #24
 800359e:	d103      	bne.n	80035a8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80035a0:	23fa      	movs	r3, #250	; 0xfa
 80035a2:	01db      	lsls	r3, r3, #7
 80035a4:	613b      	str	r3, [r7, #16]
 80035a6:	e001      	b.n	80035ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80035a8:	2300      	movs	r3, #0
 80035aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80035ac:	693b      	ldr	r3, [r7, #16]
}
 80035ae:	0018      	movs	r0, r3
 80035b0:	46bd      	mov	sp, r7
 80035b2:	b006      	add	sp, #24
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	46c0      	nop			; (mov r8, r8)
 80035b8:	40021000 	.word	0x40021000
 80035bc:	00f42400 	.word	0x00f42400
 80035c0:	007a1200 	.word	0x007a1200

080035c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035c8:	4b02      	ldr	r3, [pc, #8]	; (80035d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80035ca:	681b      	ldr	r3, [r3, #0]
}
 80035cc:	0018      	movs	r0, r3
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	20000000 	.word	0x20000000

080035d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035d8:	b5b0      	push	{r4, r5, r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80035dc:	f7ff fff2 	bl	80035c4 <HAL_RCC_GetHCLKFreq>
 80035e0:	0004      	movs	r4, r0
 80035e2:	f7ff fb3f 	bl	8002c64 <LL_RCC_GetAPB1Prescaler>
 80035e6:	0003      	movs	r3, r0
 80035e8:	0b1a      	lsrs	r2, r3, #12
 80035ea:	4b05      	ldr	r3, [pc, #20]	; (8003600 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035ec:	0092      	lsls	r2, r2, #2
 80035ee:	58d3      	ldr	r3, [r2, r3]
 80035f0:	221f      	movs	r2, #31
 80035f2:	4013      	ands	r3, r2
 80035f4:	40dc      	lsrs	r4, r3
 80035f6:	0023      	movs	r3, r4
}
 80035f8:	0018      	movs	r0, r3
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bdb0      	pop	{r4, r5, r7, pc}
 80035fe:	46c0      	nop			; (mov r8, r8)
 8003600:	0800604c 	.word	0x0800604c

08003604 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800360c:	2313      	movs	r3, #19
 800360e:	18fb      	adds	r3, r7, r3
 8003610:	2200      	movs	r2, #0
 8003612:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003614:	2312      	movs	r3, #18
 8003616:	18fb      	adds	r3, r7, r3
 8003618:	2200      	movs	r2, #0
 800361a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	2380      	movs	r3, #128	; 0x80
 8003622:	029b      	lsls	r3, r3, #10
 8003624:	4013      	ands	r3, r2
 8003626:	d100      	bne.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003628:	e0a3      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800362a:	2011      	movs	r0, #17
 800362c:	183b      	adds	r3, r7, r0
 800362e:	2200      	movs	r2, #0
 8003630:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003632:	4bc3      	ldr	r3, [pc, #780]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003634:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003636:	2380      	movs	r3, #128	; 0x80
 8003638:	055b      	lsls	r3, r3, #21
 800363a:	4013      	ands	r3, r2
 800363c:	d110      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800363e:	4bc0      	ldr	r3, [pc, #768]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003640:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003642:	4bbf      	ldr	r3, [pc, #764]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003644:	2180      	movs	r1, #128	; 0x80
 8003646:	0549      	lsls	r1, r1, #21
 8003648:	430a      	orrs	r2, r1
 800364a:	63da      	str	r2, [r3, #60]	; 0x3c
 800364c:	4bbc      	ldr	r3, [pc, #752]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800364e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003650:	2380      	movs	r3, #128	; 0x80
 8003652:	055b      	lsls	r3, r3, #21
 8003654:	4013      	ands	r3, r2
 8003656:	60bb      	str	r3, [r7, #8]
 8003658:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800365a:	183b      	adds	r3, r7, r0
 800365c:	2201      	movs	r2, #1
 800365e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003660:	4bb8      	ldr	r3, [pc, #736]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	4bb7      	ldr	r3, [pc, #732]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003666:	2180      	movs	r1, #128	; 0x80
 8003668:	0049      	lsls	r1, r1, #1
 800366a:	430a      	orrs	r2, r1
 800366c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800366e:	f7fd fe1b 	bl	80012a8 <HAL_GetTick>
 8003672:	0003      	movs	r3, r0
 8003674:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003676:	e00b      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003678:	f7fd fe16 	bl	80012a8 <HAL_GetTick>
 800367c:	0002      	movs	r2, r0
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d904      	bls.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003686:	2313      	movs	r3, #19
 8003688:	18fb      	adds	r3, r7, r3
 800368a:	2203      	movs	r2, #3
 800368c:	701a      	strb	r2, [r3, #0]
        break;
 800368e:	e005      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003690:	4bac      	ldr	r3, [pc, #688]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	2380      	movs	r3, #128	; 0x80
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	4013      	ands	r3, r2
 800369a:	d0ed      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800369c:	2313      	movs	r3, #19
 800369e:	18fb      	adds	r3, r7, r3
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d154      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036a6:	4ba6      	ldr	r3, [pc, #664]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80036a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036aa:	23c0      	movs	r3, #192	; 0xc0
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4013      	ands	r3, r2
 80036b0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d019      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d014      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036c2:	4b9f      	ldr	r3, [pc, #636]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80036c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c6:	4aa0      	ldr	r2, [pc, #640]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80036c8:	4013      	ands	r3, r2
 80036ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036cc:	4b9c      	ldr	r3, [pc, #624]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80036ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036d0:	4b9b      	ldr	r3, [pc, #620]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80036d2:	2180      	movs	r1, #128	; 0x80
 80036d4:	0249      	lsls	r1, r1, #9
 80036d6:	430a      	orrs	r2, r1
 80036d8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036da:	4b99      	ldr	r3, [pc, #612]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80036dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036de:	4b98      	ldr	r3, [pc, #608]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80036e0:	499a      	ldr	r1, [pc, #616]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80036e2:	400a      	ands	r2, r1
 80036e4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036e6:	4b96      	ldr	r3, [pc, #600]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	2201      	movs	r2, #1
 80036f0:	4013      	ands	r3, r2
 80036f2:	d016      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f4:	f7fd fdd8 	bl	80012a8 <HAL_GetTick>
 80036f8:	0003      	movs	r3, r0
 80036fa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036fc:	e00c      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036fe:	f7fd fdd3 	bl	80012a8 <HAL_GetTick>
 8003702:	0002      	movs	r2, r0
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	4a91      	ldr	r2, [pc, #580]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d904      	bls.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800370e:	2313      	movs	r3, #19
 8003710:	18fb      	adds	r3, r7, r3
 8003712:	2203      	movs	r2, #3
 8003714:	701a      	strb	r2, [r3, #0]
            break;
 8003716:	e004      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003718:	4b89      	ldr	r3, [pc, #548]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800371a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371c:	2202      	movs	r2, #2
 800371e:	4013      	ands	r3, r2
 8003720:	d0ed      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003722:	2313      	movs	r3, #19
 8003724:	18fb      	adds	r3, r7, r3
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10a      	bne.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800372c:	4b84      	ldr	r3, [pc, #528]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800372e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003730:	4a85      	ldr	r2, [pc, #532]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003732:	4013      	ands	r3, r2
 8003734:	0019      	movs	r1, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800373a:	4b81      	ldr	r3, [pc, #516]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800373c:	430a      	orrs	r2, r1
 800373e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003740:	e00c      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003742:	2312      	movs	r3, #18
 8003744:	18fb      	adds	r3, r7, r3
 8003746:	2213      	movs	r2, #19
 8003748:	18ba      	adds	r2, r7, r2
 800374a:	7812      	ldrb	r2, [r2, #0]
 800374c:	701a      	strb	r2, [r3, #0]
 800374e:	e005      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003750:	2312      	movs	r3, #18
 8003752:	18fb      	adds	r3, r7, r3
 8003754:	2213      	movs	r2, #19
 8003756:	18ba      	adds	r2, r7, r2
 8003758:	7812      	ldrb	r2, [r2, #0]
 800375a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800375c:	2311      	movs	r3, #17
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d105      	bne.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003766:	4b76      	ldr	r3, [pc, #472]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003768:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800376a:	4b75      	ldr	r3, [pc, #468]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800376c:	4979      	ldr	r1, [pc, #484]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800376e:	400a      	ands	r2, r1
 8003770:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2201      	movs	r2, #1
 8003778:	4013      	ands	r3, r2
 800377a:	d009      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800377c:	4b70      	ldr	r3, [pc, #448]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800377e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003780:	2203      	movs	r2, #3
 8003782:	4393      	bics	r3, r2
 8003784:	0019      	movs	r1, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	4b6d      	ldr	r3, [pc, #436]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800378c:	430a      	orrs	r2, r1
 800378e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2202      	movs	r2, #2
 8003796:	4013      	ands	r3, r2
 8003798:	d009      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800379a:	4b69      	ldr	r3, [pc, #420]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800379c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379e:	220c      	movs	r2, #12
 80037a0:	4393      	bics	r3, r2
 80037a2:	0019      	movs	r1, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	4b65      	ldr	r3, [pc, #404]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80037aa:	430a      	orrs	r2, r1
 80037ac:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2210      	movs	r2, #16
 80037b4:	4013      	ands	r3, r2
 80037b6:	d009      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037b8:	4b61      	ldr	r3, [pc, #388]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80037ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037bc:	4a66      	ldr	r2, [pc, #408]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80037be:	4013      	ands	r3, r2
 80037c0:	0019      	movs	r1, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68da      	ldr	r2, [r3, #12]
 80037c6:	4b5e      	ldr	r3, [pc, #376]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80037c8:	430a      	orrs	r2, r1
 80037ca:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	2380      	movs	r3, #128	; 0x80
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4013      	ands	r3, r2
 80037d6:	d009      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037d8:	4b59      	ldr	r3, [pc, #356]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80037da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037dc:	4a5f      	ldr	r2, [pc, #380]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80037de:	4013      	ands	r3, r2
 80037e0:	0019      	movs	r1, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699a      	ldr	r2, [r3, #24]
 80037e6:	4b56      	ldr	r3, [pc, #344]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80037e8:	430a      	orrs	r2, r1
 80037ea:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	2380      	movs	r3, #128	; 0x80
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	4013      	ands	r3, r2
 80037f6:	d009      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037f8:	4b51      	ldr	r3, [pc, #324]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80037fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fc:	4a58      	ldr	r2, [pc, #352]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037fe:	4013      	ands	r3, r2
 8003800:	0019      	movs	r1, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69da      	ldr	r2, [r3, #28]
 8003806:	4b4e      	ldr	r3, [pc, #312]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003808:	430a      	orrs	r2, r1
 800380a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2220      	movs	r2, #32
 8003812:	4013      	ands	r3, r2
 8003814:	d009      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003816:	4b4a      	ldr	r3, [pc, #296]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800381a:	4a52      	ldr	r2, [pc, #328]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800381c:	4013      	ands	r3, r2
 800381e:	0019      	movs	r1, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	4b46      	ldr	r3, [pc, #280]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003826:	430a      	orrs	r2, r1
 8003828:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	2380      	movs	r3, #128	; 0x80
 8003830:	01db      	lsls	r3, r3, #7
 8003832:	4013      	ands	r3, r2
 8003834:	d015      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003836:	4b42      	ldr	r3, [pc, #264]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	0899      	lsrs	r1, r3, #2
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1a      	ldr	r2, [r3, #32]
 8003842:	4b3f      	ldr	r3, [pc, #252]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003844:	430a      	orrs	r2, r1
 8003846:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a1a      	ldr	r2, [r3, #32]
 800384c:	2380      	movs	r3, #128	; 0x80
 800384e:	05db      	lsls	r3, r3, #23
 8003850:	429a      	cmp	r2, r3
 8003852:	d106      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003854:	4b3a      	ldr	r3, [pc, #232]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003856:	68da      	ldr	r2, [r3, #12]
 8003858:	4b39      	ldr	r3, [pc, #228]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800385a:	2180      	movs	r1, #128	; 0x80
 800385c:	0249      	lsls	r1, r1, #9
 800385e:	430a      	orrs	r2, r1
 8003860:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	2380      	movs	r3, #128	; 0x80
 8003868:	031b      	lsls	r3, r3, #12
 800386a:	4013      	ands	r3, r2
 800386c:	d009      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800386e:	4b34      	ldr	r3, [pc, #208]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003872:	2240      	movs	r2, #64	; 0x40
 8003874:	4393      	bics	r3, r2
 8003876:	0019      	movs	r1, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800387c:	4b30      	ldr	r3, [pc, #192]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800387e:	430a      	orrs	r2, r1
 8003880:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	2380      	movs	r3, #128	; 0x80
 8003888:	039b      	lsls	r3, r3, #14
 800388a:	4013      	ands	r3, r2
 800388c:	d016      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800388e:	4b2c      	ldr	r3, [pc, #176]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003892:	4a35      	ldr	r2, [pc, #212]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003894:	4013      	ands	r3, r2
 8003896:	0019      	movs	r1, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800389c:	4b28      	ldr	r3, [pc, #160]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800389e:	430a      	orrs	r2, r1
 80038a0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038a6:	2380      	movs	r3, #128	; 0x80
 80038a8:	03db      	lsls	r3, r3, #15
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d106      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80038ae:	4b24      	ldr	r3, [pc, #144]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038b0:	68da      	ldr	r2, [r3, #12]
 80038b2:	4b23      	ldr	r3, [pc, #140]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038b4:	2180      	movs	r1, #128	; 0x80
 80038b6:	0449      	lsls	r1, r1, #17
 80038b8:	430a      	orrs	r2, r1
 80038ba:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	2380      	movs	r3, #128	; 0x80
 80038c2:	03db      	lsls	r3, r3, #15
 80038c4:	4013      	ands	r3, r2
 80038c6:	d016      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80038c8:	4b1d      	ldr	r3, [pc, #116]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038cc:	4a27      	ldr	r2, [pc, #156]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80038ce:	4013      	ands	r3, r2
 80038d0:	0019      	movs	r1, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d6:	4b1a      	ldr	r3, [pc, #104]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038d8:	430a      	orrs	r2, r1
 80038da:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e0:	2380      	movs	r3, #128	; 0x80
 80038e2:	045b      	lsls	r3, r3, #17
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d106      	bne.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80038e8:	4b15      	ldr	r3, [pc, #84]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	4b14      	ldr	r3, [pc, #80]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038ee:	2180      	movs	r1, #128	; 0x80
 80038f0:	0449      	lsls	r1, r1, #17
 80038f2:	430a      	orrs	r2, r1
 80038f4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	2380      	movs	r3, #128	; 0x80
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	4013      	ands	r3, r2
 8003900:	d016      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003902:	4b0f      	ldr	r3, [pc, #60]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003906:	4a1a      	ldr	r2, [pc, #104]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8003908:	4013      	ands	r3, r2
 800390a:	0019      	movs	r1, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	695a      	ldr	r2, [r3, #20]
 8003910:	4b0b      	ldr	r3, [pc, #44]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003912:	430a      	orrs	r2, r1
 8003914:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	695a      	ldr	r2, [r3, #20]
 800391a:	2380      	movs	r3, #128	; 0x80
 800391c:	01db      	lsls	r3, r3, #7
 800391e:	429a      	cmp	r2, r3
 8003920:	d106      	bne.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003922:	4b07      	ldr	r3, [pc, #28]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003924:	68da      	ldr	r2, [r3, #12]
 8003926:	4b06      	ldr	r3, [pc, #24]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003928:	2180      	movs	r1, #128	; 0x80
 800392a:	0249      	lsls	r1, r1, #9
 800392c:	430a      	orrs	r2, r1
 800392e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003930:	2312      	movs	r3, #18
 8003932:	18fb      	adds	r3, r7, r3
 8003934:	781b      	ldrb	r3, [r3, #0]
}
 8003936:	0018      	movs	r0, r3
 8003938:	46bd      	mov	sp, r7
 800393a:	b006      	add	sp, #24
 800393c:	bd80      	pop	{r7, pc}
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	40021000 	.word	0x40021000
 8003944:	40007000 	.word	0x40007000
 8003948:	fffffcff 	.word	0xfffffcff
 800394c:	fffeffff 	.word	0xfffeffff
 8003950:	00001388 	.word	0x00001388
 8003954:	efffffff 	.word	0xefffffff
 8003958:	fffff3ff 	.word	0xfffff3ff
 800395c:	fff3ffff 	.word	0xfff3ffff
 8003960:	ffcfffff 	.word	0xffcfffff
 8003964:	ffffcfff 	.word	0xffffcfff
 8003968:	ffbfffff 	.word	0xffbfffff
 800396c:	feffffff 	.word	0xfeffffff
 8003970:	ffff3fff 	.word	0xffff3fff

08003974 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e04a      	b.n	8003a1c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	223d      	movs	r2, #61	; 0x3d
 800398a:	5c9b      	ldrb	r3, [r3, r2]
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d107      	bne.n	80039a2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	223c      	movs	r2, #60	; 0x3c
 8003996:	2100      	movs	r1, #0
 8003998:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	0018      	movs	r0, r3
 800399e:	f7fd faa9 	bl	8000ef4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	223d      	movs	r2, #61	; 0x3d
 80039a6:	2102      	movs	r1, #2
 80039a8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	3304      	adds	r3, #4
 80039b2:	0019      	movs	r1, r3
 80039b4:	0010      	movs	r0, r2
 80039b6:	f000 f90b 	bl	8003bd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2248      	movs	r2, #72	; 0x48
 80039be:	2101      	movs	r1, #1
 80039c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	223e      	movs	r2, #62	; 0x3e
 80039c6:	2101      	movs	r1, #1
 80039c8:	5499      	strb	r1, [r3, r2]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	223f      	movs	r2, #63	; 0x3f
 80039ce:	2101      	movs	r1, #1
 80039d0:	5499      	strb	r1, [r3, r2]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2240      	movs	r2, #64	; 0x40
 80039d6:	2101      	movs	r1, #1
 80039d8:	5499      	strb	r1, [r3, r2]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2241      	movs	r2, #65	; 0x41
 80039de:	2101      	movs	r1, #1
 80039e0:	5499      	strb	r1, [r3, r2]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2242      	movs	r2, #66	; 0x42
 80039e6:	2101      	movs	r1, #1
 80039e8:	5499      	strb	r1, [r3, r2]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2243      	movs	r2, #67	; 0x43
 80039ee:	2101      	movs	r1, #1
 80039f0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2244      	movs	r2, #68	; 0x44
 80039f6:	2101      	movs	r1, #1
 80039f8:	5499      	strb	r1, [r3, r2]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2245      	movs	r2, #69	; 0x45
 80039fe:	2101      	movs	r1, #1
 8003a00:	5499      	strb	r1, [r3, r2]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2246      	movs	r2, #70	; 0x46
 8003a06:	2101      	movs	r1, #1
 8003a08:	5499      	strb	r1, [r3, r2]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2247      	movs	r2, #71	; 0x47
 8003a0e:	2101      	movs	r1, #1
 8003a10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	223d      	movs	r2, #61	; 0x3d
 8003a16:	2101      	movs	r1, #1
 8003a18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	b002      	add	sp, #8
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a2e:	230f      	movs	r3, #15
 8003a30:	18fb      	adds	r3, r7, r3
 8003a32:	2200      	movs	r2, #0
 8003a34:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	223c      	movs	r2, #60	; 0x3c
 8003a3a:	5c9b      	ldrb	r3, [r3, r2]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d101      	bne.n	8003a44 <HAL_TIM_ConfigClockSource+0x20>
 8003a40:	2302      	movs	r3, #2
 8003a42:	e0bc      	b.n	8003bbe <HAL_TIM_ConfigClockSource+0x19a>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	223c      	movs	r2, #60	; 0x3c
 8003a48:	2101      	movs	r1, #1
 8003a4a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	223d      	movs	r2, #61	; 0x3d
 8003a50:	2102      	movs	r1, #2
 8003a52:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	4a5a      	ldr	r2, [pc, #360]	; (8003bc8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003a60:	4013      	ands	r3, r2
 8003a62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	4a59      	ldr	r2, [pc, #356]	; (8003bcc <HAL_TIM_ConfigClockSource+0x1a8>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2280      	movs	r2, #128	; 0x80
 8003a7a:	0192      	lsls	r2, r2, #6
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d040      	beq.n	8003b02 <HAL_TIM_ConfigClockSource+0xde>
 8003a80:	2280      	movs	r2, #128	; 0x80
 8003a82:	0192      	lsls	r2, r2, #6
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d900      	bls.n	8003a8a <HAL_TIM_ConfigClockSource+0x66>
 8003a88:	e088      	b.n	8003b9c <HAL_TIM_ConfigClockSource+0x178>
 8003a8a:	2280      	movs	r2, #128	; 0x80
 8003a8c:	0152      	lsls	r2, r2, #5
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d100      	bne.n	8003a94 <HAL_TIM_ConfigClockSource+0x70>
 8003a92:	e088      	b.n	8003ba6 <HAL_TIM_ConfigClockSource+0x182>
 8003a94:	2280      	movs	r2, #128	; 0x80
 8003a96:	0152      	lsls	r2, r2, #5
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d900      	bls.n	8003a9e <HAL_TIM_ConfigClockSource+0x7a>
 8003a9c:	e07e      	b.n	8003b9c <HAL_TIM_ConfigClockSource+0x178>
 8003a9e:	2b70      	cmp	r3, #112	; 0x70
 8003aa0:	d018      	beq.n	8003ad4 <HAL_TIM_ConfigClockSource+0xb0>
 8003aa2:	d900      	bls.n	8003aa6 <HAL_TIM_ConfigClockSource+0x82>
 8003aa4:	e07a      	b.n	8003b9c <HAL_TIM_ConfigClockSource+0x178>
 8003aa6:	2b60      	cmp	r3, #96	; 0x60
 8003aa8:	d04f      	beq.n	8003b4a <HAL_TIM_ConfigClockSource+0x126>
 8003aaa:	d900      	bls.n	8003aae <HAL_TIM_ConfigClockSource+0x8a>
 8003aac:	e076      	b.n	8003b9c <HAL_TIM_ConfigClockSource+0x178>
 8003aae:	2b50      	cmp	r3, #80	; 0x50
 8003ab0:	d03b      	beq.n	8003b2a <HAL_TIM_ConfigClockSource+0x106>
 8003ab2:	d900      	bls.n	8003ab6 <HAL_TIM_ConfigClockSource+0x92>
 8003ab4:	e072      	b.n	8003b9c <HAL_TIM_ConfigClockSource+0x178>
 8003ab6:	2b40      	cmp	r3, #64	; 0x40
 8003ab8:	d057      	beq.n	8003b6a <HAL_TIM_ConfigClockSource+0x146>
 8003aba:	d900      	bls.n	8003abe <HAL_TIM_ConfigClockSource+0x9a>
 8003abc:	e06e      	b.n	8003b9c <HAL_TIM_ConfigClockSource+0x178>
 8003abe:	2b30      	cmp	r3, #48	; 0x30
 8003ac0:	d063      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0x166>
 8003ac2:	d86b      	bhi.n	8003b9c <HAL_TIM_ConfigClockSource+0x178>
 8003ac4:	2b20      	cmp	r3, #32
 8003ac6:	d060      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0x166>
 8003ac8:	d868      	bhi.n	8003b9c <HAL_TIM_ConfigClockSource+0x178>
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d05d      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0x166>
 8003ace:	2b10      	cmp	r3, #16
 8003ad0:	d05b      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0x166>
 8003ad2:	e063      	b.n	8003b9c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ae4:	f000 f97e 	bl	8003de4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	2277      	movs	r2, #119	; 0x77
 8003af4:	4313      	orrs	r3, r2
 8003af6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	609a      	str	r2, [r3, #8]
      break;
 8003b00:	e052      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b12:	f000 f967 	bl	8003de4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2180      	movs	r1, #128	; 0x80
 8003b22:	01c9      	lsls	r1, r1, #7
 8003b24:	430a      	orrs	r2, r1
 8003b26:	609a      	str	r2, [r3, #8]
      break;
 8003b28:	e03e      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b36:	001a      	movs	r2, r3
 8003b38:	f000 f8d8 	bl	8003cec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2150      	movs	r1, #80	; 0x50
 8003b42:	0018      	movs	r0, r3
 8003b44:	f000 f932 	bl	8003dac <TIM_ITRx_SetConfig>
      break;
 8003b48:	e02e      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b56:	001a      	movs	r2, r3
 8003b58:	f000 f8f6 	bl	8003d48 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2160      	movs	r1, #96	; 0x60
 8003b62:	0018      	movs	r0, r3
 8003b64:	f000 f922 	bl	8003dac <TIM_ITRx_SetConfig>
      break;
 8003b68:	e01e      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b76:	001a      	movs	r2, r3
 8003b78:	f000 f8b8 	bl	8003cec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2140      	movs	r1, #64	; 0x40
 8003b82:	0018      	movs	r0, r3
 8003b84:	f000 f912 	bl	8003dac <TIM_ITRx_SetConfig>
      break;
 8003b88:	e00e      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	0019      	movs	r1, r3
 8003b94:	0010      	movs	r0, r2
 8003b96:	f000 f909 	bl	8003dac <TIM_ITRx_SetConfig>
      break;
 8003b9a:	e005      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003b9c:	230f      	movs	r3, #15
 8003b9e:	18fb      	adds	r3, r7, r3
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	701a      	strb	r2, [r3, #0]
      break;
 8003ba4:	e000      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003ba6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	223d      	movs	r2, #61	; 0x3d
 8003bac:	2101      	movs	r1, #1
 8003bae:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	223c      	movs	r2, #60	; 0x3c
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	5499      	strb	r1, [r3, r2]

  return status;
 8003bb8:	230f      	movs	r3, #15
 8003bba:	18fb      	adds	r3, r7, r3
 8003bbc:	781b      	ldrb	r3, [r3, #0]
}
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	b004      	add	sp, #16
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	46c0      	nop			; (mov r8, r8)
 8003bc8:	ffceff88 	.word	0xffceff88
 8003bcc:	ffff00ff 	.word	0xffff00ff

08003bd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a3b      	ldr	r2, [pc, #236]	; (8003cd0 <TIM_Base_SetConfig+0x100>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d008      	beq.n	8003bfa <TIM_Base_SetConfig+0x2a>
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	2380      	movs	r3, #128	; 0x80
 8003bec:	05db      	lsls	r3, r3, #23
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d003      	beq.n	8003bfa <TIM_Base_SetConfig+0x2a>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a37      	ldr	r2, [pc, #220]	; (8003cd4 <TIM_Base_SetConfig+0x104>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d108      	bne.n	8003c0c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2270      	movs	r2, #112	; 0x70
 8003bfe:	4393      	bics	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a30      	ldr	r2, [pc, #192]	; (8003cd0 <TIM_Base_SetConfig+0x100>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d018      	beq.n	8003c46 <TIM_Base_SetConfig+0x76>
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	2380      	movs	r3, #128	; 0x80
 8003c18:	05db      	lsls	r3, r3, #23
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d013      	beq.n	8003c46 <TIM_Base_SetConfig+0x76>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a2c      	ldr	r2, [pc, #176]	; (8003cd4 <TIM_Base_SetConfig+0x104>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d00f      	beq.n	8003c46 <TIM_Base_SetConfig+0x76>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a2b      	ldr	r2, [pc, #172]	; (8003cd8 <TIM_Base_SetConfig+0x108>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d00b      	beq.n	8003c46 <TIM_Base_SetConfig+0x76>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a2a      	ldr	r2, [pc, #168]	; (8003cdc <TIM_Base_SetConfig+0x10c>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d007      	beq.n	8003c46 <TIM_Base_SetConfig+0x76>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a29      	ldr	r2, [pc, #164]	; (8003ce0 <TIM_Base_SetConfig+0x110>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d003      	beq.n	8003c46 <TIM_Base_SetConfig+0x76>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a28      	ldr	r2, [pc, #160]	; (8003ce4 <TIM_Base_SetConfig+0x114>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d108      	bne.n	8003c58 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	4a27      	ldr	r2, [pc, #156]	; (8003ce8 <TIM_Base_SetConfig+0x118>)
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2280      	movs	r2, #128	; 0x80
 8003c5c:	4393      	bics	r3, r2
 8003c5e:	001a      	movs	r2, r3
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	689a      	ldr	r2, [r3, #8]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a13      	ldr	r2, [pc, #76]	; (8003cd0 <TIM_Base_SetConfig+0x100>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d00b      	beq.n	8003c9e <TIM_Base_SetConfig+0xce>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a14      	ldr	r2, [pc, #80]	; (8003cdc <TIM_Base_SetConfig+0x10c>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d007      	beq.n	8003c9e <TIM_Base_SetConfig+0xce>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a13      	ldr	r2, [pc, #76]	; (8003ce0 <TIM_Base_SetConfig+0x110>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d003      	beq.n	8003c9e <TIM_Base_SetConfig+0xce>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a12      	ldr	r2, [pc, #72]	; (8003ce4 <TIM_Base_SetConfig+0x114>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d103      	bne.n	8003ca6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	691a      	ldr	r2, [r3, #16]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d106      	bne.n	8003cc6 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	4393      	bics	r3, r2
 8003cc0:	001a      	movs	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	611a      	str	r2, [r3, #16]
  }
}
 8003cc6:	46c0      	nop			; (mov r8, r8)
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	b004      	add	sp, #16
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	46c0      	nop			; (mov r8, r8)
 8003cd0:	40012c00 	.word	0x40012c00
 8003cd4:	40000400 	.word	0x40000400
 8003cd8:	40002000 	.word	0x40002000
 8003cdc:	40014000 	.word	0x40014000
 8003ce0:	40014400 	.word	0x40014400
 8003ce4:	40014800 	.word	0x40014800
 8003ce8:	fffffcff 	.word	0xfffffcff

08003cec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	2201      	movs	r2, #1
 8003d04:	4393      	bics	r3, r2
 8003d06:	001a      	movs	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	22f0      	movs	r2, #240	; 0xf0
 8003d16:	4393      	bics	r3, r2
 8003d18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	220a      	movs	r2, #10
 8003d28:	4393      	bics	r3, r2
 8003d2a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	621a      	str	r2, [r3, #32]
}
 8003d40:	46c0      	nop			; (mov r8, r8)
 8003d42:	46bd      	mov	sp, r7
 8003d44:	b006      	add	sp, #24
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	2210      	movs	r2, #16
 8003d60:	4393      	bics	r3, r2
 8003d62:	001a      	movs	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	4a0d      	ldr	r2, [pc, #52]	; (8003da8 <TIM_TI2_ConfigInputStage+0x60>)
 8003d72:	4013      	ands	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	031b      	lsls	r3, r3, #12
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	22a0      	movs	r2, #160	; 0xa0
 8003d84:	4393      	bics	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	011b      	lsls	r3, r3, #4
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	621a      	str	r2, [r3, #32]
}
 8003d9e:	46c0      	nop			; (mov r8, r8)
 8003da0:	46bd      	mov	sp, r7
 8003da2:	b006      	add	sp, #24
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	46c0      	nop			; (mov r8, r8)
 8003da8:	ffff0fff 	.word	0xffff0fff

08003dac <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4a08      	ldr	r2, [pc, #32]	; (8003de0 <TIM_ITRx_SetConfig+0x34>)
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	2207      	movs	r2, #7
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	609a      	str	r2, [r3, #8]
}
 8003dd6:	46c0      	nop			; (mov r8, r8)
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	b004      	add	sp, #16
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	ffcfff8f 	.word	0xffcfff8f

08003de4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
 8003df0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	4a09      	ldr	r2, [pc, #36]	; (8003e20 <TIM_ETR_SetConfig+0x3c>)
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	021a      	lsls	r2, r3, #8
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	431a      	orrs	r2, r3
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	609a      	str	r2, [r3, #8]
}
 8003e18:	46c0      	nop			; (mov r8, r8)
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	b006      	add	sp, #24
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	ffff00ff 	.word	0xffff00ff

08003e24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	223c      	movs	r2, #60	; 0x3c
 8003e32:	5c9b      	ldrb	r3, [r3, r2]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d101      	bne.n	8003e3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e38:	2302      	movs	r3, #2
 8003e3a:	e055      	b.n	8003ee8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	223c      	movs	r2, #60	; 0x3c
 8003e40:	2101      	movs	r1, #1
 8003e42:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	223d      	movs	r2, #61	; 0x3d
 8003e48:	2102      	movs	r1, #2
 8003e4a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a23      	ldr	r2, [pc, #140]	; (8003ef0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d108      	bne.n	8003e78 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	4a22      	ldr	r2, [pc, #136]	; (8003ef4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2270      	movs	r2, #112	; 0x70
 8003e7c:	4393      	bics	r3, r2
 8003e7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a16      	ldr	r2, [pc, #88]	; (8003ef0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d00f      	beq.n	8003ebc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	2380      	movs	r3, #128	; 0x80
 8003ea2:	05db      	lsls	r3, r3, #23
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d009      	beq.n	8003ebc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a12      	ldr	r2, [pc, #72]	; (8003ef8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d004      	beq.n	8003ebc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a11      	ldr	r2, [pc, #68]	; (8003efc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d10c      	bne.n	8003ed6 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2280      	movs	r2, #128	; 0x80
 8003ec0:	4393      	bics	r3, r2
 8003ec2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	223d      	movs	r2, #61	; 0x3d
 8003eda:	2101      	movs	r1, #1
 8003edc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	223c      	movs	r2, #60	; 0x3c
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	0018      	movs	r0, r3
 8003eea:	46bd      	mov	sp, r7
 8003eec:	b004      	add	sp, #16
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	40012c00 	.word	0x40012c00
 8003ef4:	ff0fffff 	.word	0xff0fffff
 8003ef8:	40000400 	.word	0x40000400
 8003efc:	40014000 	.word	0x40014000

08003f00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e046      	b.n	8003fa0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2288      	movs	r2, #136	; 0x88
 8003f16:	589b      	ldr	r3, [r3, r2]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d107      	bne.n	8003f2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2284      	movs	r2, #132	; 0x84
 8003f20:	2100      	movs	r1, #0
 8003f22:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	0018      	movs	r0, r3
 8003f28:	f7fd f800 	bl	8000f2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2288      	movs	r2, #136	; 0x88
 8003f30:	2124      	movs	r1, #36	; 0x24
 8003f32:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2101      	movs	r1, #1
 8003f40:	438a      	bics	r2, r1
 8003f42:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d003      	beq.n	8003f54 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	0018      	movs	r0, r3
 8003f50:	f000 fb8e 	bl	8004670 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	0018      	movs	r0, r3
 8003f58:	f000 f8cc 	bl	80040f4 <UART_SetConfig>
 8003f5c:	0003      	movs	r3, r0
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d101      	bne.n	8003f66 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e01c      	b.n	8003fa0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	490d      	ldr	r1, [pc, #52]	; (8003fa8 <HAL_UART_Init+0xa8>)
 8003f72:	400a      	ands	r2, r1
 8003f74:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	212a      	movs	r1, #42	; 0x2a
 8003f82:	438a      	bics	r2, r1
 8003f84:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2101      	movs	r1, #1
 8003f92:	430a      	orrs	r2, r1
 8003f94:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f000 fc1d 	bl	80047d8 <UART_CheckIdleState>
 8003f9e:	0003      	movs	r3, r0
}
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	b002      	add	sp, #8
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	ffffb7ff 	.word	0xffffb7ff

08003fac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b08a      	sub	sp, #40	; 0x28
 8003fb0:	af02      	add	r7, sp, #8
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	603b      	str	r3, [r7, #0]
 8003fb8:	1dbb      	adds	r3, r7, #6
 8003fba:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2288      	movs	r2, #136	; 0x88
 8003fc0:	589b      	ldr	r3, [r3, r2]
 8003fc2:	2b20      	cmp	r3, #32
 8003fc4:	d000      	beq.n	8003fc8 <HAL_UART_Transmit+0x1c>
 8003fc6:	e090      	b.n	80040ea <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <HAL_UART_Transmit+0x2a>
 8003fce:	1dbb      	adds	r3, r7, #6
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e088      	b.n	80040ec <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	689a      	ldr	r2, [r3, #8]
 8003fde:	2380      	movs	r3, #128	; 0x80
 8003fe0:	015b      	lsls	r3, r3, #5
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d109      	bne.n	8003ffa <HAL_UART_Transmit+0x4e>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d105      	bne.n	8003ffa <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	d001      	beq.n	8003ffa <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e078      	b.n	80040ec <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2290      	movs	r2, #144	; 0x90
 8003ffe:	2100      	movs	r1, #0
 8004000:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2288      	movs	r2, #136	; 0x88
 8004006:	2121      	movs	r1, #33	; 0x21
 8004008:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800400a:	f7fd f94d 	bl	80012a8 <HAL_GetTick>
 800400e:	0003      	movs	r3, r0
 8004010:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	1dba      	adds	r2, r7, #6
 8004016:	2154      	movs	r1, #84	; 0x54
 8004018:	8812      	ldrh	r2, [r2, #0]
 800401a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	1dba      	adds	r2, r7, #6
 8004020:	2156      	movs	r1, #86	; 0x56
 8004022:	8812      	ldrh	r2, [r2, #0]
 8004024:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	689a      	ldr	r2, [r3, #8]
 800402a:	2380      	movs	r3, #128	; 0x80
 800402c:	015b      	lsls	r3, r3, #5
 800402e:	429a      	cmp	r2, r3
 8004030:	d108      	bne.n	8004044 <HAL_UART_Transmit+0x98>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d104      	bne.n	8004044 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800403a:	2300      	movs	r3, #0
 800403c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	61bb      	str	r3, [r7, #24]
 8004042:	e003      	b.n	800404c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004048:	2300      	movs	r3, #0
 800404a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800404c:	e030      	b.n	80040b0 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	9300      	str	r3, [sp, #0]
 8004056:	0013      	movs	r3, r2
 8004058:	2200      	movs	r2, #0
 800405a:	2180      	movs	r1, #128	; 0x80
 800405c:	f000 fc66 	bl	800492c <UART_WaitOnFlagUntilTimeout>
 8004060:	1e03      	subs	r3, r0, #0
 8004062:	d005      	beq.n	8004070 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2288      	movs	r2, #136	; 0x88
 8004068:	2120      	movs	r1, #32
 800406a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e03d      	b.n	80040ec <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10b      	bne.n	800408e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	881b      	ldrh	r3, [r3, #0]
 800407a:	001a      	movs	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	05d2      	lsls	r2, r2, #23
 8004082:	0dd2      	lsrs	r2, r2, #23
 8004084:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	3302      	adds	r3, #2
 800408a:	61bb      	str	r3, [r7, #24]
 800408c:	e007      	b.n	800409e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	781a      	ldrb	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	3301      	adds	r3, #1
 800409c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2256      	movs	r2, #86	; 0x56
 80040a2:	5a9b      	ldrh	r3, [r3, r2]
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	3b01      	subs	r3, #1
 80040a8:	b299      	uxth	r1, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2256      	movs	r2, #86	; 0x56
 80040ae:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2256      	movs	r2, #86	; 0x56
 80040b4:	5a9b      	ldrh	r3, [r3, r2]
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1c8      	bne.n	800404e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	0013      	movs	r3, r2
 80040c6:	2200      	movs	r2, #0
 80040c8:	2140      	movs	r1, #64	; 0x40
 80040ca:	f000 fc2f 	bl	800492c <UART_WaitOnFlagUntilTimeout>
 80040ce:	1e03      	subs	r3, r0, #0
 80040d0:	d005      	beq.n	80040de <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2288      	movs	r2, #136	; 0x88
 80040d6:	2120      	movs	r1, #32
 80040d8:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e006      	b.n	80040ec <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2288      	movs	r2, #136	; 0x88
 80040e2:	2120      	movs	r1, #32
 80040e4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80040e6:	2300      	movs	r3, #0
 80040e8:	e000      	b.n	80040ec <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80040ea:	2302      	movs	r3, #2
  }
}
 80040ec:	0018      	movs	r0, r3
 80040ee:	46bd      	mov	sp, r7
 80040f0:	b008      	add	sp, #32
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040f4:	b5b0      	push	{r4, r5, r7, lr}
 80040f6:	b090      	sub	sp, #64	; 0x40
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040fc:	231a      	movs	r3, #26
 80040fe:	2220      	movs	r2, #32
 8004100:	189b      	adds	r3, r3, r2
 8004102:	19db      	adds	r3, r3, r7
 8004104:	2200      	movs	r2, #0
 8004106:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	431a      	orrs	r2, r3
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	431a      	orrs	r2, r3
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	69db      	ldr	r3, [r3, #28]
 800411c:	4313      	orrs	r3, r2
 800411e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4aaf      	ldr	r2, [pc, #700]	; (80043e4 <UART_SetConfig+0x2f0>)
 8004128:	4013      	ands	r3, r2
 800412a:	0019      	movs	r1, r3
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004132:	430b      	orrs	r3, r1
 8004134:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	4aaa      	ldr	r2, [pc, #680]	; (80043e8 <UART_SetConfig+0x2f4>)
 800413e:	4013      	ands	r3, r2
 8004140:	0018      	movs	r0, r3
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004144:	68d9      	ldr	r1, [r3, #12]
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	0003      	movs	r3, r0
 800414c:	430b      	orrs	r3, r1
 800414e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4aa4      	ldr	r2, [pc, #656]	; (80043ec <UART_SetConfig+0x2f8>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d004      	beq.n	800416a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004166:	4313      	orrs	r3, r2
 8004168:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	4a9f      	ldr	r2, [pc, #636]	; (80043f0 <UART_SetConfig+0x2fc>)
 8004172:	4013      	ands	r3, r2
 8004174:	0019      	movs	r1, r3
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800417c:	430b      	orrs	r3, r1
 800417e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004186:	220f      	movs	r2, #15
 8004188:	4393      	bics	r3, r2
 800418a:	0018      	movs	r0, r3
 800418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	0003      	movs	r3, r0
 8004196:	430b      	orrs	r3, r1
 8004198:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a95      	ldr	r2, [pc, #596]	; (80043f4 <UART_SetConfig+0x300>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d131      	bne.n	8004208 <UART_SetConfig+0x114>
 80041a4:	4b94      	ldr	r3, [pc, #592]	; (80043f8 <UART_SetConfig+0x304>)
 80041a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a8:	2203      	movs	r2, #3
 80041aa:	4013      	ands	r3, r2
 80041ac:	2b03      	cmp	r3, #3
 80041ae:	d01d      	beq.n	80041ec <UART_SetConfig+0xf8>
 80041b0:	d823      	bhi.n	80041fa <UART_SetConfig+0x106>
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d00c      	beq.n	80041d0 <UART_SetConfig+0xdc>
 80041b6:	d820      	bhi.n	80041fa <UART_SetConfig+0x106>
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d002      	beq.n	80041c2 <UART_SetConfig+0xce>
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d00e      	beq.n	80041de <UART_SetConfig+0xea>
 80041c0:	e01b      	b.n	80041fa <UART_SetConfig+0x106>
 80041c2:	231b      	movs	r3, #27
 80041c4:	2220      	movs	r2, #32
 80041c6:	189b      	adds	r3, r3, r2
 80041c8:	19db      	adds	r3, r3, r7
 80041ca:	2200      	movs	r2, #0
 80041cc:	701a      	strb	r2, [r3, #0]
 80041ce:	e0b4      	b.n	800433a <UART_SetConfig+0x246>
 80041d0:	231b      	movs	r3, #27
 80041d2:	2220      	movs	r2, #32
 80041d4:	189b      	adds	r3, r3, r2
 80041d6:	19db      	adds	r3, r3, r7
 80041d8:	2202      	movs	r2, #2
 80041da:	701a      	strb	r2, [r3, #0]
 80041dc:	e0ad      	b.n	800433a <UART_SetConfig+0x246>
 80041de:	231b      	movs	r3, #27
 80041e0:	2220      	movs	r2, #32
 80041e2:	189b      	adds	r3, r3, r2
 80041e4:	19db      	adds	r3, r3, r7
 80041e6:	2204      	movs	r2, #4
 80041e8:	701a      	strb	r2, [r3, #0]
 80041ea:	e0a6      	b.n	800433a <UART_SetConfig+0x246>
 80041ec:	231b      	movs	r3, #27
 80041ee:	2220      	movs	r2, #32
 80041f0:	189b      	adds	r3, r3, r2
 80041f2:	19db      	adds	r3, r3, r7
 80041f4:	2208      	movs	r2, #8
 80041f6:	701a      	strb	r2, [r3, #0]
 80041f8:	e09f      	b.n	800433a <UART_SetConfig+0x246>
 80041fa:	231b      	movs	r3, #27
 80041fc:	2220      	movs	r2, #32
 80041fe:	189b      	adds	r3, r3, r2
 8004200:	19db      	adds	r3, r3, r7
 8004202:	2210      	movs	r2, #16
 8004204:	701a      	strb	r2, [r3, #0]
 8004206:	e098      	b.n	800433a <UART_SetConfig+0x246>
 8004208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a7b      	ldr	r2, [pc, #492]	; (80043fc <UART_SetConfig+0x308>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d131      	bne.n	8004276 <UART_SetConfig+0x182>
 8004212:	4b79      	ldr	r3, [pc, #484]	; (80043f8 <UART_SetConfig+0x304>)
 8004214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004216:	220c      	movs	r2, #12
 8004218:	4013      	ands	r3, r2
 800421a:	2b0c      	cmp	r3, #12
 800421c:	d01d      	beq.n	800425a <UART_SetConfig+0x166>
 800421e:	d823      	bhi.n	8004268 <UART_SetConfig+0x174>
 8004220:	2b08      	cmp	r3, #8
 8004222:	d00c      	beq.n	800423e <UART_SetConfig+0x14a>
 8004224:	d820      	bhi.n	8004268 <UART_SetConfig+0x174>
 8004226:	2b00      	cmp	r3, #0
 8004228:	d002      	beq.n	8004230 <UART_SetConfig+0x13c>
 800422a:	2b04      	cmp	r3, #4
 800422c:	d00e      	beq.n	800424c <UART_SetConfig+0x158>
 800422e:	e01b      	b.n	8004268 <UART_SetConfig+0x174>
 8004230:	231b      	movs	r3, #27
 8004232:	2220      	movs	r2, #32
 8004234:	189b      	adds	r3, r3, r2
 8004236:	19db      	adds	r3, r3, r7
 8004238:	2200      	movs	r2, #0
 800423a:	701a      	strb	r2, [r3, #0]
 800423c:	e07d      	b.n	800433a <UART_SetConfig+0x246>
 800423e:	231b      	movs	r3, #27
 8004240:	2220      	movs	r2, #32
 8004242:	189b      	adds	r3, r3, r2
 8004244:	19db      	adds	r3, r3, r7
 8004246:	2202      	movs	r2, #2
 8004248:	701a      	strb	r2, [r3, #0]
 800424a:	e076      	b.n	800433a <UART_SetConfig+0x246>
 800424c:	231b      	movs	r3, #27
 800424e:	2220      	movs	r2, #32
 8004250:	189b      	adds	r3, r3, r2
 8004252:	19db      	adds	r3, r3, r7
 8004254:	2204      	movs	r2, #4
 8004256:	701a      	strb	r2, [r3, #0]
 8004258:	e06f      	b.n	800433a <UART_SetConfig+0x246>
 800425a:	231b      	movs	r3, #27
 800425c:	2220      	movs	r2, #32
 800425e:	189b      	adds	r3, r3, r2
 8004260:	19db      	adds	r3, r3, r7
 8004262:	2208      	movs	r2, #8
 8004264:	701a      	strb	r2, [r3, #0]
 8004266:	e068      	b.n	800433a <UART_SetConfig+0x246>
 8004268:	231b      	movs	r3, #27
 800426a:	2220      	movs	r2, #32
 800426c:	189b      	adds	r3, r3, r2
 800426e:	19db      	adds	r3, r3, r7
 8004270:	2210      	movs	r2, #16
 8004272:	701a      	strb	r2, [r3, #0]
 8004274:	e061      	b.n	800433a <UART_SetConfig+0x246>
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a61      	ldr	r2, [pc, #388]	; (8004400 <UART_SetConfig+0x30c>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d106      	bne.n	800428e <UART_SetConfig+0x19a>
 8004280:	231b      	movs	r3, #27
 8004282:	2220      	movs	r2, #32
 8004284:	189b      	adds	r3, r3, r2
 8004286:	19db      	adds	r3, r3, r7
 8004288:	2200      	movs	r2, #0
 800428a:	701a      	strb	r2, [r3, #0]
 800428c:	e055      	b.n	800433a <UART_SetConfig+0x246>
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a5c      	ldr	r2, [pc, #368]	; (8004404 <UART_SetConfig+0x310>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d106      	bne.n	80042a6 <UART_SetConfig+0x1b2>
 8004298:	231b      	movs	r3, #27
 800429a:	2220      	movs	r2, #32
 800429c:	189b      	adds	r3, r3, r2
 800429e:	19db      	adds	r3, r3, r7
 80042a0:	2200      	movs	r2, #0
 80042a2:	701a      	strb	r2, [r3, #0]
 80042a4:	e049      	b.n	800433a <UART_SetConfig+0x246>
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a50      	ldr	r2, [pc, #320]	; (80043ec <UART_SetConfig+0x2f8>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d13e      	bne.n	800432e <UART_SetConfig+0x23a>
 80042b0:	4b51      	ldr	r3, [pc, #324]	; (80043f8 <UART_SetConfig+0x304>)
 80042b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042b4:	23c0      	movs	r3, #192	; 0xc0
 80042b6:	011b      	lsls	r3, r3, #4
 80042b8:	4013      	ands	r3, r2
 80042ba:	22c0      	movs	r2, #192	; 0xc0
 80042bc:	0112      	lsls	r2, r2, #4
 80042be:	4293      	cmp	r3, r2
 80042c0:	d027      	beq.n	8004312 <UART_SetConfig+0x21e>
 80042c2:	22c0      	movs	r2, #192	; 0xc0
 80042c4:	0112      	lsls	r2, r2, #4
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d82a      	bhi.n	8004320 <UART_SetConfig+0x22c>
 80042ca:	2280      	movs	r2, #128	; 0x80
 80042cc:	0112      	lsls	r2, r2, #4
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d011      	beq.n	80042f6 <UART_SetConfig+0x202>
 80042d2:	2280      	movs	r2, #128	; 0x80
 80042d4:	0112      	lsls	r2, r2, #4
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d822      	bhi.n	8004320 <UART_SetConfig+0x22c>
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d004      	beq.n	80042e8 <UART_SetConfig+0x1f4>
 80042de:	2280      	movs	r2, #128	; 0x80
 80042e0:	00d2      	lsls	r2, r2, #3
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d00e      	beq.n	8004304 <UART_SetConfig+0x210>
 80042e6:	e01b      	b.n	8004320 <UART_SetConfig+0x22c>
 80042e8:	231b      	movs	r3, #27
 80042ea:	2220      	movs	r2, #32
 80042ec:	189b      	adds	r3, r3, r2
 80042ee:	19db      	adds	r3, r3, r7
 80042f0:	2200      	movs	r2, #0
 80042f2:	701a      	strb	r2, [r3, #0]
 80042f4:	e021      	b.n	800433a <UART_SetConfig+0x246>
 80042f6:	231b      	movs	r3, #27
 80042f8:	2220      	movs	r2, #32
 80042fa:	189b      	adds	r3, r3, r2
 80042fc:	19db      	adds	r3, r3, r7
 80042fe:	2202      	movs	r2, #2
 8004300:	701a      	strb	r2, [r3, #0]
 8004302:	e01a      	b.n	800433a <UART_SetConfig+0x246>
 8004304:	231b      	movs	r3, #27
 8004306:	2220      	movs	r2, #32
 8004308:	189b      	adds	r3, r3, r2
 800430a:	19db      	adds	r3, r3, r7
 800430c:	2204      	movs	r2, #4
 800430e:	701a      	strb	r2, [r3, #0]
 8004310:	e013      	b.n	800433a <UART_SetConfig+0x246>
 8004312:	231b      	movs	r3, #27
 8004314:	2220      	movs	r2, #32
 8004316:	189b      	adds	r3, r3, r2
 8004318:	19db      	adds	r3, r3, r7
 800431a:	2208      	movs	r2, #8
 800431c:	701a      	strb	r2, [r3, #0]
 800431e:	e00c      	b.n	800433a <UART_SetConfig+0x246>
 8004320:	231b      	movs	r3, #27
 8004322:	2220      	movs	r2, #32
 8004324:	189b      	adds	r3, r3, r2
 8004326:	19db      	adds	r3, r3, r7
 8004328:	2210      	movs	r2, #16
 800432a:	701a      	strb	r2, [r3, #0]
 800432c:	e005      	b.n	800433a <UART_SetConfig+0x246>
 800432e:	231b      	movs	r3, #27
 8004330:	2220      	movs	r2, #32
 8004332:	189b      	adds	r3, r3, r2
 8004334:	19db      	adds	r3, r3, r7
 8004336:	2210      	movs	r2, #16
 8004338:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a2b      	ldr	r2, [pc, #172]	; (80043ec <UART_SetConfig+0x2f8>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d000      	beq.n	8004346 <UART_SetConfig+0x252>
 8004344:	e0a9      	b.n	800449a <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004346:	231b      	movs	r3, #27
 8004348:	2220      	movs	r2, #32
 800434a:	189b      	adds	r3, r3, r2
 800434c:	19db      	adds	r3, r3, r7
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	2b08      	cmp	r3, #8
 8004352:	d015      	beq.n	8004380 <UART_SetConfig+0x28c>
 8004354:	dc18      	bgt.n	8004388 <UART_SetConfig+0x294>
 8004356:	2b04      	cmp	r3, #4
 8004358:	d00d      	beq.n	8004376 <UART_SetConfig+0x282>
 800435a:	dc15      	bgt.n	8004388 <UART_SetConfig+0x294>
 800435c:	2b00      	cmp	r3, #0
 800435e:	d002      	beq.n	8004366 <UART_SetConfig+0x272>
 8004360:	2b02      	cmp	r3, #2
 8004362:	d005      	beq.n	8004370 <UART_SetConfig+0x27c>
 8004364:	e010      	b.n	8004388 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004366:	f7ff f937 	bl	80035d8 <HAL_RCC_GetPCLK1Freq>
 800436a:	0003      	movs	r3, r0
 800436c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800436e:	e014      	b.n	800439a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004370:	4b25      	ldr	r3, [pc, #148]	; (8004408 <UART_SetConfig+0x314>)
 8004372:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004374:	e011      	b.n	800439a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004376:	f7ff f8a3 	bl	80034c0 <HAL_RCC_GetSysClockFreq>
 800437a:	0003      	movs	r3, r0
 800437c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800437e:	e00c      	b.n	800439a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004380:	2380      	movs	r3, #128	; 0x80
 8004382:	021b      	lsls	r3, r3, #8
 8004384:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004386:	e008      	b.n	800439a <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800438c:	231a      	movs	r3, #26
 800438e:	2220      	movs	r2, #32
 8004390:	189b      	adds	r3, r3, r2
 8004392:	19db      	adds	r3, r3, r7
 8004394:	2201      	movs	r2, #1
 8004396:	701a      	strb	r2, [r3, #0]
        break;
 8004398:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800439a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800439c:	2b00      	cmp	r3, #0
 800439e:	d100      	bne.n	80043a2 <UART_SetConfig+0x2ae>
 80043a0:	e14b      	b.n	800463a <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043a6:	4b19      	ldr	r3, [pc, #100]	; (800440c <UART_SetConfig+0x318>)
 80043a8:	0052      	lsls	r2, r2, #1
 80043aa:	5ad3      	ldrh	r3, [r2, r3]
 80043ac:	0019      	movs	r1, r3
 80043ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80043b0:	f7fb feba 	bl	8000128 <__udivsi3>
 80043b4:	0003      	movs	r3, r0
 80043b6:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80043b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	0013      	movs	r3, r2
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	189b      	adds	r3, r3, r2
 80043c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d305      	bcc.n	80043d4 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80043c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80043ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d91d      	bls.n	8004410 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80043d4:	231a      	movs	r3, #26
 80043d6:	2220      	movs	r2, #32
 80043d8:	189b      	adds	r3, r3, r2
 80043da:	19db      	adds	r3, r3, r7
 80043dc:	2201      	movs	r2, #1
 80043de:	701a      	strb	r2, [r3, #0]
 80043e0:	e12b      	b.n	800463a <UART_SetConfig+0x546>
 80043e2:	46c0      	nop			; (mov r8, r8)
 80043e4:	cfff69f3 	.word	0xcfff69f3
 80043e8:	ffffcfff 	.word	0xffffcfff
 80043ec:	40008000 	.word	0x40008000
 80043f0:	11fff4ff 	.word	0x11fff4ff
 80043f4:	40013800 	.word	0x40013800
 80043f8:	40021000 	.word	0x40021000
 80043fc:	40004400 	.word	0x40004400
 8004400:	40004800 	.word	0x40004800
 8004404:	40004c00 	.word	0x40004c00
 8004408:	00f42400 	.word	0x00f42400
 800440c:	0800606c 	.word	0x0800606c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004412:	61bb      	str	r3, [r7, #24]
 8004414:	2300      	movs	r3, #0
 8004416:	61fb      	str	r3, [r7, #28]
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800441c:	4b92      	ldr	r3, [pc, #584]	; (8004668 <UART_SetConfig+0x574>)
 800441e:	0052      	lsls	r2, r2, #1
 8004420:	5ad3      	ldrh	r3, [r2, r3]
 8004422:	613b      	str	r3, [r7, #16]
 8004424:	2300      	movs	r3, #0
 8004426:	617b      	str	r3, [r7, #20]
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	69b8      	ldr	r0, [r7, #24]
 800442e:	69f9      	ldr	r1, [r7, #28]
 8004430:	f7fb fff0 	bl	8000414 <__aeabi_uldivmod>
 8004434:	0002      	movs	r2, r0
 8004436:	000b      	movs	r3, r1
 8004438:	0e11      	lsrs	r1, r2, #24
 800443a:	021d      	lsls	r5, r3, #8
 800443c:	430d      	orrs	r5, r1
 800443e:	0214      	lsls	r4, r2, #8
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	085b      	lsrs	r3, r3, #1
 8004446:	60bb      	str	r3, [r7, #8]
 8004448:	2300      	movs	r3, #0
 800444a:	60fb      	str	r3, [r7, #12]
 800444c:	68b8      	ldr	r0, [r7, #8]
 800444e:	68f9      	ldr	r1, [r7, #12]
 8004450:	1900      	adds	r0, r0, r4
 8004452:	4169      	adcs	r1, r5
 8004454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	603b      	str	r3, [r7, #0]
 800445a:	2300      	movs	r3, #0
 800445c:	607b      	str	r3, [r7, #4]
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f7fb ffd7 	bl	8000414 <__aeabi_uldivmod>
 8004466:	0002      	movs	r2, r0
 8004468:	000b      	movs	r3, r1
 800446a:	0013      	movs	r3, r2
 800446c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800446e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004470:	23c0      	movs	r3, #192	; 0xc0
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	429a      	cmp	r2, r3
 8004476:	d309      	bcc.n	800448c <UART_SetConfig+0x398>
 8004478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800447a:	2380      	movs	r3, #128	; 0x80
 800447c:	035b      	lsls	r3, r3, #13
 800447e:	429a      	cmp	r2, r3
 8004480:	d204      	bcs.n	800448c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8004482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004488:	60da      	str	r2, [r3, #12]
 800448a:	e0d6      	b.n	800463a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800448c:	231a      	movs	r3, #26
 800448e:	2220      	movs	r2, #32
 8004490:	189b      	adds	r3, r3, r2
 8004492:	19db      	adds	r3, r3, r7
 8004494:	2201      	movs	r2, #1
 8004496:	701a      	strb	r2, [r3, #0]
 8004498:	e0cf      	b.n	800463a <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	69da      	ldr	r2, [r3, #28]
 800449e:	2380      	movs	r3, #128	; 0x80
 80044a0:	021b      	lsls	r3, r3, #8
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d000      	beq.n	80044a8 <UART_SetConfig+0x3b4>
 80044a6:	e070      	b.n	800458a <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80044a8:	231b      	movs	r3, #27
 80044aa:	2220      	movs	r2, #32
 80044ac:	189b      	adds	r3, r3, r2
 80044ae:	19db      	adds	r3, r3, r7
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	2b08      	cmp	r3, #8
 80044b4:	d015      	beq.n	80044e2 <UART_SetConfig+0x3ee>
 80044b6:	dc18      	bgt.n	80044ea <UART_SetConfig+0x3f6>
 80044b8:	2b04      	cmp	r3, #4
 80044ba:	d00d      	beq.n	80044d8 <UART_SetConfig+0x3e4>
 80044bc:	dc15      	bgt.n	80044ea <UART_SetConfig+0x3f6>
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d002      	beq.n	80044c8 <UART_SetConfig+0x3d4>
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d005      	beq.n	80044d2 <UART_SetConfig+0x3de>
 80044c6:	e010      	b.n	80044ea <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044c8:	f7ff f886 	bl	80035d8 <HAL_RCC_GetPCLK1Freq>
 80044cc:	0003      	movs	r3, r0
 80044ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044d0:	e014      	b.n	80044fc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044d2:	4b66      	ldr	r3, [pc, #408]	; (800466c <UART_SetConfig+0x578>)
 80044d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044d6:	e011      	b.n	80044fc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044d8:	f7fe fff2 	bl	80034c0 <HAL_RCC_GetSysClockFreq>
 80044dc:	0003      	movs	r3, r0
 80044de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044e0:	e00c      	b.n	80044fc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044e2:	2380      	movs	r3, #128	; 0x80
 80044e4:	021b      	lsls	r3, r3, #8
 80044e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044e8:	e008      	b.n	80044fc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80044ea:	2300      	movs	r3, #0
 80044ec:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80044ee:	231a      	movs	r3, #26
 80044f0:	2220      	movs	r2, #32
 80044f2:	189b      	adds	r3, r3, r2
 80044f4:	19db      	adds	r3, r3, r7
 80044f6:	2201      	movs	r2, #1
 80044f8:	701a      	strb	r2, [r3, #0]
        break;
 80044fa:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d100      	bne.n	8004504 <UART_SetConfig+0x410>
 8004502:	e09a      	b.n	800463a <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004506:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004508:	4b57      	ldr	r3, [pc, #348]	; (8004668 <UART_SetConfig+0x574>)
 800450a:	0052      	lsls	r2, r2, #1
 800450c:	5ad3      	ldrh	r3, [r2, r3]
 800450e:	0019      	movs	r1, r3
 8004510:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004512:	f7fb fe09 	bl	8000128 <__udivsi3>
 8004516:	0003      	movs	r3, r0
 8004518:	005a      	lsls	r2, r3, #1
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	085b      	lsrs	r3, r3, #1
 8004520:	18d2      	adds	r2, r2, r3
 8004522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	0019      	movs	r1, r3
 8004528:	0010      	movs	r0, r2
 800452a:	f7fb fdfd 	bl	8000128 <__udivsi3>
 800452e:	0003      	movs	r3, r0
 8004530:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004534:	2b0f      	cmp	r3, #15
 8004536:	d921      	bls.n	800457c <UART_SetConfig+0x488>
 8004538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800453a:	2380      	movs	r3, #128	; 0x80
 800453c:	025b      	lsls	r3, r3, #9
 800453e:	429a      	cmp	r2, r3
 8004540:	d21c      	bcs.n	800457c <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004544:	b29a      	uxth	r2, r3
 8004546:	200e      	movs	r0, #14
 8004548:	2420      	movs	r4, #32
 800454a:	1903      	adds	r3, r0, r4
 800454c:	19db      	adds	r3, r3, r7
 800454e:	210f      	movs	r1, #15
 8004550:	438a      	bics	r2, r1
 8004552:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004556:	085b      	lsrs	r3, r3, #1
 8004558:	b29b      	uxth	r3, r3
 800455a:	2207      	movs	r2, #7
 800455c:	4013      	ands	r3, r2
 800455e:	b299      	uxth	r1, r3
 8004560:	1903      	adds	r3, r0, r4
 8004562:	19db      	adds	r3, r3, r7
 8004564:	1902      	adds	r2, r0, r4
 8004566:	19d2      	adds	r2, r2, r7
 8004568:	8812      	ldrh	r2, [r2, #0]
 800456a:	430a      	orrs	r2, r1
 800456c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800456e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	1902      	adds	r2, r0, r4
 8004574:	19d2      	adds	r2, r2, r7
 8004576:	8812      	ldrh	r2, [r2, #0]
 8004578:	60da      	str	r2, [r3, #12]
 800457a:	e05e      	b.n	800463a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800457c:	231a      	movs	r3, #26
 800457e:	2220      	movs	r2, #32
 8004580:	189b      	adds	r3, r3, r2
 8004582:	19db      	adds	r3, r3, r7
 8004584:	2201      	movs	r2, #1
 8004586:	701a      	strb	r2, [r3, #0]
 8004588:	e057      	b.n	800463a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800458a:	231b      	movs	r3, #27
 800458c:	2220      	movs	r2, #32
 800458e:	189b      	adds	r3, r3, r2
 8004590:	19db      	adds	r3, r3, r7
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	2b08      	cmp	r3, #8
 8004596:	d015      	beq.n	80045c4 <UART_SetConfig+0x4d0>
 8004598:	dc18      	bgt.n	80045cc <UART_SetConfig+0x4d8>
 800459a:	2b04      	cmp	r3, #4
 800459c:	d00d      	beq.n	80045ba <UART_SetConfig+0x4c6>
 800459e:	dc15      	bgt.n	80045cc <UART_SetConfig+0x4d8>
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d002      	beq.n	80045aa <UART_SetConfig+0x4b6>
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d005      	beq.n	80045b4 <UART_SetConfig+0x4c0>
 80045a8:	e010      	b.n	80045cc <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045aa:	f7ff f815 	bl	80035d8 <HAL_RCC_GetPCLK1Freq>
 80045ae:	0003      	movs	r3, r0
 80045b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80045b2:	e014      	b.n	80045de <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045b4:	4b2d      	ldr	r3, [pc, #180]	; (800466c <UART_SetConfig+0x578>)
 80045b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80045b8:	e011      	b.n	80045de <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045ba:	f7fe ff81 	bl	80034c0 <HAL_RCC_GetSysClockFreq>
 80045be:	0003      	movs	r3, r0
 80045c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80045c2:	e00c      	b.n	80045de <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045c4:	2380      	movs	r3, #128	; 0x80
 80045c6:	021b      	lsls	r3, r3, #8
 80045c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80045ca:	e008      	b.n	80045de <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80045d0:	231a      	movs	r3, #26
 80045d2:	2220      	movs	r2, #32
 80045d4:	189b      	adds	r3, r3, r2
 80045d6:	19db      	adds	r3, r3, r7
 80045d8:	2201      	movs	r2, #1
 80045da:	701a      	strb	r2, [r3, #0]
        break;
 80045dc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80045de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d02a      	beq.n	800463a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045e8:	4b1f      	ldr	r3, [pc, #124]	; (8004668 <UART_SetConfig+0x574>)
 80045ea:	0052      	lsls	r2, r2, #1
 80045ec:	5ad3      	ldrh	r3, [r2, r3]
 80045ee:	0019      	movs	r1, r3
 80045f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80045f2:	f7fb fd99 	bl	8000128 <__udivsi3>
 80045f6:	0003      	movs	r3, r0
 80045f8:	001a      	movs	r2, r3
 80045fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	085b      	lsrs	r3, r3, #1
 8004600:	18d2      	adds	r2, r2, r3
 8004602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	0019      	movs	r1, r3
 8004608:	0010      	movs	r0, r2
 800460a:	f7fb fd8d 	bl	8000128 <__udivsi3>
 800460e:	0003      	movs	r3, r0
 8004610:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004614:	2b0f      	cmp	r3, #15
 8004616:	d90a      	bls.n	800462e <UART_SetConfig+0x53a>
 8004618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800461a:	2380      	movs	r3, #128	; 0x80
 800461c:	025b      	lsls	r3, r3, #9
 800461e:	429a      	cmp	r2, r3
 8004620:	d205      	bcs.n	800462e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004624:	b29a      	uxth	r2, r3
 8004626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	60da      	str	r2, [r3, #12]
 800462c:	e005      	b.n	800463a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800462e:	231a      	movs	r3, #26
 8004630:	2220      	movs	r2, #32
 8004632:	189b      	adds	r3, r3, r2
 8004634:	19db      	adds	r3, r3, r7
 8004636:	2201      	movs	r2, #1
 8004638:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463c:	226a      	movs	r2, #106	; 0x6a
 800463e:	2101      	movs	r1, #1
 8004640:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004644:	2268      	movs	r2, #104	; 0x68
 8004646:	2101      	movs	r1, #1
 8004648:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	2200      	movs	r2, #0
 800464e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	2200      	movs	r2, #0
 8004654:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004656:	231a      	movs	r3, #26
 8004658:	2220      	movs	r2, #32
 800465a:	189b      	adds	r3, r3, r2
 800465c:	19db      	adds	r3, r3, r7
 800465e:	781b      	ldrb	r3, [r3, #0]
}
 8004660:	0018      	movs	r0, r3
 8004662:	46bd      	mov	sp, r7
 8004664:	b010      	add	sp, #64	; 0x40
 8004666:	bdb0      	pop	{r4, r5, r7, pc}
 8004668:	0800606c 	.word	0x0800606c
 800466c:	00f42400 	.word	0x00f42400

08004670 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467c:	2208      	movs	r2, #8
 800467e:	4013      	ands	r3, r2
 8004680:	d00b      	beq.n	800469a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	4a4a      	ldr	r2, [pc, #296]	; (80047b4 <UART_AdvFeatureConfig+0x144>)
 800468a:	4013      	ands	r3, r2
 800468c:	0019      	movs	r1, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469e:	2201      	movs	r2, #1
 80046a0:	4013      	ands	r3, r2
 80046a2:	d00b      	beq.n	80046bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	4a43      	ldr	r2, [pc, #268]	; (80047b8 <UART_AdvFeatureConfig+0x148>)
 80046ac:	4013      	ands	r3, r2
 80046ae:	0019      	movs	r1, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	430a      	orrs	r2, r1
 80046ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c0:	2202      	movs	r2, #2
 80046c2:	4013      	ands	r3, r2
 80046c4:	d00b      	beq.n	80046de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	4a3b      	ldr	r2, [pc, #236]	; (80047bc <UART_AdvFeatureConfig+0x14c>)
 80046ce:	4013      	ands	r3, r2
 80046d0:	0019      	movs	r1, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	430a      	orrs	r2, r1
 80046dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e2:	2204      	movs	r2, #4
 80046e4:	4013      	ands	r3, r2
 80046e6:	d00b      	beq.n	8004700 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	4a34      	ldr	r2, [pc, #208]	; (80047c0 <UART_AdvFeatureConfig+0x150>)
 80046f0:	4013      	ands	r3, r2
 80046f2:	0019      	movs	r1, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004704:	2210      	movs	r2, #16
 8004706:	4013      	ands	r3, r2
 8004708:	d00b      	beq.n	8004722 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	4a2c      	ldr	r2, [pc, #176]	; (80047c4 <UART_AdvFeatureConfig+0x154>)
 8004712:	4013      	ands	r3, r2
 8004714:	0019      	movs	r1, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004726:	2220      	movs	r2, #32
 8004728:	4013      	ands	r3, r2
 800472a:	d00b      	beq.n	8004744 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	4a25      	ldr	r2, [pc, #148]	; (80047c8 <UART_AdvFeatureConfig+0x158>)
 8004734:	4013      	ands	r3, r2
 8004736:	0019      	movs	r1, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004748:	2240      	movs	r2, #64	; 0x40
 800474a:	4013      	ands	r3, r2
 800474c:	d01d      	beq.n	800478a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	4a1d      	ldr	r2, [pc, #116]	; (80047cc <UART_AdvFeatureConfig+0x15c>)
 8004756:	4013      	ands	r3, r2
 8004758:	0019      	movs	r1, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800476a:	2380      	movs	r3, #128	; 0x80
 800476c:	035b      	lsls	r3, r3, #13
 800476e:	429a      	cmp	r2, r3
 8004770:	d10b      	bne.n	800478a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	4a15      	ldr	r2, [pc, #84]	; (80047d0 <UART_AdvFeatureConfig+0x160>)
 800477a:	4013      	ands	r3, r2
 800477c:	0019      	movs	r1, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478e:	2280      	movs	r2, #128	; 0x80
 8004790:	4013      	ands	r3, r2
 8004792:	d00b      	beq.n	80047ac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	4a0e      	ldr	r2, [pc, #56]	; (80047d4 <UART_AdvFeatureConfig+0x164>)
 800479c:	4013      	ands	r3, r2
 800479e:	0019      	movs	r1, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	605a      	str	r2, [r3, #4]
  }
}
 80047ac:	46c0      	nop			; (mov r8, r8)
 80047ae:	46bd      	mov	sp, r7
 80047b0:	b002      	add	sp, #8
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	ffff7fff 	.word	0xffff7fff
 80047b8:	fffdffff 	.word	0xfffdffff
 80047bc:	fffeffff 	.word	0xfffeffff
 80047c0:	fffbffff 	.word	0xfffbffff
 80047c4:	ffffefff 	.word	0xffffefff
 80047c8:	ffffdfff 	.word	0xffffdfff
 80047cc:	ffefffff 	.word	0xffefffff
 80047d0:	ff9fffff 	.word	0xff9fffff
 80047d4:	fff7ffff 	.word	0xfff7ffff

080047d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b092      	sub	sp, #72	; 0x48
 80047dc:	af02      	add	r7, sp, #8
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2290      	movs	r2, #144	; 0x90
 80047e4:	2100      	movs	r1, #0
 80047e6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047e8:	f7fc fd5e 	bl	80012a8 <HAL_GetTick>
 80047ec:	0003      	movs	r3, r0
 80047ee:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2208      	movs	r2, #8
 80047f8:	4013      	ands	r3, r2
 80047fa:	2b08      	cmp	r3, #8
 80047fc:	d12d      	bne.n	800485a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004800:	2280      	movs	r2, #128	; 0x80
 8004802:	0391      	lsls	r1, r2, #14
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	4a47      	ldr	r2, [pc, #284]	; (8004924 <UART_CheckIdleState+0x14c>)
 8004808:	9200      	str	r2, [sp, #0]
 800480a:	2200      	movs	r2, #0
 800480c:	f000 f88e 	bl	800492c <UART_WaitOnFlagUntilTimeout>
 8004810:	1e03      	subs	r3, r0, #0
 8004812:	d022      	beq.n	800485a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004814:	f3ef 8310 	mrs	r3, PRIMASK
 8004818:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800481c:	63bb      	str	r3, [r7, #56]	; 0x38
 800481e:	2301      	movs	r3, #1
 8004820:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004824:	f383 8810 	msr	PRIMASK, r3
}
 8004828:	46c0      	nop			; (mov r8, r8)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2180      	movs	r1, #128	; 0x80
 8004836:	438a      	bics	r2, r1
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800483e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004840:	f383 8810 	msr	PRIMASK, r3
}
 8004844:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2288      	movs	r2, #136	; 0x88
 800484a:	2120      	movs	r1, #32
 800484c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2284      	movs	r2, #132	; 0x84
 8004852:	2100      	movs	r1, #0
 8004854:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e060      	b.n	800491c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2204      	movs	r2, #4
 8004862:	4013      	ands	r3, r2
 8004864:	2b04      	cmp	r3, #4
 8004866:	d146      	bne.n	80048f6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800486a:	2280      	movs	r2, #128	; 0x80
 800486c:	03d1      	lsls	r1, r2, #15
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	4a2c      	ldr	r2, [pc, #176]	; (8004924 <UART_CheckIdleState+0x14c>)
 8004872:	9200      	str	r2, [sp, #0]
 8004874:	2200      	movs	r2, #0
 8004876:	f000 f859 	bl	800492c <UART_WaitOnFlagUntilTimeout>
 800487a:	1e03      	subs	r3, r0, #0
 800487c:	d03b      	beq.n	80048f6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800487e:	f3ef 8310 	mrs	r3, PRIMASK
 8004882:	60fb      	str	r3, [r7, #12]
  return(result);
 8004884:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004886:	637b      	str	r3, [r7, #52]	; 0x34
 8004888:	2301      	movs	r3, #1
 800488a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	f383 8810 	msr	PRIMASK, r3
}
 8004892:	46c0      	nop			; (mov r8, r8)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4922      	ldr	r1, [pc, #136]	; (8004928 <UART_CheckIdleState+0x150>)
 80048a0:	400a      	ands	r2, r1
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	f383 8810 	msr	PRIMASK, r3
}
 80048ae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048b0:	f3ef 8310 	mrs	r3, PRIMASK
 80048b4:	61bb      	str	r3, [r7, #24]
  return(result);
 80048b6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b8:	633b      	str	r3, [r7, #48]	; 0x30
 80048ba:	2301      	movs	r3, #1
 80048bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	f383 8810 	msr	PRIMASK, r3
}
 80048c4:	46c0      	nop			; (mov r8, r8)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2101      	movs	r1, #1
 80048d2:	438a      	bics	r2, r1
 80048d4:	609a      	str	r2, [r3, #8]
 80048d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	f383 8810 	msr	PRIMASK, r3
}
 80048e0:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	228c      	movs	r2, #140	; 0x8c
 80048e6:	2120      	movs	r1, #32
 80048e8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2284      	movs	r2, #132	; 0x84
 80048ee:	2100      	movs	r1, #0
 80048f0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e012      	b.n	800491c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2288      	movs	r2, #136	; 0x88
 80048fa:	2120      	movs	r1, #32
 80048fc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	228c      	movs	r2, #140	; 0x8c
 8004902:	2120      	movs	r1, #32
 8004904:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2284      	movs	r2, #132	; 0x84
 8004916:	2100      	movs	r1, #0
 8004918:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	0018      	movs	r0, r3
 800491e:	46bd      	mov	sp, r7
 8004920:	b010      	add	sp, #64	; 0x40
 8004922:	bd80      	pop	{r7, pc}
 8004924:	01ffffff 	.word	0x01ffffff
 8004928:	fffffedf 	.word	0xfffffedf

0800492c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	603b      	str	r3, [r7, #0]
 8004938:	1dfb      	adds	r3, r7, #7
 800493a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800493c:	e051      	b.n	80049e2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	3301      	adds	r3, #1
 8004942:	d04e      	beq.n	80049e2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004944:	f7fc fcb0 	bl	80012a8 <HAL_GetTick>
 8004948:	0002      	movs	r2, r0
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	429a      	cmp	r2, r3
 8004952:	d302      	bcc.n	800495a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e051      	b.n	8004a02 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2204      	movs	r2, #4
 8004966:	4013      	ands	r3, r2
 8004968:	d03b      	beq.n	80049e2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	2b80      	cmp	r3, #128	; 0x80
 800496e:	d038      	beq.n	80049e2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	2b40      	cmp	r3, #64	; 0x40
 8004974:	d035      	beq.n	80049e2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	69db      	ldr	r3, [r3, #28]
 800497c:	2208      	movs	r2, #8
 800497e:	4013      	ands	r3, r2
 8004980:	2b08      	cmp	r3, #8
 8004982:	d111      	bne.n	80049a8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2208      	movs	r2, #8
 800498a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	0018      	movs	r0, r3
 8004990:	f000 f83c 	bl	8004a0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2290      	movs	r2, #144	; 0x90
 8004998:	2108      	movs	r1, #8
 800499a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2284      	movs	r2, #132	; 0x84
 80049a0:	2100      	movs	r1, #0
 80049a2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e02c      	b.n	8004a02 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	69da      	ldr	r2, [r3, #28]
 80049ae:	2380      	movs	r3, #128	; 0x80
 80049b0:	011b      	lsls	r3, r3, #4
 80049b2:	401a      	ands	r2, r3
 80049b4:	2380      	movs	r3, #128	; 0x80
 80049b6:	011b      	lsls	r3, r3, #4
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d112      	bne.n	80049e2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2280      	movs	r2, #128	; 0x80
 80049c2:	0112      	lsls	r2, r2, #4
 80049c4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	0018      	movs	r0, r3
 80049ca:	f000 f81f 	bl	8004a0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2290      	movs	r2, #144	; 0x90
 80049d2:	2120      	movs	r1, #32
 80049d4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2284      	movs	r2, #132	; 0x84
 80049da:	2100      	movs	r1, #0
 80049dc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e00f      	b.n	8004a02 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	69db      	ldr	r3, [r3, #28]
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	4013      	ands	r3, r2
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	425a      	negs	r2, r3
 80049f2:	4153      	adcs	r3, r2
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	001a      	movs	r2, r3
 80049f8:	1dfb      	adds	r3, r7, #7
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d09e      	beq.n	800493e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	0018      	movs	r0, r3
 8004a04:	46bd      	mov	sp, r7
 8004a06:	b004      	add	sp, #16
 8004a08:	bd80      	pop	{r7, pc}
	...

08004a0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b08e      	sub	sp, #56	; 0x38
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a14:	f3ef 8310 	mrs	r3, PRIMASK
 8004a18:	617b      	str	r3, [r7, #20]
  return(result);
 8004a1a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a1e:	2301      	movs	r3, #1
 8004a20:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	f383 8810 	msr	PRIMASK, r3
}
 8004a28:	46c0      	nop			; (mov r8, r8)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4926      	ldr	r1, [pc, #152]	; (8004ad0 <UART_EndRxTransfer+0xc4>)
 8004a36:	400a      	ands	r2, r1
 8004a38:	601a      	str	r2, [r3, #0]
 8004a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	f383 8810 	msr	PRIMASK, r3
}
 8004a44:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a46:	f3ef 8310 	mrs	r3, PRIMASK
 8004a4a:	623b      	str	r3, [r7, #32]
  return(result);
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a4e:	633b      	str	r3, [r7, #48]	; 0x30
 8004a50:	2301      	movs	r3, #1
 8004a52:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a56:	f383 8810 	msr	PRIMASK, r3
}
 8004a5a:	46c0      	nop			; (mov r8, r8)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	491b      	ldr	r1, [pc, #108]	; (8004ad4 <UART_EndRxTransfer+0xc8>)
 8004a68:	400a      	ands	r2, r1
 8004a6a:	609a      	str	r2, [r3, #8]
 8004a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a72:	f383 8810 	msr	PRIMASK, r3
}
 8004a76:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d118      	bne.n	8004ab2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a80:	f3ef 8310 	mrs	r3, PRIMASK
 8004a84:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a86:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f383 8810 	msr	PRIMASK, r3
}
 8004a94:	46c0      	nop			; (mov r8, r8)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2110      	movs	r1, #16
 8004aa2:	438a      	bics	r2, r1
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	f383 8810 	msr	PRIMASK, r3
}
 8004ab0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	228c      	movs	r2, #140	; 0x8c
 8004ab6:	2120      	movs	r1, #32
 8004ab8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004ac6:	46c0      	nop			; (mov r8, r8)
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	b00e      	add	sp, #56	; 0x38
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	46c0      	nop			; (mov r8, r8)
 8004ad0:	fffffedf 	.word	0xfffffedf
 8004ad4:	effffffe 	.word	0xeffffffe

08004ad8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2284      	movs	r2, #132	; 0x84
 8004ae4:	5c9b      	ldrb	r3, [r3, r2]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d101      	bne.n	8004aee <HAL_UARTEx_DisableFifoMode+0x16>
 8004aea:	2302      	movs	r3, #2
 8004aec:	e027      	b.n	8004b3e <HAL_UARTEx_DisableFifoMode+0x66>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2284      	movs	r2, #132	; 0x84
 8004af2:	2101      	movs	r1, #1
 8004af4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2288      	movs	r2, #136	; 0x88
 8004afa:	2124      	movs	r1, #36	; 0x24
 8004afc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2101      	movs	r1, #1
 8004b12:	438a      	bics	r2, r1
 8004b14:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	4a0b      	ldr	r2, [pc, #44]	; (8004b48 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2288      	movs	r2, #136	; 0x88
 8004b30:	2120      	movs	r1, #32
 8004b32:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2284      	movs	r2, #132	; 0x84
 8004b38:	2100      	movs	r1, #0
 8004b3a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	0018      	movs	r0, r3
 8004b40:	46bd      	mov	sp, r7
 8004b42:	b004      	add	sp, #16
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	46c0      	nop			; (mov r8, r8)
 8004b48:	dfffffff 	.word	0xdfffffff

08004b4c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2284      	movs	r2, #132	; 0x84
 8004b5a:	5c9b      	ldrb	r3, [r3, r2]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d101      	bne.n	8004b64 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004b60:	2302      	movs	r3, #2
 8004b62:	e02e      	b.n	8004bc2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2284      	movs	r2, #132	; 0x84
 8004b68:	2101      	movs	r1, #1
 8004b6a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2288      	movs	r2, #136	; 0x88
 8004b70:	2124      	movs	r1, #36	; 0x24
 8004b72:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2101      	movs	r1, #1
 8004b88:	438a      	bics	r2, r1
 8004b8a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	08d9      	lsrs	r1, r3, #3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	0018      	movs	r0, r3
 8004ba4:	f000 f854 	bl	8004c50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2288      	movs	r2, #136	; 0x88
 8004bb4:	2120      	movs	r1, #32
 8004bb6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2284      	movs	r2, #132	; 0x84
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	0018      	movs	r0, r3
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	b004      	add	sp, #16
 8004bc8:	bd80      	pop	{r7, pc}
	...

08004bcc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2284      	movs	r2, #132	; 0x84
 8004bda:	5c9b      	ldrb	r3, [r3, r2]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d101      	bne.n	8004be4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004be0:	2302      	movs	r3, #2
 8004be2:	e02f      	b.n	8004c44 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2284      	movs	r2, #132	; 0x84
 8004be8:	2101      	movs	r1, #1
 8004bea:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2288      	movs	r2, #136	; 0x88
 8004bf0:	2124      	movs	r1, #36	; 0x24
 8004bf2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2101      	movs	r1, #1
 8004c08:	438a      	bics	r2, r1
 8004c0a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	4a0e      	ldr	r2, [pc, #56]	; (8004c4c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004c14:	4013      	ands	r3, r2
 8004c16:	0019      	movs	r1, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	0018      	movs	r0, r3
 8004c26:	f000 f813 	bl	8004c50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2288      	movs	r2, #136	; 0x88
 8004c36:	2120      	movs	r1, #32
 8004c38:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2284      	movs	r2, #132	; 0x84
 8004c3e:	2100      	movs	r1, #0
 8004c40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	0018      	movs	r0, r3
 8004c46:	46bd      	mov	sp, r7
 8004c48:	b004      	add	sp, #16
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	f1ffffff 	.word	0xf1ffffff

08004c50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d108      	bne.n	8004c72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	226a      	movs	r2, #106	; 0x6a
 8004c64:	2101      	movs	r1, #1
 8004c66:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2268      	movs	r2, #104	; 0x68
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004c70:	e043      	b.n	8004cfa <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004c72:	260f      	movs	r6, #15
 8004c74:	19bb      	adds	r3, r7, r6
 8004c76:	2208      	movs	r2, #8
 8004c78:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004c7a:	200e      	movs	r0, #14
 8004c7c:	183b      	adds	r3, r7, r0
 8004c7e:	2208      	movs	r2, #8
 8004c80:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	0e5b      	lsrs	r3, r3, #25
 8004c8a:	b2da      	uxtb	r2, r3
 8004c8c:	240d      	movs	r4, #13
 8004c8e:	193b      	adds	r3, r7, r4
 8004c90:	2107      	movs	r1, #7
 8004c92:	400a      	ands	r2, r1
 8004c94:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	0f5b      	lsrs	r3, r3, #29
 8004c9e:	b2da      	uxtb	r2, r3
 8004ca0:	250c      	movs	r5, #12
 8004ca2:	197b      	adds	r3, r7, r5
 8004ca4:	2107      	movs	r1, #7
 8004ca6:	400a      	ands	r2, r1
 8004ca8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004caa:	183b      	adds	r3, r7, r0
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	197a      	adds	r2, r7, r5
 8004cb0:	7812      	ldrb	r2, [r2, #0]
 8004cb2:	4914      	ldr	r1, [pc, #80]	; (8004d04 <UARTEx_SetNbDataToProcess+0xb4>)
 8004cb4:	5c8a      	ldrb	r2, [r1, r2]
 8004cb6:	435a      	muls	r2, r3
 8004cb8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004cba:	197b      	adds	r3, r7, r5
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	4a12      	ldr	r2, [pc, #72]	; (8004d08 <UARTEx_SetNbDataToProcess+0xb8>)
 8004cc0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004cc2:	0019      	movs	r1, r3
 8004cc4:	f7fb faba 	bl	800023c <__divsi3>
 8004cc8:	0003      	movs	r3, r0
 8004cca:	b299      	uxth	r1, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	226a      	movs	r2, #106	; 0x6a
 8004cd0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004cd2:	19bb      	adds	r3, r7, r6
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	193a      	adds	r2, r7, r4
 8004cd8:	7812      	ldrb	r2, [r2, #0]
 8004cda:	490a      	ldr	r1, [pc, #40]	; (8004d04 <UARTEx_SetNbDataToProcess+0xb4>)
 8004cdc:	5c8a      	ldrb	r2, [r1, r2]
 8004cde:	435a      	muls	r2, r3
 8004ce0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004ce2:	193b      	adds	r3, r7, r4
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	4a08      	ldr	r2, [pc, #32]	; (8004d08 <UARTEx_SetNbDataToProcess+0xb8>)
 8004ce8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004cea:	0019      	movs	r1, r3
 8004cec:	f7fb faa6 	bl	800023c <__divsi3>
 8004cf0:	0003      	movs	r3, r0
 8004cf2:	b299      	uxth	r1, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2268      	movs	r2, #104	; 0x68
 8004cf8:	5299      	strh	r1, [r3, r2]
}
 8004cfa:	46c0      	nop			; (mov r8, r8)
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	b005      	add	sp, #20
 8004d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d02:	46c0      	nop			; (mov r8, r8)
 8004d04:	08006084 	.word	0x08006084
 8004d08:	0800608c 	.word	0x0800608c

08004d0c <std>:
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	b510      	push	{r4, lr}
 8004d10:	0004      	movs	r4, r0
 8004d12:	6003      	str	r3, [r0, #0]
 8004d14:	6043      	str	r3, [r0, #4]
 8004d16:	6083      	str	r3, [r0, #8]
 8004d18:	8181      	strh	r1, [r0, #12]
 8004d1a:	6643      	str	r3, [r0, #100]	; 0x64
 8004d1c:	81c2      	strh	r2, [r0, #14]
 8004d1e:	6103      	str	r3, [r0, #16]
 8004d20:	6143      	str	r3, [r0, #20]
 8004d22:	6183      	str	r3, [r0, #24]
 8004d24:	0019      	movs	r1, r3
 8004d26:	2208      	movs	r2, #8
 8004d28:	305c      	adds	r0, #92	; 0x5c
 8004d2a:	f000 f92f 	bl	8004f8c <memset>
 8004d2e:	4b0b      	ldr	r3, [pc, #44]	; (8004d5c <std+0x50>)
 8004d30:	6224      	str	r4, [r4, #32]
 8004d32:	6263      	str	r3, [r4, #36]	; 0x24
 8004d34:	4b0a      	ldr	r3, [pc, #40]	; (8004d60 <std+0x54>)
 8004d36:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d38:	4b0a      	ldr	r3, [pc, #40]	; (8004d64 <std+0x58>)
 8004d3a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d3c:	4b0a      	ldr	r3, [pc, #40]	; (8004d68 <std+0x5c>)
 8004d3e:	6323      	str	r3, [r4, #48]	; 0x30
 8004d40:	4b0a      	ldr	r3, [pc, #40]	; (8004d6c <std+0x60>)
 8004d42:	429c      	cmp	r4, r3
 8004d44:	d005      	beq.n	8004d52 <std+0x46>
 8004d46:	4b0a      	ldr	r3, [pc, #40]	; (8004d70 <std+0x64>)
 8004d48:	429c      	cmp	r4, r3
 8004d4a:	d002      	beq.n	8004d52 <std+0x46>
 8004d4c:	4b09      	ldr	r3, [pc, #36]	; (8004d74 <std+0x68>)
 8004d4e:	429c      	cmp	r4, r3
 8004d50:	d103      	bne.n	8004d5a <std+0x4e>
 8004d52:	0020      	movs	r0, r4
 8004d54:	3058      	adds	r0, #88	; 0x58
 8004d56:	f000 f999 	bl	800508c <__retarget_lock_init_recursive>
 8004d5a:	bd10      	pop	{r4, pc}
 8004d5c:	08004ef5 	.word	0x08004ef5
 8004d60:	08004f1d 	.word	0x08004f1d
 8004d64:	08004f55 	.word	0x08004f55
 8004d68:	08004f81 	.word	0x08004f81
 8004d6c:	20000224 	.word	0x20000224
 8004d70:	2000028c 	.word	0x2000028c
 8004d74:	200002f4 	.word	0x200002f4

08004d78 <stdio_exit_handler>:
 8004d78:	b510      	push	{r4, lr}
 8004d7a:	4a03      	ldr	r2, [pc, #12]	; (8004d88 <stdio_exit_handler+0x10>)
 8004d7c:	4903      	ldr	r1, [pc, #12]	; (8004d8c <stdio_exit_handler+0x14>)
 8004d7e:	4804      	ldr	r0, [pc, #16]	; (8004d90 <stdio_exit_handler+0x18>)
 8004d80:	f000 f86c 	bl	8004e5c <_fwalk_sglue>
 8004d84:	bd10      	pop	{r4, pc}
 8004d86:	46c0      	nop			; (mov r8, r8)
 8004d88:	2000000c 	.word	0x2000000c
 8004d8c:	08005bf1 	.word	0x08005bf1
 8004d90:	20000018 	.word	0x20000018

08004d94 <cleanup_stdio>:
 8004d94:	6841      	ldr	r1, [r0, #4]
 8004d96:	4b0b      	ldr	r3, [pc, #44]	; (8004dc4 <cleanup_stdio+0x30>)
 8004d98:	b510      	push	{r4, lr}
 8004d9a:	0004      	movs	r4, r0
 8004d9c:	4299      	cmp	r1, r3
 8004d9e:	d001      	beq.n	8004da4 <cleanup_stdio+0x10>
 8004da0:	f000 ff26 	bl	8005bf0 <_fflush_r>
 8004da4:	68a1      	ldr	r1, [r4, #8]
 8004da6:	4b08      	ldr	r3, [pc, #32]	; (8004dc8 <cleanup_stdio+0x34>)
 8004da8:	4299      	cmp	r1, r3
 8004daa:	d002      	beq.n	8004db2 <cleanup_stdio+0x1e>
 8004dac:	0020      	movs	r0, r4
 8004dae:	f000 ff1f 	bl	8005bf0 <_fflush_r>
 8004db2:	68e1      	ldr	r1, [r4, #12]
 8004db4:	4b05      	ldr	r3, [pc, #20]	; (8004dcc <cleanup_stdio+0x38>)
 8004db6:	4299      	cmp	r1, r3
 8004db8:	d002      	beq.n	8004dc0 <cleanup_stdio+0x2c>
 8004dba:	0020      	movs	r0, r4
 8004dbc:	f000 ff18 	bl	8005bf0 <_fflush_r>
 8004dc0:	bd10      	pop	{r4, pc}
 8004dc2:	46c0      	nop			; (mov r8, r8)
 8004dc4:	20000224 	.word	0x20000224
 8004dc8:	2000028c 	.word	0x2000028c
 8004dcc:	200002f4 	.word	0x200002f4

08004dd0 <global_stdio_init.part.0>:
 8004dd0:	b510      	push	{r4, lr}
 8004dd2:	4b09      	ldr	r3, [pc, #36]	; (8004df8 <global_stdio_init.part.0+0x28>)
 8004dd4:	4a09      	ldr	r2, [pc, #36]	; (8004dfc <global_stdio_init.part.0+0x2c>)
 8004dd6:	2104      	movs	r1, #4
 8004dd8:	601a      	str	r2, [r3, #0]
 8004dda:	4809      	ldr	r0, [pc, #36]	; (8004e00 <global_stdio_init.part.0+0x30>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f7ff ff95 	bl	8004d0c <std>
 8004de2:	2201      	movs	r2, #1
 8004de4:	2109      	movs	r1, #9
 8004de6:	4807      	ldr	r0, [pc, #28]	; (8004e04 <global_stdio_init.part.0+0x34>)
 8004de8:	f7ff ff90 	bl	8004d0c <std>
 8004dec:	2202      	movs	r2, #2
 8004dee:	2112      	movs	r1, #18
 8004df0:	4805      	ldr	r0, [pc, #20]	; (8004e08 <global_stdio_init.part.0+0x38>)
 8004df2:	f7ff ff8b 	bl	8004d0c <std>
 8004df6:	bd10      	pop	{r4, pc}
 8004df8:	2000035c 	.word	0x2000035c
 8004dfc:	08004d79 	.word	0x08004d79
 8004e00:	20000224 	.word	0x20000224
 8004e04:	2000028c 	.word	0x2000028c
 8004e08:	200002f4 	.word	0x200002f4

08004e0c <__sfp_lock_acquire>:
 8004e0c:	b510      	push	{r4, lr}
 8004e0e:	4802      	ldr	r0, [pc, #8]	; (8004e18 <__sfp_lock_acquire+0xc>)
 8004e10:	f000 f93d 	bl	800508e <__retarget_lock_acquire_recursive>
 8004e14:	bd10      	pop	{r4, pc}
 8004e16:	46c0      	nop			; (mov r8, r8)
 8004e18:	20000365 	.word	0x20000365

08004e1c <__sfp_lock_release>:
 8004e1c:	b510      	push	{r4, lr}
 8004e1e:	4802      	ldr	r0, [pc, #8]	; (8004e28 <__sfp_lock_release+0xc>)
 8004e20:	f000 f936 	bl	8005090 <__retarget_lock_release_recursive>
 8004e24:	bd10      	pop	{r4, pc}
 8004e26:	46c0      	nop			; (mov r8, r8)
 8004e28:	20000365 	.word	0x20000365

08004e2c <__sinit>:
 8004e2c:	b510      	push	{r4, lr}
 8004e2e:	0004      	movs	r4, r0
 8004e30:	f7ff ffec 	bl	8004e0c <__sfp_lock_acquire>
 8004e34:	6a23      	ldr	r3, [r4, #32]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d002      	beq.n	8004e40 <__sinit+0x14>
 8004e3a:	f7ff ffef 	bl	8004e1c <__sfp_lock_release>
 8004e3e:	bd10      	pop	{r4, pc}
 8004e40:	4b04      	ldr	r3, [pc, #16]	; (8004e54 <__sinit+0x28>)
 8004e42:	6223      	str	r3, [r4, #32]
 8004e44:	4b04      	ldr	r3, [pc, #16]	; (8004e58 <__sinit+0x2c>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1f6      	bne.n	8004e3a <__sinit+0xe>
 8004e4c:	f7ff ffc0 	bl	8004dd0 <global_stdio_init.part.0>
 8004e50:	e7f3      	b.n	8004e3a <__sinit+0xe>
 8004e52:	46c0      	nop			; (mov r8, r8)
 8004e54:	08004d95 	.word	0x08004d95
 8004e58:	2000035c 	.word	0x2000035c

08004e5c <_fwalk_sglue>:
 8004e5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e5e:	0014      	movs	r4, r2
 8004e60:	2600      	movs	r6, #0
 8004e62:	9000      	str	r0, [sp, #0]
 8004e64:	9101      	str	r1, [sp, #4]
 8004e66:	68a5      	ldr	r5, [r4, #8]
 8004e68:	6867      	ldr	r7, [r4, #4]
 8004e6a:	3f01      	subs	r7, #1
 8004e6c:	d504      	bpl.n	8004e78 <_fwalk_sglue+0x1c>
 8004e6e:	6824      	ldr	r4, [r4, #0]
 8004e70:	2c00      	cmp	r4, #0
 8004e72:	d1f8      	bne.n	8004e66 <_fwalk_sglue+0xa>
 8004e74:	0030      	movs	r0, r6
 8004e76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004e78:	89ab      	ldrh	r3, [r5, #12]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d908      	bls.n	8004e90 <_fwalk_sglue+0x34>
 8004e7e:	220e      	movs	r2, #14
 8004e80:	5eab      	ldrsh	r3, [r5, r2]
 8004e82:	3301      	adds	r3, #1
 8004e84:	d004      	beq.n	8004e90 <_fwalk_sglue+0x34>
 8004e86:	0029      	movs	r1, r5
 8004e88:	9800      	ldr	r0, [sp, #0]
 8004e8a:	9b01      	ldr	r3, [sp, #4]
 8004e8c:	4798      	blx	r3
 8004e8e:	4306      	orrs	r6, r0
 8004e90:	3568      	adds	r5, #104	; 0x68
 8004e92:	e7ea      	b.n	8004e6a <_fwalk_sglue+0xe>

08004e94 <iprintf>:
 8004e94:	b40f      	push	{r0, r1, r2, r3}
 8004e96:	b507      	push	{r0, r1, r2, lr}
 8004e98:	4905      	ldr	r1, [pc, #20]	; (8004eb0 <iprintf+0x1c>)
 8004e9a:	ab04      	add	r3, sp, #16
 8004e9c:	6808      	ldr	r0, [r1, #0]
 8004e9e:	cb04      	ldmia	r3!, {r2}
 8004ea0:	6881      	ldr	r1, [r0, #8]
 8004ea2:	9301      	str	r3, [sp, #4]
 8004ea4:	f000 fb7e 	bl	80055a4 <_vfiprintf_r>
 8004ea8:	b003      	add	sp, #12
 8004eaa:	bc08      	pop	{r3}
 8004eac:	b004      	add	sp, #16
 8004eae:	4718      	bx	r3
 8004eb0:	20000064 	.word	0x20000064

08004eb4 <siprintf>:
 8004eb4:	b40e      	push	{r1, r2, r3}
 8004eb6:	b500      	push	{lr}
 8004eb8:	490b      	ldr	r1, [pc, #44]	; (8004ee8 <siprintf+0x34>)
 8004eba:	b09c      	sub	sp, #112	; 0x70
 8004ebc:	ab1d      	add	r3, sp, #116	; 0x74
 8004ebe:	9002      	str	r0, [sp, #8]
 8004ec0:	9006      	str	r0, [sp, #24]
 8004ec2:	9107      	str	r1, [sp, #28]
 8004ec4:	9104      	str	r1, [sp, #16]
 8004ec6:	4809      	ldr	r0, [pc, #36]	; (8004eec <siprintf+0x38>)
 8004ec8:	4909      	ldr	r1, [pc, #36]	; (8004ef0 <siprintf+0x3c>)
 8004eca:	cb04      	ldmia	r3!, {r2}
 8004ecc:	9105      	str	r1, [sp, #20]
 8004ece:	6800      	ldr	r0, [r0, #0]
 8004ed0:	a902      	add	r1, sp, #8
 8004ed2:	9301      	str	r3, [sp, #4]
 8004ed4:	f000 fa3e 	bl	8005354 <_svfiprintf_r>
 8004ed8:	2200      	movs	r2, #0
 8004eda:	9b02      	ldr	r3, [sp, #8]
 8004edc:	701a      	strb	r2, [r3, #0]
 8004ede:	b01c      	add	sp, #112	; 0x70
 8004ee0:	bc08      	pop	{r3}
 8004ee2:	b003      	add	sp, #12
 8004ee4:	4718      	bx	r3
 8004ee6:	46c0      	nop			; (mov r8, r8)
 8004ee8:	7fffffff 	.word	0x7fffffff
 8004eec:	20000064 	.word	0x20000064
 8004ef0:	ffff0208 	.word	0xffff0208

08004ef4 <__sread>:
 8004ef4:	b570      	push	{r4, r5, r6, lr}
 8004ef6:	000c      	movs	r4, r1
 8004ef8:	250e      	movs	r5, #14
 8004efa:	5f49      	ldrsh	r1, [r1, r5]
 8004efc:	f000 f874 	bl	8004fe8 <_read_r>
 8004f00:	2800      	cmp	r0, #0
 8004f02:	db03      	blt.n	8004f0c <__sread+0x18>
 8004f04:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004f06:	181b      	adds	r3, r3, r0
 8004f08:	6563      	str	r3, [r4, #84]	; 0x54
 8004f0a:	bd70      	pop	{r4, r5, r6, pc}
 8004f0c:	89a3      	ldrh	r3, [r4, #12]
 8004f0e:	4a02      	ldr	r2, [pc, #8]	; (8004f18 <__sread+0x24>)
 8004f10:	4013      	ands	r3, r2
 8004f12:	81a3      	strh	r3, [r4, #12]
 8004f14:	e7f9      	b.n	8004f0a <__sread+0x16>
 8004f16:	46c0      	nop			; (mov r8, r8)
 8004f18:	ffffefff 	.word	0xffffefff

08004f1c <__swrite>:
 8004f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f1e:	001f      	movs	r7, r3
 8004f20:	898b      	ldrh	r3, [r1, #12]
 8004f22:	0005      	movs	r5, r0
 8004f24:	000c      	movs	r4, r1
 8004f26:	0016      	movs	r6, r2
 8004f28:	05db      	lsls	r3, r3, #23
 8004f2a:	d505      	bpl.n	8004f38 <__swrite+0x1c>
 8004f2c:	230e      	movs	r3, #14
 8004f2e:	5ec9      	ldrsh	r1, [r1, r3]
 8004f30:	2200      	movs	r2, #0
 8004f32:	2302      	movs	r3, #2
 8004f34:	f000 f844 	bl	8004fc0 <_lseek_r>
 8004f38:	89a3      	ldrh	r3, [r4, #12]
 8004f3a:	4a05      	ldr	r2, [pc, #20]	; (8004f50 <__swrite+0x34>)
 8004f3c:	0028      	movs	r0, r5
 8004f3e:	4013      	ands	r3, r2
 8004f40:	81a3      	strh	r3, [r4, #12]
 8004f42:	0032      	movs	r2, r6
 8004f44:	230e      	movs	r3, #14
 8004f46:	5ee1      	ldrsh	r1, [r4, r3]
 8004f48:	003b      	movs	r3, r7
 8004f4a:	f000 f861 	bl	8005010 <_write_r>
 8004f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f50:	ffffefff 	.word	0xffffefff

08004f54 <__sseek>:
 8004f54:	b570      	push	{r4, r5, r6, lr}
 8004f56:	000c      	movs	r4, r1
 8004f58:	250e      	movs	r5, #14
 8004f5a:	5f49      	ldrsh	r1, [r1, r5]
 8004f5c:	f000 f830 	bl	8004fc0 <_lseek_r>
 8004f60:	89a3      	ldrh	r3, [r4, #12]
 8004f62:	1c42      	adds	r2, r0, #1
 8004f64:	d103      	bne.n	8004f6e <__sseek+0x1a>
 8004f66:	4a05      	ldr	r2, [pc, #20]	; (8004f7c <__sseek+0x28>)
 8004f68:	4013      	ands	r3, r2
 8004f6a:	81a3      	strh	r3, [r4, #12]
 8004f6c:	bd70      	pop	{r4, r5, r6, pc}
 8004f6e:	2280      	movs	r2, #128	; 0x80
 8004f70:	0152      	lsls	r2, r2, #5
 8004f72:	4313      	orrs	r3, r2
 8004f74:	81a3      	strh	r3, [r4, #12]
 8004f76:	6560      	str	r0, [r4, #84]	; 0x54
 8004f78:	e7f8      	b.n	8004f6c <__sseek+0x18>
 8004f7a:	46c0      	nop			; (mov r8, r8)
 8004f7c:	ffffefff 	.word	0xffffefff

08004f80 <__sclose>:
 8004f80:	b510      	push	{r4, lr}
 8004f82:	230e      	movs	r3, #14
 8004f84:	5ec9      	ldrsh	r1, [r1, r3]
 8004f86:	f000 f809 	bl	8004f9c <_close_r>
 8004f8a:	bd10      	pop	{r4, pc}

08004f8c <memset>:
 8004f8c:	0003      	movs	r3, r0
 8004f8e:	1882      	adds	r2, r0, r2
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d100      	bne.n	8004f96 <memset+0xa>
 8004f94:	4770      	bx	lr
 8004f96:	7019      	strb	r1, [r3, #0]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	e7f9      	b.n	8004f90 <memset+0x4>

08004f9c <_close_r>:
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	b570      	push	{r4, r5, r6, lr}
 8004fa0:	4d06      	ldr	r5, [pc, #24]	; (8004fbc <_close_r+0x20>)
 8004fa2:	0004      	movs	r4, r0
 8004fa4:	0008      	movs	r0, r1
 8004fa6:	602b      	str	r3, [r5, #0]
 8004fa8:	f7fc f870 	bl	800108c <_close>
 8004fac:	1c43      	adds	r3, r0, #1
 8004fae:	d103      	bne.n	8004fb8 <_close_r+0x1c>
 8004fb0:	682b      	ldr	r3, [r5, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d000      	beq.n	8004fb8 <_close_r+0x1c>
 8004fb6:	6023      	str	r3, [r4, #0]
 8004fb8:	bd70      	pop	{r4, r5, r6, pc}
 8004fba:	46c0      	nop			; (mov r8, r8)
 8004fbc:	20000360 	.word	0x20000360

08004fc0 <_lseek_r>:
 8004fc0:	b570      	push	{r4, r5, r6, lr}
 8004fc2:	0004      	movs	r4, r0
 8004fc4:	0008      	movs	r0, r1
 8004fc6:	0011      	movs	r1, r2
 8004fc8:	001a      	movs	r2, r3
 8004fca:	2300      	movs	r3, #0
 8004fcc:	4d05      	ldr	r5, [pc, #20]	; (8004fe4 <_lseek_r+0x24>)
 8004fce:	602b      	str	r3, [r5, #0]
 8004fd0:	f7fc f87d 	bl	80010ce <_lseek>
 8004fd4:	1c43      	adds	r3, r0, #1
 8004fd6:	d103      	bne.n	8004fe0 <_lseek_r+0x20>
 8004fd8:	682b      	ldr	r3, [r5, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d000      	beq.n	8004fe0 <_lseek_r+0x20>
 8004fde:	6023      	str	r3, [r4, #0]
 8004fe0:	bd70      	pop	{r4, r5, r6, pc}
 8004fe2:	46c0      	nop			; (mov r8, r8)
 8004fe4:	20000360 	.word	0x20000360

08004fe8 <_read_r>:
 8004fe8:	b570      	push	{r4, r5, r6, lr}
 8004fea:	0004      	movs	r4, r0
 8004fec:	0008      	movs	r0, r1
 8004fee:	0011      	movs	r1, r2
 8004ff0:	001a      	movs	r2, r3
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	4d05      	ldr	r5, [pc, #20]	; (800500c <_read_r+0x24>)
 8004ff6:	602b      	str	r3, [r5, #0]
 8004ff8:	f7fc f80f 	bl	800101a <_read>
 8004ffc:	1c43      	adds	r3, r0, #1
 8004ffe:	d103      	bne.n	8005008 <_read_r+0x20>
 8005000:	682b      	ldr	r3, [r5, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d000      	beq.n	8005008 <_read_r+0x20>
 8005006:	6023      	str	r3, [r4, #0]
 8005008:	bd70      	pop	{r4, r5, r6, pc}
 800500a:	46c0      	nop			; (mov r8, r8)
 800500c:	20000360 	.word	0x20000360

08005010 <_write_r>:
 8005010:	b570      	push	{r4, r5, r6, lr}
 8005012:	0004      	movs	r4, r0
 8005014:	0008      	movs	r0, r1
 8005016:	0011      	movs	r1, r2
 8005018:	001a      	movs	r2, r3
 800501a:	2300      	movs	r3, #0
 800501c:	4d05      	ldr	r5, [pc, #20]	; (8005034 <_write_r+0x24>)
 800501e:	602b      	str	r3, [r5, #0]
 8005020:	f7fc f818 	bl	8001054 <_write>
 8005024:	1c43      	adds	r3, r0, #1
 8005026:	d103      	bne.n	8005030 <_write_r+0x20>
 8005028:	682b      	ldr	r3, [r5, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d000      	beq.n	8005030 <_write_r+0x20>
 800502e:	6023      	str	r3, [r4, #0]
 8005030:	bd70      	pop	{r4, r5, r6, pc}
 8005032:	46c0      	nop			; (mov r8, r8)
 8005034:	20000360 	.word	0x20000360

08005038 <__errno>:
 8005038:	4b01      	ldr	r3, [pc, #4]	; (8005040 <__errno+0x8>)
 800503a:	6818      	ldr	r0, [r3, #0]
 800503c:	4770      	bx	lr
 800503e:	46c0      	nop			; (mov r8, r8)
 8005040:	20000064 	.word	0x20000064

08005044 <__libc_init_array>:
 8005044:	b570      	push	{r4, r5, r6, lr}
 8005046:	2600      	movs	r6, #0
 8005048:	4c0c      	ldr	r4, [pc, #48]	; (800507c <__libc_init_array+0x38>)
 800504a:	4d0d      	ldr	r5, [pc, #52]	; (8005080 <__libc_init_array+0x3c>)
 800504c:	1b64      	subs	r4, r4, r5
 800504e:	10a4      	asrs	r4, r4, #2
 8005050:	42a6      	cmp	r6, r4
 8005052:	d109      	bne.n	8005068 <__libc_init_array+0x24>
 8005054:	2600      	movs	r6, #0
 8005056:	f000 ff99 	bl	8005f8c <_init>
 800505a:	4c0a      	ldr	r4, [pc, #40]	; (8005084 <__libc_init_array+0x40>)
 800505c:	4d0a      	ldr	r5, [pc, #40]	; (8005088 <__libc_init_array+0x44>)
 800505e:	1b64      	subs	r4, r4, r5
 8005060:	10a4      	asrs	r4, r4, #2
 8005062:	42a6      	cmp	r6, r4
 8005064:	d105      	bne.n	8005072 <__libc_init_array+0x2e>
 8005066:	bd70      	pop	{r4, r5, r6, pc}
 8005068:	00b3      	lsls	r3, r6, #2
 800506a:	58eb      	ldr	r3, [r5, r3]
 800506c:	4798      	blx	r3
 800506e:	3601      	adds	r6, #1
 8005070:	e7ee      	b.n	8005050 <__libc_init_array+0xc>
 8005072:	00b3      	lsls	r3, r6, #2
 8005074:	58eb      	ldr	r3, [r5, r3]
 8005076:	4798      	blx	r3
 8005078:	3601      	adds	r6, #1
 800507a:	e7f2      	b.n	8005062 <__libc_init_array+0x1e>
 800507c:	080060d0 	.word	0x080060d0
 8005080:	080060d0 	.word	0x080060d0
 8005084:	080060d4 	.word	0x080060d4
 8005088:	080060d0 	.word	0x080060d0

0800508c <__retarget_lock_init_recursive>:
 800508c:	4770      	bx	lr

0800508e <__retarget_lock_acquire_recursive>:
 800508e:	4770      	bx	lr

08005090 <__retarget_lock_release_recursive>:
 8005090:	4770      	bx	lr
	...

08005094 <_free_r>:
 8005094:	b570      	push	{r4, r5, r6, lr}
 8005096:	0005      	movs	r5, r0
 8005098:	2900      	cmp	r1, #0
 800509a:	d010      	beq.n	80050be <_free_r+0x2a>
 800509c:	1f0c      	subs	r4, r1, #4
 800509e:	6823      	ldr	r3, [r4, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	da00      	bge.n	80050a6 <_free_r+0x12>
 80050a4:	18e4      	adds	r4, r4, r3
 80050a6:	0028      	movs	r0, r5
 80050a8:	f000 f8e2 	bl	8005270 <__malloc_lock>
 80050ac:	4a1d      	ldr	r2, [pc, #116]	; (8005124 <_free_r+0x90>)
 80050ae:	6813      	ldr	r3, [r2, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d105      	bne.n	80050c0 <_free_r+0x2c>
 80050b4:	6063      	str	r3, [r4, #4]
 80050b6:	6014      	str	r4, [r2, #0]
 80050b8:	0028      	movs	r0, r5
 80050ba:	f000 f8e1 	bl	8005280 <__malloc_unlock>
 80050be:	bd70      	pop	{r4, r5, r6, pc}
 80050c0:	42a3      	cmp	r3, r4
 80050c2:	d908      	bls.n	80050d6 <_free_r+0x42>
 80050c4:	6820      	ldr	r0, [r4, #0]
 80050c6:	1821      	adds	r1, r4, r0
 80050c8:	428b      	cmp	r3, r1
 80050ca:	d1f3      	bne.n	80050b4 <_free_r+0x20>
 80050cc:	6819      	ldr	r1, [r3, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	1809      	adds	r1, r1, r0
 80050d2:	6021      	str	r1, [r4, #0]
 80050d4:	e7ee      	b.n	80050b4 <_free_r+0x20>
 80050d6:	001a      	movs	r2, r3
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d001      	beq.n	80050e2 <_free_r+0x4e>
 80050de:	42a3      	cmp	r3, r4
 80050e0:	d9f9      	bls.n	80050d6 <_free_r+0x42>
 80050e2:	6811      	ldr	r1, [r2, #0]
 80050e4:	1850      	adds	r0, r2, r1
 80050e6:	42a0      	cmp	r0, r4
 80050e8:	d10b      	bne.n	8005102 <_free_r+0x6e>
 80050ea:	6820      	ldr	r0, [r4, #0]
 80050ec:	1809      	adds	r1, r1, r0
 80050ee:	1850      	adds	r0, r2, r1
 80050f0:	6011      	str	r1, [r2, #0]
 80050f2:	4283      	cmp	r3, r0
 80050f4:	d1e0      	bne.n	80050b8 <_free_r+0x24>
 80050f6:	6818      	ldr	r0, [r3, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	1841      	adds	r1, r0, r1
 80050fc:	6011      	str	r1, [r2, #0]
 80050fe:	6053      	str	r3, [r2, #4]
 8005100:	e7da      	b.n	80050b8 <_free_r+0x24>
 8005102:	42a0      	cmp	r0, r4
 8005104:	d902      	bls.n	800510c <_free_r+0x78>
 8005106:	230c      	movs	r3, #12
 8005108:	602b      	str	r3, [r5, #0]
 800510a:	e7d5      	b.n	80050b8 <_free_r+0x24>
 800510c:	6820      	ldr	r0, [r4, #0]
 800510e:	1821      	adds	r1, r4, r0
 8005110:	428b      	cmp	r3, r1
 8005112:	d103      	bne.n	800511c <_free_r+0x88>
 8005114:	6819      	ldr	r1, [r3, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	1809      	adds	r1, r1, r0
 800511a:	6021      	str	r1, [r4, #0]
 800511c:	6063      	str	r3, [r4, #4]
 800511e:	6054      	str	r4, [r2, #4]
 8005120:	e7ca      	b.n	80050b8 <_free_r+0x24>
 8005122:	46c0      	nop			; (mov r8, r8)
 8005124:	20000368 	.word	0x20000368

08005128 <sbrk_aligned>:
 8005128:	b570      	push	{r4, r5, r6, lr}
 800512a:	4e0f      	ldr	r6, [pc, #60]	; (8005168 <sbrk_aligned+0x40>)
 800512c:	000d      	movs	r5, r1
 800512e:	6831      	ldr	r1, [r6, #0]
 8005130:	0004      	movs	r4, r0
 8005132:	2900      	cmp	r1, #0
 8005134:	d102      	bne.n	800513c <sbrk_aligned+0x14>
 8005136:	f000 fe41 	bl	8005dbc <_sbrk_r>
 800513a:	6030      	str	r0, [r6, #0]
 800513c:	0029      	movs	r1, r5
 800513e:	0020      	movs	r0, r4
 8005140:	f000 fe3c 	bl	8005dbc <_sbrk_r>
 8005144:	1c43      	adds	r3, r0, #1
 8005146:	d00a      	beq.n	800515e <sbrk_aligned+0x36>
 8005148:	2303      	movs	r3, #3
 800514a:	1cc5      	adds	r5, r0, #3
 800514c:	439d      	bics	r5, r3
 800514e:	42a8      	cmp	r0, r5
 8005150:	d007      	beq.n	8005162 <sbrk_aligned+0x3a>
 8005152:	1a29      	subs	r1, r5, r0
 8005154:	0020      	movs	r0, r4
 8005156:	f000 fe31 	bl	8005dbc <_sbrk_r>
 800515a:	3001      	adds	r0, #1
 800515c:	d101      	bne.n	8005162 <sbrk_aligned+0x3a>
 800515e:	2501      	movs	r5, #1
 8005160:	426d      	negs	r5, r5
 8005162:	0028      	movs	r0, r5
 8005164:	bd70      	pop	{r4, r5, r6, pc}
 8005166:	46c0      	nop			; (mov r8, r8)
 8005168:	2000036c 	.word	0x2000036c

0800516c <_malloc_r>:
 800516c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800516e:	2203      	movs	r2, #3
 8005170:	1ccb      	adds	r3, r1, #3
 8005172:	4393      	bics	r3, r2
 8005174:	3308      	adds	r3, #8
 8005176:	0006      	movs	r6, r0
 8005178:	001f      	movs	r7, r3
 800517a:	2b0c      	cmp	r3, #12
 800517c:	d238      	bcs.n	80051f0 <_malloc_r+0x84>
 800517e:	270c      	movs	r7, #12
 8005180:	42b9      	cmp	r1, r7
 8005182:	d837      	bhi.n	80051f4 <_malloc_r+0x88>
 8005184:	0030      	movs	r0, r6
 8005186:	f000 f873 	bl	8005270 <__malloc_lock>
 800518a:	4b38      	ldr	r3, [pc, #224]	; (800526c <_malloc_r+0x100>)
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	001c      	movs	r4, r3
 8005192:	2c00      	cmp	r4, #0
 8005194:	d133      	bne.n	80051fe <_malloc_r+0x92>
 8005196:	0039      	movs	r1, r7
 8005198:	0030      	movs	r0, r6
 800519a:	f7ff ffc5 	bl	8005128 <sbrk_aligned>
 800519e:	0004      	movs	r4, r0
 80051a0:	1c43      	adds	r3, r0, #1
 80051a2:	d15e      	bne.n	8005262 <_malloc_r+0xf6>
 80051a4:	9b00      	ldr	r3, [sp, #0]
 80051a6:	681c      	ldr	r4, [r3, #0]
 80051a8:	0025      	movs	r5, r4
 80051aa:	2d00      	cmp	r5, #0
 80051ac:	d14e      	bne.n	800524c <_malloc_r+0xe0>
 80051ae:	2c00      	cmp	r4, #0
 80051b0:	d051      	beq.n	8005256 <_malloc_r+0xea>
 80051b2:	6823      	ldr	r3, [r4, #0]
 80051b4:	0029      	movs	r1, r5
 80051b6:	18e3      	adds	r3, r4, r3
 80051b8:	0030      	movs	r0, r6
 80051ba:	9301      	str	r3, [sp, #4]
 80051bc:	f000 fdfe 	bl	8005dbc <_sbrk_r>
 80051c0:	9b01      	ldr	r3, [sp, #4]
 80051c2:	4283      	cmp	r3, r0
 80051c4:	d147      	bne.n	8005256 <_malloc_r+0xea>
 80051c6:	6823      	ldr	r3, [r4, #0]
 80051c8:	0030      	movs	r0, r6
 80051ca:	1aff      	subs	r7, r7, r3
 80051cc:	0039      	movs	r1, r7
 80051ce:	f7ff ffab 	bl	8005128 <sbrk_aligned>
 80051d2:	3001      	adds	r0, #1
 80051d4:	d03f      	beq.n	8005256 <_malloc_r+0xea>
 80051d6:	6823      	ldr	r3, [r4, #0]
 80051d8:	19db      	adds	r3, r3, r7
 80051da:	6023      	str	r3, [r4, #0]
 80051dc:	9b00      	ldr	r3, [sp, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d040      	beq.n	8005266 <_malloc_r+0xfa>
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	42a2      	cmp	r2, r4
 80051e8:	d133      	bne.n	8005252 <_malloc_r+0xe6>
 80051ea:	2200      	movs	r2, #0
 80051ec:	605a      	str	r2, [r3, #4]
 80051ee:	e014      	b.n	800521a <_malloc_r+0xae>
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	dac5      	bge.n	8005180 <_malloc_r+0x14>
 80051f4:	230c      	movs	r3, #12
 80051f6:	2500      	movs	r5, #0
 80051f8:	6033      	str	r3, [r6, #0]
 80051fa:	0028      	movs	r0, r5
 80051fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80051fe:	6821      	ldr	r1, [r4, #0]
 8005200:	1bc9      	subs	r1, r1, r7
 8005202:	d420      	bmi.n	8005246 <_malloc_r+0xda>
 8005204:	290b      	cmp	r1, #11
 8005206:	d918      	bls.n	800523a <_malloc_r+0xce>
 8005208:	19e2      	adds	r2, r4, r7
 800520a:	6027      	str	r7, [r4, #0]
 800520c:	42a3      	cmp	r3, r4
 800520e:	d112      	bne.n	8005236 <_malloc_r+0xca>
 8005210:	9b00      	ldr	r3, [sp, #0]
 8005212:	601a      	str	r2, [r3, #0]
 8005214:	6863      	ldr	r3, [r4, #4]
 8005216:	6011      	str	r1, [r2, #0]
 8005218:	6053      	str	r3, [r2, #4]
 800521a:	0030      	movs	r0, r6
 800521c:	0025      	movs	r5, r4
 800521e:	f000 f82f 	bl	8005280 <__malloc_unlock>
 8005222:	2207      	movs	r2, #7
 8005224:	350b      	adds	r5, #11
 8005226:	1d23      	adds	r3, r4, #4
 8005228:	4395      	bics	r5, r2
 800522a:	1aea      	subs	r2, r5, r3
 800522c:	429d      	cmp	r5, r3
 800522e:	d0e4      	beq.n	80051fa <_malloc_r+0x8e>
 8005230:	1b5b      	subs	r3, r3, r5
 8005232:	50a3      	str	r3, [r4, r2]
 8005234:	e7e1      	b.n	80051fa <_malloc_r+0x8e>
 8005236:	605a      	str	r2, [r3, #4]
 8005238:	e7ec      	b.n	8005214 <_malloc_r+0xa8>
 800523a:	6862      	ldr	r2, [r4, #4]
 800523c:	42a3      	cmp	r3, r4
 800523e:	d1d5      	bne.n	80051ec <_malloc_r+0x80>
 8005240:	9b00      	ldr	r3, [sp, #0]
 8005242:	601a      	str	r2, [r3, #0]
 8005244:	e7e9      	b.n	800521a <_malloc_r+0xae>
 8005246:	0023      	movs	r3, r4
 8005248:	6864      	ldr	r4, [r4, #4]
 800524a:	e7a2      	b.n	8005192 <_malloc_r+0x26>
 800524c:	002c      	movs	r4, r5
 800524e:	686d      	ldr	r5, [r5, #4]
 8005250:	e7ab      	b.n	80051aa <_malloc_r+0x3e>
 8005252:	0013      	movs	r3, r2
 8005254:	e7c4      	b.n	80051e0 <_malloc_r+0x74>
 8005256:	230c      	movs	r3, #12
 8005258:	0030      	movs	r0, r6
 800525a:	6033      	str	r3, [r6, #0]
 800525c:	f000 f810 	bl	8005280 <__malloc_unlock>
 8005260:	e7cb      	b.n	80051fa <_malloc_r+0x8e>
 8005262:	6027      	str	r7, [r4, #0]
 8005264:	e7d9      	b.n	800521a <_malloc_r+0xae>
 8005266:	605b      	str	r3, [r3, #4]
 8005268:	deff      	udf	#255	; 0xff
 800526a:	46c0      	nop			; (mov r8, r8)
 800526c:	20000368 	.word	0x20000368

08005270 <__malloc_lock>:
 8005270:	b510      	push	{r4, lr}
 8005272:	4802      	ldr	r0, [pc, #8]	; (800527c <__malloc_lock+0xc>)
 8005274:	f7ff ff0b 	bl	800508e <__retarget_lock_acquire_recursive>
 8005278:	bd10      	pop	{r4, pc}
 800527a:	46c0      	nop			; (mov r8, r8)
 800527c:	20000364 	.word	0x20000364

08005280 <__malloc_unlock>:
 8005280:	b510      	push	{r4, lr}
 8005282:	4802      	ldr	r0, [pc, #8]	; (800528c <__malloc_unlock+0xc>)
 8005284:	f7ff ff04 	bl	8005090 <__retarget_lock_release_recursive>
 8005288:	bd10      	pop	{r4, pc}
 800528a:	46c0      	nop			; (mov r8, r8)
 800528c:	20000364 	.word	0x20000364

08005290 <__ssputs_r>:
 8005290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005292:	b085      	sub	sp, #20
 8005294:	9301      	str	r3, [sp, #4]
 8005296:	9203      	str	r2, [sp, #12]
 8005298:	688e      	ldr	r6, [r1, #8]
 800529a:	9a01      	ldr	r2, [sp, #4]
 800529c:	0007      	movs	r7, r0
 800529e:	000c      	movs	r4, r1
 80052a0:	680b      	ldr	r3, [r1, #0]
 80052a2:	4296      	cmp	r6, r2
 80052a4:	d831      	bhi.n	800530a <__ssputs_r+0x7a>
 80052a6:	898a      	ldrh	r2, [r1, #12]
 80052a8:	2190      	movs	r1, #144	; 0x90
 80052aa:	00c9      	lsls	r1, r1, #3
 80052ac:	420a      	tst	r2, r1
 80052ae:	d029      	beq.n	8005304 <__ssputs_r+0x74>
 80052b0:	2003      	movs	r0, #3
 80052b2:	6921      	ldr	r1, [r4, #16]
 80052b4:	1a5b      	subs	r3, r3, r1
 80052b6:	9302      	str	r3, [sp, #8]
 80052b8:	6963      	ldr	r3, [r4, #20]
 80052ba:	4343      	muls	r3, r0
 80052bc:	0fdd      	lsrs	r5, r3, #31
 80052be:	18ed      	adds	r5, r5, r3
 80052c0:	9b01      	ldr	r3, [sp, #4]
 80052c2:	9802      	ldr	r0, [sp, #8]
 80052c4:	3301      	adds	r3, #1
 80052c6:	181b      	adds	r3, r3, r0
 80052c8:	106d      	asrs	r5, r5, #1
 80052ca:	42ab      	cmp	r3, r5
 80052cc:	d900      	bls.n	80052d0 <__ssputs_r+0x40>
 80052ce:	001d      	movs	r5, r3
 80052d0:	0552      	lsls	r2, r2, #21
 80052d2:	d529      	bpl.n	8005328 <__ssputs_r+0x98>
 80052d4:	0029      	movs	r1, r5
 80052d6:	0038      	movs	r0, r7
 80052d8:	f7ff ff48 	bl	800516c <_malloc_r>
 80052dc:	1e06      	subs	r6, r0, #0
 80052de:	d02d      	beq.n	800533c <__ssputs_r+0xac>
 80052e0:	9a02      	ldr	r2, [sp, #8]
 80052e2:	6921      	ldr	r1, [r4, #16]
 80052e4:	f000 fd87 	bl	8005df6 <memcpy>
 80052e8:	89a2      	ldrh	r2, [r4, #12]
 80052ea:	4b19      	ldr	r3, [pc, #100]	; (8005350 <__ssputs_r+0xc0>)
 80052ec:	401a      	ands	r2, r3
 80052ee:	2380      	movs	r3, #128	; 0x80
 80052f0:	4313      	orrs	r3, r2
 80052f2:	81a3      	strh	r3, [r4, #12]
 80052f4:	9b02      	ldr	r3, [sp, #8]
 80052f6:	6126      	str	r6, [r4, #16]
 80052f8:	18f6      	adds	r6, r6, r3
 80052fa:	6026      	str	r6, [r4, #0]
 80052fc:	6165      	str	r5, [r4, #20]
 80052fe:	9e01      	ldr	r6, [sp, #4]
 8005300:	1aed      	subs	r5, r5, r3
 8005302:	60a5      	str	r5, [r4, #8]
 8005304:	9b01      	ldr	r3, [sp, #4]
 8005306:	429e      	cmp	r6, r3
 8005308:	d900      	bls.n	800530c <__ssputs_r+0x7c>
 800530a:	9e01      	ldr	r6, [sp, #4]
 800530c:	0032      	movs	r2, r6
 800530e:	9903      	ldr	r1, [sp, #12]
 8005310:	6820      	ldr	r0, [r4, #0]
 8005312:	f000 fd3f 	bl	8005d94 <memmove>
 8005316:	2000      	movs	r0, #0
 8005318:	68a3      	ldr	r3, [r4, #8]
 800531a:	1b9b      	subs	r3, r3, r6
 800531c:	60a3      	str	r3, [r4, #8]
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	199b      	adds	r3, r3, r6
 8005322:	6023      	str	r3, [r4, #0]
 8005324:	b005      	add	sp, #20
 8005326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005328:	002a      	movs	r2, r5
 800532a:	0038      	movs	r0, r7
 800532c:	f000 fd6c 	bl	8005e08 <_realloc_r>
 8005330:	1e06      	subs	r6, r0, #0
 8005332:	d1df      	bne.n	80052f4 <__ssputs_r+0x64>
 8005334:	0038      	movs	r0, r7
 8005336:	6921      	ldr	r1, [r4, #16]
 8005338:	f7ff feac 	bl	8005094 <_free_r>
 800533c:	230c      	movs	r3, #12
 800533e:	2001      	movs	r0, #1
 8005340:	603b      	str	r3, [r7, #0]
 8005342:	89a2      	ldrh	r2, [r4, #12]
 8005344:	3334      	adds	r3, #52	; 0x34
 8005346:	4313      	orrs	r3, r2
 8005348:	81a3      	strh	r3, [r4, #12]
 800534a:	4240      	negs	r0, r0
 800534c:	e7ea      	b.n	8005324 <__ssputs_r+0x94>
 800534e:	46c0      	nop			; (mov r8, r8)
 8005350:	fffffb7f 	.word	0xfffffb7f

08005354 <_svfiprintf_r>:
 8005354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005356:	b0a1      	sub	sp, #132	; 0x84
 8005358:	9003      	str	r0, [sp, #12]
 800535a:	001d      	movs	r5, r3
 800535c:	898b      	ldrh	r3, [r1, #12]
 800535e:	000f      	movs	r7, r1
 8005360:	0016      	movs	r6, r2
 8005362:	061b      	lsls	r3, r3, #24
 8005364:	d511      	bpl.n	800538a <_svfiprintf_r+0x36>
 8005366:	690b      	ldr	r3, [r1, #16]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d10e      	bne.n	800538a <_svfiprintf_r+0x36>
 800536c:	2140      	movs	r1, #64	; 0x40
 800536e:	f7ff fefd 	bl	800516c <_malloc_r>
 8005372:	6038      	str	r0, [r7, #0]
 8005374:	6138      	str	r0, [r7, #16]
 8005376:	2800      	cmp	r0, #0
 8005378:	d105      	bne.n	8005386 <_svfiprintf_r+0x32>
 800537a:	230c      	movs	r3, #12
 800537c:	9a03      	ldr	r2, [sp, #12]
 800537e:	3801      	subs	r0, #1
 8005380:	6013      	str	r3, [r2, #0]
 8005382:	b021      	add	sp, #132	; 0x84
 8005384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005386:	2340      	movs	r3, #64	; 0x40
 8005388:	617b      	str	r3, [r7, #20]
 800538a:	2300      	movs	r3, #0
 800538c:	ac08      	add	r4, sp, #32
 800538e:	6163      	str	r3, [r4, #20]
 8005390:	3320      	adds	r3, #32
 8005392:	7663      	strb	r3, [r4, #25]
 8005394:	3310      	adds	r3, #16
 8005396:	76a3      	strb	r3, [r4, #26]
 8005398:	9507      	str	r5, [sp, #28]
 800539a:	0035      	movs	r5, r6
 800539c:	782b      	ldrb	r3, [r5, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <_svfiprintf_r+0x52>
 80053a2:	2b25      	cmp	r3, #37	; 0x25
 80053a4:	d148      	bne.n	8005438 <_svfiprintf_r+0xe4>
 80053a6:	1bab      	subs	r3, r5, r6
 80053a8:	9305      	str	r3, [sp, #20]
 80053aa:	42b5      	cmp	r5, r6
 80053ac:	d00b      	beq.n	80053c6 <_svfiprintf_r+0x72>
 80053ae:	0032      	movs	r2, r6
 80053b0:	0039      	movs	r1, r7
 80053b2:	9803      	ldr	r0, [sp, #12]
 80053b4:	f7ff ff6c 	bl	8005290 <__ssputs_r>
 80053b8:	3001      	adds	r0, #1
 80053ba:	d100      	bne.n	80053be <_svfiprintf_r+0x6a>
 80053bc:	e0af      	b.n	800551e <_svfiprintf_r+0x1ca>
 80053be:	6963      	ldr	r3, [r4, #20]
 80053c0:	9a05      	ldr	r2, [sp, #20]
 80053c2:	189b      	adds	r3, r3, r2
 80053c4:	6163      	str	r3, [r4, #20]
 80053c6:	782b      	ldrb	r3, [r5, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d100      	bne.n	80053ce <_svfiprintf_r+0x7a>
 80053cc:	e0a7      	b.n	800551e <_svfiprintf_r+0x1ca>
 80053ce:	2201      	movs	r2, #1
 80053d0:	2300      	movs	r3, #0
 80053d2:	4252      	negs	r2, r2
 80053d4:	6062      	str	r2, [r4, #4]
 80053d6:	a904      	add	r1, sp, #16
 80053d8:	3254      	adds	r2, #84	; 0x54
 80053da:	1852      	adds	r2, r2, r1
 80053dc:	1c6e      	adds	r6, r5, #1
 80053de:	6023      	str	r3, [r4, #0]
 80053e0:	60e3      	str	r3, [r4, #12]
 80053e2:	60a3      	str	r3, [r4, #8]
 80053e4:	7013      	strb	r3, [r2, #0]
 80053e6:	65a3      	str	r3, [r4, #88]	; 0x58
 80053e8:	4b55      	ldr	r3, [pc, #340]	; (8005540 <_svfiprintf_r+0x1ec>)
 80053ea:	2205      	movs	r2, #5
 80053ec:	0018      	movs	r0, r3
 80053ee:	7831      	ldrb	r1, [r6, #0]
 80053f0:	9305      	str	r3, [sp, #20]
 80053f2:	f000 fcf5 	bl	8005de0 <memchr>
 80053f6:	1c75      	adds	r5, r6, #1
 80053f8:	2800      	cmp	r0, #0
 80053fa:	d11f      	bne.n	800543c <_svfiprintf_r+0xe8>
 80053fc:	6822      	ldr	r2, [r4, #0]
 80053fe:	06d3      	lsls	r3, r2, #27
 8005400:	d504      	bpl.n	800540c <_svfiprintf_r+0xb8>
 8005402:	2353      	movs	r3, #83	; 0x53
 8005404:	a904      	add	r1, sp, #16
 8005406:	185b      	adds	r3, r3, r1
 8005408:	2120      	movs	r1, #32
 800540a:	7019      	strb	r1, [r3, #0]
 800540c:	0713      	lsls	r3, r2, #28
 800540e:	d504      	bpl.n	800541a <_svfiprintf_r+0xc6>
 8005410:	2353      	movs	r3, #83	; 0x53
 8005412:	a904      	add	r1, sp, #16
 8005414:	185b      	adds	r3, r3, r1
 8005416:	212b      	movs	r1, #43	; 0x2b
 8005418:	7019      	strb	r1, [r3, #0]
 800541a:	7833      	ldrb	r3, [r6, #0]
 800541c:	2b2a      	cmp	r3, #42	; 0x2a
 800541e:	d016      	beq.n	800544e <_svfiprintf_r+0xfa>
 8005420:	0035      	movs	r5, r6
 8005422:	2100      	movs	r1, #0
 8005424:	200a      	movs	r0, #10
 8005426:	68e3      	ldr	r3, [r4, #12]
 8005428:	782a      	ldrb	r2, [r5, #0]
 800542a:	1c6e      	adds	r6, r5, #1
 800542c:	3a30      	subs	r2, #48	; 0x30
 800542e:	2a09      	cmp	r2, #9
 8005430:	d94e      	bls.n	80054d0 <_svfiprintf_r+0x17c>
 8005432:	2900      	cmp	r1, #0
 8005434:	d111      	bne.n	800545a <_svfiprintf_r+0x106>
 8005436:	e017      	b.n	8005468 <_svfiprintf_r+0x114>
 8005438:	3501      	adds	r5, #1
 800543a:	e7af      	b.n	800539c <_svfiprintf_r+0x48>
 800543c:	9b05      	ldr	r3, [sp, #20]
 800543e:	6822      	ldr	r2, [r4, #0]
 8005440:	1ac0      	subs	r0, r0, r3
 8005442:	2301      	movs	r3, #1
 8005444:	4083      	lsls	r3, r0
 8005446:	4313      	orrs	r3, r2
 8005448:	002e      	movs	r6, r5
 800544a:	6023      	str	r3, [r4, #0]
 800544c:	e7cc      	b.n	80053e8 <_svfiprintf_r+0x94>
 800544e:	9b07      	ldr	r3, [sp, #28]
 8005450:	1d19      	adds	r1, r3, #4
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	9107      	str	r1, [sp, #28]
 8005456:	2b00      	cmp	r3, #0
 8005458:	db01      	blt.n	800545e <_svfiprintf_r+0x10a>
 800545a:	930b      	str	r3, [sp, #44]	; 0x2c
 800545c:	e004      	b.n	8005468 <_svfiprintf_r+0x114>
 800545e:	425b      	negs	r3, r3
 8005460:	60e3      	str	r3, [r4, #12]
 8005462:	2302      	movs	r3, #2
 8005464:	4313      	orrs	r3, r2
 8005466:	6023      	str	r3, [r4, #0]
 8005468:	782b      	ldrb	r3, [r5, #0]
 800546a:	2b2e      	cmp	r3, #46	; 0x2e
 800546c:	d10a      	bne.n	8005484 <_svfiprintf_r+0x130>
 800546e:	786b      	ldrb	r3, [r5, #1]
 8005470:	2b2a      	cmp	r3, #42	; 0x2a
 8005472:	d135      	bne.n	80054e0 <_svfiprintf_r+0x18c>
 8005474:	9b07      	ldr	r3, [sp, #28]
 8005476:	3502      	adds	r5, #2
 8005478:	1d1a      	adds	r2, r3, #4
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	9207      	str	r2, [sp, #28]
 800547e:	2b00      	cmp	r3, #0
 8005480:	db2b      	blt.n	80054da <_svfiprintf_r+0x186>
 8005482:	9309      	str	r3, [sp, #36]	; 0x24
 8005484:	4e2f      	ldr	r6, [pc, #188]	; (8005544 <_svfiprintf_r+0x1f0>)
 8005486:	2203      	movs	r2, #3
 8005488:	0030      	movs	r0, r6
 800548a:	7829      	ldrb	r1, [r5, #0]
 800548c:	f000 fca8 	bl	8005de0 <memchr>
 8005490:	2800      	cmp	r0, #0
 8005492:	d006      	beq.n	80054a2 <_svfiprintf_r+0x14e>
 8005494:	2340      	movs	r3, #64	; 0x40
 8005496:	1b80      	subs	r0, r0, r6
 8005498:	4083      	lsls	r3, r0
 800549a:	6822      	ldr	r2, [r4, #0]
 800549c:	3501      	adds	r5, #1
 800549e:	4313      	orrs	r3, r2
 80054a0:	6023      	str	r3, [r4, #0]
 80054a2:	7829      	ldrb	r1, [r5, #0]
 80054a4:	2206      	movs	r2, #6
 80054a6:	4828      	ldr	r0, [pc, #160]	; (8005548 <_svfiprintf_r+0x1f4>)
 80054a8:	1c6e      	adds	r6, r5, #1
 80054aa:	7621      	strb	r1, [r4, #24]
 80054ac:	f000 fc98 	bl	8005de0 <memchr>
 80054b0:	2800      	cmp	r0, #0
 80054b2:	d03c      	beq.n	800552e <_svfiprintf_r+0x1da>
 80054b4:	4b25      	ldr	r3, [pc, #148]	; (800554c <_svfiprintf_r+0x1f8>)
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d125      	bne.n	8005506 <_svfiprintf_r+0x1b2>
 80054ba:	2207      	movs	r2, #7
 80054bc:	9b07      	ldr	r3, [sp, #28]
 80054be:	3307      	adds	r3, #7
 80054c0:	4393      	bics	r3, r2
 80054c2:	3308      	adds	r3, #8
 80054c4:	9307      	str	r3, [sp, #28]
 80054c6:	6963      	ldr	r3, [r4, #20]
 80054c8:	9a04      	ldr	r2, [sp, #16]
 80054ca:	189b      	adds	r3, r3, r2
 80054cc:	6163      	str	r3, [r4, #20]
 80054ce:	e764      	b.n	800539a <_svfiprintf_r+0x46>
 80054d0:	4343      	muls	r3, r0
 80054d2:	0035      	movs	r5, r6
 80054d4:	2101      	movs	r1, #1
 80054d6:	189b      	adds	r3, r3, r2
 80054d8:	e7a6      	b.n	8005428 <_svfiprintf_r+0xd4>
 80054da:	2301      	movs	r3, #1
 80054dc:	425b      	negs	r3, r3
 80054de:	e7d0      	b.n	8005482 <_svfiprintf_r+0x12e>
 80054e0:	2300      	movs	r3, #0
 80054e2:	200a      	movs	r0, #10
 80054e4:	001a      	movs	r2, r3
 80054e6:	3501      	adds	r5, #1
 80054e8:	6063      	str	r3, [r4, #4]
 80054ea:	7829      	ldrb	r1, [r5, #0]
 80054ec:	1c6e      	adds	r6, r5, #1
 80054ee:	3930      	subs	r1, #48	; 0x30
 80054f0:	2909      	cmp	r1, #9
 80054f2:	d903      	bls.n	80054fc <_svfiprintf_r+0x1a8>
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d0c5      	beq.n	8005484 <_svfiprintf_r+0x130>
 80054f8:	9209      	str	r2, [sp, #36]	; 0x24
 80054fa:	e7c3      	b.n	8005484 <_svfiprintf_r+0x130>
 80054fc:	4342      	muls	r2, r0
 80054fe:	0035      	movs	r5, r6
 8005500:	2301      	movs	r3, #1
 8005502:	1852      	adds	r2, r2, r1
 8005504:	e7f1      	b.n	80054ea <_svfiprintf_r+0x196>
 8005506:	aa07      	add	r2, sp, #28
 8005508:	9200      	str	r2, [sp, #0]
 800550a:	0021      	movs	r1, r4
 800550c:	003a      	movs	r2, r7
 800550e:	4b10      	ldr	r3, [pc, #64]	; (8005550 <_svfiprintf_r+0x1fc>)
 8005510:	9803      	ldr	r0, [sp, #12]
 8005512:	e000      	b.n	8005516 <_svfiprintf_r+0x1c2>
 8005514:	bf00      	nop
 8005516:	9004      	str	r0, [sp, #16]
 8005518:	9b04      	ldr	r3, [sp, #16]
 800551a:	3301      	adds	r3, #1
 800551c:	d1d3      	bne.n	80054c6 <_svfiprintf_r+0x172>
 800551e:	89bb      	ldrh	r3, [r7, #12]
 8005520:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005522:	065b      	lsls	r3, r3, #25
 8005524:	d400      	bmi.n	8005528 <_svfiprintf_r+0x1d4>
 8005526:	e72c      	b.n	8005382 <_svfiprintf_r+0x2e>
 8005528:	2001      	movs	r0, #1
 800552a:	4240      	negs	r0, r0
 800552c:	e729      	b.n	8005382 <_svfiprintf_r+0x2e>
 800552e:	aa07      	add	r2, sp, #28
 8005530:	9200      	str	r2, [sp, #0]
 8005532:	0021      	movs	r1, r4
 8005534:	003a      	movs	r2, r7
 8005536:	4b06      	ldr	r3, [pc, #24]	; (8005550 <_svfiprintf_r+0x1fc>)
 8005538:	9803      	ldr	r0, [sp, #12]
 800553a:	f000 f9bf 	bl	80058bc <_printf_i>
 800553e:	e7ea      	b.n	8005516 <_svfiprintf_r+0x1c2>
 8005540:	08006094 	.word	0x08006094
 8005544:	0800609a 	.word	0x0800609a
 8005548:	0800609e 	.word	0x0800609e
 800554c:	00000000 	.word	0x00000000
 8005550:	08005291 	.word	0x08005291

08005554 <__sfputc_r>:
 8005554:	6893      	ldr	r3, [r2, #8]
 8005556:	b510      	push	{r4, lr}
 8005558:	3b01      	subs	r3, #1
 800555a:	6093      	str	r3, [r2, #8]
 800555c:	2b00      	cmp	r3, #0
 800555e:	da04      	bge.n	800556a <__sfputc_r+0x16>
 8005560:	6994      	ldr	r4, [r2, #24]
 8005562:	42a3      	cmp	r3, r4
 8005564:	db07      	blt.n	8005576 <__sfputc_r+0x22>
 8005566:	290a      	cmp	r1, #10
 8005568:	d005      	beq.n	8005576 <__sfputc_r+0x22>
 800556a:	6813      	ldr	r3, [r2, #0]
 800556c:	1c58      	adds	r0, r3, #1
 800556e:	6010      	str	r0, [r2, #0]
 8005570:	7019      	strb	r1, [r3, #0]
 8005572:	0008      	movs	r0, r1
 8005574:	bd10      	pop	{r4, pc}
 8005576:	f000 fb66 	bl	8005c46 <__swbuf_r>
 800557a:	0001      	movs	r1, r0
 800557c:	e7f9      	b.n	8005572 <__sfputc_r+0x1e>

0800557e <__sfputs_r>:
 800557e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005580:	0006      	movs	r6, r0
 8005582:	000f      	movs	r7, r1
 8005584:	0014      	movs	r4, r2
 8005586:	18d5      	adds	r5, r2, r3
 8005588:	42ac      	cmp	r4, r5
 800558a:	d101      	bne.n	8005590 <__sfputs_r+0x12>
 800558c:	2000      	movs	r0, #0
 800558e:	e007      	b.n	80055a0 <__sfputs_r+0x22>
 8005590:	7821      	ldrb	r1, [r4, #0]
 8005592:	003a      	movs	r2, r7
 8005594:	0030      	movs	r0, r6
 8005596:	f7ff ffdd 	bl	8005554 <__sfputc_r>
 800559a:	3401      	adds	r4, #1
 800559c:	1c43      	adds	r3, r0, #1
 800559e:	d1f3      	bne.n	8005588 <__sfputs_r+0xa>
 80055a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080055a4 <_vfiprintf_r>:
 80055a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055a6:	b0a1      	sub	sp, #132	; 0x84
 80055a8:	000f      	movs	r7, r1
 80055aa:	0015      	movs	r5, r2
 80055ac:	001e      	movs	r6, r3
 80055ae:	9003      	str	r0, [sp, #12]
 80055b0:	2800      	cmp	r0, #0
 80055b2:	d004      	beq.n	80055be <_vfiprintf_r+0x1a>
 80055b4:	6a03      	ldr	r3, [r0, #32]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d101      	bne.n	80055be <_vfiprintf_r+0x1a>
 80055ba:	f7ff fc37 	bl	8004e2c <__sinit>
 80055be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055c0:	07db      	lsls	r3, r3, #31
 80055c2:	d405      	bmi.n	80055d0 <_vfiprintf_r+0x2c>
 80055c4:	89bb      	ldrh	r3, [r7, #12]
 80055c6:	059b      	lsls	r3, r3, #22
 80055c8:	d402      	bmi.n	80055d0 <_vfiprintf_r+0x2c>
 80055ca:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80055cc:	f7ff fd5f 	bl	800508e <__retarget_lock_acquire_recursive>
 80055d0:	89bb      	ldrh	r3, [r7, #12]
 80055d2:	071b      	lsls	r3, r3, #28
 80055d4:	d502      	bpl.n	80055dc <_vfiprintf_r+0x38>
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d113      	bne.n	8005604 <_vfiprintf_r+0x60>
 80055dc:	0039      	movs	r1, r7
 80055de:	9803      	ldr	r0, [sp, #12]
 80055e0:	f000 fb74 	bl	8005ccc <__swsetup_r>
 80055e4:	2800      	cmp	r0, #0
 80055e6:	d00d      	beq.n	8005604 <_vfiprintf_r+0x60>
 80055e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055ea:	07db      	lsls	r3, r3, #31
 80055ec:	d503      	bpl.n	80055f6 <_vfiprintf_r+0x52>
 80055ee:	2001      	movs	r0, #1
 80055f0:	4240      	negs	r0, r0
 80055f2:	b021      	add	sp, #132	; 0x84
 80055f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055f6:	89bb      	ldrh	r3, [r7, #12]
 80055f8:	059b      	lsls	r3, r3, #22
 80055fa:	d4f8      	bmi.n	80055ee <_vfiprintf_r+0x4a>
 80055fc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80055fe:	f7ff fd47 	bl	8005090 <__retarget_lock_release_recursive>
 8005602:	e7f4      	b.n	80055ee <_vfiprintf_r+0x4a>
 8005604:	2300      	movs	r3, #0
 8005606:	ac08      	add	r4, sp, #32
 8005608:	6163      	str	r3, [r4, #20]
 800560a:	3320      	adds	r3, #32
 800560c:	7663      	strb	r3, [r4, #25]
 800560e:	3310      	adds	r3, #16
 8005610:	76a3      	strb	r3, [r4, #26]
 8005612:	9607      	str	r6, [sp, #28]
 8005614:	002e      	movs	r6, r5
 8005616:	7833      	ldrb	r3, [r6, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d001      	beq.n	8005620 <_vfiprintf_r+0x7c>
 800561c:	2b25      	cmp	r3, #37	; 0x25
 800561e:	d148      	bne.n	80056b2 <_vfiprintf_r+0x10e>
 8005620:	1b73      	subs	r3, r6, r5
 8005622:	9305      	str	r3, [sp, #20]
 8005624:	42ae      	cmp	r6, r5
 8005626:	d00b      	beq.n	8005640 <_vfiprintf_r+0x9c>
 8005628:	002a      	movs	r2, r5
 800562a:	0039      	movs	r1, r7
 800562c:	9803      	ldr	r0, [sp, #12]
 800562e:	f7ff ffa6 	bl	800557e <__sfputs_r>
 8005632:	3001      	adds	r0, #1
 8005634:	d100      	bne.n	8005638 <_vfiprintf_r+0x94>
 8005636:	e0af      	b.n	8005798 <_vfiprintf_r+0x1f4>
 8005638:	6963      	ldr	r3, [r4, #20]
 800563a:	9a05      	ldr	r2, [sp, #20]
 800563c:	189b      	adds	r3, r3, r2
 800563e:	6163      	str	r3, [r4, #20]
 8005640:	7833      	ldrb	r3, [r6, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d100      	bne.n	8005648 <_vfiprintf_r+0xa4>
 8005646:	e0a7      	b.n	8005798 <_vfiprintf_r+0x1f4>
 8005648:	2201      	movs	r2, #1
 800564a:	2300      	movs	r3, #0
 800564c:	4252      	negs	r2, r2
 800564e:	6062      	str	r2, [r4, #4]
 8005650:	a904      	add	r1, sp, #16
 8005652:	3254      	adds	r2, #84	; 0x54
 8005654:	1852      	adds	r2, r2, r1
 8005656:	1c75      	adds	r5, r6, #1
 8005658:	6023      	str	r3, [r4, #0]
 800565a:	60e3      	str	r3, [r4, #12]
 800565c:	60a3      	str	r3, [r4, #8]
 800565e:	7013      	strb	r3, [r2, #0]
 8005660:	65a3      	str	r3, [r4, #88]	; 0x58
 8005662:	4b59      	ldr	r3, [pc, #356]	; (80057c8 <_vfiprintf_r+0x224>)
 8005664:	2205      	movs	r2, #5
 8005666:	0018      	movs	r0, r3
 8005668:	7829      	ldrb	r1, [r5, #0]
 800566a:	9305      	str	r3, [sp, #20]
 800566c:	f000 fbb8 	bl	8005de0 <memchr>
 8005670:	1c6e      	adds	r6, r5, #1
 8005672:	2800      	cmp	r0, #0
 8005674:	d11f      	bne.n	80056b6 <_vfiprintf_r+0x112>
 8005676:	6822      	ldr	r2, [r4, #0]
 8005678:	06d3      	lsls	r3, r2, #27
 800567a:	d504      	bpl.n	8005686 <_vfiprintf_r+0xe2>
 800567c:	2353      	movs	r3, #83	; 0x53
 800567e:	a904      	add	r1, sp, #16
 8005680:	185b      	adds	r3, r3, r1
 8005682:	2120      	movs	r1, #32
 8005684:	7019      	strb	r1, [r3, #0]
 8005686:	0713      	lsls	r3, r2, #28
 8005688:	d504      	bpl.n	8005694 <_vfiprintf_r+0xf0>
 800568a:	2353      	movs	r3, #83	; 0x53
 800568c:	a904      	add	r1, sp, #16
 800568e:	185b      	adds	r3, r3, r1
 8005690:	212b      	movs	r1, #43	; 0x2b
 8005692:	7019      	strb	r1, [r3, #0]
 8005694:	782b      	ldrb	r3, [r5, #0]
 8005696:	2b2a      	cmp	r3, #42	; 0x2a
 8005698:	d016      	beq.n	80056c8 <_vfiprintf_r+0x124>
 800569a:	002e      	movs	r6, r5
 800569c:	2100      	movs	r1, #0
 800569e:	200a      	movs	r0, #10
 80056a0:	68e3      	ldr	r3, [r4, #12]
 80056a2:	7832      	ldrb	r2, [r6, #0]
 80056a4:	1c75      	adds	r5, r6, #1
 80056a6:	3a30      	subs	r2, #48	; 0x30
 80056a8:	2a09      	cmp	r2, #9
 80056aa:	d94e      	bls.n	800574a <_vfiprintf_r+0x1a6>
 80056ac:	2900      	cmp	r1, #0
 80056ae:	d111      	bne.n	80056d4 <_vfiprintf_r+0x130>
 80056b0:	e017      	b.n	80056e2 <_vfiprintf_r+0x13e>
 80056b2:	3601      	adds	r6, #1
 80056b4:	e7af      	b.n	8005616 <_vfiprintf_r+0x72>
 80056b6:	9b05      	ldr	r3, [sp, #20]
 80056b8:	6822      	ldr	r2, [r4, #0]
 80056ba:	1ac0      	subs	r0, r0, r3
 80056bc:	2301      	movs	r3, #1
 80056be:	4083      	lsls	r3, r0
 80056c0:	4313      	orrs	r3, r2
 80056c2:	0035      	movs	r5, r6
 80056c4:	6023      	str	r3, [r4, #0]
 80056c6:	e7cc      	b.n	8005662 <_vfiprintf_r+0xbe>
 80056c8:	9b07      	ldr	r3, [sp, #28]
 80056ca:	1d19      	adds	r1, r3, #4
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	9107      	str	r1, [sp, #28]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	db01      	blt.n	80056d8 <_vfiprintf_r+0x134>
 80056d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80056d6:	e004      	b.n	80056e2 <_vfiprintf_r+0x13e>
 80056d8:	425b      	negs	r3, r3
 80056da:	60e3      	str	r3, [r4, #12]
 80056dc:	2302      	movs	r3, #2
 80056de:	4313      	orrs	r3, r2
 80056e0:	6023      	str	r3, [r4, #0]
 80056e2:	7833      	ldrb	r3, [r6, #0]
 80056e4:	2b2e      	cmp	r3, #46	; 0x2e
 80056e6:	d10a      	bne.n	80056fe <_vfiprintf_r+0x15a>
 80056e8:	7873      	ldrb	r3, [r6, #1]
 80056ea:	2b2a      	cmp	r3, #42	; 0x2a
 80056ec:	d135      	bne.n	800575a <_vfiprintf_r+0x1b6>
 80056ee:	9b07      	ldr	r3, [sp, #28]
 80056f0:	3602      	adds	r6, #2
 80056f2:	1d1a      	adds	r2, r3, #4
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	9207      	str	r2, [sp, #28]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	db2b      	blt.n	8005754 <_vfiprintf_r+0x1b0>
 80056fc:	9309      	str	r3, [sp, #36]	; 0x24
 80056fe:	4d33      	ldr	r5, [pc, #204]	; (80057cc <_vfiprintf_r+0x228>)
 8005700:	2203      	movs	r2, #3
 8005702:	0028      	movs	r0, r5
 8005704:	7831      	ldrb	r1, [r6, #0]
 8005706:	f000 fb6b 	bl	8005de0 <memchr>
 800570a:	2800      	cmp	r0, #0
 800570c:	d006      	beq.n	800571c <_vfiprintf_r+0x178>
 800570e:	2340      	movs	r3, #64	; 0x40
 8005710:	1b40      	subs	r0, r0, r5
 8005712:	4083      	lsls	r3, r0
 8005714:	6822      	ldr	r2, [r4, #0]
 8005716:	3601      	adds	r6, #1
 8005718:	4313      	orrs	r3, r2
 800571a:	6023      	str	r3, [r4, #0]
 800571c:	7831      	ldrb	r1, [r6, #0]
 800571e:	2206      	movs	r2, #6
 8005720:	482b      	ldr	r0, [pc, #172]	; (80057d0 <_vfiprintf_r+0x22c>)
 8005722:	1c75      	adds	r5, r6, #1
 8005724:	7621      	strb	r1, [r4, #24]
 8005726:	f000 fb5b 	bl	8005de0 <memchr>
 800572a:	2800      	cmp	r0, #0
 800572c:	d043      	beq.n	80057b6 <_vfiprintf_r+0x212>
 800572e:	4b29      	ldr	r3, [pc, #164]	; (80057d4 <_vfiprintf_r+0x230>)
 8005730:	2b00      	cmp	r3, #0
 8005732:	d125      	bne.n	8005780 <_vfiprintf_r+0x1dc>
 8005734:	2207      	movs	r2, #7
 8005736:	9b07      	ldr	r3, [sp, #28]
 8005738:	3307      	adds	r3, #7
 800573a:	4393      	bics	r3, r2
 800573c:	3308      	adds	r3, #8
 800573e:	9307      	str	r3, [sp, #28]
 8005740:	6963      	ldr	r3, [r4, #20]
 8005742:	9a04      	ldr	r2, [sp, #16]
 8005744:	189b      	adds	r3, r3, r2
 8005746:	6163      	str	r3, [r4, #20]
 8005748:	e764      	b.n	8005614 <_vfiprintf_r+0x70>
 800574a:	4343      	muls	r3, r0
 800574c:	002e      	movs	r6, r5
 800574e:	2101      	movs	r1, #1
 8005750:	189b      	adds	r3, r3, r2
 8005752:	e7a6      	b.n	80056a2 <_vfiprintf_r+0xfe>
 8005754:	2301      	movs	r3, #1
 8005756:	425b      	negs	r3, r3
 8005758:	e7d0      	b.n	80056fc <_vfiprintf_r+0x158>
 800575a:	2300      	movs	r3, #0
 800575c:	200a      	movs	r0, #10
 800575e:	001a      	movs	r2, r3
 8005760:	3601      	adds	r6, #1
 8005762:	6063      	str	r3, [r4, #4]
 8005764:	7831      	ldrb	r1, [r6, #0]
 8005766:	1c75      	adds	r5, r6, #1
 8005768:	3930      	subs	r1, #48	; 0x30
 800576a:	2909      	cmp	r1, #9
 800576c:	d903      	bls.n	8005776 <_vfiprintf_r+0x1d2>
 800576e:	2b00      	cmp	r3, #0
 8005770:	d0c5      	beq.n	80056fe <_vfiprintf_r+0x15a>
 8005772:	9209      	str	r2, [sp, #36]	; 0x24
 8005774:	e7c3      	b.n	80056fe <_vfiprintf_r+0x15a>
 8005776:	4342      	muls	r2, r0
 8005778:	002e      	movs	r6, r5
 800577a:	2301      	movs	r3, #1
 800577c:	1852      	adds	r2, r2, r1
 800577e:	e7f1      	b.n	8005764 <_vfiprintf_r+0x1c0>
 8005780:	aa07      	add	r2, sp, #28
 8005782:	9200      	str	r2, [sp, #0]
 8005784:	0021      	movs	r1, r4
 8005786:	003a      	movs	r2, r7
 8005788:	4b13      	ldr	r3, [pc, #76]	; (80057d8 <_vfiprintf_r+0x234>)
 800578a:	9803      	ldr	r0, [sp, #12]
 800578c:	e000      	b.n	8005790 <_vfiprintf_r+0x1ec>
 800578e:	bf00      	nop
 8005790:	9004      	str	r0, [sp, #16]
 8005792:	9b04      	ldr	r3, [sp, #16]
 8005794:	3301      	adds	r3, #1
 8005796:	d1d3      	bne.n	8005740 <_vfiprintf_r+0x19c>
 8005798:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800579a:	07db      	lsls	r3, r3, #31
 800579c:	d405      	bmi.n	80057aa <_vfiprintf_r+0x206>
 800579e:	89bb      	ldrh	r3, [r7, #12]
 80057a0:	059b      	lsls	r3, r3, #22
 80057a2:	d402      	bmi.n	80057aa <_vfiprintf_r+0x206>
 80057a4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80057a6:	f7ff fc73 	bl	8005090 <__retarget_lock_release_recursive>
 80057aa:	89bb      	ldrh	r3, [r7, #12]
 80057ac:	065b      	lsls	r3, r3, #25
 80057ae:	d500      	bpl.n	80057b2 <_vfiprintf_r+0x20e>
 80057b0:	e71d      	b.n	80055ee <_vfiprintf_r+0x4a>
 80057b2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80057b4:	e71d      	b.n	80055f2 <_vfiprintf_r+0x4e>
 80057b6:	aa07      	add	r2, sp, #28
 80057b8:	9200      	str	r2, [sp, #0]
 80057ba:	0021      	movs	r1, r4
 80057bc:	003a      	movs	r2, r7
 80057be:	4b06      	ldr	r3, [pc, #24]	; (80057d8 <_vfiprintf_r+0x234>)
 80057c0:	9803      	ldr	r0, [sp, #12]
 80057c2:	f000 f87b 	bl	80058bc <_printf_i>
 80057c6:	e7e3      	b.n	8005790 <_vfiprintf_r+0x1ec>
 80057c8:	08006094 	.word	0x08006094
 80057cc:	0800609a 	.word	0x0800609a
 80057d0:	0800609e 	.word	0x0800609e
 80057d4:	00000000 	.word	0x00000000
 80057d8:	0800557f 	.word	0x0800557f

080057dc <_printf_common>:
 80057dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057de:	0016      	movs	r6, r2
 80057e0:	9301      	str	r3, [sp, #4]
 80057e2:	688a      	ldr	r2, [r1, #8]
 80057e4:	690b      	ldr	r3, [r1, #16]
 80057e6:	000c      	movs	r4, r1
 80057e8:	9000      	str	r0, [sp, #0]
 80057ea:	4293      	cmp	r3, r2
 80057ec:	da00      	bge.n	80057f0 <_printf_common+0x14>
 80057ee:	0013      	movs	r3, r2
 80057f0:	0022      	movs	r2, r4
 80057f2:	6033      	str	r3, [r6, #0]
 80057f4:	3243      	adds	r2, #67	; 0x43
 80057f6:	7812      	ldrb	r2, [r2, #0]
 80057f8:	2a00      	cmp	r2, #0
 80057fa:	d001      	beq.n	8005800 <_printf_common+0x24>
 80057fc:	3301      	adds	r3, #1
 80057fe:	6033      	str	r3, [r6, #0]
 8005800:	6823      	ldr	r3, [r4, #0]
 8005802:	069b      	lsls	r3, r3, #26
 8005804:	d502      	bpl.n	800580c <_printf_common+0x30>
 8005806:	6833      	ldr	r3, [r6, #0]
 8005808:	3302      	adds	r3, #2
 800580a:	6033      	str	r3, [r6, #0]
 800580c:	6822      	ldr	r2, [r4, #0]
 800580e:	2306      	movs	r3, #6
 8005810:	0015      	movs	r5, r2
 8005812:	401d      	ands	r5, r3
 8005814:	421a      	tst	r2, r3
 8005816:	d027      	beq.n	8005868 <_printf_common+0x8c>
 8005818:	0023      	movs	r3, r4
 800581a:	3343      	adds	r3, #67	; 0x43
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	1e5a      	subs	r2, r3, #1
 8005820:	4193      	sbcs	r3, r2
 8005822:	6822      	ldr	r2, [r4, #0]
 8005824:	0692      	lsls	r2, r2, #26
 8005826:	d430      	bmi.n	800588a <_printf_common+0xae>
 8005828:	0022      	movs	r2, r4
 800582a:	9901      	ldr	r1, [sp, #4]
 800582c:	9800      	ldr	r0, [sp, #0]
 800582e:	9d08      	ldr	r5, [sp, #32]
 8005830:	3243      	adds	r2, #67	; 0x43
 8005832:	47a8      	blx	r5
 8005834:	3001      	adds	r0, #1
 8005836:	d025      	beq.n	8005884 <_printf_common+0xa8>
 8005838:	2206      	movs	r2, #6
 800583a:	6823      	ldr	r3, [r4, #0]
 800583c:	2500      	movs	r5, #0
 800583e:	4013      	ands	r3, r2
 8005840:	2b04      	cmp	r3, #4
 8005842:	d105      	bne.n	8005850 <_printf_common+0x74>
 8005844:	6833      	ldr	r3, [r6, #0]
 8005846:	68e5      	ldr	r5, [r4, #12]
 8005848:	1aed      	subs	r5, r5, r3
 800584a:	43eb      	mvns	r3, r5
 800584c:	17db      	asrs	r3, r3, #31
 800584e:	401d      	ands	r5, r3
 8005850:	68a3      	ldr	r3, [r4, #8]
 8005852:	6922      	ldr	r2, [r4, #16]
 8005854:	4293      	cmp	r3, r2
 8005856:	dd01      	ble.n	800585c <_printf_common+0x80>
 8005858:	1a9b      	subs	r3, r3, r2
 800585a:	18ed      	adds	r5, r5, r3
 800585c:	2600      	movs	r6, #0
 800585e:	42b5      	cmp	r5, r6
 8005860:	d120      	bne.n	80058a4 <_printf_common+0xc8>
 8005862:	2000      	movs	r0, #0
 8005864:	e010      	b.n	8005888 <_printf_common+0xac>
 8005866:	3501      	adds	r5, #1
 8005868:	68e3      	ldr	r3, [r4, #12]
 800586a:	6832      	ldr	r2, [r6, #0]
 800586c:	1a9b      	subs	r3, r3, r2
 800586e:	42ab      	cmp	r3, r5
 8005870:	ddd2      	ble.n	8005818 <_printf_common+0x3c>
 8005872:	0022      	movs	r2, r4
 8005874:	2301      	movs	r3, #1
 8005876:	9901      	ldr	r1, [sp, #4]
 8005878:	9800      	ldr	r0, [sp, #0]
 800587a:	9f08      	ldr	r7, [sp, #32]
 800587c:	3219      	adds	r2, #25
 800587e:	47b8      	blx	r7
 8005880:	3001      	adds	r0, #1
 8005882:	d1f0      	bne.n	8005866 <_printf_common+0x8a>
 8005884:	2001      	movs	r0, #1
 8005886:	4240      	negs	r0, r0
 8005888:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800588a:	2030      	movs	r0, #48	; 0x30
 800588c:	18e1      	adds	r1, r4, r3
 800588e:	3143      	adds	r1, #67	; 0x43
 8005890:	7008      	strb	r0, [r1, #0]
 8005892:	0021      	movs	r1, r4
 8005894:	1c5a      	adds	r2, r3, #1
 8005896:	3145      	adds	r1, #69	; 0x45
 8005898:	7809      	ldrb	r1, [r1, #0]
 800589a:	18a2      	adds	r2, r4, r2
 800589c:	3243      	adds	r2, #67	; 0x43
 800589e:	3302      	adds	r3, #2
 80058a0:	7011      	strb	r1, [r2, #0]
 80058a2:	e7c1      	b.n	8005828 <_printf_common+0x4c>
 80058a4:	0022      	movs	r2, r4
 80058a6:	2301      	movs	r3, #1
 80058a8:	9901      	ldr	r1, [sp, #4]
 80058aa:	9800      	ldr	r0, [sp, #0]
 80058ac:	9f08      	ldr	r7, [sp, #32]
 80058ae:	321a      	adds	r2, #26
 80058b0:	47b8      	blx	r7
 80058b2:	3001      	adds	r0, #1
 80058b4:	d0e6      	beq.n	8005884 <_printf_common+0xa8>
 80058b6:	3601      	adds	r6, #1
 80058b8:	e7d1      	b.n	800585e <_printf_common+0x82>
	...

080058bc <_printf_i>:
 80058bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058be:	b08b      	sub	sp, #44	; 0x2c
 80058c0:	9206      	str	r2, [sp, #24]
 80058c2:	000a      	movs	r2, r1
 80058c4:	3243      	adds	r2, #67	; 0x43
 80058c6:	9307      	str	r3, [sp, #28]
 80058c8:	9005      	str	r0, [sp, #20]
 80058ca:	9204      	str	r2, [sp, #16]
 80058cc:	7e0a      	ldrb	r2, [r1, #24]
 80058ce:	000c      	movs	r4, r1
 80058d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80058d2:	2a78      	cmp	r2, #120	; 0x78
 80058d4:	d809      	bhi.n	80058ea <_printf_i+0x2e>
 80058d6:	2a62      	cmp	r2, #98	; 0x62
 80058d8:	d80b      	bhi.n	80058f2 <_printf_i+0x36>
 80058da:	2a00      	cmp	r2, #0
 80058dc:	d100      	bne.n	80058e0 <_printf_i+0x24>
 80058de:	e0be      	b.n	8005a5e <_printf_i+0x1a2>
 80058e0:	497c      	ldr	r1, [pc, #496]	; (8005ad4 <_printf_i+0x218>)
 80058e2:	9103      	str	r1, [sp, #12]
 80058e4:	2a58      	cmp	r2, #88	; 0x58
 80058e6:	d100      	bne.n	80058ea <_printf_i+0x2e>
 80058e8:	e093      	b.n	8005a12 <_printf_i+0x156>
 80058ea:	0026      	movs	r6, r4
 80058ec:	3642      	adds	r6, #66	; 0x42
 80058ee:	7032      	strb	r2, [r6, #0]
 80058f0:	e022      	b.n	8005938 <_printf_i+0x7c>
 80058f2:	0010      	movs	r0, r2
 80058f4:	3863      	subs	r0, #99	; 0x63
 80058f6:	2815      	cmp	r0, #21
 80058f8:	d8f7      	bhi.n	80058ea <_printf_i+0x2e>
 80058fa:	f7fa fc0b 	bl	8000114 <__gnu_thumb1_case_shi>
 80058fe:	0016      	.short	0x0016
 8005900:	fff6001f 	.word	0xfff6001f
 8005904:	fff6fff6 	.word	0xfff6fff6
 8005908:	001ffff6 	.word	0x001ffff6
 800590c:	fff6fff6 	.word	0xfff6fff6
 8005910:	fff6fff6 	.word	0xfff6fff6
 8005914:	003600a3 	.word	0x003600a3
 8005918:	fff60083 	.word	0xfff60083
 800591c:	00b4fff6 	.word	0x00b4fff6
 8005920:	0036fff6 	.word	0x0036fff6
 8005924:	fff6fff6 	.word	0xfff6fff6
 8005928:	0087      	.short	0x0087
 800592a:	0026      	movs	r6, r4
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	3642      	adds	r6, #66	; 0x42
 8005930:	1d11      	adds	r1, r2, #4
 8005932:	6019      	str	r1, [r3, #0]
 8005934:	6813      	ldr	r3, [r2, #0]
 8005936:	7033      	strb	r3, [r6, #0]
 8005938:	2301      	movs	r3, #1
 800593a:	e0a2      	b.n	8005a82 <_printf_i+0x1c6>
 800593c:	6818      	ldr	r0, [r3, #0]
 800593e:	6809      	ldr	r1, [r1, #0]
 8005940:	1d02      	adds	r2, r0, #4
 8005942:	060d      	lsls	r5, r1, #24
 8005944:	d50b      	bpl.n	800595e <_printf_i+0xa2>
 8005946:	6805      	ldr	r5, [r0, #0]
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	2d00      	cmp	r5, #0
 800594c:	da03      	bge.n	8005956 <_printf_i+0x9a>
 800594e:	232d      	movs	r3, #45	; 0x2d
 8005950:	9a04      	ldr	r2, [sp, #16]
 8005952:	426d      	negs	r5, r5
 8005954:	7013      	strb	r3, [r2, #0]
 8005956:	4b5f      	ldr	r3, [pc, #380]	; (8005ad4 <_printf_i+0x218>)
 8005958:	270a      	movs	r7, #10
 800595a:	9303      	str	r3, [sp, #12]
 800595c:	e01b      	b.n	8005996 <_printf_i+0xda>
 800595e:	6805      	ldr	r5, [r0, #0]
 8005960:	601a      	str	r2, [r3, #0]
 8005962:	0649      	lsls	r1, r1, #25
 8005964:	d5f1      	bpl.n	800594a <_printf_i+0x8e>
 8005966:	b22d      	sxth	r5, r5
 8005968:	e7ef      	b.n	800594a <_printf_i+0x8e>
 800596a:	680d      	ldr	r5, [r1, #0]
 800596c:	6819      	ldr	r1, [r3, #0]
 800596e:	1d08      	adds	r0, r1, #4
 8005970:	6018      	str	r0, [r3, #0]
 8005972:	062e      	lsls	r6, r5, #24
 8005974:	d501      	bpl.n	800597a <_printf_i+0xbe>
 8005976:	680d      	ldr	r5, [r1, #0]
 8005978:	e003      	b.n	8005982 <_printf_i+0xc6>
 800597a:	066d      	lsls	r5, r5, #25
 800597c:	d5fb      	bpl.n	8005976 <_printf_i+0xba>
 800597e:	680d      	ldr	r5, [r1, #0]
 8005980:	b2ad      	uxth	r5, r5
 8005982:	4b54      	ldr	r3, [pc, #336]	; (8005ad4 <_printf_i+0x218>)
 8005984:	2708      	movs	r7, #8
 8005986:	9303      	str	r3, [sp, #12]
 8005988:	2a6f      	cmp	r2, #111	; 0x6f
 800598a:	d000      	beq.n	800598e <_printf_i+0xd2>
 800598c:	3702      	adds	r7, #2
 800598e:	0023      	movs	r3, r4
 8005990:	2200      	movs	r2, #0
 8005992:	3343      	adds	r3, #67	; 0x43
 8005994:	701a      	strb	r2, [r3, #0]
 8005996:	6863      	ldr	r3, [r4, #4]
 8005998:	60a3      	str	r3, [r4, #8]
 800599a:	2b00      	cmp	r3, #0
 800599c:	db03      	blt.n	80059a6 <_printf_i+0xea>
 800599e:	2104      	movs	r1, #4
 80059a0:	6822      	ldr	r2, [r4, #0]
 80059a2:	438a      	bics	r2, r1
 80059a4:	6022      	str	r2, [r4, #0]
 80059a6:	2d00      	cmp	r5, #0
 80059a8:	d102      	bne.n	80059b0 <_printf_i+0xf4>
 80059aa:	9e04      	ldr	r6, [sp, #16]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00c      	beq.n	80059ca <_printf_i+0x10e>
 80059b0:	9e04      	ldr	r6, [sp, #16]
 80059b2:	0028      	movs	r0, r5
 80059b4:	0039      	movs	r1, r7
 80059b6:	f7fa fc3d 	bl	8000234 <__aeabi_uidivmod>
 80059ba:	9b03      	ldr	r3, [sp, #12]
 80059bc:	3e01      	subs	r6, #1
 80059be:	5c5b      	ldrb	r3, [r3, r1]
 80059c0:	7033      	strb	r3, [r6, #0]
 80059c2:	002b      	movs	r3, r5
 80059c4:	0005      	movs	r5, r0
 80059c6:	429f      	cmp	r7, r3
 80059c8:	d9f3      	bls.n	80059b2 <_printf_i+0xf6>
 80059ca:	2f08      	cmp	r7, #8
 80059cc:	d109      	bne.n	80059e2 <_printf_i+0x126>
 80059ce:	6823      	ldr	r3, [r4, #0]
 80059d0:	07db      	lsls	r3, r3, #31
 80059d2:	d506      	bpl.n	80059e2 <_printf_i+0x126>
 80059d4:	6862      	ldr	r2, [r4, #4]
 80059d6:	6923      	ldr	r3, [r4, #16]
 80059d8:	429a      	cmp	r2, r3
 80059da:	dc02      	bgt.n	80059e2 <_printf_i+0x126>
 80059dc:	2330      	movs	r3, #48	; 0x30
 80059de:	3e01      	subs	r6, #1
 80059e0:	7033      	strb	r3, [r6, #0]
 80059e2:	9b04      	ldr	r3, [sp, #16]
 80059e4:	1b9b      	subs	r3, r3, r6
 80059e6:	6123      	str	r3, [r4, #16]
 80059e8:	9b07      	ldr	r3, [sp, #28]
 80059ea:	0021      	movs	r1, r4
 80059ec:	9300      	str	r3, [sp, #0]
 80059ee:	9805      	ldr	r0, [sp, #20]
 80059f0:	9b06      	ldr	r3, [sp, #24]
 80059f2:	aa09      	add	r2, sp, #36	; 0x24
 80059f4:	f7ff fef2 	bl	80057dc <_printf_common>
 80059f8:	3001      	adds	r0, #1
 80059fa:	d147      	bne.n	8005a8c <_printf_i+0x1d0>
 80059fc:	2001      	movs	r0, #1
 80059fe:	4240      	negs	r0, r0
 8005a00:	b00b      	add	sp, #44	; 0x2c
 8005a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a04:	2220      	movs	r2, #32
 8005a06:	6809      	ldr	r1, [r1, #0]
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	6022      	str	r2, [r4, #0]
 8005a0c:	2278      	movs	r2, #120	; 0x78
 8005a0e:	4932      	ldr	r1, [pc, #200]	; (8005ad8 <_printf_i+0x21c>)
 8005a10:	9103      	str	r1, [sp, #12]
 8005a12:	0021      	movs	r1, r4
 8005a14:	3145      	adds	r1, #69	; 0x45
 8005a16:	700a      	strb	r2, [r1, #0]
 8005a18:	6819      	ldr	r1, [r3, #0]
 8005a1a:	6822      	ldr	r2, [r4, #0]
 8005a1c:	c920      	ldmia	r1!, {r5}
 8005a1e:	0610      	lsls	r0, r2, #24
 8005a20:	d402      	bmi.n	8005a28 <_printf_i+0x16c>
 8005a22:	0650      	lsls	r0, r2, #25
 8005a24:	d500      	bpl.n	8005a28 <_printf_i+0x16c>
 8005a26:	b2ad      	uxth	r5, r5
 8005a28:	6019      	str	r1, [r3, #0]
 8005a2a:	07d3      	lsls	r3, r2, #31
 8005a2c:	d502      	bpl.n	8005a34 <_printf_i+0x178>
 8005a2e:	2320      	movs	r3, #32
 8005a30:	4313      	orrs	r3, r2
 8005a32:	6023      	str	r3, [r4, #0]
 8005a34:	2710      	movs	r7, #16
 8005a36:	2d00      	cmp	r5, #0
 8005a38:	d1a9      	bne.n	800598e <_printf_i+0xd2>
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	6823      	ldr	r3, [r4, #0]
 8005a3e:	4393      	bics	r3, r2
 8005a40:	6023      	str	r3, [r4, #0]
 8005a42:	e7a4      	b.n	800598e <_printf_i+0xd2>
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	680d      	ldr	r5, [r1, #0]
 8005a48:	1d10      	adds	r0, r2, #4
 8005a4a:	6949      	ldr	r1, [r1, #20]
 8005a4c:	6018      	str	r0, [r3, #0]
 8005a4e:	6813      	ldr	r3, [r2, #0]
 8005a50:	062e      	lsls	r6, r5, #24
 8005a52:	d501      	bpl.n	8005a58 <_printf_i+0x19c>
 8005a54:	6019      	str	r1, [r3, #0]
 8005a56:	e002      	b.n	8005a5e <_printf_i+0x1a2>
 8005a58:	066d      	lsls	r5, r5, #25
 8005a5a:	d5fb      	bpl.n	8005a54 <_printf_i+0x198>
 8005a5c:	8019      	strh	r1, [r3, #0]
 8005a5e:	2300      	movs	r3, #0
 8005a60:	9e04      	ldr	r6, [sp, #16]
 8005a62:	6123      	str	r3, [r4, #16]
 8005a64:	e7c0      	b.n	80059e8 <_printf_i+0x12c>
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	1d11      	adds	r1, r2, #4
 8005a6a:	6019      	str	r1, [r3, #0]
 8005a6c:	6816      	ldr	r6, [r2, #0]
 8005a6e:	2100      	movs	r1, #0
 8005a70:	0030      	movs	r0, r6
 8005a72:	6862      	ldr	r2, [r4, #4]
 8005a74:	f000 f9b4 	bl	8005de0 <memchr>
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	d001      	beq.n	8005a80 <_printf_i+0x1c4>
 8005a7c:	1b80      	subs	r0, r0, r6
 8005a7e:	6060      	str	r0, [r4, #4]
 8005a80:	6863      	ldr	r3, [r4, #4]
 8005a82:	6123      	str	r3, [r4, #16]
 8005a84:	2300      	movs	r3, #0
 8005a86:	9a04      	ldr	r2, [sp, #16]
 8005a88:	7013      	strb	r3, [r2, #0]
 8005a8a:	e7ad      	b.n	80059e8 <_printf_i+0x12c>
 8005a8c:	0032      	movs	r2, r6
 8005a8e:	6923      	ldr	r3, [r4, #16]
 8005a90:	9906      	ldr	r1, [sp, #24]
 8005a92:	9805      	ldr	r0, [sp, #20]
 8005a94:	9d07      	ldr	r5, [sp, #28]
 8005a96:	47a8      	blx	r5
 8005a98:	3001      	adds	r0, #1
 8005a9a:	d0af      	beq.n	80059fc <_printf_i+0x140>
 8005a9c:	6823      	ldr	r3, [r4, #0]
 8005a9e:	079b      	lsls	r3, r3, #30
 8005aa0:	d415      	bmi.n	8005ace <_printf_i+0x212>
 8005aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aa4:	68e0      	ldr	r0, [r4, #12]
 8005aa6:	4298      	cmp	r0, r3
 8005aa8:	daaa      	bge.n	8005a00 <_printf_i+0x144>
 8005aaa:	0018      	movs	r0, r3
 8005aac:	e7a8      	b.n	8005a00 <_printf_i+0x144>
 8005aae:	0022      	movs	r2, r4
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	9906      	ldr	r1, [sp, #24]
 8005ab4:	9805      	ldr	r0, [sp, #20]
 8005ab6:	9e07      	ldr	r6, [sp, #28]
 8005ab8:	3219      	adds	r2, #25
 8005aba:	47b0      	blx	r6
 8005abc:	3001      	adds	r0, #1
 8005abe:	d09d      	beq.n	80059fc <_printf_i+0x140>
 8005ac0:	3501      	adds	r5, #1
 8005ac2:	68e3      	ldr	r3, [r4, #12]
 8005ac4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ac6:	1a9b      	subs	r3, r3, r2
 8005ac8:	42ab      	cmp	r3, r5
 8005aca:	dcf0      	bgt.n	8005aae <_printf_i+0x1f2>
 8005acc:	e7e9      	b.n	8005aa2 <_printf_i+0x1e6>
 8005ace:	2500      	movs	r5, #0
 8005ad0:	e7f7      	b.n	8005ac2 <_printf_i+0x206>
 8005ad2:	46c0      	nop			; (mov r8, r8)
 8005ad4:	080060a5 	.word	0x080060a5
 8005ad8:	080060b6 	.word	0x080060b6

08005adc <__sflush_r>:
 8005adc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ade:	898b      	ldrh	r3, [r1, #12]
 8005ae0:	0005      	movs	r5, r0
 8005ae2:	000c      	movs	r4, r1
 8005ae4:	071a      	lsls	r2, r3, #28
 8005ae6:	d45c      	bmi.n	8005ba2 <__sflush_r+0xc6>
 8005ae8:	684a      	ldr	r2, [r1, #4]
 8005aea:	2a00      	cmp	r2, #0
 8005aec:	dc04      	bgt.n	8005af8 <__sflush_r+0x1c>
 8005aee:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8005af0:	2a00      	cmp	r2, #0
 8005af2:	dc01      	bgt.n	8005af8 <__sflush_r+0x1c>
 8005af4:	2000      	movs	r0, #0
 8005af6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005af8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005afa:	2f00      	cmp	r7, #0
 8005afc:	d0fa      	beq.n	8005af4 <__sflush_r+0x18>
 8005afe:	2200      	movs	r2, #0
 8005b00:	2080      	movs	r0, #128	; 0x80
 8005b02:	682e      	ldr	r6, [r5, #0]
 8005b04:	602a      	str	r2, [r5, #0]
 8005b06:	001a      	movs	r2, r3
 8005b08:	0140      	lsls	r0, r0, #5
 8005b0a:	6a21      	ldr	r1, [r4, #32]
 8005b0c:	4002      	ands	r2, r0
 8005b0e:	4203      	tst	r3, r0
 8005b10:	d034      	beq.n	8005b7c <__sflush_r+0xa0>
 8005b12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b14:	89a3      	ldrh	r3, [r4, #12]
 8005b16:	075b      	lsls	r3, r3, #29
 8005b18:	d506      	bpl.n	8005b28 <__sflush_r+0x4c>
 8005b1a:	6863      	ldr	r3, [r4, #4]
 8005b1c:	1ac0      	subs	r0, r0, r3
 8005b1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d001      	beq.n	8005b28 <__sflush_r+0x4c>
 8005b24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b26:	1ac0      	subs	r0, r0, r3
 8005b28:	0002      	movs	r2, r0
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	0028      	movs	r0, r5
 8005b2e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005b30:	6a21      	ldr	r1, [r4, #32]
 8005b32:	47b8      	blx	r7
 8005b34:	89a2      	ldrh	r2, [r4, #12]
 8005b36:	1c43      	adds	r3, r0, #1
 8005b38:	d106      	bne.n	8005b48 <__sflush_r+0x6c>
 8005b3a:	6829      	ldr	r1, [r5, #0]
 8005b3c:	291d      	cmp	r1, #29
 8005b3e:	d82c      	bhi.n	8005b9a <__sflush_r+0xbe>
 8005b40:	4b2a      	ldr	r3, [pc, #168]	; (8005bec <__sflush_r+0x110>)
 8005b42:	410b      	asrs	r3, r1
 8005b44:	07db      	lsls	r3, r3, #31
 8005b46:	d428      	bmi.n	8005b9a <__sflush_r+0xbe>
 8005b48:	2300      	movs	r3, #0
 8005b4a:	6063      	str	r3, [r4, #4]
 8005b4c:	6923      	ldr	r3, [r4, #16]
 8005b4e:	6023      	str	r3, [r4, #0]
 8005b50:	04d2      	lsls	r2, r2, #19
 8005b52:	d505      	bpl.n	8005b60 <__sflush_r+0x84>
 8005b54:	1c43      	adds	r3, r0, #1
 8005b56:	d102      	bne.n	8005b5e <__sflush_r+0x82>
 8005b58:	682b      	ldr	r3, [r5, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d100      	bne.n	8005b60 <__sflush_r+0x84>
 8005b5e:	6560      	str	r0, [r4, #84]	; 0x54
 8005b60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b62:	602e      	str	r6, [r5, #0]
 8005b64:	2900      	cmp	r1, #0
 8005b66:	d0c5      	beq.n	8005af4 <__sflush_r+0x18>
 8005b68:	0023      	movs	r3, r4
 8005b6a:	3344      	adds	r3, #68	; 0x44
 8005b6c:	4299      	cmp	r1, r3
 8005b6e:	d002      	beq.n	8005b76 <__sflush_r+0x9a>
 8005b70:	0028      	movs	r0, r5
 8005b72:	f7ff fa8f 	bl	8005094 <_free_r>
 8005b76:	2000      	movs	r0, #0
 8005b78:	6360      	str	r0, [r4, #52]	; 0x34
 8005b7a:	e7bc      	b.n	8005af6 <__sflush_r+0x1a>
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	0028      	movs	r0, r5
 8005b80:	47b8      	blx	r7
 8005b82:	1c43      	adds	r3, r0, #1
 8005b84:	d1c6      	bne.n	8005b14 <__sflush_r+0x38>
 8005b86:	682b      	ldr	r3, [r5, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d0c3      	beq.n	8005b14 <__sflush_r+0x38>
 8005b8c:	2b1d      	cmp	r3, #29
 8005b8e:	d001      	beq.n	8005b94 <__sflush_r+0xb8>
 8005b90:	2b16      	cmp	r3, #22
 8005b92:	d101      	bne.n	8005b98 <__sflush_r+0xbc>
 8005b94:	602e      	str	r6, [r5, #0]
 8005b96:	e7ad      	b.n	8005af4 <__sflush_r+0x18>
 8005b98:	89a2      	ldrh	r2, [r4, #12]
 8005b9a:	2340      	movs	r3, #64	; 0x40
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	81a3      	strh	r3, [r4, #12]
 8005ba0:	e7a9      	b.n	8005af6 <__sflush_r+0x1a>
 8005ba2:	690e      	ldr	r6, [r1, #16]
 8005ba4:	2e00      	cmp	r6, #0
 8005ba6:	d0a5      	beq.n	8005af4 <__sflush_r+0x18>
 8005ba8:	680f      	ldr	r7, [r1, #0]
 8005baa:	600e      	str	r6, [r1, #0]
 8005bac:	1bba      	subs	r2, r7, r6
 8005bae:	9201      	str	r2, [sp, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	079b      	lsls	r3, r3, #30
 8005bb4:	d100      	bne.n	8005bb8 <__sflush_r+0xdc>
 8005bb6:	694a      	ldr	r2, [r1, #20]
 8005bb8:	60a2      	str	r2, [r4, #8]
 8005bba:	9b01      	ldr	r3, [sp, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	dd99      	ble.n	8005af4 <__sflush_r+0x18>
 8005bc0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005bc2:	0032      	movs	r2, r6
 8005bc4:	001f      	movs	r7, r3
 8005bc6:	0028      	movs	r0, r5
 8005bc8:	9b01      	ldr	r3, [sp, #4]
 8005bca:	6a21      	ldr	r1, [r4, #32]
 8005bcc:	47b8      	blx	r7
 8005bce:	2800      	cmp	r0, #0
 8005bd0:	dc06      	bgt.n	8005be0 <__sflush_r+0x104>
 8005bd2:	2340      	movs	r3, #64	; 0x40
 8005bd4:	2001      	movs	r0, #1
 8005bd6:	89a2      	ldrh	r2, [r4, #12]
 8005bd8:	4240      	negs	r0, r0
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	81a3      	strh	r3, [r4, #12]
 8005bde:	e78a      	b.n	8005af6 <__sflush_r+0x1a>
 8005be0:	9b01      	ldr	r3, [sp, #4]
 8005be2:	1836      	adds	r6, r6, r0
 8005be4:	1a1b      	subs	r3, r3, r0
 8005be6:	9301      	str	r3, [sp, #4]
 8005be8:	e7e7      	b.n	8005bba <__sflush_r+0xde>
 8005bea:	46c0      	nop			; (mov r8, r8)
 8005bec:	dfbffffe 	.word	0xdfbffffe

08005bf0 <_fflush_r>:
 8005bf0:	690b      	ldr	r3, [r1, #16]
 8005bf2:	b570      	push	{r4, r5, r6, lr}
 8005bf4:	0005      	movs	r5, r0
 8005bf6:	000c      	movs	r4, r1
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d102      	bne.n	8005c02 <_fflush_r+0x12>
 8005bfc:	2500      	movs	r5, #0
 8005bfe:	0028      	movs	r0, r5
 8005c00:	bd70      	pop	{r4, r5, r6, pc}
 8005c02:	2800      	cmp	r0, #0
 8005c04:	d004      	beq.n	8005c10 <_fflush_r+0x20>
 8005c06:	6a03      	ldr	r3, [r0, #32]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d101      	bne.n	8005c10 <_fflush_r+0x20>
 8005c0c:	f7ff f90e 	bl	8004e2c <__sinit>
 8005c10:	220c      	movs	r2, #12
 8005c12:	5ea3      	ldrsh	r3, [r4, r2]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d0f1      	beq.n	8005bfc <_fflush_r+0xc>
 8005c18:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c1a:	07d2      	lsls	r2, r2, #31
 8005c1c:	d404      	bmi.n	8005c28 <_fflush_r+0x38>
 8005c1e:	059b      	lsls	r3, r3, #22
 8005c20:	d402      	bmi.n	8005c28 <_fflush_r+0x38>
 8005c22:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c24:	f7ff fa33 	bl	800508e <__retarget_lock_acquire_recursive>
 8005c28:	0028      	movs	r0, r5
 8005c2a:	0021      	movs	r1, r4
 8005c2c:	f7ff ff56 	bl	8005adc <__sflush_r>
 8005c30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c32:	0005      	movs	r5, r0
 8005c34:	07db      	lsls	r3, r3, #31
 8005c36:	d4e2      	bmi.n	8005bfe <_fflush_r+0xe>
 8005c38:	89a3      	ldrh	r3, [r4, #12]
 8005c3a:	059b      	lsls	r3, r3, #22
 8005c3c:	d4df      	bmi.n	8005bfe <_fflush_r+0xe>
 8005c3e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c40:	f7ff fa26 	bl	8005090 <__retarget_lock_release_recursive>
 8005c44:	e7db      	b.n	8005bfe <_fflush_r+0xe>

08005c46 <__swbuf_r>:
 8005c46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c48:	0006      	movs	r6, r0
 8005c4a:	000d      	movs	r5, r1
 8005c4c:	0014      	movs	r4, r2
 8005c4e:	2800      	cmp	r0, #0
 8005c50:	d004      	beq.n	8005c5c <__swbuf_r+0x16>
 8005c52:	6a03      	ldr	r3, [r0, #32]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d101      	bne.n	8005c5c <__swbuf_r+0x16>
 8005c58:	f7ff f8e8 	bl	8004e2c <__sinit>
 8005c5c:	69a3      	ldr	r3, [r4, #24]
 8005c5e:	60a3      	str	r3, [r4, #8]
 8005c60:	89a3      	ldrh	r3, [r4, #12]
 8005c62:	071b      	lsls	r3, r3, #28
 8005c64:	d528      	bpl.n	8005cb8 <__swbuf_r+0x72>
 8005c66:	6923      	ldr	r3, [r4, #16]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d025      	beq.n	8005cb8 <__swbuf_r+0x72>
 8005c6c:	6923      	ldr	r3, [r4, #16]
 8005c6e:	6820      	ldr	r0, [r4, #0]
 8005c70:	b2ef      	uxtb	r7, r5
 8005c72:	1ac0      	subs	r0, r0, r3
 8005c74:	6963      	ldr	r3, [r4, #20]
 8005c76:	b2ed      	uxtb	r5, r5
 8005c78:	4283      	cmp	r3, r0
 8005c7a:	dc05      	bgt.n	8005c88 <__swbuf_r+0x42>
 8005c7c:	0021      	movs	r1, r4
 8005c7e:	0030      	movs	r0, r6
 8005c80:	f7ff ffb6 	bl	8005bf0 <_fflush_r>
 8005c84:	2800      	cmp	r0, #0
 8005c86:	d11d      	bne.n	8005cc4 <__swbuf_r+0x7e>
 8005c88:	68a3      	ldr	r3, [r4, #8]
 8005c8a:	3001      	adds	r0, #1
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	60a3      	str	r3, [r4, #8]
 8005c90:	6823      	ldr	r3, [r4, #0]
 8005c92:	1c5a      	adds	r2, r3, #1
 8005c94:	6022      	str	r2, [r4, #0]
 8005c96:	701f      	strb	r7, [r3, #0]
 8005c98:	6963      	ldr	r3, [r4, #20]
 8005c9a:	4283      	cmp	r3, r0
 8005c9c:	d004      	beq.n	8005ca8 <__swbuf_r+0x62>
 8005c9e:	89a3      	ldrh	r3, [r4, #12]
 8005ca0:	07db      	lsls	r3, r3, #31
 8005ca2:	d507      	bpl.n	8005cb4 <__swbuf_r+0x6e>
 8005ca4:	2d0a      	cmp	r5, #10
 8005ca6:	d105      	bne.n	8005cb4 <__swbuf_r+0x6e>
 8005ca8:	0021      	movs	r1, r4
 8005caa:	0030      	movs	r0, r6
 8005cac:	f7ff ffa0 	bl	8005bf0 <_fflush_r>
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	d107      	bne.n	8005cc4 <__swbuf_r+0x7e>
 8005cb4:	0028      	movs	r0, r5
 8005cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cb8:	0021      	movs	r1, r4
 8005cba:	0030      	movs	r0, r6
 8005cbc:	f000 f806 	bl	8005ccc <__swsetup_r>
 8005cc0:	2800      	cmp	r0, #0
 8005cc2:	d0d3      	beq.n	8005c6c <__swbuf_r+0x26>
 8005cc4:	2501      	movs	r5, #1
 8005cc6:	426d      	negs	r5, r5
 8005cc8:	e7f4      	b.n	8005cb4 <__swbuf_r+0x6e>
	...

08005ccc <__swsetup_r>:
 8005ccc:	4b30      	ldr	r3, [pc, #192]	; (8005d90 <__swsetup_r+0xc4>)
 8005cce:	b570      	push	{r4, r5, r6, lr}
 8005cd0:	0005      	movs	r5, r0
 8005cd2:	6818      	ldr	r0, [r3, #0]
 8005cd4:	000c      	movs	r4, r1
 8005cd6:	2800      	cmp	r0, #0
 8005cd8:	d004      	beq.n	8005ce4 <__swsetup_r+0x18>
 8005cda:	6a03      	ldr	r3, [r0, #32]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d101      	bne.n	8005ce4 <__swsetup_r+0x18>
 8005ce0:	f7ff f8a4 	bl	8004e2c <__sinit>
 8005ce4:	230c      	movs	r3, #12
 8005ce6:	5ee2      	ldrsh	r2, [r4, r3]
 8005ce8:	b293      	uxth	r3, r2
 8005cea:	0711      	lsls	r1, r2, #28
 8005cec:	d423      	bmi.n	8005d36 <__swsetup_r+0x6a>
 8005cee:	06d9      	lsls	r1, r3, #27
 8005cf0:	d407      	bmi.n	8005d02 <__swsetup_r+0x36>
 8005cf2:	2309      	movs	r3, #9
 8005cf4:	2001      	movs	r0, #1
 8005cf6:	602b      	str	r3, [r5, #0]
 8005cf8:	3337      	adds	r3, #55	; 0x37
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	81a3      	strh	r3, [r4, #12]
 8005cfe:	4240      	negs	r0, r0
 8005d00:	bd70      	pop	{r4, r5, r6, pc}
 8005d02:	075b      	lsls	r3, r3, #29
 8005d04:	d513      	bpl.n	8005d2e <__swsetup_r+0x62>
 8005d06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d08:	2900      	cmp	r1, #0
 8005d0a:	d008      	beq.n	8005d1e <__swsetup_r+0x52>
 8005d0c:	0023      	movs	r3, r4
 8005d0e:	3344      	adds	r3, #68	; 0x44
 8005d10:	4299      	cmp	r1, r3
 8005d12:	d002      	beq.n	8005d1a <__swsetup_r+0x4e>
 8005d14:	0028      	movs	r0, r5
 8005d16:	f7ff f9bd 	bl	8005094 <_free_r>
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	6363      	str	r3, [r4, #52]	; 0x34
 8005d1e:	2224      	movs	r2, #36	; 0x24
 8005d20:	89a3      	ldrh	r3, [r4, #12]
 8005d22:	4393      	bics	r3, r2
 8005d24:	81a3      	strh	r3, [r4, #12]
 8005d26:	2300      	movs	r3, #0
 8005d28:	6063      	str	r3, [r4, #4]
 8005d2a:	6923      	ldr	r3, [r4, #16]
 8005d2c:	6023      	str	r3, [r4, #0]
 8005d2e:	2308      	movs	r3, #8
 8005d30:	89a2      	ldrh	r2, [r4, #12]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	81a3      	strh	r3, [r4, #12]
 8005d36:	6923      	ldr	r3, [r4, #16]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d10b      	bne.n	8005d54 <__swsetup_r+0x88>
 8005d3c:	21a0      	movs	r1, #160	; 0xa0
 8005d3e:	2280      	movs	r2, #128	; 0x80
 8005d40:	89a3      	ldrh	r3, [r4, #12]
 8005d42:	0089      	lsls	r1, r1, #2
 8005d44:	0092      	lsls	r2, r2, #2
 8005d46:	400b      	ands	r3, r1
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d003      	beq.n	8005d54 <__swsetup_r+0x88>
 8005d4c:	0021      	movs	r1, r4
 8005d4e:	0028      	movs	r0, r5
 8005d50:	f000 f8b2 	bl	8005eb8 <__smakebuf_r>
 8005d54:	220c      	movs	r2, #12
 8005d56:	5ea3      	ldrsh	r3, [r4, r2]
 8005d58:	2001      	movs	r0, #1
 8005d5a:	001a      	movs	r2, r3
 8005d5c:	b299      	uxth	r1, r3
 8005d5e:	4002      	ands	r2, r0
 8005d60:	4203      	tst	r3, r0
 8005d62:	d00f      	beq.n	8005d84 <__swsetup_r+0xb8>
 8005d64:	2200      	movs	r2, #0
 8005d66:	60a2      	str	r2, [r4, #8]
 8005d68:	6962      	ldr	r2, [r4, #20]
 8005d6a:	4252      	negs	r2, r2
 8005d6c:	61a2      	str	r2, [r4, #24]
 8005d6e:	2000      	movs	r0, #0
 8005d70:	6922      	ldr	r2, [r4, #16]
 8005d72:	4282      	cmp	r2, r0
 8005d74:	d1c4      	bne.n	8005d00 <__swsetup_r+0x34>
 8005d76:	0609      	lsls	r1, r1, #24
 8005d78:	d5c2      	bpl.n	8005d00 <__swsetup_r+0x34>
 8005d7a:	2240      	movs	r2, #64	; 0x40
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	81a3      	strh	r3, [r4, #12]
 8005d80:	3801      	subs	r0, #1
 8005d82:	e7bd      	b.n	8005d00 <__swsetup_r+0x34>
 8005d84:	0788      	lsls	r0, r1, #30
 8005d86:	d400      	bmi.n	8005d8a <__swsetup_r+0xbe>
 8005d88:	6962      	ldr	r2, [r4, #20]
 8005d8a:	60a2      	str	r2, [r4, #8]
 8005d8c:	e7ef      	b.n	8005d6e <__swsetup_r+0xa2>
 8005d8e:	46c0      	nop			; (mov r8, r8)
 8005d90:	20000064 	.word	0x20000064

08005d94 <memmove>:
 8005d94:	b510      	push	{r4, lr}
 8005d96:	4288      	cmp	r0, r1
 8005d98:	d902      	bls.n	8005da0 <memmove+0xc>
 8005d9a:	188b      	adds	r3, r1, r2
 8005d9c:	4298      	cmp	r0, r3
 8005d9e:	d303      	bcc.n	8005da8 <memmove+0x14>
 8005da0:	2300      	movs	r3, #0
 8005da2:	e007      	b.n	8005db4 <memmove+0x20>
 8005da4:	5c8b      	ldrb	r3, [r1, r2]
 8005da6:	5483      	strb	r3, [r0, r2]
 8005da8:	3a01      	subs	r2, #1
 8005daa:	d2fb      	bcs.n	8005da4 <memmove+0x10>
 8005dac:	bd10      	pop	{r4, pc}
 8005dae:	5ccc      	ldrb	r4, [r1, r3]
 8005db0:	54c4      	strb	r4, [r0, r3]
 8005db2:	3301      	adds	r3, #1
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d1fa      	bne.n	8005dae <memmove+0x1a>
 8005db8:	e7f8      	b.n	8005dac <memmove+0x18>
	...

08005dbc <_sbrk_r>:
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	b570      	push	{r4, r5, r6, lr}
 8005dc0:	4d06      	ldr	r5, [pc, #24]	; (8005ddc <_sbrk_r+0x20>)
 8005dc2:	0004      	movs	r4, r0
 8005dc4:	0008      	movs	r0, r1
 8005dc6:	602b      	str	r3, [r5, #0]
 8005dc8:	f7fb f98c 	bl	80010e4 <_sbrk>
 8005dcc:	1c43      	adds	r3, r0, #1
 8005dce:	d103      	bne.n	8005dd8 <_sbrk_r+0x1c>
 8005dd0:	682b      	ldr	r3, [r5, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d000      	beq.n	8005dd8 <_sbrk_r+0x1c>
 8005dd6:	6023      	str	r3, [r4, #0]
 8005dd8:	bd70      	pop	{r4, r5, r6, pc}
 8005dda:	46c0      	nop			; (mov r8, r8)
 8005ddc:	20000360 	.word	0x20000360

08005de0 <memchr>:
 8005de0:	b2c9      	uxtb	r1, r1
 8005de2:	1882      	adds	r2, r0, r2
 8005de4:	4290      	cmp	r0, r2
 8005de6:	d101      	bne.n	8005dec <memchr+0xc>
 8005de8:	2000      	movs	r0, #0
 8005dea:	4770      	bx	lr
 8005dec:	7803      	ldrb	r3, [r0, #0]
 8005dee:	428b      	cmp	r3, r1
 8005df0:	d0fb      	beq.n	8005dea <memchr+0xa>
 8005df2:	3001      	adds	r0, #1
 8005df4:	e7f6      	b.n	8005de4 <memchr+0x4>

08005df6 <memcpy>:
 8005df6:	2300      	movs	r3, #0
 8005df8:	b510      	push	{r4, lr}
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d100      	bne.n	8005e00 <memcpy+0xa>
 8005dfe:	bd10      	pop	{r4, pc}
 8005e00:	5ccc      	ldrb	r4, [r1, r3]
 8005e02:	54c4      	strb	r4, [r0, r3]
 8005e04:	3301      	adds	r3, #1
 8005e06:	e7f8      	b.n	8005dfa <memcpy+0x4>

08005e08 <_realloc_r>:
 8005e08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e0a:	0007      	movs	r7, r0
 8005e0c:	000e      	movs	r6, r1
 8005e0e:	0014      	movs	r4, r2
 8005e10:	2900      	cmp	r1, #0
 8005e12:	d105      	bne.n	8005e20 <_realloc_r+0x18>
 8005e14:	0011      	movs	r1, r2
 8005e16:	f7ff f9a9 	bl	800516c <_malloc_r>
 8005e1a:	0005      	movs	r5, r0
 8005e1c:	0028      	movs	r0, r5
 8005e1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005e20:	2a00      	cmp	r2, #0
 8005e22:	d103      	bne.n	8005e2c <_realloc_r+0x24>
 8005e24:	f7ff f936 	bl	8005094 <_free_r>
 8005e28:	0025      	movs	r5, r4
 8005e2a:	e7f7      	b.n	8005e1c <_realloc_r+0x14>
 8005e2c:	f000 f8a6 	bl	8005f7c <_malloc_usable_size_r>
 8005e30:	9001      	str	r0, [sp, #4]
 8005e32:	4284      	cmp	r4, r0
 8005e34:	d803      	bhi.n	8005e3e <_realloc_r+0x36>
 8005e36:	0035      	movs	r5, r6
 8005e38:	0843      	lsrs	r3, r0, #1
 8005e3a:	42a3      	cmp	r3, r4
 8005e3c:	d3ee      	bcc.n	8005e1c <_realloc_r+0x14>
 8005e3e:	0021      	movs	r1, r4
 8005e40:	0038      	movs	r0, r7
 8005e42:	f7ff f993 	bl	800516c <_malloc_r>
 8005e46:	1e05      	subs	r5, r0, #0
 8005e48:	d0e8      	beq.n	8005e1c <_realloc_r+0x14>
 8005e4a:	9b01      	ldr	r3, [sp, #4]
 8005e4c:	0022      	movs	r2, r4
 8005e4e:	429c      	cmp	r4, r3
 8005e50:	d900      	bls.n	8005e54 <_realloc_r+0x4c>
 8005e52:	001a      	movs	r2, r3
 8005e54:	0031      	movs	r1, r6
 8005e56:	0028      	movs	r0, r5
 8005e58:	f7ff ffcd 	bl	8005df6 <memcpy>
 8005e5c:	0031      	movs	r1, r6
 8005e5e:	0038      	movs	r0, r7
 8005e60:	f7ff f918 	bl	8005094 <_free_r>
 8005e64:	e7da      	b.n	8005e1c <_realloc_r+0x14>
	...

08005e68 <__swhatbuf_r>:
 8005e68:	b570      	push	{r4, r5, r6, lr}
 8005e6a:	000e      	movs	r6, r1
 8005e6c:	001d      	movs	r5, r3
 8005e6e:	230e      	movs	r3, #14
 8005e70:	5ec9      	ldrsh	r1, [r1, r3]
 8005e72:	0014      	movs	r4, r2
 8005e74:	b096      	sub	sp, #88	; 0x58
 8005e76:	2900      	cmp	r1, #0
 8005e78:	da0c      	bge.n	8005e94 <__swhatbuf_r+0x2c>
 8005e7a:	89b2      	ldrh	r2, [r6, #12]
 8005e7c:	2380      	movs	r3, #128	; 0x80
 8005e7e:	0011      	movs	r1, r2
 8005e80:	4019      	ands	r1, r3
 8005e82:	421a      	tst	r2, r3
 8005e84:	d013      	beq.n	8005eae <__swhatbuf_r+0x46>
 8005e86:	2100      	movs	r1, #0
 8005e88:	3b40      	subs	r3, #64	; 0x40
 8005e8a:	2000      	movs	r0, #0
 8005e8c:	6029      	str	r1, [r5, #0]
 8005e8e:	6023      	str	r3, [r4, #0]
 8005e90:	b016      	add	sp, #88	; 0x58
 8005e92:	bd70      	pop	{r4, r5, r6, pc}
 8005e94:	466a      	mov	r2, sp
 8005e96:	f000 f84d 	bl	8005f34 <_fstat_r>
 8005e9a:	2800      	cmp	r0, #0
 8005e9c:	dbed      	blt.n	8005e7a <__swhatbuf_r+0x12>
 8005e9e:	23f0      	movs	r3, #240	; 0xf0
 8005ea0:	9901      	ldr	r1, [sp, #4]
 8005ea2:	021b      	lsls	r3, r3, #8
 8005ea4:	4019      	ands	r1, r3
 8005ea6:	4b03      	ldr	r3, [pc, #12]	; (8005eb4 <__swhatbuf_r+0x4c>)
 8005ea8:	18c9      	adds	r1, r1, r3
 8005eaa:	424b      	negs	r3, r1
 8005eac:	4159      	adcs	r1, r3
 8005eae:	2380      	movs	r3, #128	; 0x80
 8005eb0:	00db      	lsls	r3, r3, #3
 8005eb2:	e7ea      	b.n	8005e8a <__swhatbuf_r+0x22>
 8005eb4:	ffffe000 	.word	0xffffe000

08005eb8 <__smakebuf_r>:
 8005eb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005eba:	2602      	movs	r6, #2
 8005ebc:	898b      	ldrh	r3, [r1, #12]
 8005ebe:	0005      	movs	r5, r0
 8005ec0:	000c      	movs	r4, r1
 8005ec2:	4233      	tst	r3, r6
 8005ec4:	d006      	beq.n	8005ed4 <__smakebuf_r+0x1c>
 8005ec6:	0023      	movs	r3, r4
 8005ec8:	3347      	adds	r3, #71	; 0x47
 8005eca:	6023      	str	r3, [r4, #0]
 8005ecc:	6123      	str	r3, [r4, #16]
 8005ece:	2301      	movs	r3, #1
 8005ed0:	6163      	str	r3, [r4, #20]
 8005ed2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005ed4:	466a      	mov	r2, sp
 8005ed6:	ab01      	add	r3, sp, #4
 8005ed8:	f7ff ffc6 	bl	8005e68 <__swhatbuf_r>
 8005edc:	9900      	ldr	r1, [sp, #0]
 8005ede:	0007      	movs	r7, r0
 8005ee0:	0028      	movs	r0, r5
 8005ee2:	f7ff f943 	bl	800516c <_malloc_r>
 8005ee6:	2800      	cmp	r0, #0
 8005ee8:	d108      	bne.n	8005efc <__smakebuf_r+0x44>
 8005eea:	220c      	movs	r2, #12
 8005eec:	5ea3      	ldrsh	r3, [r4, r2]
 8005eee:	059a      	lsls	r2, r3, #22
 8005ef0:	d4ef      	bmi.n	8005ed2 <__smakebuf_r+0x1a>
 8005ef2:	2203      	movs	r2, #3
 8005ef4:	4393      	bics	r3, r2
 8005ef6:	431e      	orrs	r6, r3
 8005ef8:	81a6      	strh	r6, [r4, #12]
 8005efa:	e7e4      	b.n	8005ec6 <__smakebuf_r+0xe>
 8005efc:	2380      	movs	r3, #128	; 0x80
 8005efe:	89a2      	ldrh	r2, [r4, #12]
 8005f00:	6020      	str	r0, [r4, #0]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	81a3      	strh	r3, [r4, #12]
 8005f06:	9b00      	ldr	r3, [sp, #0]
 8005f08:	6120      	str	r0, [r4, #16]
 8005f0a:	6163      	str	r3, [r4, #20]
 8005f0c:	9b01      	ldr	r3, [sp, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00c      	beq.n	8005f2c <__smakebuf_r+0x74>
 8005f12:	0028      	movs	r0, r5
 8005f14:	230e      	movs	r3, #14
 8005f16:	5ee1      	ldrsh	r1, [r4, r3]
 8005f18:	f000 f81e 	bl	8005f58 <_isatty_r>
 8005f1c:	2800      	cmp	r0, #0
 8005f1e:	d005      	beq.n	8005f2c <__smakebuf_r+0x74>
 8005f20:	2303      	movs	r3, #3
 8005f22:	89a2      	ldrh	r2, [r4, #12]
 8005f24:	439a      	bics	r2, r3
 8005f26:	3b02      	subs	r3, #2
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	81a3      	strh	r3, [r4, #12]
 8005f2c:	89a3      	ldrh	r3, [r4, #12]
 8005f2e:	433b      	orrs	r3, r7
 8005f30:	81a3      	strh	r3, [r4, #12]
 8005f32:	e7ce      	b.n	8005ed2 <__smakebuf_r+0x1a>

08005f34 <_fstat_r>:
 8005f34:	2300      	movs	r3, #0
 8005f36:	b570      	push	{r4, r5, r6, lr}
 8005f38:	4d06      	ldr	r5, [pc, #24]	; (8005f54 <_fstat_r+0x20>)
 8005f3a:	0004      	movs	r4, r0
 8005f3c:	0008      	movs	r0, r1
 8005f3e:	0011      	movs	r1, r2
 8005f40:	602b      	str	r3, [r5, #0]
 8005f42:	f7fb f8ad 	bl	80010a0 <_fstat>
 8005f46:	1c43      	adds	r3, r0, #1
 8005f48:	d103      	bne.n	8005f52 <_fstat_r+0x1e>
 8005f4a:	682b      	ldr	r3, [r5, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d000      	beq.n	8005f52 <_fstat_r+0x1e>
 8005f50:	6023      	str	r3, [r4, #0]
 8005f52:	bd70      	pop	{r4, r5, r6, pc}
 8005f54:	20000360 	.word	0x20000360

08005f58 <_isatty_r>:
 8005f58:	2300      	movs	r3, #0
 8005f5a:	b570      	push	{r4, r5, r6, lr}
 8005f5c:	4d06      	ldr	r5, [pc, #24]	; (8005f78 <_isatty_r+0x20>)
 8005f5e:	0004      	movs	r4, r0
 8005f60:	0008      	movs	r0, r1
 8005f62:	602b      	str	r3, [r5, #0]
 8005f64:	f7fb f8aa 	bl	80010bc <_isatty>
 8005f68:	1c43      	adds	r3, r0, #1
 8005f6a:	d103      	bne.n	8005f74 <_isatty_r+0x1c>
 8005f6c:	682b      	ldr	r3, [r5, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d000      	beq.n	8005f74 <_isatty_r+0x1c>
 8005f72:	6023      	str	r3, [r4, #0]
 8005f74:	bd70      	pop	{r4, r5, r6, pc}
 8005f76:	46c0      	nop			; (mov r8, r8)
 8005f78:	20000360 	.word	0x20000360

08005f7c <_malloc_usable_size_r>:
 8005f7c:	1f0b      	subs	r3, r1, #4
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	1f18      	subs	r0, r3, #4
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	da01      	bge.n	8005f8a <_malloc_usable_size_r+0xe>
 8005f86:	580b      	ldr	r3, [r1, r0]
 8005f88:	18c0      	adds	r0, r0, r3
 8005f8a:	4770      	bx	lr

08005f8c <_init>:
 8005f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f8e:	46c0      	nop			; (mov r8, r8)
 8005f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f92:	bc08      	pop	{r3}
 8005f94:	469e      	mov	lr, r3
 8005f96:	4770      	bx	lr

08005f98 <_fini>:
 8005f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f9a:	46c0      	nop			; (mov r8, r8)
 8005f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f9e:	bc08      	pop	{r3}
 8005fa0:	469e      	mov	lr, r3
 8005fa2:	4770      	bx	lr
